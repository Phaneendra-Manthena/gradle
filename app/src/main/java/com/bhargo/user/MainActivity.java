package com.bhargo.user;

import static android.content.Intent.ACTION_PICK;
import static android.provider.MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
import static android.provider.MediaStore.Video.Media.INTERNAL_CONTENT_URI;
import static com.bhargo.user.controls.standard.Camera.REQUEST_GALLERY_CONTROL_CODE;
import static com.bhargo.user.controls.standard.Camera.SF_REQUEST_GALLERY_CONTROL_CODE;
import static com.bhargo.user.controls.standard.Camera.saveLocation;
import static com.bhargo.user.utils.AppConstants.*;
import static com.bhargo.user.utils.ImageCaptureActivity.IMAGE_RESULT_CODE;
import static com.bhargo.user.utils.ImageCaptureActivity.SF_IMAGE_RESULT_CODE;
import static com.bhargo.user.utils.ImproveHelper.isFileExistsInExternalPackage;
import static com.bhargo.user.utils.ImproveHelper.isNetworkStatusAvialable;
import static com.bhargo.user.utils.ImproveHelper.my_showAlert;
import static com.bhargo.user.utils.ImproveHelper.setBhargoTheme;
import static com.bhargo.user.utils.ImproveHelper.setEnable;
import static com.bhargo.user.utils.ImproveHelper.setViewDisable;
import static com.bhargo.user.utils.ImproveHelper.setViewDisableOrEnableDefault;
import static com.bhargo.user.utils.ImproveHelper.showToast;
import static com.bhargo.user.utils.ImproveHelper.showToastRunOnUI;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.DownloadManager;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.provider.MediaStore;
import android.speech.RecognizerIntent;
import android.speech.tts.TextToSpeech;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.Display;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.CheckBox;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RatingBar;
import android.widget.ScrollView;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.widget.Toolbar;
import androidx.collection.LongSparseArray;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.core.view.GravityCompat;
import androidx.core.widget.ImageViewCompat;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bhargo.user.Expression.ExpressionMainHelper;
import com.bhargo.user.Java_Beans.API_InputParam_Bean;
import com.bhargo.user.Java_Beans.API_OutputParam_Bean;
import com.bhargo.user.Java_Beans.ActionWithCondition_Bean;
import com.bhargo.user.Java_Beans.ActionWithoutCondition_Bean;
import com.bhargo.user.Java_Beans.AssignControl_Bean;
import com.bhargo.user.Java_Beans.CallForm_ParamMapping_Bean;
import com.bhargo.user.Java_Beans.Condition_Bean;
import com.bhargo.user.Java_Beans.ControlObject;
import com.bhargo.user.Java_Beans.Control_EventObject;
import com.bhargo.user.Java_Beans.Create_Query_Object;
import com.bhargo.user.Java_Beans.DataCollectionObject;
import com.bhargo.user.Java_Beans.DataControl_Bean;
import com.bhargo.user.Java_Beans.DataManagementOptions;
import com.bhargo.user.Java_Beans.DataTableColumn_Bean;
import com.bhargo.user.Java_Beans.EnabledControl_Bean;
import com.bhargo.user.Java_Beans.GetAPIDetails_Bean;
import com.bhargo.user.Java_Beans.GlobalObjects;
import com.bhargo.user.Java_Beans.IfElseBlock_Bean;
import com.bhargo.user.Java_Beans.ImageAdvanced_Mapped_Item;
import com.bhargo.user.Java_Beans.Item;
import com.bhargo.user.Java_Beans.New_DataControl_Bean;
import com.bhargo.user.Java_Beans.OrderByEvents_Object;
import com.bhargo.user.Java_Beans.Param;
import com.bhargo.user.Java_Beans.PopUpManagementAction;
import com.bhargo.user.Java_Beans.QueryFilterField_Bean;
import com.bhargo.user.Java_Beans.RemoveControlItem;
import com.bhargo.user.Java_Beans.RemoveRowAction;
import com.bhargo.user.Java_Beans.RenderingType;
import com.bhargo.user.Java_Beans.SMSGateways_InputDetails_Bean;
import com.bhargo.user.Java_Beans.SMS_InputParam_Bean;
import com.bhargo.user.Java_Beans.SetProperty;
import com.bhargo.user.Java_Beans.SetSelectionControl_Bean;
import com.bhargo.user.Java_Beans.SubControls_Advance_Bean;
import com.bhargo.user.Java_Beans.UserGroup;
import com.bhargo.user.Java_Beans.Variable_Bean;
import com.bhargo.user.Java_Beans.VisibilityManagementOptions;
import com.bhargo.user.Query.QueryGetDataActivity;
import com.bhargo.user.actions.ActionUitls;
import com.bhargo.user.actions.CallAPIInput;
import com.bhargo.user.actions.CallApiData;
import com.bhargo.user.actions.GetData;
import com.bhargo.user.actions.JsonBuilder;
import com.bhargo.user.actions.ManageData;
import com.bhargo.user.actions.SyncData;
import com.bhargo.user.actions.SyncSaveRequest;
import com.bhargo.user.controls.WizardControl;
import com.bhargo.user.controls.advanced.AutoCompletionControl;
import com.bhargo.user.controls.advanced.BarCode;
import com.bhargo.user.controls.advanced.ChartControl;
import com.bhargo.user.controls.advanced.DataTableControl;
import com.bhargo.user.controls.advanced.DataViewer;
import com.bhargo.user.controls.advanced.Gps_Control;
import com.bhargo.user.controls.advanced.GridControl;
import com.bhargo.user.controls.advanced.LiveTracking;
import com.bhargo.user.controls.advanced.PostControl;
import com.bhargo.user.controls.advanced.ProgressControl;
import com.bhargo.user.controls.advanced.QRCode;
import com.bhargo.user.controls.advanced.SectionControl;
import com.bhargo.user.controls.advanced.SubformView;
import com.bhargo.user.controls.advanced.UserControl;
import com.bhargo.user.controls.data_controls.DataControl;
import com.bhargo.user.controls.standard.AudioPlayer;
import com.bhargo.user.controls.standard.AutoNumber;
import com.bhargo.user.controls.standard.Button;
import com.bhargo.user.controls.standard.Calendar;
import com.bhargo.user.controls.standard.CalendarEventControl;
import com.bhargo.user.controls.standard.Camera;
import com.bhargo.user.controls.standard.CheckList;
import com.bhargo.user.controls.standard.Checkbox;
import com.bhargo.user.controls.standard.CountDownTimerControl;
import com.bhargo.user.controls.standard.CountUpTimerControl;
import com.bhargo.user.controls.standard.Currency;
import com.bhargo.user.controls.standard.DecimalView;
import com.bhargo.user.controls.standard.DropDown;
import com.bhargo.user.controls.standard.DynamicLabel;
import com.bhargo.user.controls.standard.Email;
import com.bhargo.user.controls.standard.FileBrowsing;
import com.bhargo.user.controls.standard.Image;
import com.bhargo.user.controls.standard.LargeInput;
import com.bhargo.user.controls.standard.MapControl;
import com.bhargo.user.controls.standard.NumericInput;
import com.bhargo.user.controls.standard.Password;
import com.bhargo.user.controls.standard.Percentage;
import com.bhargo.user.controls.standard.Phone;
import com.bhargo.user.controls.standard.RadioGroupView;
import com.bhargo.user.controls.standard.Rating;
import com.bhargo.user.controls.standard.SignatureView;
import com.bhargo.user.controls.standard.SubmitButton;
import com.bhargo.user.controls.standard.TextInput;
import com.bhargo.user.controls.standard.Time;
import com.bhargo.user.controls.standard.UrlView;
import com.bhargo.user.controls.standard.VideoPlayer;
import com.bhargo.user.controls.standard.VideoRecording;
import com.bhargo.user.controls.standard.ViewFileControl;
import com.bhargo.user.controls.standard.VoiceRecording;
import com.bhargo.user.custom.CustomButton;
import com.bhargo.user.custom.CustomEditText;
import com.bhargo.user.custom.CustomTextInputEditText;
import com.bhargo.user.custom.CustomTextView;
import com.bhargo.user.fragments.AppsListFragment;
import com.bhargo.user.generatefiles.ExcelUtils;
import com.bhargo.user.generatefiles.GeneratePDFReport;
import com.bhargo.user.interfaces.APIResultListener;
import com.bhargo.user.interfaces.APIService;
import com.bhargo.user.interfaces.GetChatGPTService;
import com.bhargo.user.interfaces.GetServices;
import com.bhargo.user.interfaces.SubFormDeleteInterface;
import com.bhargo.user.navigation.NavMenuAdapter;
import com.bhargo.user.navigation.NavMenuItem;
import com.bhargo.user.notifications.NotificationsActivity;
import com.bhargo.user.pojos.APIOutputDetails;
import com.bhargo.user.pojos.AppDetails;
import com.bhargo.user.pojos.CallFormDataResponse;
import com.bhargo.user.pojos.DataControls;
import com.bhargo.user.pojos.DataControlsMArr;
import com.bhargo.user.pojos.DataViewerModelClass;
import com.bhargo.user.pojos.FormNavigation;
import com.bhargo.user.pojos.GetAllAppModel;
import com.bhargo.user.pojos.GetChildFormDataResponse;
import com.bhargo.user.pojos.GetDesignDetailsData;
import com.bhargo.user.pojos.NavigationModel;
import com.bhargo.user.pojos.NotificationDataResponse;
import com.bhargo.user.pojos.NotificationDirectSendData;
import com.bhargo.user.pojos.OfflineDataTransaction;
import com.bhargo.user.pojos.OfflineSaveRequestPojo;
import com.bhargo.user.pojos.OrgList;
import com.bhargo.user.pojos.PostsMasterModel;
import com.bhargo.user.pojos.SubFormTableColumns;
import com.bhargo.user.pojos.UserData;
import com.bhargo.user.pojos.UserDetails;
import com.bhargo.user.pojos.UserDetailsModel;
import com.bhargo.user.pojos.UserPostDetails;
import com.bhargo.user.pojos.firebase.ChatDetails;
import com.bhargo.user.pojos.firebase.Client;
import com.bhargo.user.pojos.firebase.Data;
import com.bhargo.user.pojos.firebase.MyResponse;
import com.bhargo.user.pojos.firebase.Sender;
import com.bhargo.user.pojos.firebase.Token;
import com.bhargo.user.pojos.firebase.UserChatList;
import com.bhargo.user.realm.RealmDBHelper;
import com.bhargo.user.realm.RealmTables;
import com.bhargo.user.screens.BottomNavigationActivity;
import com.bhargo.user.screens.CallWebPageViewActivity;
import com.bhargo.user.uisettings.ControlUiSettings;
import com.bhargo.user.uisettings.UISettingsCustomHeader;
import com.bhargo.user.uisettings.UISettingsCustomImage;
import com.bhargo.user.uisettings.pojos.ControlUIProperties;
import com.bhargo.user.uisettings.pojos.LayoutProperties;
import com.bhargo.user.uisettings.pojos.MappingControlModel;
import com.bhargo.user.uisettings.pojos.UILayoutProperties;
import com.bhargo.user.uisettings.pojos.UIPrimaryLayoutModelClass;
import com.bhargo.user.utils.AppConstants;
import com.bhargo.user.utils.BaseActivity;
import com.bhargo.user.utils.CallFormAction;
import com.bhargo.user.utils.ControlManagement;
import com.bhargo.user.utils.ControlUtils;
import com.bhargo.user.utils.DataCollectionControlsValidation;
import com.bhargo.user.utils.DownloadFilesFromURL;
import com.bhargo.user.utils.FilePathUtils;
import com.bhargo.user.utils.FilePicker;
import com.bhargo.user.utils.FileUploader;
import com.bhargo.user.utils.GPSActivity;
import com.bhargo.user.utils.ImproveDataBase;
import com.bhargo.user.utils.ImproveHelper;
import com.bhargo.user.utils.LocHelper;
import com.bhargo.user.utils.LocationHelper;
import com.bhargo.user.utils.NetworkNotAvailableActivity;
import com.bhargo.user.utils.OTPUtils;
import com.bhargo.user.utils.PrefManger;
import com.bhargo.user.utils.PropertiesNames;
import com.bhargo.user.utils.RetrofitUtils;
import com.bhargo.user.utils.SK_FileDataService;
import com.bhargo.user.utils.SK_RestCall_WCF;
import com.bhargo.user.utils.SK_RestCall_WebAPI;
import com.bhargo.user.utils.SK_ServiceCall;
import com.bhargo.user.utils.SK_WebAPI_interpreter;
import com.bhargo.user.utils.SaveControlValues;
import com.bhargo.user.utils.SessionManager;
import com.bhargo.user.utils.SetEditDataToControlValues;
import com.bhargo.user.utils.XMLHelper;
import com.bumptech.glide.Glide;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.libraries.places.api.model.Place;
import com.google.android.libraries.places.widget.Autocomplete;
import com.google.android.libraries.places.widget.model.AutocompleteActivityMode;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ServerValue;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.database.annotations.NotNull;
import com.google.firebase.database.annotations.Nullable;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;
import com.hsalf.smilerating.SmileRating;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
import com.scanlibrary.ScanConstants;
import com.squareup.picasso.Target;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import io.realm.DynamicRealm;
import io.realm.DynamicRealmObject;
import io.realm.RealmResults;
import nk.bluefrog.library.camera.CameraActivity;
import nk.bluefrog.library.utils.Helper;
import nk.doc.scanner.DocumentScannerActivity;
import nk.mobileapps.spinnerlib.SearchableMultiSpinner;
import nk.mobileapps.spinnerlib.SearchableSpinner;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

//import android.content.DialogInterface;


public class MainActivity extends BaseActivity implements SubFormDeleteInterface, LocHelper.LocationListener {


    public static final int ScanQR_REQUEST_CODE = 274;
    public static final int AUTOCOMPLETE_REQUEST_CODE = 666;
    //    public static final int BS_CAMERA_REQUEST_CODE = 1011;
//    public static final int BS_GALLERY_REQUEST_CODE = 2012;
    // We can be in one of these 3 states
    static final int NONE = 0;
    static final int DRAG = 1;
    static final int ZOOM = 2;
    private static final int BACK_TO_LIST_FLAG = 2002;
    private static final String TAG = "MainActivity.java";
    private static final int FILE_BROWSER_RESULT_CODE = 554;
    private static final int REQUEST_DOCUMENT_SCANNER = 007;
    private static final int REQUEST_GET_GPSLOCATION = 777;
    private static final int REQUEST_FUSED_LOCATION = 556;
    private static final int REQUEST_FUSED_LOCATION_CF = 559;
    private static final int REQUEST_FUSED_LOCATION_API = 558;
    private static final int REQUEST_FUSED_LOCATION1 = 557;
    private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1;
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10;
    private static final int section = 0;
    public static MainActivity instance;
    public final LinkedHashMap<String, JSONArray> subFormsAutoNumberArraysMap = new LinkedHashMap<>();
    private final LinkedHashMap<String, Boolean> subFormsAutoNumberStatusMap = new LinkedHashMap<>();
    private final LinkedHashMap<String, String> subFormTableSettingsTypeMap = new LinkedHashMap<>();
    private final List<Target> targets = new ArrayList<>();
    // Image zoom
    private final float mScaleFactor = 1.0f;
    public int height, width, screenHeight;
    public int screenWidth = 0;
    public DataCollectionObject dataCollectionObject;
    public VisibilityManagementOptions visibilityManagementOptions;
    public LinkedHashMap<String, Object> List_ControlClassObjects = new LinkedHashMap<String, Object>();
    public LinearLayout linearLayout, ll_SCmain, ll_preViewContainer, /*linearLayout_menu, */
            linearLayoutSection, ll_btns;
    public List<Variable_Bean> list_Variables = new ArrayList<Variable_Bean>();
    public List<Variable_Bean> list_VariablesDataFromIntent = new ArrayList<Variable_Bean>();
    public String strPostId, strAppName, strDisplayAppName, strAppIcon, strAppVersion, strOrgId, strAppType, strCreatedBy, strUserId,
            strDistributionId, strUserLocationStructure, strTransactionId, strFrom_InTaskDetails;
    public List<ControlObject> list_Control;
    public List<ControlObject> subFormControlObjects = new ArrayList<>();
    public static JSONArray jArrayAutoIncementControls = new JSONArray();
    //=======Load_Onchange_EventObjects================
    public LinkedHashMap<String, Control_EventObject> hash_Onchange_EventObjects = new LinkedHashMap<String, Control_EventObject>();
    //=======Load_Onfocus_EventObjects================
    public LinkedHashMap<String, Control_EventObject> hash_Onfocus_EventObjects = new LinkedHashMap<String, Control_EventObject>();
    //=======Load_OnClick_EventObjects================
    public LinkedHashMap<String, Control_EventObject> hash_Onclick_EventObjects = new LinkedHashMap<String, Control_EventObject>();
    //=======Load_OnMarkerClick_EventObjects================
    public LinkedHashMap<String, Control_EventObject> hash_OnMarkerclick_EventObjects = new LinkedHashMap<String, Control_EventObject>();
    //=======Load_OnAddRow_EventObjects================
    public LinkedHashMap<String, Control_EventObject> hash_OnAddRow_EventObjects = new LinkedHashMap<String, Control_EventObject>();
    //=======Load_OnDeleteRow_EventObjects================
    public LinkedHashMap<String, Control_EventObject> hash_OnDeleteRow_EventObjects = new LinkedHashMap<String, Control_EventObject>();
    public List<MapControl> subFormMapControls = new ArrayList<>();
    public List<List<String>> subFormMappedValues = new ArrayList<>();
    public String strChildForm;
    public boolean gpsContainInInParams;
    //    private LinearLayout ll_preViewContainer;
    public static boolean isAutoNumbersAvaliable;
    List<AudioPlayer> audioPlayerList = new ArrayList<>();
    boolean isSection = false;
    ImageView iv_loading;
    DatabaseReference firebaseDatabase;
    APIService apiService;
    ControlObject controlObject;
    Context context = MainActivity.this;
    ArrayList<TextInput> textInputArrayList = new ArrayList<>();
    ScrollView scrollView = null;
    RecyclerView rv_menu_as_form;
    CustomButton cb_submit_formControls, cb_clear_formControls;
    CustomButton cb_create_formControls;
    XMLHelper xmlHelper = new XMLHelper();
    HashMap<String, ControlObject> globalControlObjects = new HashMap<>();
    ImproveHelper improveHelper;
    List<List<List<String>>> subFormStringList = new ArrayList<>();
    List<List<List<HashMap<String, String>>>> subFormFilesList = new ArrayList<>();
    List<String> stringListSubmit = new ArrayList<>();
    List<HashMap<String, String>> stringListFiles = new ArrayList<>();
    ImproveDataBase improveDataBase;
    ProgressDialog Sk_serviceDialog;
    API_RESULT api_result;
    SK_ServiceCall sk_soapobj;
    SK_RestCall_WebAPI sk_Restobj;
    SK_RestCall_WCF sk_Restobj_WCF;
    SK_WebAPI_interpreter sk_Rest_interpreter;
    SK_WebAPI_interpreter sk_Rest_interpreterQuery;
    SK_FileDataService sk_filedata;
    JSONObject mainObject;
    Thread t1, t2, t3, tOffline, tsaveData;
    SessionManager sessionManager;
    LinearLayout MainLinearLayout/*llTestMainContainer*/;
    AppDetails appDetailsList;
    String Outputcolumns = "";
    String Outputcolumns_copy = "";
    String appIconPath = null;
    List<HashMap<String, String>> tempList;
    JSONObject jsonObjChildForm;
    View EventView;
    DownloadManager downloadManagerDataControl, downloadManagerFiles;
    long downloaId;
    int eventpos = 0;
    ControlObject menuButtonobject;
    String MenuName;
    boolean isIconsDownloaded = false;
    int Defultaction_index = 0;
    String LiveTracking_Controlname;
    Control_EventObject submit_control_EventObject;
    IfElseBlock_Bean IfElseBlock_Bean;
    int Executeindex = 0;
    int FromAction = 0;
    String appLanguage = "en";
    boolean isScreenFit = false;
    LinearLayout ll_multi;
    List<String> controlNames = new ArrayList<>();
    List<String> subFormNames = new ArrayList<>();
    List<String> subFormTableSettingsType = new ArrayList<>();
    List<String> subFormTableMapExistingType = new ArrayList<>();
    Gson gson = new Gson();
    boolean formLoad = false;
    boolean formPreLoad = false;
    boolean keepSession;
    Thread thread;
    TextToSpeech tts;
    View singleFormView = null;
    String inparam_current_location = "";
    String inparam_current_location_cf = "";
    ActionWithoutCondition_Bean Global_ActionObj = new ActionWithoutCondition_Bean();
    int subIndex;
    boolean Conditionflag = false;
    int ActionIndex = 0;
    boolean submitevent = false;
    Map<String, String> InputMap = new HashMap<>();
    Thread TM1, TM2;
    int bottomNavItemCounter;
    List<Drawable> bottomNavDrawables = new ArrayList<>();
    String firebaseURL = "https://improvecommunication-c08c9.firebaseio.com/";
    CustomButton cb_verifyCaptcha;
    // These matrices will be used to move and zoom image
    Matrix matrix = new Matrix();
    Matrix savedMatrix = new Matrix();
    int mode = NONE;
    // Remember some things for zooming
    PointF start = new PointF();
    PointF mid = new PointF();
    float oldDist = 1f;
    LocHelper locHelper;
    List<OrderByEvents_Object> list_OrderByEvents_common = new ArrayList<>();
    int fileIndex = 0;
    HashMap<String, ControlObject> controlObjectMapSection = new HashMap<>();
    BroadcastReceiver onJsonReceivedSEV = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (AppConstants.NOTIFICATION_IMAGE != null) {
                        AppConstants.NOTIFICATION_IMAGE.setImageDrawable(getDrawable(R.drawable.notification_active));
                    }

                }
            });
        }
    };
    String tableName;
    List<SubFormTableColumns> subFormDetails;
    // Section and Markers Bottom Sheet
    CustomTextView tv_displayName, tv_hint, ctvLocation;
    LinearLayout bottom_sheet_section, bottom_sheet_marker, ll_sectionContainer;
    //    NestedScrollView bottom_sheet_section;
    BottomSheetBehavior sheetBehaviorSection, sheetBehaviorMarker;
    ImageView iv_sectionCancel, iv_markerCancel;
    View mViewBg;
    com.bhargo.user.interfaces.Callback callback;
    List<String> subFormHaveMainFormAutoNumber;
    String strSectionControlName;
    List<ControlObject> sectionControlList;
    List<String> sectionEditDoneList;
    HashMap<String, HashMap<String, Object>> hashPopUpSetValues = new HashMap<>();
    HashMap<String, Object> selectedPopUpData = null;
    PopUpManagementAction popUpManagementAction;
    private ScaleGestureDetector scaleGestureDetector;
    private View activityView;
    private BottomNavigationView bottomNavigationView;
    private SubFormDeleteInterface subFormDeleteInterface;
    private Create_Query_Object create_query_object;
    private CustomButton btn_FileCreate;
    private String readXmlFromLocation;
    private GetDesignDetailsData getDesignDetailsData;
    private GetServices getServices;
    private int subFormPos;
    //    private String strChildDesignFormat, strChildForm;
    private String strDesignFormat, strDesignFormatNotif;
    private GetAllAppModel getAllAppModel;
    private String notificationPageName;
    private String notifDesignString;
    private String app_edit = "New";
    Handler handLoadAndOpenSectionPopup = new Handler() {
        public void handleMessage(android.os.Message msg) {
            dismissProgressDialog();
            openSectionPopupWithEditChecking();
        }
    };
    private WebView webView;
    private String strWebViewType = "", strWebUrl;
    private boolean isResume;
    private String callerFormName;
    private String callerFormType;
    private UIPrimaryLayoutModelClass uiPrimaryLayoutModelClass;
    private ImageLoader imageLoader;
    private ScrollView uFScrollView;
    private GoogleMap gMap;
    private boolean defaultSubmitDone;
    private IntentIntegrator qr_bar_Scanner;
    private int toolBarheight;
    private FrameLayout frameLayout, frame_progress;
    private List<OrgList> organisationList;
    private int orgCount;
    private ExpressionMainHelper expressionMainHelper;
    private String propertyText;
    private LocalBroadcastManager bmev;
    private DynamicRealm dynamicRealm;
    private String emailPatternMain;
    private int emailIndex;

    public static MainActivity getInstance() {
        return instance;
    }

    public static void initImageLoader(Context context) {
        try {
            // This configuration tuning is custom. You can tune every option, you may tune some of them,
            // or you can create default configuration by
            //  ImageLoaderConfiguration.createDefault(this);
            // method.
            ImageLoaderConfiguration.Builder config = new ImageLoaderConfiguration.Builder(context);
            config.threadPriority(Thread.NORM_PRIORITY - 2);
            config.denyCacheImageMultipleSizesInMemory();
            config.diskCacheFileNameGenerator(new Md5FileNameGenerator());
            config.diskCacheSize(50 * 1024 * 1024); // 50 MiB
            config.tasksProcessingOrder(QueueProcessingType.LIFO);
            config.writeDebugLogs(); // Remove for release app

            // Initialize ImageLoader with configuration.
            ImageLoader.getInstance().init(config.build());
        } catch (Exception e) {
            ImproveHelper improveHelper = new ImproveHelper(context);
            ImproveHelper.improveException(context, TAG, "initImageLoader", e);
        }
    }

    public static void serializeObject(ControlObject controlObject) {

        FileOutputStream fout = null;
        try {
            controlObject.setControlID("1");
            controlObject.setAccuracy("2");
            //Creating stream and writing the object
            Log.d("SerializeObjectPath", Environment.getExternalStorageDirectory() + "/ImproveFiles/" + "ControlObject.txt");
            fout = new FileOutputStream(Environment.getExternalStorageDirectory() + "/ImproveFiles/" + "ControlObject.txt");
            ObjectOutputStream out = new ObjectOutputStream(fout);
            out.writeObject(controlObject);
            out.flush();
            //closing the stream
            out.close();
            System.out.println("ControlObject text success");
//            Toast.makeText(get, "No image captured", Toast.LENGTH_LONG).show();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void deSerializeObject(ControlObject controlObject) {

        try {
            // Reading the object from a file
            FileInputStream file = new FileInputStream(Environment.getExternalStorageDirectory() + "/ImproveFiles/" + "ControlObject.txt");
            ObjectInputStream in = new ObjectInputStream(file);

            // Method for deserialization of object
            controlObject = (ControlObject) in.readObject();

            in.close();
            file.close();

            System.out.println("Object has been deserialized");
            System.out.println("a = " + controlObject.getControlID());
            System.out.println("b = " + controlObject.getAccuracy());
        } catch (IOException ex) {
            System.out.println("IOException is caught");
        } catch (ClassNotFoundException ex) {
            System.out.println("ClassNotFoundException is caught");
        }
    }

    public static int getNavigationBarHeight2(Context pContext) {
        Resources resources = pContext.getResources();
        int resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android");
        if (resourceId > 0) {
            return resources.getDimensionPixelSize(resourceId);
        }
        return 0;
    }

    public static int getStatusBarHeight(Context pContext) {
        Resources resources = pContext.getResources();
        int resourceId = resources.getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            return resources.getDimensionPixelSize(resourceId);
        }
        return 0;
    }

    public static int getActionBarHeight(Context pContext) {
        TypedValue tv = new TypedValue();
        int actionBarHeight = 0;
        if (pContext.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true)) {
            actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, pContext.getResources().getDisplayMetrics());
        }
        return actionBarHeight;
    }

    public static Bitmap getBitmap(String filePath) {

        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filePath, options);

        Boolean scaleByHeight = Math.abs(options.outHeight - 100) >= Math
                .abs(options.outWidth - 100);
        if (options.outHeight * options.outWidth * 2 >= 16384) {
            double sampleSize = scaleByHeight
                    ? options.outHeight / 100
                    : options.outWidth / 100;
            options.inSampleSize =
                    (int) Math.pow(2d, Math.floor(
                            Math.log(sampleSize) / Math.log(2d)));
        }
        options.inJustDecodeBounds = false;
        options.inTempStorage = new byte[512];
        File imgFile = new File(filePath);
        Bitmap output = null;
        if (imgFile.exists()) {
            output = BitmapFactory.decodeFile(filePath, options);
        }
        return output;
    }

    private static float exifToDegrees(float exifOrientation) {
        if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_90) {
            return 90;
        } else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_180) {
            return 180;
        } else if (exifOrientation == ExifInterface.ORIENTATION_ROTATE_270) {
            return 270;
        }
        return 0;
    }

    private static Bitmap rotateImage(Bitmap img, int degree) {
        Matrix matrix = new Matrix();
        matrix.postRotate(degree);
        Bitmap rotatedImg = Bitmap.createBitmap(img, 0, 0, img.getWidth(), img.getHeight(), matrix, true);
        if (img != null && !img.isRecycled()) {
            img.recycle();
            img = null;
        }

//        rotatedImg.recycle();
        return rotatedImg;
    }

    public int getNavigationBarHeight(Context pContext) {
        Rect rectangle = new Rect();
        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindow().getDecorView().getWindowVisibleDisplayFrame(rectangle);
        getWindowManager().getDefaultDisplay().getRealMetrics(displayMetrics);
        return displayMetrics.heightPixels - (rectangle.top + rectangle.height());
    }

    public void SubmitFormOnSD(Context context, String sFileName, List<String> sBody) {
        try {
            Log.d("SubmitExamplePath", Environment.getExternalStorageDirectory() + "/ImproveFiles/" + "SubmitExample.txt");
            File root = new File(Environment.getExternalStorageDirectory(), "/ImproveFiles/" + "SubmitExample.txt");
            if (!root.exists()) {
                root.mkdirs();
            }
            File gpxfile = new File(root, sFileName);
            FileWriter writer = new FileWriter(gpxfile);
            writer.append(sBody.toString());
            writer.flush();
            writer.close();
            Toast.makeText(context, "Saved", Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void setImageFromSDCard(String strImagePath) {

        File imgFile = new File(Environment.getExternalStorageDirectory(), strImagePath);
        Log.d(TAG, "setImageFromSDCard: " + imgFile);
        if (imgFile.exists()) {

            Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());

            iv_circle_appIcon.setImageBitmap(myBitmap);

        }
    }

    public void setIconFromSDCard(String folderName) {

        File filesDir = getFilesDir();

        File imgFile = new File(filesDir, folderName);
        Log.d(TAG, "setImageFromSDCard: " + imgFile);
        if (imgFile.exists()) {

            Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());

            iv_circle_appIcon.setImageBitmap(myBitmap);

        }
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        AppConstants.IS_FORM_THEME = true;
        instance = this;
        setBhargoTheme(this, AppConstants.THEME, AppConstants.IS_FORM_THEME, AppConstants.FORM_THEME);

        super.onCreate(savedInstanceState);
        System.out.println("========Mainactivity 1");


        if (getIntent() != null && getIntent().hasExtra("s_app_name")) {
            strAppName = getIntent().getStringExtra("s_app_name");
        }
        if (getIntent() != null && getIntent().hasExtra("s_display_app_name")) {
            strDisplayAppName = getIntent().getStringExtra("s_display_app_name");
        }

        if (getIntent().hasExtra("s_app_icon")) {
            strAppIcon = getIntent().getStringExtra("s_app_icon");
        }

//        dismissProgressDialog();
//        voiceInputService();

        bmev = LocalBroadcastManager.getInstance(context);
        IntentFilter actionReceiverEV = new IntentFilter();
        actionReceiverEV.addAction("SelectEV_Notifications");
        bmev.registerReceiver(onJsonReceivedSEV, actionReceiverEV);
        audioPlayerList = new ArrayList<>();
        sectionEditDoneList = new ArrayList<>();
        if (AppConstants.DefultAPK_OrgID == "SELE20210719175221829" && !ImproveHelper.isNetworkStatusAvialable(this)) {
            Intent intent = new Intent(MainActivity.this, NetworkNotAvailableActivity.class);
            startActivity(intent);
            finish();
        } else {

            frameLayout = findViewById(R.id.activity_frame);
            frameLayout.setVisibility(View.GONE);

            frame_progress = findViewById(R.id.frame_progress);
            frame_progress.setVisibility(View.GONE);

            bottomNavigationView = findViewById(R.id.nav_view);


            LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            if (AppConstants.KEEP_SESSION_VIEW_MAP.containsKey(strAppName)) {
                activityView = AppConstants.KEEP_SESSION_VIEW_MAP.get(strAppName);
                AppConstants.KEEP_SESSION_LAYOUT_MAP.get(strAppName).removeViewAt(0);
            } else {
//                activityView = layoutInflater.inflate(R.layout.activity_main, null, false);
                activityView = layoutInflater.inflate(R.layout.activity_main_default, null, false);
            }
            sessionManager = new SessionManager(context);
            improveHelper = new ImproveHelper(this);
            improveDataBase = new ImproveDataBase(context);
            improveHelper = new ImproveHelper(context);
            strPostId = sessionManager.getPostsFromSession();
            loadGlobalObject(sessionManager.getOrgIdFromSession());
            if (AppConstants.GlobalObjects != null) {
                AppConstants.GlobalObjects.setCurrent_GPS("");
            }
            appLanguage = ImproveHelper.getLocale(this);
            MainLinearLayout = findViewById(R.id.MainLinearLayout);

            frameLayout.addView(activityView);
            initializeActionBar(activityView);
            toolbar.setVisibility(View.GONE);
            enableBackNavigation(true);
            ib_settings.setVisibility(View.GONE);
            iv_circle_appIcon.setVisibility(View.VISIBLE);
            iv_vtt.setVisibility(View.VISIBLE);
            getRealContentSize2();
            initImageLoader(context);
            iv_vtt.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
//                    voiceInputService();
                    Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
                    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
                    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());

                    if (intent.resolveActivity(context.getPackageManager()) != null) {
                        startActivityForResult(intent, AppConstants.REQUEST_SPEECH_TO_TEXT_INPUT);
                    } else {
                        Toast.makeText(context, "Your Device Don't Support Speech Input", Toast.LENGTH_SHORT).show();
                    }
                }
            });

            if (currentMultiForm != null && currentMultiForm.getNavMenu() != null
                    && currentMultiForm.getNavMenu().getDisplayTypeInMobile().contentEquals("menu")) {

                initDrawerLayout(currentMultiForm.getNavMenu().getMenuItemList(), this);
            } else {
                mDrawerMainLayout = findViewById(R.id.llNavigation);
                mDrawerMainLayout.setVisibility(View.GONE);
                mDrawerLayout = findViewById(R.id.drawer_layout);
                mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
            }


            /*sessionManager = new SessionManager(context);
            improveHelper = new ImproveHelper(this);
            improveDataBase = new ImproveDataBase(context);
            improveHelper = new ImproveHelper(context);
            strPostId = sessionManager.getPostsFromSession();
            loadGlobalObject(sessionManager.getOrgIdFromSession());
            if (AppConstants.GlobalObjects != null) {
                AppConstants.GlobalObjects.setCurrent_GPS("");
            }
            appLanguage = ImproveHelper.getLocale(this);


            MainLinearLayout = findViewById(R.id.MainLinearLayout);*/


            firebaseDatabase = FirebaseDatabase.getInstance("https://meetho-anand-android-project-default-rtdb.firebaseio.com").getReference(sessionManager.getOrgIdFromSession());
            apiService = Client.getClient("https://fcm.googleapis.com/").create(APIService.class);

            webView = activityView.findViewById(R.id.webView);
            btn_FileCreate = activityView.findViewById(R.id.btn_FileCreate);
            cb_submit_formControls = activityView.findViewById(R.id.cb_submit_formControls);
            cb_submit_formControls.setVisibility(View.GONE);
            cb_clear_formControls = activityView.findViewById(R.id.cb_clear_formControls);

            btn_FileCreate.setVisibility(View.GONE);
            controlObject = new ControlObject();
            scrollView = new ScrollView(context);
            rv_menu_as_form = activityView.findViewById(R.id.rv_menu_as_form);


            uFScrollView = activityView.findViewById(R.id.uFScrollView);
            ll_SCmain = activityView.findViewById(R.id.ll_SCmain);
            linearLayout = activityView.findViewById(R.id.ll_main);
            ll_btns = activityView.findViewById(R.id.ll_btns);
            cb_verifyCaptcha = activityView.findViewById(R.id.cb_verifyCaptcha);
            mViewBg = findViewById(R.id.bs_bg); // Bottom sheetBG Shadow
            // Bottom Sheet Section
            bottom_sheet_section = activityView.findViewById(R.id.bottom_sheet_section);
            sheetBehaviorSection = BottomSheetBehavior.from(bottom_sheet_section);

            ll_sectionContainer = bottom_sheet_section.findViewById(R.id.ll_sectionContainer);
            tv_displayName = bottom_sheet_section.findViewById(R.id.tv_displayName);
            tv_hint = bottom_sheet_section.findViewById(R.id.tv_hint);
            iv_sectionCancel = bottom_sheet_section.findViewById(R.id.iv_sectionCancel);

            // Bottom Sheet Marker
            bottom_sheet_marker = activityView.findViewById(R.id.bottom_sheet_marker);
            sheetBehaviorMarker = BottomSheetBehavior.from(bottom_sheet_marker);
            iv_markerCancel = bottom_sheet_marker.findViewById(R.id.iv_markerCancel);
            ctvLocation = bottom_sheet_marker.findViewById(R.id.ctvLocation);


            sheetBehaviorSection.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {
                @Override
                public void onStateChanged(@NonNull View bottomSheet, int newState) {
//                    try {
//                        if(formValidated(list_Control)) {
//                            sheetBehaviorSection.setHideable(true);
                            if (newState == BottomSheetBehavior.STATE_COLLAPSED) {
                                saveDataInControlsAndClosePopUp();
                                bottomSheet.setVisibility(View.GONE);
                            }
                            bottomSheet.requestLayout();
                            bottomSheet.invalidate();
                        /*}else{
                            sheetBehaviorSection.setHideable(false);
                        }*/
//                    } catch (InterruptedException e) {
//                        throw new RuntimeException(e);
//                    }

                    //workaround for the bottomsheet  bug
                }

                @Override
                public void onSlide(@NonNull View bottomSheet, float slideOffset) {
                    bottomSheet.setVisibility(View.VISIBLE);
                }
            });
            sheetBehaviorMarker.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {
                @Override
                public void onStateChanged(@NonNull View bottomSheet, int newState) {
                    if (newState == BottomSheetBehavior.STATE_COLLAPSED) {
//                        SaveControlValues controlValues = new SaveControlValues(strSectionControlName, sectionControlList, List_ControlClassObjects);
//                        hashPopUpSetValues.put(strSectionControlName, controlValues.sectionInPopUpSaveValues().get(strSectionControlName));
                        bottomSheet.setVisibility(View.GONE);
                    }
                }

                @Override
                public void onSlide(@NonNull View bottomSheet, float slideOffset) {
                    bottomSheet.setVisibility(View.VISIBLE);
                }
            });


/*
        if(AppConstants.LAYOUT_KEEP_SESSION.containsKey(strAppName)){
            LinearLayout tempLayout = AppConstants.LAYOUT_KEEP_SESSION.get(strAppName);
            List<View> tempList = new ArrayList<>();
            for (int i = 0; i <tempLayout.getChildCount() ; i++) {

                tempList.add(tempLayout.getChildAt(i));

            }
            tempLayout.removeAllViews();
            AppConstants.LAYOUT_KEEP_SESSION.get(strAppName).removeAllViews();
            for (int i = 0; i <tempList.size() ; i++) {
                linearLayout.addView(tempList.get(i));
            }

            keepSession = true;
            List_ControlClassObjects = AppConstants.KEEP_SESSION_CONTROLS_MAP.get(strAppName);
        }else {
            keepSession = false;

        }*/
            AppConstants.hasCheckList = false;
            AppConstants.checkListData = new JSONArray();

            AppConstants.EventCallsFrom = 1;

            emailPatternMain = "[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";

            getServices = RetrofitUtils.getUserService();

            Log.d(TAG, "sess_org: " + sessionManager.getOrgIdFromSession());

            iv_loading = findViewById(R.id.iv_loading);
            iv_loading.setVisibility(View.GONE);
            showProgressDialog(getString(R.string.loading));
            if (currentMultiForm != null && currentMultiForm.getCustomToolBar() != null) {

//            toolbar.setVisibility(View.GONE);
                hideDefaultToolBarActions();

                if (currentMultiForm.getCustomToolBar().isEnableIcon()) {
                    iv_circle_appIcon.setVisibility(View.VISIBLE);
                    Glide.with(context).load(R.drawable.icons_email_drawable).into(iv_circle_appIcon);
                    if (currentMultiForm.getCustomToolBar().getIconTint() != null) {
                        //iv_circle_appIcon.setColorFilter(Color.parseColor(currentMultiForm.getCustomToolBar().getIconTint()));
                        ImageViewCompat.setImageTintList(iv_circle_appIcon, ColorStateList.valueOf(Color.parseColor(currentMultiForm.getCustomToolBar().getIconTint())));
                    }
                } else {
                    iv_circle_appIcon.setVisibility(View.GONE);
                }

                if (currentMultiForm.getCustomToolBar().isEnableTitle()) {
                    title.setVisibility(View.VISIBLE);
                    title.setText(currentMultiForm.getAppName());
                    title.setTextSize(Float.parseFloat(currentMultiForm.getCustomToolBar().getTitleTextSize()));
                    title.setTextColor(Color.parseColor(currentMultiForm.getCustomToolBar().getTitleColor()));

                    if (currentMultiForm.getCustomToolBar().getTitleTextStyle().equalsIgnoreCase("Bold")) {

                        Typeface typeface_bold = Typeface.createFromAsset(context.getAssets(), context.getResources().getString(R.string.font_satoshi_bold));
                        title.setTypeface(typeface_bold);
                    } else if (currentMultiForm.getCustomToolBar().getTitleTextStyle().equalsIgnoreCase("Italic")) {

                        Typeface typeface_italic = Typeface.createFromAsset(context.getAssets(), context.getResources().getString(R.string.font_satoshi_italic));
                        title.setTypeface(typeface_italic);
                    }
                } else {
                    title.setVisibility(View.GONE);
                }


                if (currentMultiForm.getCustomToolBar().isEnableCustomBackground()) {
                    Log.d(TAG, "currentMultiFormToolBar: " + currentMultiForm.getCustomToolBar().getBgColor());
                    toolbar.setBackgroundColor(Color.parseColor(currentMultiForm.getCustomToolBar().getBgColor()));
                }

                if (currentMultiForm.getCustomToolBar().getItems() != null && currentMultiForm.getCustomToolBar().isEnableActionItems() && currentMultiForm.getCustomToolBar().getItems().size() > 0) {

                    ll_action_items.setVisibility(View.VISIBLE);
                    addToolBarActionItems();

                } else {
                    ll_action_items.setVisibility(View.GONE);
                }
            }

            if (currentMultiForm != null && currentMultiForm.getBottomNavigation() != null) {
                bottomNavigationView.setVisibility(View.VISIBLE);
                if (currentMultiForm.getBottomNavigation().isEnableCustomBackground()) {
                    bottomNavigationView.setBackgroundColor(Color.parseColor(currentMultiForm.getBottomNavigation().getBgColor()));
                }

                List<NavMenuItem> menus = currentMultiForm.getBottomNavigation().getMenuItemList();

                if (currentMultiForm.getBottomNavigation().getTempDrawablesList().size() == 0) {
                    for (int i = 0; i < menus.size(); i++) {
                        currentMultiForm.getBottomNavigation().getTempDrawablesList().add(ImproveHelper.randomDrawable());
                    }
                }


                addBottomNavItem(menus);

                if (currentMultiForm.getHomeIn() != null && currentMultiForm.getHomeIn().contentEquals(AppConstants.BOTTOM_NAVIGATION) && currentMultiForm.getHomeMenuPos() != -1 && !AppConstants.HOME_CLICKED) {
                    bottomNavigationView.getMenu().getItem(currentMultiForm.getHomeMenuPos() + 1).setChecked(true);
                    AppConstants.HOME_CLICKED = true;
                }

                bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
                    @RequiresApi(api = Build.VERSION_CODES.O)
                    @Override
                    public boolean onNavigationItemSelected(@NonNull MenuItem item) {

                        List<NavMenuItem> menus = currentMultiForm.getBottomNavigation().getMenuItemList();

                        String tagName = item.getContentDescription().toString();
                        int pos = Integer.parseInt(tagName.split("-")[1]);
                        String tag = tagName.split("-")[0];
                        View view = new View(context);
                        view.setTag(tag);
                        NavMenuItem menu = menus.get(pos);
                        bottomNavigationView.getMenu().getItem(AppConstants.BOTTOM_NAV_POS).setChecked(false);
                        AppConstants.BOTTOM_NAV_POS = pos;
                        if (menu.getOnClickEventObject() != null) {
                            if (AppConstants.EventCallsFrom == 1) {
                                hash_Onclick_EventObjects.put(tag, menu.getOnClickEventObject());
                                AppConstants.EventFrom_subformOrNot = false;
                                ClickEvent(view);
                            }
                        }


                        return true;
                    }
                });
            } else {
                bottomNavigationView.setVisibility(View.GONE);
            }

            System.out.println("========Mainactivity 2");

            Intent getIntent = getIntent();

            if (getIntent != null) {
                if (getIntent.hasExtra("s_resume")) {
                    isResume = getIntent.getBooleanExtra("s_resume", false);
                    callerFormName = getIntent.getStringExtra("caller_form_name");
                    callerFormType = getIntent.getStringExtra("form_type");
                    AppConstants.MULTI_FORM_TYPE = callerFormType;
                }
                app_edit = getIntent.getStringExtra("app_edit");
                if (app_edit.equalsIgnoreCase("Edit")) {
                    AppConstants.EDIT_MODE = true;
                }
                Log.d(TAG, "onCreateCh: " + app_edit);
                strAppVersion = getIntent.getStringExtra("s_app_version");
                strOrgId = getIntent.getStringExtra("s_org_id");
                strAppType = getIntent.getStringExtra("s_app_type");
                strAppName = getIntent.getStringExtra("s_app_name");
            /*if (getIntent.hasExtra("s_app_design")) {
                strDesignFormat = getIntent().getStringExtra("s_app_design");
                if(strDesignFormat.isEmpty()){
                    strDesignFormat = improveDataBase.getDesignFormat(sessionManager.getOrgIdFromSession(),strAppName);
                }
            }*/
                strDesignFormat = ImproveHelper.getDesignFormat(context);
                System.out.println("========Mainactivity 3");
                strCreatedBy = getIntent.getStringExtra("s_created_by");
                strUserId = getIntent.getStringExtra("s_user_id");
                strDistributionId = getIntent.getStringExtra("s_distribution_id");
                strUserLocationStructure = getIntent.getStringExtra("s_user_location_Structure");
                if (getIntent() != null && getIntent.hasExtra("VariablesData")) {
                    Bundle Variables = getIntent.getBundleExtra("VariablesData");
                    list_VariablesDataFromIntent = (List<Variable_Bean>) Variables.getSerializable("Variables");
                }
                if (getIntent() != null && getIntent.hasExtra("From_InTaskDetails")) {
                    strFrom_InTaskDetails = getIntent.getStringExtra("From_InTaskDetails");
                }

                if (strUserLocationStructure == null) {
                    Gson gson = new Gson();
                    String jsonUserDeatils = PrefManger.getSharedPreferencesString(context, SP_USER_DETAILS, "");
                    UserDetails userDetailsObj = gson.fromJson(jsonUserDeatils, UserDetails.class);
                }
                System.out.println("========Mainactivity 4");
                /*Child Form data*/
                if (getIntent() != null && getIntent().getStringExtra("jsonObject") != null && !app_edit.equalsIgnoreCase("Edit")) {

                    try {
                        ImproveHelper.improveLog(TAG, "DataCollectionActivity", "EditData : " + getIntent().getStringExtra("jsonObject"));
                        try {
                            JSONObject jobj = new JSONObject();
                            jobj.put("isEdit", true);
                            jobj.put("EditData", getIntent().getStringExtra("jsonObject"));
                            ImproveHelper.Controlflow("OnLoad", "ViewData", "DataCollection", jobj.toString());
                        } catch (JSONException e) {
                            ImproveHelper.improveException(context, TAG, "OnLoad", e);
                        }

                        jsonObjChildForm = new JSONObject(getIntent().getStringExtra("jsonObject"));

                        strTransactionId = jsonObjChildForm.getString("Trans_id");

                        Log.d(TAG, "jsonObjChildForm: " + jsonObjChildForm);
                        Log.d(TAG, "jsonTransactionId: " + strTransactionId);

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    System.out.println("========Mainactivity 5");
                    strAppName = PrefManger.getSharedPreferencesString(context, SP_CHILD_FORM_APP_NAME, "");
                    strCreatedBy = PrefManger.getSharedPreferencesString(context, SP_CHILD_FORM_CREATED_BY_ID, "");
                    strDistributionId = PrefManger.getSharedPreferencesString(context, SP_CHILD_FORM_DISTRIBUTION_ID, "");
                    strChildForm = getIntent().getStringExtra("s_childForm");
                    strUserId = sessionManager.getUserDataFromSession().getUserID();
                    strOrgId = sessionManager.getOrgIdFromSession();

                } else {
                    try {
                        if (getIntent().getExtras().containsKey("jsonObject")) {
                            jsonObjChildForm = new JSONObject(getIntent().getStringExtra("jsonObject"));
                        }

                        strChildForm = getIntent().getStringExtra("s_childForm");
                        if (getIntent().getExtras().containsKey("Trans_ID")) {
                            strTransactionId = jsonObjChildForm.getString("Trans_ID");
                        }
//nk file
                        // ImproveHelper.improveLog(TAG, "OnCreate", "Trans_ID : " + jsonObjChildForm.getString("Trans_ID"));

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                getDesignDetailsData = new GetDesignDetailsData();
                getDesignDetailsData.setOrgId(strOrgId);
                getDesignDetailsData.setPageName(strAppName);

                ImproveHelper.improveLog(TAG, "OnCreate", "strAppName : " + strAppName);
                //Get App Design Details


                //DashBoard and reports WebView
                if (getIntent() != null && getIntent.getStringExtra(AppConstants.WEB_VIEW) != null) {
                    webView.setVisibility(View.VISIBLE);
                    WebSettings webSettings = webView.getSettings();
                    webSettings.setJavaScriptEnabled(true);
                    Log.d(TAG, "DashReport_WEB_VIEW: " + getIntent.getStringExtra(AppConstants.WEB_VIEW));
                    Log.d(TAG, "DashReport_WEB_VIEW: " + getIntent.getStringExtra(AppConstants.WEB_VIEW_DATA));
                    strWebViewType = getIntent.getStringExtra(AppConstants.WEB_VIEW);
                    if (strWebViewType.equalsIgnoreCase(AppConstants.DASHBOARD)) {
                        strWebUrl = getIntent.getStringExtra(AppConstants.WEB_VIEW_DATA);
                    } else if (strWebViewType.equalsIgnoreCase(AppConstants.REPORTS)) {
                        strWebUrl = getIntent.getStringExtra(AppConstants.WEB_VIEW_DATA);
                    }

                    title.setText(strWebViewType);

                    webView.loadUrl(strWebUrl);
                    Log.d(TAG, "DashReport_WEB_VIEW: " + getIntent.getStringExtra(AppConstants.WEB_VIEW_DATA));
                }


                if (getIntent() != null && getIntent.getStringExtra(FromNotification) != null) {

                    Log.d(TAG, "Notification_PageName: " + getIntent.getStringExtra(Notification_PageName));
//                notificationPageName = getIntent.getStringExtra(Notification_PageName);
                    strAppName = getIntent.getStringExtra(Notification_PageName);

                    if (getIntent.getStringExtra(AppConstants.WEB_VIEW) != null) {
                        strWebViewType = getIntent.getStringExtra(AppConstants.WEB_VIEW);
                    } else if (strWebViewType.equalsIgnoreCase(AppConstants.REPORTS)) {
                        strWebViewType = getIntent.getStringExtra(AppConstants.WEB_VIEW);
                    }
                    if (getIntent.getStringExtra("app_edit") != null && !getIntent.getStringExtra("app_edit").isEmpty()) {
                        app_edit = getIntent.getStringExtra("app_edit");
                        AppConstants.EDIT_MODE = true;
                    }

                    title.setText(strAppName);

                    if (getIntent.getStringExtra(FromFlashScreen) != null) {
                        if (GlobalObjects == null) {
                            GlobalObjects Gobj = new GlobalObjects();
                            Gobj.setAppLanguage(ImproveHelper.getLocale(this));
                            AppConstants.GlobalObjects = Gobj;
                        }
                        AppConstants.GlobalObjects.setLogin_status(sessionManager.getLoginStatusSession());
                        AppConstants.GlobalObjects.setOrg_Name(sessionManager.getOrgIdFromSession());
                        AppConstants.GlobalObjects.setUser_MobileNo(sessionManager.getLoginUserMobileNumber());
                        FromSplashScreenDirectActivity(strAppName);
                    } else {
                        mNotificationDirectActivityApi(strAppName);
                    }
                } else {
                    if (strWebViewType.equalsIgnoreCase("") || strWebViewType.isEmpty() || strWebViewType == null) {


                        mAppFromCheck();

                    }
                }


            }

            /*Sync Data*/
            iv_sync.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (isNetworkStatusAvialable(context)) {
                        Toast.makeText(context, "Sync Data", Toast.LENGTH_SHORT).show();
                    } else {
                        //improveHelper.snackBarAlertActivities(context, MainLinearLayout);
                    }

                }
            });

//nk file operation pending
        /*try {
            String textFileName = "DataCollectionsObject";
            // this will create a new name everytime and unique
            File root = new File(Environment.getExternalStorageDirectory(), "ImproveFiles");
            // if external memory exists and folder with name Notes
            if (!root.exists()) {
                root.mkdirs(); // this will create folder.
            }
            File filepath = new File(root, textFileName + ".txt");  // file path to save
            FileWriter writer = new FileWriter(filepath);
//            writer.append(ed.getText().toString());
                writer.flush();
                writer.close();
                String m = "File generated with name " + textFileName + ".txt";
//            result.setText(m);

            } catch (IOException e) {
                e.printStackTrace();
//            result.setText(e.getMessage().toString());
        }*/


            btn_FileCreate.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
//                serializeObject(controlObject);
//                deSerializeObject(controlObject);
                }
            });


            cb_clear_formControls.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    clearForm();

                }
            });

            cb_submit_formControls.setVisibility(View.GONE);
            System.out.println("========Mainactivity 6");
            //LoadDatacontrolstoGlobalObject();


        }
    }

    public void callLocationHelper(com.bhargo.user.interfaces.Callback callback) {
        this.callback = callback;
        locationHelperIntent(GET_DATA);
    }
    private void locationHelperIntent(String action_type){
        Intent intent = new Intent(this, LocationHelper.class);
        intent.putExtra(LocationHelper.RETURN_ACTION,action_type);
        startActivityForResult(intent, REQUEST_FUSED_LOCATION);
    }

    @RequiresApi(api = Build.VERSION_CODES.O)
    private void addBottomNavItem(List<NavMenuItem> menuItems) {
        NavMenuItem item = menuItems.get(bottomNavItemCounter);
        MenuItem menuItem = bottomNavigationView.getMenu().add(bottomNavItemCounter, bottomNavItemCounter, 0, item.getDisplayName());//.setIcon(bottomNavDrawables.get(i)
        menuItem.setContentDescription(item.getTagName() + "-" + (bottomNavItemCounter));
        menuItem.setIcon(currentMultiForm.getBottomNavigation().getTempDrawablesList().get(bottomNavItemCounter));
        bottomNavItemCounter++;
        if (bottomNavItemCounter != menuItems.size()) {
            addBottomNavItem(menuItems);
        } else {
            bottomNavItemCounter = 0;
            bottomNavigationView.getMenu().getItem(0).setVisible(false);
            if (AppConstants.BOTTOM_NAV_POS == -1) {
                AppConstants.BOTTOM_NAV_POS = 0;
            } else {
                bottomNavigationView.getMenu().getItem(AppConstants.BOTTOM_NAV_POS).setChecked(true);
            }
        }

    }

    private void addToolBarActionItems() {

        for (int i = 0; i < currentMultiForm.getCustomToolBar().getItems().size(); i++) {

            NavMenuItem item = currentMultiForm.getCustomToolBar().getItems().get(i);

            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View view = inflater.inflate(R.layout.custom_toolbar_action_item, null);

            ImageView item_icon = view.findViewById(R.id.item_icon);
            TextView item_name = view.findViewById(R.id.item_name);

            item_name.setText(item.getDisplayName());

            if (item.getToolBarItemDisplayType().contentEquals(AppConstants.ACTION_ITEM_ICON_ONLY)) {
                item_name.setVisibility(View.GONE);
            } else if (item.getToolBarItemDisplayType().contentEquals(AppConstants.ACTION_ITEM_NAME_ONLY)) {
                item_icon.setVisibility(View.GONE);
            } else if (item.getToolBarItemDisplayType().contentEquals(AppConstants.ACTION_ITEM_BOTH)) {
                item_icon.setVisibility(View.VISIBLE);
                item_name.setVisibility(View.VISIBLE);
            }

//            hash_Onclick_EventObjects.put("Toolbar "+item.getDisplayName(),item.getOnClickEventObject());

            Glide.with(context).load(item.getMenuIcon()).into(item_icon);


            item_icon.setOnClickListener(view1 -> {

//                ClickEvent();

            });

            ll_action_items.addView(view);

        }
    }

    private void hideDefaultToolBarActions() {

        ib_done.setVisibility(View.GONE);
        ll_countDownTimer.setVisibility(View.GONE);
        iv_sync.setVisibility(View.GONE);
        iv_profile.setVisibility(View.GONE);
        ib_logout.setVisibility(View.GONE);
        ib_settings.setVisibility(View.GONE);
        iv_assessment_reports.setVisibility(View.GONE);
        iv_filter.setVisibility(View.GONE);
    }

    public void mCreateControlsFormAPI(View view) {
        try {
            showProgressDialog(getString(R.string.submitting_data));//try it
            //Attaching the Control properties from specified XML
            if (readXmlFromLocation != null) {
                stringListSubmit = new ArrayList<>();
                stringListFiles = new ArrayList<>();
                if (dataCollectionObject.getOnSubmitClickObject() != null) {
                    if (AppConstants.GlobalObjects != null)
                        AppConstants.GlobalObjects.setCurrent_GPS("");
                    Control_EventObject control_EventObject = dataCollectionObject.getOnSubmitClickObject();
                    List<ActionWithoutCondition_Bean> listActionWithoutConditions = control_EventObject.getActionWithOutConditionList() != null ? control_EventObject.getActionWithOutConditionList() : new ArrayList<ActionWithoutCondition_Bean>();
                    List<ActionWithCondition_Bean> listActionWithConditions = control_EventObject.getActionWithConditionList() != null ? control_EventObject.getActionWithConditionList() : new ArrayList<ActionWithCondition_Bean>();

                    int totalActions = listActionWithoutConditions.size() + listActionWithConditions.size();

                    if (totalActions > 0) {
                        SubmitEvent();
                    } else {
                        try {
                            if (formValidated(list_Control)) {
                                DefultAction();
                            }
                        } catch (InterruptedException e) {

                        }
                    }
                } else if (dataCollectionObject.isDefaultActionForSubmit()) {
                    if (formValidated(list_Control)) {
                        if (checkAnyMapExisting()) {
                            DefaultActionMapExisting();
                        } else {
                            DefultAction();
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "mCreateControlsFormAPI", e);
        }
    }

    public void LivetrackStart(String ControlName) {
        try {
            dismissProgressDialog();
            Defultaction_index = 1;
            LiveTracking_Controlname = ControlName;

            if (formValidated(list_Control)) {
                disableAllControls();
                DefultAction();
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "LivetrackStart", e);
        }
    }

    public void disableAllControls() {
        try {
            List<String> disablenames = new ArrayList<String>();
            for (int i = 0; i < list_Control.size(); i++) {
                if (!list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_LiveTracking)) {
                    disablenames.add(list_Control.get(i).getControlName());
                }
            }
            SetDisable(disablenames);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "disableAllControls", e);
        }
    }

    public void disableSubFormControls(List<ControlObject> subformControlsList) {
        List<String> disablenames = new ArrayList<String>();
        for (int i = 0; i < subformControlsList.size(); i++) {
            if (!subformControlsList.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_LiveTracking)) {
                disablenames.add(subformControlsList.get(i).getControlName());
            }
        }
        SetDisable(disablenames);
    }

    private String getTransIdIfAPIExists(JSONArray subformJsonArrayData, JSONObject row) {
        String trans_id = "";
        try {

            Iterator key = row.keys();
            String keyStr = (String) key.next();
            String columnValue = row.getString(keyStr);

            for (int i = 0; i < subformJsonArrayData.length(); i++) {
                JSONObject subformJsonData = subformJsonArrayData.getJSONObject(i);
                String jsonColumnValue = subformJsonData.getString(keyStr);
                if (jsonColumnValue.trim().equalsIgnoreCase(columnValue.trim())) {
                    trans_id = subformJsonData.getString("Trans_ID");
                   /* Log.d(TAG, "senddatatrans1: "+columnValue);
                    Log.d(TAG, "senddatatrans2: "+jsonColumnValue);
                    Log.d(TAG, "senddatatrans: "+trans_id);*/
                    break;
                }
            }

        } catch (Exception e) {

        }
        return trans_id;

    }

    private String getTransId(String subformName, int rowIndex) {
        String trans_id = "";
        try {
            if (AppConstants.transIdsOfSubforms.containsKey(subformName)) {
                List<String> transIdList = AppConstants.transIdsOfSubforms.get(subformName);
//                if (transIdList.get(rowIndex).contains("T")) {
                trans_id = transIdList.get(rowIndex);
//                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getTransId", e);
        }
        return trans_id;

    }

    public boolean formValidated(List<ControlObject> list_Control) throws
            InterruptedException {
        boolean flag = true;
        try {
            AppConstants.transIdsOfSubforms = new HashMap<>();
            subFormStringList.clear();
            subFormFilesList.clear();
            List<String> tableColumns;
            if (dataCollectionObject.getTableSettingsType() == null) {
                tableColumns = dataCollectionObject.getDefault_Table_Columns();
            } else {
                tableColumns = dataCollectionObject.getList_Table_Columns();
            }
            DataCollectionControlsValidation controlsValidation = new DataCollectionControlsValidation(context, List_ControlClassObjects,
                    tableColumns, dataCollectionObject.getTableSettingsType(), getMandatoryColumnsList());
            for (int i = 0; i < list_Control.size(); i++) {
                if (dataCollectionObject.getTableSettingsType() != null && dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Create New Table")) {
//                    if (list_Control.get(i).getControlType().contentEquals(CONTROL_TYPE_SECTION) && list_Control.get(i).isMakeItAsPopup()) {
                    if (list_Control.get(i).getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                        List<ControlObject> sectionControlList = list_Control.get(i).getSubFormControlList();
                        for (int j = 0; j < sectionControlList.size(); j++) {
                            flag = controlsValidation.controlSubmitValidation(sectionControlList.get(j), false, null, null, null, -1, -1);
                            if (!flag) {
                                break;
                            }
                        }
                    } else {
                        flag = controlsValidation.controlSubmitValidation(list_Control.get(i), false, null, null, null, -1, -1);
                    }
                } else if (dataCollectionObject.getTableSettingsType() != null && dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                    if (list_Control.get(i).getControlType().contentEquals(CONTROL_TYPE_SECTION) && list_Control.get(i).isMakeItAsPopup()) {
                        List<ControlObject> sectionControlList = list_Control.get(i).getSubFormControlList();
                        for (int j = 0; j < sectionControlList.size(); j++) {
                            flag = controlsValidation.controlSubmitValidation(sectionControlList.get(j), false, null, null, null, -1, -1);
                            if (!flag) {
                                break;
                            }
                        }
                    } else {
                        flag = controlsValidation.controlSubmitValidation(list_Control.get(i), false, null, null, null, -1, -1);
                    }
                } else if (dataCollectionObject.getTableSettingsType() != null && dataCollectionObject.getTableSettingsType().equalsIgnoreCase("None")) {
                    if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM) || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                        flag = controlsValidation.controlSubmitValidation(list_Control.get(i), false, null, null, null, -1, -1);
                    }
                } else if (dataCollectionObject.getTableSettingsType() == null) {
                    flag = controlsValidation.controlSubmitValidation(list_Control.get(i), false, null, null, null, -1, -1);
                }
                if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM)) {
                    if (((SubformView) List_ControlClassObjects.get(list_Control.get(i).getControlName())).getSubFormString().size() > 0) {
                        subFormStringList.add(((SubformView) List_ControlClassObjects.get(list_Control.get(i).getControlName())).getSubFormString());
                    }
                    subFormFilesList.add(((SubformView) List_ControlClassObjects.get(list_Control.get(i).getControlName())).getSubFormFileString());
                } else if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                    if (((GridControl) List_ControlClassObjects.get(list_Control.get(i).getControlName())).getSubFormString().size() > 0) {
                        subFormStringList.add(((GridControl) List_ControlClassObjects.get(list_Control.get(i).getControlName())).getSubFormString());
                    }
                    subFormFilesList.add(((GridControl) List_ControlClassObjects.get(list_Control.get(i).getControlName())).getSubFormFileString());
                } else if (list_Control.get(i).getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                    List<ControlObject> sectionControlList = list_Control.get(i).getSubFormControlList();
                    for (int j = 0; j < sectionControlList.size(); j++) {
                        if (sectionControlList.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM)) {
                            if (List_ControlClassObjects.get(sectionControlList.get(j).getControlName()) != null) {
                                if (((SubformView) List_ControlClassObjects.get(sectionControlList.get(j).getControlName())).getSubFormString().size() > 0) {
                                    subFormStringList.add(((SubformView) List_ControlClassObjects.get(sectionControlList.get(j).getControlName())).getSubFormString());
                                }
                                subFormFilesList.add(((SubformView) List_ControlClassObjects.get(sectionControlList.get(j).getControlName())).getSubFormFileString());
                            }

                        } else if (sectionControlList.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                            if (List_ControlClassObjects.get(sectionControlList.get(j).getControlName()) != null) {
                                if (((GridControl) List_ControlClassObjects.get(sectionControlList.get(j).getControlName())).getSubFormString().size() > 0) {
                                    subFormStringList.add(((GridControl) List_ControlClassObjects.get(sectionControlList.get(j).getControlName())).getSubFormString());
                                }
                                subFormFilesList.add(((GridControl) List_ControlClassObjects.get(sectionControlList.get(j).getControlName())).getSubFormFileString());
                            }
                        }
                    }
                }

                if (!flag) {
                    dismissProgressDialog();
                    break;
                }
            }

            stringListSubmit = controlsValidation.getDataCollectionString();
            stringListFiles = controlsValidation.getStringListFiles();
            //For Map Existing//
           /* stringListSubmit.addAll(mapExistingControlsValidation.getDataCollectionString());
            stringListFiles.addAll(mapExistingControlsValidation.getStringListFiles());*/
            //For Map Existing//
            tempList = new ArrayList<>();

            for (int i = 0; i < subFormFilesList.size(); i++) {
                for (int j = 0; j < subFormFilesList.get(i).size(); j++) {
                    for (int k = 0; k < subFormFilesList.get(i).get(j).size(); k++) {
                        tempList.add(subFormFilesList.get(i).get(j).get(k));
                    }
                }
            }
            ImproveHelper.improveLog(TAG, "formValidated  ", "Form Valid is : " + flag);
            ImproveHelper.improveLog(TAG, "form Data is : ", new Gson().toJson(tempList));
            Log.d(TAG, "formValidated: " + tempList.toString());

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "formValidated", e);
        }
        return flag;
    }

    public void sendDataToServer(JSONObject mainObject) {

        /*for (int i = 0; i <list_Control.size() ; i++) {
            if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_CALENDER)) {

                Log.d("CheckControlObjecthasValue", list_Control.get(i).getControlName() + " - " + list_Control.get(i).getSelectedDate());
            }else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_TIME)) {

                Log.d("CheckControlObjecthasValue", list_Control.get(i).getControlName() + " - " + list_Control.get(i).getSelectedTime());
            }else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_CHECKBOX)
                    || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_RADIO_BUTTON)
                    || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_DROP_DOWN)
                    || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_CHECK_LIST)) {
                Log.d("CheckControlObjecthasValue", list_Control.get(i).getControlName() + " - " + list_Control.get(i).isItemSelected()+ " - " + list_Control.get(i).getText() +" - "+ list_Control.get(i).getControlValue());
            }else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_VOICE_RECORDING)
                    || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_VIDEO_RECORDING)){
                Log.d("CheckControlObjecthasValue" ,list_Control.get(i).getControlName() +" - "+ list_Control.get(i).isItemSelected()+ " - " + list_Control.get(i).getText());
            }else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_GPS)){
                Log.d("CheckControlObjecthasValue" ,list_Control.get(i).getControlName() +" - "+ list_Control.get(i).getLatLngListItems() +" - "+ list_Control.get(i).getGpsType());
            }else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_MAP)){
                Log.d("CheckControlObjecthasValue" ,list_Control.get(i).getControlName() + " - " + list_Control.get(i).getText()+ " - " + list_Control.get(i).getMapViewType());
            }else{
                Log.d("CheckControlObjecthasValue" ,list_Control.get(i).getControlName() +" - "+list_Control.get(i).getText());
            }

        }*/

        try {
            ImproveHelper.improveLog(TAG, "sendDataToServer is : ", new Gson().toJson(mainObject));
            JsonParser jsonParser = new JsonParser();
            JsonObject jo = (JsonObject) jsonParser.parse(mainObject.toString());
            Log.d(TAG, "sendDataToServerJson: " + mainObject);
            Call<ResponseBody> call = null;
            if (app_edit != null && app_edit.equalsIgnoreCase("Edit")) {
                call = getServices.sendEditFormData(sessionManager.getAuthorizationTokenId(), jo);
            } else {
                call = getServices.sendFormData(sessionManager.getAuthorizationTokenId(), jo);
            }
//        dismissProgressDialog();
            call.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {

                    stringListSubmit.clear();
                    stringListFiles.clear();

                    try {
                        if (response.body() != null) {
                            ImproveHelper.fromMapExisting = false;
                            JSONObject jsonObject = new JSONObject(response.body().string());
                            ImproveHelper.improveLog(TAG, "sendDataToServerResponse is : ", new Gson().toJson(response.body()));
                            Log.d(TAG, "sendDataToServerResponse: " + jsonObject.get("Message"));
                            System.out.println("response.body().getMessage()===" + jsonObject.get("Message"));
                            String resultStatus = jsonObject.getString("Status");
                            String message = jsonObject.getString("Message");
                            if (AppConstants.GlobalObjects != null) {
                                AppConstants.GlobalObjects.setSubmitresponse_Status(resultStatus);
                                AppConstants.GlobalObjects.setSubmitresponse_Message(message);
                                if (jsonObject.has("Ref_AutoID") && jsonObject.getJSONArray("Ref_AutoID") != null) {
                                    AppConstants.GlobalObjects.setAutoIdsResponseArray(jsonObject.getJSONArray("Ref_AutoID"));
                                    System.out.println("response.body().getRef_AutoID()===" + jsonObject.getJSONArray("Ref_AutoID"));
                                }
                            }

                            if (resultStatus.equalsIgnoreCase("200")) {
                                defaultSubmitDone = true;
                                AppConstants.hasData = true;
//                                Toast.makeText(context, response.body().getMessage(), Toast.LENGTH_SHORT).show();
                                if (Defultaction_index == 0) {
                                    if (submitevent) {
                                        int j = ActionIndex;
                                        List<OrderByEvents_Object> list_OrderByEvents = getEventsByOrder(submit_control_EventObject);
                                        if (j >= list_OrderByEvents.size()) {
                                            submitevent = false;

                                            if (dataCollectionObject.isDefaultActionForSubmit()) {
                                                if (formValidated(list_Control)) {

                                                    if (dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                                                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                                        String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonSuccessMessage());

                                                        if (dataCollectionObject.getSubmitButtonMessageSuccess_DisplayType().equalsIgnoreCase("2")) {
                                                            ShowMessageDialogWithOk(context, Message, 1);
                                                        } else {
                                                            improveHelper.showMessage(context, Message);
                                                            dismissProgressDialog();
                                                            afterSync();
                                                        }

                                                    } else if (!dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                                                        dismissProgressDialog();
                                                        afterSync();
                                                    } else {
                                                        improveHelper.showMessage(context, message);
                                                        dismissProgressDialog();
                                                        afterSync();
                                                    }
                                                }
                                            }
                                        } else {

                                            if (dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                                                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                                String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonSuccessMessage());

                                                if (dataCollectionObject.getSubmitButtonMessageSuccess_DisplayType().equalsIgnoreCase("2")) {
                                                    ShowMessageDialogWithOk(context, Message, 0);
                                                } else {
                                                    improveHelper.showMessage(context, Message);
                                                }

                                            } else if (!dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {

                                            } else {
                                                improveHelper.showMessage(context, message);

                                            }
                                            nextEvent();
                                        }
                                    } else {
                                        if (dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                            String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonSuccessMessage());

                                            if (dataCollectionObject.getSubmitButtonMessageSuccess_DisplayType().equalsIgnoreCase("2")) {
                                                ShowMessageDialogWithOk(context, Message, 1);
                                            } else {
                                                improveHelper.showMessage(context, Message);
                                                dismissProgressDialog();
                                                afterSync();
                                            }

                                        } else if (dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                                            dismissProgressDialog();
                                            afterSync();
                                        } else {
                                            improveHelper.showMessage(context, message);
                                            dismissProgressDialog();
                                            afterSync();
                                        }

                                    }


                                } else {
                                    dismissProgressDialog();
                                    LiveTrack_Trans_ID = jsonObject.getString("Ref_TransID");
                                    LiveTracking LiveTracking = (LiveTracking) List_ControlClassObjects.get(LiveTracking_Controlname);
                                    LiveTracking.StartLiveTracking();
                                }

                            } else if (resultStatus.equalsIgnoreCase("100")) {
                                dismissProgressDialog();
                                if (dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonFailMessage());
                                    if (dataCollectionObject.getSubmitButtonMessageFail_DisplayType().equalsIgnoreCase("2")) {
                                        ShowMessageDialogWithOk(context, Message, 0);
                                    } else {
                                        improveHelper.showMessage(context, Message);
                                    }

                                } else if (!dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {
                                    improveHelper.showMessage(context, message);
                                } else {
                                    improveHelper.showMessage(context, message);
                                }
                            } else if (resultStatus.equalsIgnoreCase("104")) {
                                dismissProgressDialog();
                                if (dataCollectionObject.getTableSettingsObject().getErrorMessage() != null && !dataCollectionObject.getTableSettingsObject().getErrorMessage().equals("")) {
                                    improveHelper.showMessage(context, dataCollectionObject.getTableSettingsObject().getErrorMessage());
                                } else {
                                    if (dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {
                                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                        String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonFailMessage());
                                        if (dataCollectionObject.getSubmitButtonMessageFail_DisplayType().equalsIgnoreCase("2")) {
                                            ShowMessageDialogWithOk(context, Message, 0);
                                        } else if (!dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {

                                        } else {
                                            improveHelper.showMessage(context, Message);
                                        }

                                    } else if (!dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {
                                        improveHelper.showMessage(context, message);
                                    } else {
                                        improveHelper.showMessage(context, message);
                                    }
                                }
                            } else if (resultStatus.equalsIgnoreCase("500")) {
                                dismissProgressDialog();
                                if (dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonFailMessage());
                                    if (dataCollectionObject.getSubmitButtonMessageFail_DisplayType().equalsIgnoreCase("2")) {
                                        ShowMessageDialogWithOk(context, Message, 0);
                                    } else if (!dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {

                                    } else {
                                        improveHelper.showMessage(context, Message);
                                    }

                                } else if (!dataCollectionObject.isSubmitButtonFailMessageIsEnable()) {
                                    improveHelper.showMessage(context, message);
                                } else {
                                    improveHelper.showMessage(context, message);
                                }
                            } else {
                                improveHelper.showMessage(context, message);
                            }

                        } else {
                            dismissProgressDialog();
                            AppConstants.GlobalObjects.setSubmitresponse_Status("NA");
                            AppConstants.GlobalObjects.setSubmitresponse_Status("server data is null");
                            improveHelper.showMessage(context, "server data is null");
                        }

                    } catch (Exception e) {
                        dismissProgressDialog();
                        e.printStackTrace();
                    }

                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    Log.d(TAG, "sendDataToServerResponse: " + t);
                    ImproveHelper.improveLog(TAG, "sendDataToServerResponse in onFailure : ", t.toString());
                    dismissProgressDialog();
                    stringListSubmit.clear();
                }
            });
        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "sendDataToServer", e);
        }


    }

    public void clearFormEdit() {
        try {
            if (dataCollectionObject != null && dataCollectionObject.getDataManagementOptions() != null && (dataCollectionObject.getDataManagementOptions().isEnableViewData() || dataCollectionObject.getDataManagementOptions().isEnableEditData() || dataCollectionObject.getDataManagementOptions().isEnableDeleteData())) {
                DC_DEPENDENT_LIST.clear();
                DEPENDENT_DC_NAME.clear();
                Intent returnIntent = new Intent();
                setResult(BACK_TO_LIST_FLAG, returnIntent);
                finish();
            } else {
                if (IS_MULTI_FORM) {
                    Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                    startActivity(intent);
                    finish();
                } else if(DefultAPK){
                    Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                    startActivity(intent);
                    finish();
                } else {
                    finish();
                }
  /*              Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                if (strAppType.equalsIgnoreCase("Auto Reports")) {
                    intent.putExtra("NotifRefreshAppsList", "2");
                    startActivity(intent);
                    finish();
                } else if (strAppType.equalsIgnoreCase("child")) {
                    finish();
                } else {
                    intent.putExtra("NotifRefreshAppsList", "0");
                    startActivity(intent);
                    finish();
                }*/

            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "clearFormEdit", e);
        }
    }

    public void afterSync() {
        try {
            if (dataCollectionObject.getSubmit_ButtonExitType() != null && dataCollectionObject.getSubmit_ButtonExitType().equalsIgnoreCase(getString(R.string.no_clear))) {

            } else if (dataCollectionObject.getSubmit_ButtonExitType() != null && dataCollectionObject.getSubmit_ButtonExitType().equalsIgnoreCase(getString(R.string.only_clear))) {
                clearForm();
            } else if (dataCollectionObject.getSubmit_ButtonExitType() != null && dataCollectionObject.getSubmit_ButtonExitType().equalsIgnoreCase(getString(R.string.clear_and_exit))) {
                if ((getIntent().hasExtra("from") && getIntent().getStringExtra("from").contentEquals(AppConstants.TYPE_CALL_FORM) || IS_MULTI_FORM)) {

                    navigateBack();
                } else {
                    if (dataCollectionObject.getDataManagementOptions() != null && (dataCollectionObject.getDataManagementOptions().isEnableViewData() || dataCollectionObject.getDataManagementOptions().isEnableEditData() || dataCollectionObject.getDataManagementOptions().isEnableDeleteData())) {
                        DC_DEPENDENT_LIST.clear();
                        DEPENDENT_DC_NAME.clear();
                        Intent returnIntent = new Intent();
                        setResult(BACK_TO_LIST_FLAG, returnIntent);
                        finish();
                    } else if (getIntent().hasExtra("FromFlashScreen") &&
                            getIntent().getStringExtra("FromFlashScreen").equalsIgnoreCase(FromFlashScreen)) {
                        finish();
                    } else {
                        Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        if (strAppType.equalsIgnoreCase("Auto Reports")) {
                            intent.putExtra("NotifRefreshAppsList", "2");
                            startActivity(intent);
                            finish();
                        } else if (strAppType.equalsIgnoreCase("child")) {
                            finish();
                        } else {
                            intent.putExtra("NotifRefreshAppsList", "0");
                            startActivity(intent);
                            finish();
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "afterSync", e);
        }
    }

    public void alertDialogClear() {

        android.app.AlertDialog.Builder dialog = new android.app.AlertDialog.Builder(
                context);
        dialog.setTitle("");
        dialog.setMessage("Clear Form?");
        dialog.setPositiveButton(
                "YES",
                new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(
                            DialogInterface dialog,
                            int which) {

//                        clearForm();
                    }
                });

        dialog.setNegativeButton(
                "NO",
                new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(
                            DialogInterface dialog,
                            int which) {
                        dialog.cancel();
                    }
                });

        android.app.AlertDialog dialogConfirm = dialog.create();
        // show alert
        dialogConfirm.show();
        return;

    }

    private void clearForm() {
        try {

            if (getIntent().hasExtra("from") && getIntent().getStringExtra("from").contentEquals("Workspace")) {
                finish();
            } else {
                Intent intent = getIntent();
                overridePendingTransition(0, 0);
                intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                finish();
                overridePendingTransition(0, 0);
                startActivity(intent);
                /*if(dataCollectionObject!=null){
                    for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                    switch (temp_controlObj.getControlType()) {
                        case CONTROL_TYPE_TEXT_INPUT:
                            TextInput clearTextView = (TextInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            clearTextView.Clear();
                            break;
                        case CONTROL_TYPE_NUMERIC_INPUT:
                            NumericInput numverTextView = (NumericInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            numverTextView.Clear();
                            break;
                        case CONTROL_TYPE_PHONE:
                            Phone PhoneView = (Phone) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            PhoneView.Clear();
                            break;
                        case CONTROL_TYPE_EMAIL:
                            Email EmailView = (Email) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            EmailView.getCustomEditText().setText("");
                            break;
                        case CONTROL_TYPE_CAMERA:
                            Camera CameraView = (Camera) List_ControlClassObjects.get(temp_controlObj.getControlName());

                            Camera camera = new Camera(this, temp_controlObj, false, 0, "");
                            List_ControlClassObjects.put(temp_controlObj.getControlName(), camera);
                            ((LinearLayout) linearLayout.getChildAt(i)).removeAllViews();
                            ((LinearLayout) linearLayout.getChildAt(i)).addView(camera.getCameraView());

                            camera.getLLTapTextView().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();

                                    camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE);

                                    if (controlObject.isOnChangeEventExists()) {
                                        if (AppConstants.EventCallsFrom == 1) {
                                            AppConstants.GlobalObjects.setCurrent_GPS("");
                                            ChangeEvent(v);
                                        }
                                    }

                                }
                            });
                            camera.getReTake().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();

                                    camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE);

                                    if (controlObject.isOnChangeEventExists()) {
                                        if (AppConstants.EventCallsFrom == 1) {
                                            AppConstants.GlobalObjects.setCurrent_GPS("");
                                            ChangeEvent(v);
                                        }
                                    }
                                }
                            });
                            if (temp_controlObj.isOnChangeEventExists()) {
                                Control_EventObject onchange_control_EventObject = temp_controlObj.getOnChangeEventObject();
                                hash_Onchange_EventObjects.put(temp_controlObj.getControlName(), onchange_control_EventObject);
                            }

                            break;
                        case CONTROL_TYPE_LARGE_INPUT:
                            LargeInput LargeInputView = (LargeInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            LargeInputView.getCustomEditText().setText("");
                            break;
                        case CONTROL_TYPE_CHECKBOX:
                            Checkbox CheckBoxView = (Checkbox) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            LinearLayout cbview = CheckBoxView.getCheckbox();
                            for (int j = 0; j < cbview.getChildCount(); j++) {
                                CheckBox cb_main = (CheckBox) cbview.getChildAt(i);
                                cb_main.setChecked(false);
                            }
                            break;
                        case CONTROL_TYPE_FILE_BROWSING:
                            FileBrowsing FileBrowsingView = (FileBrowsing) List_ControlClassObjects.get(temp_controlObj.getControlName());

                            FileBrowsing Filebrowsing = new FileBrowsing(this, temp_controlObj);
                            List_ControlClassObjects.put(temp_controlObj.getControlName(), Filebrowsing);
                            ((LinearLayout) linearLayout.getChildAt(i)).removeAllViews();
                            ((LinearLayout) linearLayout.getChildAt(i)).addView(Filebrowsing.getFileBrowsingView());
                            break;
                        case CONTROL_TYPE_CALENDER:
                            Calendar CalendarView = (Calendar) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            CalendarView.Clear();
                            break;
                        case CONTROL_TYPE_AUDIO_PLAYER:
                            AudioPlayer AudioPlayerView = (AudioPlayer) List_ControlClassObjects.get(temp_controlObj.getControlName());

                            break;
                        case CONTROL_TYPE_VIDEO_PLAYER:
                            VideoPlayer VideoPlayerView = (VideoPlayer) List_ControlClassObjects.get(temp_controlObj.getControlName());

                            break;
                        case CONTROL_TYPE_PERCENTAGE:
                            Percentage PercentageView = (Percentage) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            PercentageView.Clear();
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView RadioGroupview = (RadioGroupView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            RadioGroupview.Clear();
                            break;
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown DropDownview = (DropDown) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            DropDownview.Clear();
                            break;
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList CheckListview = (CheckList) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            CheckListview.Clear();
                            break;
                        case CONTROL_TYPE_SIGNATURE:
                            SignatureView Signatureview = (SignatureView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Signatureview.Clear();
                            break;
                        case CONTROL_TYPE_URL_LINK:

                            break;
                        case CONTROL_TYPE_DECIMAL:
                            DecimalView Decimalview = (DecimalView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Decimalview.Clear();
                            break;
                        case CONTROL_TYPE_PASSWORD:
                            Password Passwordview = (Password) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Passwordview.Clear();
                            break;
                        case CONTROL_TYPE_CURRENCY:
                            Currency Currencyview = (Currency) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Currencyview.Clear();
                            break;
                        case CONTROL_TYPE_RATING:
                            Rating Ratingview = (Rating) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Ratingview.Clear();
                            break;
                        case CONTROL_TYPE_DATA:
                            DataControl dataControl = (DataControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            dataControl.clear();
                            break;
                    }

            }
                }*/
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "clearForm", e);
        }
    }

    public void loadControlsWithDesign(String designDetails) {
        try {
            /*Read xml from API*/
            System.out.println("=======Step 2===============");
            System.out.println("designDetails===" + designDetails);

            readXmlFromLocation = designDetails;

            if (readXmlFromLocation != null) {
//                readXmlFromLocation = ImproveHelper.readTxtFromXMl();

                /*Attaching the Control properties from specified XML*///
                if (strChildForm != null && strChildForm.equalsIgnoreCase("ChildForm")) {


                    dataCollectionObject = xmlHelper.XML_To_ChildFormObject(readXmlFromLocation);
                    AppConstants.CurrentAppObject = dataCollectionObject;
                } else {
//nk step
                    System.out.println("=======Step1===============");
//                     dataCollectionObject=AppConstants.CurrentAppObject;
//                    if(dataCollectionObject==null){
                    dataCollectionObject = xmlHelper.XML_To_DataCollectionObject(readXmlFromLocation.trim());
//                    }
                    if (getIntent() != null && getIntent().getSerializableExtra("dataManagementOptions") != null) {
                        DataManagementOptions dataManagementOptions = (DataManagementOptions) getIntent().getSerializableExtra("dataManagementOptions");
                        dataCollectionObject.setDataManagementOptions(dataManagementOptions);
                    }
                    if (getIntent() != null && getIntent().getSerializableExtra("visibilityManagementOptions") != null) {
                        visibilityManagementOptions = (VisibilityManagementOptions) getIntent().getSerializableExtra("visibilityManagementOptions");
                    }
                    tableName = getIntent().getStringExtra("tableName");
                    String subFormData = getIntent().getStringExtra("subFormDetails");
                    Gson gson = new Gson();
                    Type listType = new TypeToken<ArrayList<SubFormTableColumns>>() {
                    }.getType();
                    subFormDetails = gson.fromJson(subFormData, listType);

                }

                if (dataCollectionObject.getOnPreLoadEventObject() != null) {
                    if (AppConstants.GlobalObjects != null) {
                        AppConstants.GlobalObjects.setCurrent_GPS("");
                    }
                    FormPreLoad();
                } else {
                    frameLayout.setVisibility(View.VISIBLE);
                    frame_progress.setVisibility(View.GONE);

                    callafterFormPreLoad();
                }


            } else {
                dismissProgressDialog();
                Toast.makeText(context, "No Xml Design", Toast.LENGTH_SHORT).show();
            }

        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "loadControlsWithDesign", e);
        }
    }

    public int isEdgeToEdgeEnabled(Context context) {
        Resources resources = context.getResources();
        int resourceId = resources.getIdentifier("config_navBarInteractionMode", "integer", "android");
        if (resourceId > 0) {
            return resources.getInteger(resourceId);
        }

        return 0;
    }

    private void primaryLayoutData(UIPrimaryLayoutModelClass uiPrimaryLayoutModelClass, LinearLayout linearLayout) {


        if (uiPrimaryLayoutModelClass != null) {
            removeScrollViewPadding();

            setScreenType(uiPrimaryLayoutModelClass);

            UILayoutProperties primaryLayoutProperties = uiPrimaryLayoutModelClass.getPrimaryLayoutProperties();

            if (primaryLayoutProperties != null) {
                if (primaryLayoutProperties.isHideDefaultToolbar()) {
                    toolbar.setVisibility(View.GONE);
                    if (isScreenFit) {

                        int navH = getNavigationBarHeight();
//                        int navH = navigationBarHeight();
                        int staH = getStatusBarHeight();

                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            if (isEdgeToEdgeEnabled(context) == 0) {
                                // 99% sure there's a navigation bar

                                screenHeight = screenHeight - (navH + staH);// Sanjay

                                Log.d(TAG, "primaryLayoutDataCT: " + "NormalToolbar with  Buttons " + screenHeight + " " + toolbar.getHeight() + " " + navH + " " + staH);
//                                ImproveHelper.showToastAlert(context,"IsEdgetoEgde Defatult toolbar "+isEdgeToEdgeEnabled(context));
                            } else { //
                                // no navigation bar, unless it is enabled in the settings
                                screenHeight = screenHeight - (toolbar.getHeight() + navH + staH);
                                Log.d(TAG, "primaryLayoutDataCT: " + "NormalToolbar No  Buttons " + navH + " " + navH + " " + staH);
//                                ImproveHelper.showToastAlert(context,"IsEdgetoEgde Defatult toolbar "+isEdgeToEdgeEnabled(context));
                            }

                        } else {
                            Log.d(TAG, "primaryLayoutDataCT: " + "Below 10 :  " + toolbar.getHeight() + " " + navH + " " + staH);
                            screenHeight = screenHeight - (toolBarheight + staH);
                        }

                    }
                } else {
                    toolbar.setVisibility(View.VISIBLE);
                    if (isScreenFit) {


//                        int navH = getNavigationBarHeight();
                        int navH = navigationBarHeight();
                        int staH = getStatusBarHeight();
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            if (isEdgeToEdgeEnabled(context) == 0) {
                                // 99% sure there's a navigation bar

//                                screenHeight = screenHeight - (toolbar.getHeight() + navH + staH);// Sanjay
                                screenHeight = screenHeight - (toolbar.getMinimumHeight() + navH + staH);// Sanjay

                                Log.d(TAG, "primaryLayoutDataCT: " + "NormalToolbar with  Buttons " + screenHeight + " " + toolbar.getHeight() + " " + navH + " " + staH);
//                                ImproveHelper.showToastAlert(context,"IsEdgetoEgde Defatult toolbar "+isEdgeToEdgeEnabled(context));
                            } else { //
                                // no navigation bar, unless it is enabled in the settings
                                screenHeight = screenHeight - (toolbar.getMinimumHeight() + navH + staH);
                                Log.d(TAG, "primaryLayoutDataCT: " + "NormalToolbar No  Buttons " + navH + " " + navH + " " + staH);
//                                ImproveHelper.showToastAlert(context,"IsEdgetoEgde Defatult toolbar "+isEdgeToEdgeEnabled(context));
                            }

                        } else {
                            screenHeight = screenHeight - (toolBarheight + staH);
                        }

                    }
                }

                if (primaryLayoutProperties.getInsideAlignment() != null && !primaryLayoutProperties.getInsideAlignment().isEmpty()) {
                    if (primaryLayoutProperties.getInsideAlignment().equalsIgnoreCase(AppConstants.COMPARE_TOP)) {
                        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                        linearLayout.setGravity(Gravity.TOP);
                        linearLayout.setLayoutParams(layoutParams);
                    } else if (primaryLayoutProperties.getInsideAlignment().equalsIgnoreCase(AppConstants.COMPARE_BOTTOM)) {
                        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                        linearLayout.setGravity(Gravity.BOTTOM);
                        linearLayout.setLayoutParams(layoutParams);
                    } else if (primaryLayoutProperties.getInsideAlignment().equalsIgnoreCase(AppConstants.COMPARE_MIDDLE)) {
                        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                        linearLayout.setGravity(Gravity.CENTER);
                        linearLayout.setLayoutParams(layoutParams);
                    }
                } else {
                    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                    linearLayout.setGravity(Gravity.CENTER);
                    linearLayout.setLayoutParams(layoutParams);
                }


                GradientDrawable.Orientation gradientAlignment = null;
                setMarginToLinearLayout(linearLayout, pxToDP(primaryLayoutProperties.getMarginLeft()), pxToDP(primaryLayoutProperties.getMarginTop()),
                        pxToDP(primaryLayoutProperties.getMarginRight()), pxToDP(primaryLayoutProperties.getMarginBottom()), -1, -1);

                linearLayout.setPadding(pxToDP(primaryLayoutProperties.getPaddingLeft()), pxToDP(primaryLayoutProperties.getPaddingTop()),
                        pxToDP(primaryLayoutProperties.getPaddingRight()), pxToDP(primaryLayoutProperties.getPaddingBottom()));

                if (primaryLayoutProperties.getBackgroundType() != null && !primaryLayoutProperties.getBackgroundType().isEmpty()) {

                    if (primaryLayoutProperties.getBackgroundType().equalsIgnoreCase(AppConstants.COMPARE_IMAGE)) {
                        if (primaryLayoutProperties.getBackGroundImage().contains(AppConstants.COMPARE_HTTP)) {
                            imageLoader = com.nostra13.universalimageloader.core.ImageLoader.getInstance();
                            imageLoader.loadImage(primaryLayoutProperties.getBackGroundImage(), new SimpleImageLoadingListener() {
                                public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                                    super.onLoadingComplete(imageUri, view, loadedImage);
                                    linearLayout.setBackground(new BitmapDrawable(getResources(), loadedImage));
                                }
                            });
                        } else {
                            File imgFile = new File(primaryLayoutProperties.getBackGroundImage());
                            Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                            linearLayout.setBackground(new BitmapDrawable(getResources(), myBitmap));
                        }
                    } else if (primaryLayoutProperties.getBackgroundType() != null && primaryLayoutProperties.getBackgroundType().equalsIgnoreCase(getString(R.string.color))) {

                        if (primaryLayoutProperties.getColorType() != null && primaryLayoutProperties.getColorType().equalsIgnoreCase(getString(R.string.transparent))) {

                            linearLayout.setBackgroundColor(getResources().getColor(R.color.transparent_color));
                        } else if (primaryLayoutProperties.getColorType() != null && primaryLayoutProperties.getColorType().equalsIgnoreCase(getString(R.string.plain))) {
                            if (primaryLayoutProperties.getBackGroundColorHex() != null) {
                                linearLayout.setBackgroundColor(Color.parseColor(primaryLayoutProperties.getBackGroundColorHex()));
                            }
                        } else if (primaryLayoutProperties.getColorType() != null && primaryLayoutProperties.getColorType().equalsIgnoreCase(getString(R.string.gradient))) {
                            if (primaryLayoutProperties.getGradientType() != null && !primaryLayoutProperties.getGradientType().isEmpty()) {

                                if (primaryLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.top_to_bottom))) {
                                    gradientAlignment = GradientDrawable.Orientation.TOP_BOTTOM;
                                } else if (primaryLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.bottom_to_top))) {
                                    gradientAlignment = GradientDrawable.Orientation.BOTTOM_TOP;
                                } else if (primaryLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.left_to_right))) {
                                    gradientAlignment = GradientDrawable.Orientation.LEFT_RIGHT;
                                } else if (primaryLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.right_to_left))) {
                                    gradientAlignment = GradientDrawable.Orientation.RIGHT_LEFT;
                                }
                            }
                            String gradientOneColorHex = "#FFFFFF";
                            if (primaryLayoutProperties.getGradientOneColorHex() != null
                                    && !primaryLayoutProperties.getGradientOneColorHex().isEmpty()) {

                                gradientOneColorHex = primaryLayoutProperties.getGradientOneColorHex();

                            }
                            String gradientTwoColorHex = "#FFFFFF";
                            if (primaryLayoutProperties.getGradientTwoColorHex() != null
                                    && !primaryLayoutProperties.getGradientTwoColorHex().isEmpty()) {

                                gradientTwoColorHex = primaryLayoutProperties.getGradientTwoColorHex();

                            }

                            String borderColorHex = "#FFFFFF";
                            if (primaryLayoutProperties.getBorderColorHex() != null && !primaryLayoutProperties.getBorderColorHex().isEmpty()) {
                                borderColorHex = primaryLayoutProperties.getBorderColorHex();
                            }
                            int borderRadiusValue = 0;
                            if (primaryLayoutProperties.getBorderRadius() != null && !primaryLayoutProperties.getBorderRadius().isEmpty()) {
                                String borderRadius = primaryLayoutProperties.getBorderRadius();
                                borderRadiusValue = pxToDP(Integer.valueOf(borderRadius));

                            }
                            int borderStrokeValue = 0;
                            if (primaryLayoutProperties.getBorderStroke() != null && !primaryLayoutProperties.getBorderStroke().isEmpty()) {
                                String borderStroke = primaryLayoutProperties.getBorderStroke();
                                borderStrokeValue = pxToDP(Integer.valueOf(borderStroke));
                            }

                            GradientDrawable gd = new GradientDrawable(
                                    gradientAlignment,
                                    new int[]{Color.parseColor(gradientOneColorHex), Color.parseColor(gradientTwoColorHex)});
                            gd.setCornerRadius(borderRadiusValue);
                            gd.setStroke(borderStrokeValue, Color.parseColor(borderColorHex));
                            linearLayout.setBackground(gd);

                        }
                    }
                }
                // Sanjay
                List<LayoutProperties> layoutPropertiesList = uiPrimaryLayoutModelClass.getLayoutPropertiesList();

                if (layoutPropertiesList != null && layoutPropertiesList.size() > 0) {

                    //Inflate LayoutViews
                    for (int i = 0; i < layoutPropertiesList.size(); i++) {
                        //Inflate LayoutViews
                        UILayoutProperties uiLayoutProperties = layoutPropertiesList.get(i).getUiLayoutProperties();
                        MappingControlModel mappingControlLayout = layoutPropertiesList.get(i).getLayoutControl();
//                        ControlUIProperties controlUIProperties = mappingControlLayout.getControlUIProperties();
//                        addLayoutToPrimary(linearLayout, layoutPropertiesList.get(i), uiLayoutProperties, mappingControlLayout, controlUIProperties);
                        addLayoutToPrimary(linearLayout, layoutPropertiesList.get(i), uiLayoutProperties, mappingControlLayout);
                    }

                    if (dataCollectionObject.getOnLoadEventObject() != null) {
                        if (AppConstants.GlobalObjects != null) {
                            AppConstants.GlobalObjects.setCurrent_GPS("");
                        }

                        FormLoad();
                    } else {
                        dismissProgressDialog();

                        iv_loading.setVisibility(View.GONE);
                    }
                } else {
                    dismissProgressDialog();

                    iv_loading.setVisibility(View.GONE);
                }
            }
        }
    }

    private void removeScrollViewPadding() {
        uFScrollView.setPadding(0, 0, 0, 0);
    }

    public void showFileChooser(ControlObject loadControlObject, int resultCode) {


        Intent intent;
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            intent = new Intent(ACTION_PICK, EXTERNAL_CONTENT_URI);
        } else {
            intent = new Intent(ACTION_PICK, INTERNAL_CONTENT_URI);
        }
        if (loadControlObject.isEnableExtensions()) {
            List<String> extensionsListNames = loadControlObject.getExtensionsListNames();

            if (extensionsListNames != null && extensionsListNames.size() > 0) {
                List<String> changeExtensions = new ArrayList<>();
                String[] enabledExtensions = new String[extensionsListNames.size()];
                for (int i = 0; i < extensionsListNames.size(); i++) {
                    String extensionName = extensionsListNames.get(i);

                    if (extensionName.equalsIgnoreCase("DOC")) {
                        enabledExtensions[i] = AppConstants.DOC;
//            changeExtensions.add(AppConstants.DOC);
                    } else if (extensionName.equalsIgnoreCase("DOCX")) {
                        enabledExtensions[i] = AppConstants.DOCX;
//            changeExtensions.add(AppConstants.DOC);
                    } else if (extensionName.equalsIgnoreCase("PDF")) {
                        enabledExtensions[i] = AppConstants.PDF;
//            changeExtensions.add(AppConstants.PDF);
                    } else if (extensionName.equalsIgnoreCase("XLS")) {
                        enabledExtensions[i] = AppConstants.XLS;
//            changeExtensions.add(AppConstants.XLS);
                    } else if (extensionName.equalsIgnoreCase("MP3")) {
                        enabledExtensions[i] = AppConstants.MP3;
//            changeExtensions.add("audio/x-wav");
                    } else if (extensionName.equalsIgnoreCase("TXT")) {
                        enabledExtensions[i] = AppConstants.TEXT;
//            changeExtensions.add("text/plain");
                    } else if (extensionName.equalsIgnoreCase("JPEG")) {
                        enabledExtensions[i] = AppConstants.JPEG;
//            changeExtensions.add("image/*");
                    } else if (extensionName.equalsIgnoreCase("PNG")) {
                        enabledExtensions[i] = AppConstants.PNG;
//            changeExtensions.add("image/*");
                    } else if (extensionName.equalsIgnoreCase("MP4")) {
                        enabledExtensions[i] = AppConstants.VIDEO;
                        changeExtensions.add("video/*");
                    }
                }
 /*   String delim = "|";

    StringBuilder sb = new StringBuilder();

    int i = 0;
    while (i < changeExtensions.size() - 1)
    {
        sb.append(changeExtensions.get(i));
        sb.append(delim);
        i++;
    }
    sb.append(changeExtensions.get(i));
    String res = sb.toString();
    intent.setType(res);*/
                intent.putExtra(Intent.EXTRA_MIME_TYPES, enabledExtensions);
//    Log.d(TAG, "showFileChooserCheck: "+res);
            } else {
                ImproveHelper.showToast(context, loadControlObject.getFileExtensionError());
            }


        } else {
            intent.setType("*/*");
        }
        intent.setAction(Intent.ACTION_GET_CONTENT);
        intent.setAction(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.putExtra("return-data", true);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);


        //Intent intent = new Intent();
        // intent.setType("*/*");
        // intent.setType("application/pdf");
        //intent.setAction(Intent.ACTION_GET_CONTENT);
        startActivityForResult(Intent.createChooser(intent, "Choose a file"), resultCode);


    }

    public void loadControl(ControlObject loadControlObject, String controlType, LinearLayout ll_preViewContainer,
                            UILayoutProperties uiLayoutProperties, ControlUIProperties controlUIProperties,
                            int layoutHeight, Object editDataObj,boolean isPopup) {
        LinearLayout linearLayout = ll_preViewContainer;

//        linearLayout.removeAllViews();
//        linearLayout.addView(wizardOne.getWizardOneMainLayout());
        try {
            /*  if(!keepSession) {*/

            Log.d(TAG, "XmlHelperTextInput: " + controlType);
            if (!appLanguage.contentEquals("en") && loadControlObject.getTranslationsMappingObject() != null) {
           /* LinkedHashMap<String,String> map = loadControlObject.getTranslationsMap();
            loadControlObject.setDisplayName(map.get(appLanguage));*/
                LinkedHashMap<String, ControlObject> map = loadControlObject.getTranslationsMappingObject();
                ControlObject langObject = map.get(appLanguage);
                if (langObject != null) {
                    if (langObject.getDisplayName() != null && !langObject.getDisplayName().contentEquals("")) {
                        loadControlObject.setDisplayName(langObject.getDisplayName());
                    }
                    if (langObject.getHint() != null && !langObject.getHint().contentEquals("")) {
                        loadControlObject.setHint(langObject.getHint());
                    }
                    if (langObject.getValue() != null && !langObject.getValue().contentEquals("")) {
                        loadControlObject.setValue(langObject.getValue());
                    }
                    if (langObject.getMandatoryFieldError() != null && !langObject.getMandatoryFieldError().contentEquals("")) {
                        loadControlObject.setMandatoryFieldError(langObject.getMandatoryFieldError());
                    }
                    if (langObject.getUniqueFieldError() != null && !langObject.getUniqueFieldError().contentEquals("")) {
                        loadControlObject.setUniqueFieldError(langObject.getUniqueFieldError());
                    }
                    if (langObject.getUpperLimitErrorMesage() != null && !langObject.getUpperLimitErrorMesage().contentEquals("")) {
                        loadControlObject.setUpperLimitErrorMesage(langObject.getUpperLimitErrorMesage());
                    }
                    if (langObject.getLowerLimitErrorMesage() != null && !langObject.getLowerLimitErrorMesage().contentEquals("")) {
                        loadControlObject.setLowerLimitErrorMesage(langObject.getLowerLimitErrorMesage());
                    }
                    if (langObject.getCappingError() != null && !langObject.getCappingError().contentEquals("")) {
                        loadControlObject.setCappingError(langObject.getCappingError());
                    }

                    if (langObject.getMaxCharError() != null && !langObject.getMaxCharError().contentEquals("")) {
                        loadControlObject.setMaxCharError(langObject.getMaxCharError());
                    }
                    if (langObject.getMinCharError() != null && !langObject.getMinCharError().contentEquals("")) {
                        loadControlObject.setMinCharError(langObject.getMinCharError());
                    }
                    if (langObject.getMaxUploadError() != null && !langObject.getMaxUploadError().contentEquals("")) {
                        loadControlObject.setMaxUploadError(langObject.getMaxUploadError());
                    }
                    if (langObject.getMinUploadError() != null && !langObject.getMinUploadError().contentEquals("")) {
                        loadControlObject.setMinUploadError(langObject.getMinUploadError());
                    }
                    if (langObject.getBetweenStartAndEndDateError() != null && !langObject.getBetweenStartAndEndDateError().contentEquals("")) {
                        loadControlObject.setBetweenStartAndEndDateError(langObject.getBetweenStartAndEndDateError());
                    }

                    if (langObject.getBeforeCurrentDateError() != null && !langObject.getBeforeCurrentDateError().contentEquals("")) {
                        loadControlObject.setBeforeCurrentDateError(langObject.getBeforeCurrentDateError());
                    }
                    if (langObject.getAfterCurrentDateError() != null && !langObject.getAfterCurrentDateError().contentEquals("")) {
                        loadControlObject.setAfterCurrentDateError(langObject.getAfterCurrentDateError());
                    }

                    if (langObject.getMaximumDurationError() != null && !langObject.getMaximumDurationError().contentEquals("")) {
                        loadControlObject.setMaximumDurationError(langObject.getMaximumDurationError());
                    }
                    if (langObject.getMinimumDurationError() != null && !langObject.getMinimumDurationError().contentEquals("")) {
                        loadControlObject.setMinimumDurationError(langObject.getMinimumDurationError());
                    }

                    if (langObject.getMaxAmountError() != null && !langObject.getMaxAmountError().contentEquals("")) {
                        loadControlObject.setMaxAmountError(langObject.getMaxAmountError());
                    }
                    if (langObject.getMinAmountError() != null && !langObject.getMinAmountError().contentEquals("")) {
                        loadControlObject.setMinAmountError(langObject.getMinAmountError());
                    }

                    if (langObject.getMaximumRowsError() != null && !langObject.getMaximumRowsError().contentEquals("")) {
                        loadControlObject.setMaximumRowsError(langObject.getMaximumRowsError());
                    }
                    if (langObject.getMinimumRowsError() != null && !langObject.getMinimumRowsError().contentEquals("")) {
                        loadControlObject.setMinimumRowsError(langObject.getMinimumRowsError());
                    }

                    if (loadControlObject.getControlType().contentEquals(CONTROL_TYPE_DYNAMIC_LABEL) && loadControlObject.isMakeAsSection()) {
                        loadControlObject.setValue(langObject.getValue());
                    }


                    if (langObject.getItemsList() != null && langObject.getItemsList().size() > 0) {
                        loadControlObject.setItemsList(langObject.getItemsList());

                        List<String> items = new ArrayList<>();
                        for (int i = 0; i < loadControlObject.getItemsList().size(); i++) {

                            items.add(loadControlObject.getItemsList().get(i).getValue());
                        }
                        loadControlObject.setItems(items);
                    }
                }

            }
            if (!loadControlObject.isSectionControl()) {
                switch (controlType) {
                    case CONTROL_TYPE_TEXT_INPUT:
                        TextInput textInput;
                        if(isPopup){
                            textInput = (TextInput)List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            textInput = new TextInput(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), textInput);
                        }
//                        final TextInput textInput = new TextInput(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), textInput);
                        if (section == 0) {
                            linearLayout.addView(textInput.getTextInputView());
                        } else {
                            linearLayoutSection.addView(textInput.getTextInputView());
                        }
//                        TextInput finalTextInput = textInput;
                        if (loadControlObject.getDefaultValue() != null && !loadControlObject.getDefaultValue().isEmpty()) {
                            textInput.gettap_text().setVisibility(View.GONE); // taptext
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            if (loadControlObject.isReadFromBarcode()) {
                                textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_bar_code));

                                textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                        textInput.tQRBarCode();
                                    }
                                });
                            } else if (loadControlObject.isReadFromQRCode()) {
                                textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_qr_code));
                                textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                        textInput.tQRBarCode();
                                    }
                                });
                            } else if (loadControlObject.isVoiceText()) {
                                textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_voice_input));
                                textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                        textInput.getSpeechInput(true, REQUEST_SPEECH_TO_TEXT);
                                    }
                                });
                            } else if (loadControlObject.isCurrentLocation()) {
                                textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_current_location));
                                textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
//                                context.startActivityForResult(new Intent(context, GPSActivity.class), REQUEST_CURRENT_LOCATION);
                                        textInput.tCurrentLocation(REQUEST_CURRENT_LOCATION);
                                    }
                                });
                            } else if (loadControlObject.isGoogleLocationSearch()) {
                                textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_google_location_search));
                                textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                        textInput.initAutoCompleteTextView();
                                    }
                                });
                            }
//                    textInput.getCustomEditText().setVisibility(View.VISIBLE);
//                    textInput.getCustomEditText().setText(loadControlObject.getDefaultValue());
                        } else if (loadControlObject.isReadFromBarcode() && loadControlObject.getDefaultValue() != null && !loadControlObject.getDefaultValue().isEmpty()) {
                            textInput.gettap_text().setVisibility(View.GONE);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_bar_code));
                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tQRBarCode();
                                }
                            });
                        } else if (loadControlObject.isReadFromQRCode() && loadControlObject.getDefaultValue() != null && !loadControlObject.getDefaultValue().isEmpty()) {
                            textInput.gettap_text().setVisibility(View.GONE);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_qr_code));
                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tQRBarCode();
                                }
                            });
                        } else if (loadControlObject.isVoiceText() && loadControlObject.getDefaultValue() != null && !loadControlObject.getDefaultValue().isEmpty()) {
                            textInput.gettap_text().setVisibility(View.GONE);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_voice_input));
                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.getSpeechInput(true, REQUEST_SPEECH_TO_TEXT);
                                }
                            });
                        } else if (loadControlObject.isCurrentLocation() && loadControlObject.getDefaultValue() != null && !loadControlObject.getDefaultValue().isEmpty()) {
                            textInput.gettap_text().setVisibility(View.GONE);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_current_location));
                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tCurrentLocation(REQUEST_CURRENT_LOCATION);

                                }
                            });
                        } else if (loadControlObject.isReadFromBarcode()) {
                            textInput.getLl_tap_text().setVisibility(View.VISIBLE);
                            textInput.gettap_text().setVisibility(View.VISIBLE);
                            textInput.gettap_text().setText(R.string.tap_here_to_scan_bar_code);
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(ContextCompat.getDrawable(context, R.drawable.ic_icon_bar_code));
                            textInput.gettap_text().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tQRBarCode();
                                }
                            });
                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tQRBarCode();
                                }
                            });
                        } else if (loadControlObject.isReadFromQRCode()) {
                            textInput.getLl_tap_text().setVisibility(View.VISIBLE);
                            textInput.gettap_text().setVisibility(View.VISIBLE);
                            textInput.gettap_text().setText(R.string.tap_here_to_scan_qr_code);
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(context.getResources().getDrawable(R.drawable.icons_qrcode_drawable));
                            textInput.gettap_text().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tQRBarCode();
                                }
                            });
                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tQRBarCode();
                                }
                            });
                        } else if (loadControlObject.isVoiceText()) {
                            textInput.getLl_tap_text().setVisibility(View.VISIBLE);
                            textInput.gettap_text().setVisibility(View.VISIBLE);
                            textInput.gettap_text().setText("Tap here voice to text");
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(context.getResources().getDrawable(R.drawable.icons_voice_recording));

                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.getSpeechInput(false, REQUEST_SPEECH_TO_TEXT);

                                }
                            });
                            textInput.gettap_text().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.getSpeechInput(false, REQUEST_SPEECH_TO_TEXT);

                                }
                            });
                        } else if (loadControlObject.isCurrentLocation()) {
                            textInput.gettap_text().setText("Tap here to get Current Location");
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(context.getResources().getDrawable(R.drawable.ic_my_location_black_24dp));
                            textInput.gettap_text().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.tCurrentLocation(REQUEST_CURRENT_LOCATION);
                                }
                            });
                        } else if (loadControlObject.isGoogleLocationSearch()) {

                            textInput.gettap_text().setText("Tap here to Search Location");
                            textInput.getIv_textTypeImage().setVisibility(View.VISIBLE);
                            textInput.getIv_textTypeImage().setImageDrawable(context.getResources().getDrawable(R.drawable.ic_current_location));

                            textInput.setDefaultValueForSearch();

                            textInput.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    textInput.initAutoCompleteTextView();

//                    googleSearchPlaces(v);
                                }
                            });
                        }


                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();
                        }

                        break;
                    case CONTROL_TYPE_NUMERIC_INPUT:
                        NumericInput numericInput;
                        if(isPopup){
                            numericInput = (NumericInput) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            numericInput = new NumericInput(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), numericInput);
                        }
//                        NumericInput numericInput = new NumericInput(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), numericInput);


                        if (section == 0) {
                            linearLayout.addView(numericInput.getNumericInputView());
                        } else {

                            linearLayoutSection.addView(numericInput.getNumericInputView());
                        }
//
                        if (loadControlObject.isInvisible()) {
                            numericInput.getNumericInputView().setVisibility(View.GONE);
                        } else {
                            numericInput.getNumericInputView().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        /*if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
                            if (linearLayout.getChildCount() == 1) {
                                linearLayout.getChildAt(0).setLayoutParams(params);
                            } else {
                                linearLayout.getChildAt(2).setLayoutParams(params);
                            }
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                            numericInput.getLl_main_inside().setLayoutParams(params);

                        }*/
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }
//                        controlAlignments(AppConstants.uiLayoutPropertiesStatic, numericInput.getLl_main_inside());

                        break;
                    case CONTROL_TYPE_PHONE:
                        Phone phone;
                        if(isPopup){
                            phone = (Phone) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            phone = new Phone(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), phone);
                        }

//                        Phone phone = new Phone(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), phone);

                        if (section == 0) {
                            linearLayout.addView(phone.getPhoneView());
                        } else {
                            linearLayoutSection.addView(phone.getPhoneView());
                        }
                        if (loadControlObject.isInvisible()) {
                            phone.getPhoneView().setVisibility(View.GONE);
                        } else {
                            phone.getPhoneView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }

                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_EMAIL:
                        Email email;
                        if(isPopup){
                            email = (Email)List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            email = new Email(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), email);
                        }

                        if (section == 0) {
                            linearLayout.addView(email.getEmailView());
                        } else {
                            linearLayoutSection.addView(email.getEmailView());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_CAMERA:
//                        final Camera camera = new Camera(this, loadControlObject, false, 0, "");
//                        final Camera camera = new Camera(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), camera);
                        final Camera camera;
                        if(isPopup){
                            camera = (Camera) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            camera = new Camera(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), camera);
                        }
                        if (section == 0) {
                            linearLayout.addView(camera.getCameraView());
                        } else {
                            linearLayoutSection.addView(camera.getCameraView());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        boolean isMultiClickable = true;
                        LinearLayout bottom_sheet = activityView.findViewById(R.id.bottom_sheet);
                        BottomSheetBehavior sheetBehavior = BottomSheetBehavior.from(bottom_sheet);
                        sheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);

                        camera.getFileNameTextView().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
//                                ImproveHelper.showHideBottomSheet(sheetBehavior);
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
//                                camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE);
                                camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE, activityView);

                                if (controlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }

                            }
                        });
                        camera.getLLTapTextView().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
//                                ImproveHelper.showHideBottomSheet(sheetBehavior);
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
//                                camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE);
                                camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE, activityView);

                                if (controlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }

                            }
                        });
                        camera.getReTake().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
//                                ImproveHelper.showHideBottomSheet(sheetBehavior);
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
//                                camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE);
                                camera.getCameraClickView(REQUEST_CAMERA_CONTROL_CODE, activityView);

                                if (controlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }
                            }
                        });

                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_LARGE_INPUT:
//                        LargeInput largeInput = new LargeInput(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), largeInput);
                        final LargeInput largeInput;
                        if(isPopup){
                            largeInput = (LargeInput) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            largeInput = new LargeInput(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), largeInput);
                        }


                    /*if (dataCollectionObject.isUIFormNeeded() && ll_preViewContainer != null) {
//                    ScrollView scrollView = new ScrollView(context);
//                    scrollView.addView(largeInput.getLargeInputView());
                        ll_preViewContainer.addView(largeInput.getLargeInputView());
                    } else */
                        if (section == 0) {
                            linearLayout.addView(largeInput.getLargeInputView());
                        } else {
                            linearLayoutSection.addView(largeInput.getLargeInputView());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        //largeInput.getLargeInputView().setVisibility(View.VISIBLE);
                        break;
                    case CONTROL_TYPE_CHECKBOX:
//                        Checkbox checkbox = new Checkbox(context, loadControlObject, false, 0, "");
//                        Checkbox checkbox = new Checkbox(context, loadControlObject, false, 0, "", dataCollectionObject, controlUIProperties);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), checkbox);
                        Checkbox checkbox;
                        if(isPopup){
                            checkbox = (Checkbox) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            checkbox = new Checkbox(context, loadControlObject, false, 0, "", dataCollectionObject, controlUIProperties);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), checkbox);
                        }

                        if (section == 0) {
                            linearLayout.addView(checkbox.getCheckbox());
                        } else {
                            linearLayoutSection.addView(checkbox.getCheckbox());
                        }
                        if (loadControlObject.isInvisible()) {
                            checkbox.getCheckbox().setVisibility(View.GONE);
                        } else {
                            checkbox.getCheckbox().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }

                        controlAlignments(AppConstants.uiLayoutPropertiesStatic, checkbox.getLl_main_inside());
                        break;
                    case CONTROL_TYPE_FILE_BROWSING:
//                        FileBrowsing fileBrowsing = new FileBrowsing(context, loadControlObject);
//                        FileBrowsing fileBrowsing = new FileBrowsing(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), fileBrowsing);
                        FileBrowsing fileBrowsing;
                        if(isPopup){
                            fileBrowsing = (FileBrowsing) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            fileBrowsing = new FileBrowsing(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), fileBrowsing);
                        }

                        if (section == 0) {
                            linearLayout.addView(fileBrowsing.getFileBrowsingView());
                        } else {
                            linearLayoutSection.addView(fileBrowsing.getFileBrowsingView());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        fileBrowsing.getFileBrowseImage().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                if (loadControlObject.isSectionControl()) {
                                    fileBrowsing.onClick(v, SECTION_FILE_BROWSER_RESULT_CODE);
                                } else {
                                    fileBrowsing.onClick(v, FILE_BROWSER_RESULT_CODE);
                                }
                                /*Intent intent = new Intent(MainActivity.this, FilePicker.class);
                                ArrayList<String> extensions = new ArrayList<>();
                                if (controlObject.isEnableExtensions()) {
                                    for (int i = 0; i < controlObject.getExtensionsListNames().size(); i++) {
                                        extensions.add("." + controlObject.getExtensionsListNames().get(i).toLowerCase());
                                    }
                                    intent.putStringArrayListExtra(FilePicker.EXTRA_ACCEPTED_FILE_EXTENSIONS, extensions);
                                }

                                startActivityForResult(intent, FILE_BROWSER_RESULT_CODE);

                                if (controlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }
//                        CustomTextView ct_alertTypeFileBrowser = view.findViewById(R.id.ct_alertTypeText);
                                fileBrowsing.setAlertFileBrowser().setVisibility(View.GONE);
                                fileBrowsing.setAlertFileBrowser().setText("");*/
                            }
                        });

                        fileBrowsing.getTapTextView().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //nk: ScannerOrFileManager
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
//                            startActivityForResult(new Intent(MainActivity.this, FilePicker.class), FILE_BROWSER_RESULT_CODE);

                                if (loadControlObject.isSectionControl()) {
                                    fileBrowsing.onClick(v, SECTION_FILE_BROWSER_RESULT_CODE);
                                } else {
                                    fileBrowsing.onClick(v, FILE_BROWSER_RESULT_CODE);
                                }
/*
                                if (loadControlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }
//                        CustomTextView ct_alertTypeFileBrowser = view.findViewById(R.id.ct_alertTypeText);
                                fileBrowsing.setAlertFileBrowser().setVisibility(View.GONE);
                                fileBrowsing.setAlertFileBrowser().setText("");

                                if (loadControlObject.isEnableScan()) {
                                    Intent intentDocScanner = new Intent(MainActivity.this, DocumentScannerActivity.class);
                                    startActivityForResult(intentDocScanner, REQUEST_DOCUMENT_SCANNER);
                                } else {
                                    //nk pending
                                    showFileChooser(loadControlObject);

//                                Intent intent = new Intent(MainActivity.this, FilePicker.class);
//                                ArrayList<String> extensions = new ArrayList<>();
//                                if (loadControlObject.isEnableExtensions()) {
//                                    for (int i = 0; i < loadControlObject.getExtensionsListNames().size(); i++) {
//                                        extensions.add("." + loadControlObject.getExtensionsListNames().get(i).toLowerCase());
//                                    }
//                                    intent.putStringArrayListExtra(FilePicker.EXTRA_ACCEPTED_FILE_EXTENSIONS, extensions);
//                                }
//
//                                startActivityForResult(intent, FILE_BROWSER_RESULT_CODE);
                                }*/


                            }
                        });
                        fileBrowsing.getTapTextViewLayout().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                //nk: ScannerOrFileManager
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
//                            startActivityForResult(new Intent(MainActivity.this, FilePicker.class), FILE_BROWSER_RESULT_CODE);

                                if (loadControlObject.isSectionControl()) {
                                    fileBrowsing.onClick(v, SECTION_FILE_BROWSER_RESULT_CODE);
                                } else {
                                    fileBrowsing.onClick(v, FILE_BROWSER_RESULT_CODE);
                                }
/*
                                if (loadControlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }
//                        CustomTextView ct_alertTypeFileBrowser = view.findViewById(R.id.ct_alertTypeText);
                                fileBrowsing.setAlertFileBrowser().setVisibility(View.GONE);
                                fileBrowsing.setAlertFileBrowser().setText("");

                                if (loadControlObject.isEnableScan()) {
                                    Intent intentDocScanner = new Intent(MainActivity.this, DocumentScannerActivity.class);
                                    startActivityForResult(intentDocScanner, REQUEST_DOCUMENT_SCANNER);
                                } else {
                                    //nk pending
                                    showFileChooser(loadControlObject);

//                                Intent intent = new Intent(MainActivity.this, FilePicker.class);
//                                ArrayList<String> extensions = new ArrayList<>();
//                                if (loadControlObject.isEnableExtensions()) {
//                                    for (int i = 0; i < loadControlObject.getExtensionsListNames().size(); i++) {
//                                        extensions.add("." + loadControlObject.getExtensionsListNames().get(i).toLowerCase());
//                                    }
//                                    intent.putStringArrayListExtra(FilePicker.EXTRA_ACCEPTED_FILE_EXTENSIONS, extensions);
//                                }
//
//                                startActivityForResult(intent, FILE_BROWSER_RESULT_CODE);
                                }*/


                            }
                        });

                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }
                        break;
                    case CONTROL_TYPE_VOICE_RECORDING:
//                        final VoiceRecording voiceRecording = new VoiceRecording(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), voiceRecording);
                        VoiceRecording voiceRecording;
                        if(isPopup){
                            voiceRecording = (VoiceRecording) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            voiceRecording = new VoiceRecording(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), voiceRecording);
                        }

                        final CountDownTimer[] yourCountDownTimer = new CountDownTimer[1];
                        final long[] MILLI_SEC = new long[1];
                        final long[] millis = new long[1];

                        if (section == 0) {
                            linearLayout.addView(voiceRecording.getVoiceRecordingView());
                        } else {
                            linearLayoutSection.addView(voiceRecording.getVoiceRecordingView());
                        }
                        if (loadControlObject.isInvisible()) {
                            voiceRecording.getVoiceRecordingView().setVisibility(View.GONE);
                        } else {
                            voiceRecording.getVoiceRecordingView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (voiceRecording.startRecordingClick() != null) {
                            voiceRecording.startRecordingClick().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    if (loadControlObject.isEnableVoiceMaximumDuration() && loadControlObject.getVoiceMaximumDuration() != null) {
                                        String maxDuration = "0";
                                        if (loadControlObject.getVoiceMaximumDuration().contains(".")) {
                                            if (loadControlObject.getVoiceMaximumDuration().startsWith(".")) {
                                                maxDuration = "0" + loadControlObject.getVoiceMaximumDuration();
                                            } else {
                                                maxDuration = loadControlObject.getVoiceMaximumDuration();
                                            }
                                        } else {
                                            maxDuration = loadControlObject.getVoiceMaximumDuration() + ".0";
                                        }
                                        int bD = Integer.parseInt(maxDuration.split("\\.")[0]);
                                        int aD = Integer.parseInt(maxDuration.split("\\.")[1].substring(0, 1));
                                        int afterDecimal = aD * 6;

                                        MILLI_SEC[0] = bD * 60000 + afterDecimal * 1000;

                                    } else {
                                        MILLI_SEC[0] = 3600000;
                                    }
                                    voiceRecording.getStartVoiceRecording();


                                    yourCountDownTimer[0] = new CountDownTimer(MILLI_SEC[0], 1000) { // adjust the milli seconds here

                                        public void onTick(long millisUntilFinished) {
                                            millis[0] = millisUntilFinished;
                                            Log.d(TAG, "onTickVoiceRecodingTime: " + String.format("%02d:%02d",
                                                    TimeUnit.MILLISECONDS.toMinutes(millisUntilFinished),
                                                    TimeUnit.MILLISECONDS.toSeconds(millisUntilFinished) -
                                                            TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millisUntilFinished))));

                                        }

                                        public void onFinish() {

                                            voiceRecording.getStopVoiceRecording();

                                        }
                                    }.start();

                                }
                            });
                        }
                        if (voiceRecording.getVoiceRecordingClick() != null) {
                            voiceRecording.getVoiceRecordingClick().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    int recorderState = voiceRecording.getRecorderState();
                                    if (recorderState == 0) {

                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                        if (loadControlObject.isEnableVoiceMaximumDuration() && loadControlObject.getVoiceMaximumDuration() != null) {
                                            String maxDuration = "0";
                                            if (loadControlObject.getVoiceMaximumDuration().contains(".")) {
                                                if (loadControlObject.getVoiceMaximumDuration().startsWith(".")) {
                                                    maxDuration = "0" + loadControlObject.getVoiceMaximumDuration();
                                                } else {
                                                    maxDuration = loadControlObject.getVoiceMaximumDuration();
                                                }
                                            } else {
                                                maxDuration = loadControlObject.getVoiceMaximumDuration() + ".0";
                                            }
                                            int bD = Integer.parseInt(maxDuration.split("\\.")[0]);
                                            int aD = Integer.parseInt(maxDuration.split("\\.")[1].substring(0, 1));
                                            int afterDecimal = aD * 6;

                                            MILLI_SEC[0] = bD * 60000 + afterDecimal * 1000;

                                        } else {
                                            MILLI_SEC[0] = 3600000;
                                        }
                                        voiceRecording.getStartVoiceRecording();


                                        yourCountDownTimer[0] = new CountDownTimer(MILLI_SEC[0], 1000) { // adjust the milli seconds here

                                            public void onTick(long millisUntilFinished) {
                                                millis[0] = millisUntilFinished;
                                                Log.d(TAG, "onTickVoiceRecodingTime: " + String.format("%02d:%02d",
                                                        TimeUnit.MILLISECONDS.toMinutes(millisUntilFinished),
                                                        TimeUnit.MILLISECONDS.toSeconds(millisUntilFinished) -
                                                                TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millisUntilFinished))));

                                            }

                                            public void onFinish() {

                                                voiceRecording.getStopVoiceRecording();

                                            }
                                        }.start();
                                    } else if (recorderState == 1) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();

                                        if (loadControlObject.isEnableVoiceMinimumDuration() && loadControlObject.getVoiceMinimumDuration() != null) {
                                            long lMillis = MILLI_SEC[0] - millis[0];

                                            String minDuration = "0.0";
                                            if (loadControlObject.getVoiceMinimumDuration().contains(".")) {
                                                if (loadControlObject.getVoiceMinimumDuration().startsWith(".")) {
                                                    minDuration = "0" + loadControlObject.getVoiceMinimumDuration();
                                                } else {
                                                    minDuration = loadControlObject.getVoiceMinimumDuration();
                                                }
                                            } else {
                                                minDuration = loadControlObject.getVoiceMinimumDuration() + ".0";
                                            }
                                            int beforeDecimal = Integer.parseInt(minDuration.split("\\.")[0]);
                                            int aD = Integer.parseInt(minDuration.split("\\.")[1].substring(0, 1));
                                            int afterDecimal = aD * 6;
                                            long minDurationInMills = beforeDecimal * 60000 + afterDecimal * 1000;

                                            if (lMillis >= minDurationInMills) {
                                                voiceRecording.getStopVoiceRecording();
                                                yourCountDownTimer[0].cancel();
                                            } else {
                                                showToast(context, loadControlObject.getMinimumDurationError());
                                            }

                                        } else {
                                            voiceRecording.getStopVoiceRecording();
                                            yourCountDownTimer[0].cancel();
                                        }
                                    } else if (recorderState == 2) {
                                        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                        voiceRecording.getPlayViewVoiceRecording();
                                    }
                                }
                            });
                        }
                       /* voiceRecording.getImageViewPlay().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                voiceRecording.getPlayViewVoiceRecording();
                            }
                        });

                        voiceRecording.getImageViewStop().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                voiceRecording.getStopViewVoiceRecording();
                            }
                        });*/
                        if (voiceRecording.getLayoutAudioFileUpload() != null) {
                            voiceRecording.getLayoutAudioFileUpload().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    if (loadControlObject.isSectionControl()) {
                                        voiceRecording.getVoiceUploadFile(v, SECTION_REQ_CODE_PICK_VOICE_REC);
                                    } else {
                                        voiceRecording.getVoiceUploadFile(v, REQ_CODE_PICK_VOICE_REC);
                                    }
                                }
                            });
                        }

                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_VIDEO_RECORDING:
//                        final VideoRecording videoRecording = new VideoRecording(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), videoRecording);
                        VideoRecording videoRecording;
                        if(isPopup){
                            videoRecording = (VideoRecording) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            videoRecording = new VideoRecording(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), videoRecording);
                        }

                        if (section == 0) {
                            linearLayout.addView(videoRecording.getVideoRecorderView());
                        } else {
                            linearLayoutSection.addView(videoRecording.getVideoRecorderView());
                        }
                        if (loadControlObject.isInvisible()) {
                            videoRecording.getVideoRecorderView().setVisibility(View.GONE);
                        } else {
                            videoRecording.getVideoRecorderView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (videoRecording.getTv_startVideoRecorder() != null) {
                            videoRecording.getTv_startVideoRecorder().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    videoRecording.getStartVideoRecorderClick(activityView, REQUEST_VIDEO_RECORDING, REQ_CODE_PICK_ONLY_VIDEO_FILE);

                                }
                            });
                        }
                        if (videoRecording.getIv_textTypeImage() != null) {
                            videoRecording.getIv_textTypeImage().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    videoRecording.getStartVideoRecorderClick(activityView, REQUEST_VIDEO_RECORDING, REQ_CODE_PICK_ONLY_VIDEO_FILE);

                                }
                            });
                        }

                       /* videoRecording.getTv_videoFileUpload().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                videoRecording.getVideoUploadFile(v, REQ_CODE_PICK_ONLY_VIDEO_FILE);
                            }
                        });*/


                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_SIGNATURE:
//                        final SignatureView signature = new SignatureView(this, loadControlObject);
//                        SignatureView signature = new SignatureView(this, loadControlObject);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), signature);
                        SignatureView signature;
                        if(isPopup){
                            signature = (SignatureView) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            signature = new SignatureView(this, loadControlObject);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), signature);
                        }
                        if (section == 0) {
                            linearLayout.addView(signature.getSignature());
                        } else {
                            linearLayoutSection.addView(signature.getSignature());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        /*Clear Signature*/
                        signature.getTv_clearSignature().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                if (controlObject.isOnChangeEventExists()) {
                                    if (AppConstants.EventCallsFrom == 1) {
                                        AppConstants.GlobalObjects.setCurrent_GPS("");
                                        ChangeEvent(v);
                                    }
                                }
                                signature.getClearSignature();
                            }
                        });
                        if (signature.getLayoutUpload() != null) {
                            signature.getLayoutUpload().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
//                                    StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
//                                    StrictMode.setVmPolicy(builder.build());
                                    signature.setAlertSignature().setVisibility(View.GONE);
                                    signature.getLl_gallery().setVisibility(View.VISIBLE);
//                                    signature.getLayoutUpload().setBackground(ContextCompat.getDrawable(context, R.drawable.circular_bg_default));
                                    AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();
                                    if (controlObject.isOnChangeEventExists() && !AppConstants.Initialize_Flag) {
                                        if (AppConstants.EventCallsFrom == 1) {
                                            AppConstants.GlobalObjects.setCurrent_GPS("");
                                            ((MainActivity) context).ChangeEvent(v);
                                        }
                                    }
                                    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                                    startActivityForResult(intent, REQUEST_SIGNATURE_CONTROL_CODE);


                                }
                            });
                        }

                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;

                    case CONTROL_TYPE_CALENDER:
                        /*Calendar calendar = new Calendar(context, loadControlObject, false, 0, "");
                        List_ControlClassObjects.put(loadControlObject.getControlName(), calendar);


                        if (section == 0) {
                            linearLayout.addView(calendar.getCalnderView());
                        } else {
                            linearLayoutSection.addView(calendar.getCalnderView());
                        }
                        if (loadControlObject.isInvisible()) {
                            calendar.getCalnderView().setVisibility(View.GONE);
                        } else {
                            calendar.getCalnderView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }*/
//                        Calendar calendar = new Calendar(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), calendar);
                        Calendar calendar;
                        if(isPopup){
                            calendar = (Calendar) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            calendar = new Calendar(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), calendar);
                        }

                        if (section == 0) {
                            linearLayout.addView(calendar.getCalnderView());
                        } else {
                            linearLayoutSection.addView(calendar.getCalnderView());
                        }
                        if (loadControlObject.isInvisible()) {
                            calendar.getCalnderView().setVisibility(View.GONE);
                        } else {
                            calendar.getCalnderView().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;

                    case CONTROL_TYPE_AUDIO_PLAYER:
//                        AudioPlayer audioPlayer_ = new AudioPlayer(context, loadControlObject, false, 0, "");
//                        audioPlayerList.add(audioPlayer_);
                        AudioPlayer audioPlayer_;
                        if(isPopup){
                            audioPlayer_ = (AudioPlayer) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            audioPlayer_ = new AudioPlayer(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), audioPlayer_);
                        }
                        List_ControlClassObjects.put(loadControlObject.getControlName(), audioPlayer_);
                        if (section == 0) {
                            linearLayout.addView(audioPlayer_.getAudioPlayerView());
                        } else {
                            linearLayoutSection.addView(audioPlayer_.getAudioPlayerView());
                        }
                        if (loadControlObject.isInvisible()) {
                            audioPlayer_.getAudioPlayerView().setVisibility(View.GONE);
                        } else {
                            audioPlayer_.getAudioPlayerView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_VIDEO_PLAYER:
//                    uFScrollView.fullScroll(ScrollView.FOCUS_UP);
//                        VideoPlayer videoPlayer = new VideoPlayer(context, loadControlObject, false, 0, "");
//                        VideoPlayer videoPlayer = new VideoPlayer(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), videoPlayer);
                        VideoPlayer videoPlayer;
                        if(isPopup){
                            videoPlayer = (VideoPlayer) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            videoPlayer = new VideoPlayer(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), videoPlayer);
                        }
                        if (section == 0) {
                            linearLayout.addView(videoPlayer.getVideoPlayerView());
                        } else {
                            linearLayoutSection.addView(videoPlayer.getVideoPlayerView());
                        }
                        if (loadControlObject.isInvisible()) {
                            videoPlayer.getVideoPlayerView().setVisibility(View.GONE);
                        } else {
                            videoPlayer.getVideoPlayerView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }


                        break;
                    case CONTROL_TYPE_PERCENTAGE:
//                        Percentage percentage = new Percentage(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), percentage);
                        Percentage percentage;
                        if(isPopup){
                            percentage = (Percentage) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            percentage = new Percentage(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), percentage);
                        }

                        if (section == 0) {
                            linearLayout.addView(percentage.getPercentageView());
                        } else {
                            linearLayoutSection.addView(percentage.getPercentageView());
                        }

                        if (loadControlObject.isInvisible()) {
                            percentage.getPercentageView().setVisibility(View.GONE);
                        } else {
                            percentage.getPercentageView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_RADIO_BUTTON:
//                        RadioGroupView radioGroup = new RadioGroupView(context, loadControlObject, false, 0, "");
//                        RadioGroupView radioGroup = new RadioGroupView(context, loadControlObject, false, 0, "", dataCollectionObject, controlUIProperties);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), radioGroup);
                        RadioGroupView radioGroup;
                        if(isPopup){
                            radioGroup = (RadioGroupView) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            radioGroup = new RadioGroupView(context, loadControlObject, false, 0, "", dataCollectionObject, controlUIProperties);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), radioGroup);
                        }

                        if (section == 0) {
                            linearLayout.addView(radioGroup.getRadioGroupView());
                        } else {
                            linearLayoutSection.addView(radioGroup.getRadioGroupView());
                        }

                        if (loadControlObject.isInvisible()) {
                            radioGroup.getRadioGroupView().setVisibility(View.GONE);
                        } else {
                            radioGroup.getRadioGroupView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                radioGroup.getRadioGroupView().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        controlAlignments(AppConstants.uiLayoutPropertiesStatic, radioGroup.getLl_main_inside());
                        break;
                    case CONTROL_TYPE_DROP_DOWN:
//                        DropDown dropDown = new DropDown(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), dropDown);
                        DropDown dropDown;
                        if(isPopup){
                            dropDown = (DropDown) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            dropDown = new DropDown(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), dropDown);
                        }

                        if (section == 0) {
                            linearLayout.addView(dropDown.getDropdown());
                        } else {
                            linearLayoutSection.addView(dropDown.getDropdown());
                        }

                        if (loadControlObject.isInvisible()) {
                            dropDown.getDropdown().setVisibility(View.GONE);
                        } else {
                            dropDown.getDropdown().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                dropDown.getDropdown().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();
                        }


                        break;
                    case CONTROL_TYPE_CHECK_LIST:
                        AppConstants.hasCheckList = true;
                        try {
                            JSONObject checkListJsonObject = new JSONObject();
                            checkListJsonObject.put("ColumnName", loadControlObject.getControlName());
                            checkListJsonObject.put("InsertType", loadControlObject.getRowSelectionType());
                            AppConstants.checkListData.put(checkListJsonObject);
                        } catch (Exception e) {
                        }
//                        CheckList checkList = new CheckList(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), checkList);
                        CheckList checkList = null;
                        if(isPopup){
                            checkList = (CheckList) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            checkList = new CheckList(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), checkList);
                        }

                        if (section == 0) {
                            linearLayout.addView(checkList.getCheckList());
                        } else {
                            linearLayoutSection.addView(checkList.getCheckList());
                        }

                        if (loadControlObject.isInvisible()) {
                            checkList.getCheckList().setVisibility(View.GONE);
                        } else {
                            checkList.getCheckList().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                checkList.getCheckList().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }
                        break;
                    case CONTROL_TYPE_URL_LINK:
//                        UrlView urlView = new UrlView(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), urlView);
                        UrlView urlView = null;
                        if(isPopup){
                            urlView = (UrlView) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            urlView = new UrlView(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), urlView);
                        }

                        if (section == 0) {
                            linearLayout.addView(urlView.getURL());
                        } else {
                            linearLayoutSection.addView(urlView.getURL());
                        }

                        if (loadControlObject.isInvisible()) {
                            urlView.getURL().setVisibility(View.GONE);
                        } else {
                            urlView.getURL().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                urlView.getURL().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_DECIMAL:
//                        DecimalView decimalView = new DecimalView(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), decimalView);
                        DecimalView decimalView = null;
                        if(isPopup){
                            decimalView = (DecimalView) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            decimalView = new DecimalView(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), decimalView);
                        }

                        if (section == 0) {
                            linearLayout.addView(decimalView.getDecimal());
                        } else {
                            linearLayoutSection.addView(decimalView.getDecimal());
                        }

                        if (loadControlObject.isInvisible()) {
                            decimalView.getDecimal().setVisibility(View.GONE);
                        } else {
                            decimalView.getDecimal().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                decimalView.getDecimal().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_PASSWORD:
//                        Password password = new Password(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), password);
                        Password password = null;
                        if(isPopup){
                            password = (Password) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            password = new Password(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), password);
                        }

                        if (section == 0) {
                            linearLayout.addView(password.getPassword());
                        } else {
                            linearLayoutSection.addView(password.getPassword());
                        }

                        if (loadControlObject.isInvisible()) {
                            password.getPassword().setVisibility(View.GONE);
                        } else {
                            password.getPassword().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                password.getPassword().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_CURRENCY:
//                        Currency currency = new Currency(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), currency);
                        Currency currency = null;
                        if(isPopup){
                            currency = (Currency) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            currency = new Currency(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), currency);
                        }

                        if (section == 0) {
                            linearLayout.addView(currency.getCurrency());
                        } else {
                            linearLayoutSection.addView(currency.getCurrency());
                        }

                        if (loadControlObject.isInvisible()) {
                            currency.getCurrency().setVisibility(View.GONE);
                        } else {
                            currency.getCurrency().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                currency.getCurrency().setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onFocus_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onFocus_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_DYNAMIC_LABEL:
//                        DynamicLabel dynamicLabel = new DynamicLabel(this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), dynamicLabel);
                        DynamicLabel dynamicLabel = null;
                        if(isPopup){
                            dynamicLabel = (DynamicLabel) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            dynamicLabel = new DynamicLabel(this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), dynamicLabel);
                        }

                        if (section == 0) {
                            linearLayout.addView(dynamicLabel.getDynamicLabel());
                        } else {
                            linearLayoutSection.addView(dynamicLabel.getDynamicLabel());
                        }
                        if (loadControlObject.isInvisible()) {
                            dynamicLabel.getDynamicLabel().setVisibility(View.GONE);
                        } else {
                            dynamicLabel.getDynamicLabel().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
/*
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
                            if (linearLayout.getChildCount() == 1) {
                                linearLayout.getChildAt(0).setLayoutParams(params);
                            } else {
                                linearLayout.getChildAt(2).setLayoutParams(params);
                            }

                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                            dynamicLabel.getLl_main_inside().setLayoutParams(params);
                            controlAlignments(AppConstants.uiLayoutPropertiesStatic, dynamicLabel.getLl_main_inside());
                        }
*/
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_IMAGE:
//                        Image imageView = new Image(this, loadControlObject, false, 0, "", strAppName, controlUIProperties);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), imageView);
                        Image imageView;
                        if(isPopup){
                            imageView = (Image) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            imageView = new Image(this, loadControlObject, false, 0, "", strAppName, controlUIProperties);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), imageView);
                        }

                        if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {
                            AppConstants.CurrentAppObject.setUIFormNeeded(true);
                        }
                        /*if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {
                            Log.d(TAG, "loadControlDefaultImgCtrl: " + loadControlObject.getDisplayName());
                            Log.d(TAG, "loadControlDefaultImgCtrl1: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                            if (loadControlObject.getDisplayNameAlignment() != null && !loadControlObject.getDisplayNameAlignment().equalsIgnoreCase("6")) {
                                android.view.ViewGroup.LayoutParams layoutParamsMainInside = imageView.getLLMainInside().getLayoutParams();
                                layoutParamsMainInside.width = -1;
                                layoutParamsMainInside.height = -1;
                                imageView.getLLMainInside().setLayoutParams(layoutParamsMainInside);
                                imageView.getLLMainInside().setBackgroundColor(ContextCompat.getColor(context, R.color.transparent_color));
                                Log.d(TAG, "loadControlDefaultImgCtrl2: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                                if (loadControlObject.getDisplayNameAlignment() == null) {
                                    imageView.getViewUI().setVisibility(View.INVISIBLE);
                                    LinearLayout.LayoutParams layoutParamscard = (LinearLayout.LayoutParams)
                                            imageView.getCardView().getLayoutParams();
                                    layoutParamscard.height = -1;
                                    layoutParamscard.width = -1;
                                    imageView.getCardView().setLayoutParams(layoutParamscard);
                                    imageView.getCardView().setCardBackgroundColor(ContextCompat.getColor(context, R.color.transparent_color));

                                    android.view.ViewGroup.LayoutParams layoutParamsMInSideCard = imageView.getLl_insideCard().getLayoutParams();
                                    layoutParamsMInSideCard.width = -1;
                                    layoutParamsMInSideCard.height = -1;
                                    imageView.getLl_insideCard().setLayoutParams(layoutParamsMInSideCard);
                                    imageView.getLl_insideCard().setBackgroundColor(ContextCompat.getColor(context, R.color.transparent_color));
                                    Log.d(TAG, "loadControlDefaultImgCtrl3: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                                }
                                boolean galleryView = false;
                                if (loadControlObject.getImagesArrangementType() != null && loadControlObject.getImagesArrangementType().equalsIgnoreCase("Gallery View")) {
                                    galleryView = true;
                                    ViewGroup.LayoutParams layoutParamsGallery = imageView.getGalleryImageLayout().getLayoutParams();
                                    layoutParamsGallery.width = -1;
                                    layoutParamsGallery.height = -1;
                                    imageView.getGalleryImageLayout().setLayoutParams(layoutParamsGallery);
                                    imageView.getGalleryImageLayout().setBackgroundColor(ContextCompat.getColor(context, R.color.transparent_color));
                                    imageView.getGalleryViewImageView().setScaleType(ImageView.ScaleType.CENTER);
                                    imageView.getGalleryViewImageView().setAdjustViewBounds(true);


                                } else {
                                    android.view.ViewGroup.LayoutParams layoutParamsSingle = imageView.getLl_single_Image().getLayoutParams();
                                    layoutParamsSingle.width = -1;
                                    layoutParamsSingle.height = -1;
                                    imageView.getLl_single_Image().setLayoutParams(layoutParamsSingle);
                                    imageView.getLl_single_Image().setBackgroundColor(ContextCompat.getColor(context, R.color.transparent_color));
                                    Log.d(TAG, "loadControlDefaultImgCtrl4: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                                }
                                android.view.ViewGroup.LayoutParams layoutParamsImg;
                                if (galleryView) {
                                    layoutParamsImg = imageView.getGalleryImageView().getLayoutParams();
                                } else {
                                    layoutParamsImg = imageView.getMainImageView().getLayoutParams();
                                    Log.d(TAG, "loadControlDefaultImgCtrl5: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                                }

                                if (loadControlObject.getDisplayNameAlignment().equalsIgnoreCase("10")) {
                                    layoutParamsImg.width = pxToDP(40);
                                    layoutParamsImg.height = pxToDP(40);
                                }
//                            else {
//                                layoutParamsImg.width = -2;
//                                layoutParamsImg.height = -2;
//                            }
                                if (controlUIProperties != null && controlUIProperties.getTypeOfWidth() != null
                                        && !controlUIProperties.getTypeOfWidth().isEmpty() && controlUIProperties.getTypeOfWidth().equalsIgnoreCase(context.getString(R.string.Custom_Width))) {
                                    layoutParamsImg.width = controlUIProperties.getCustomWidthInDP().equalsIgnoreCase("-1") ? -1 : pxToDP(Integer.parseInt(controlUIProperties.getCustomWidthInDP()));
                                    layoutParamsImg.height = controlUIProperties.getCustomHeightInDP().equalsIgnoreCase("-1") ? -1 : pxToDP(Integer.parseInt(controlUIProperties.getCustomHeightInDP()));

                                }
                                if (galleryView) {
                                    imageView.getGalleryImageView().setLayoutParams(layoutParamsImg);
                                } else {
                                    Log.d(TAG, "loadControlDefaultImgCtrl6: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                                    imageView.getMainImageView().setLayoutParams(layoutParamsImg);
                                }
//                            imageView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                                if (loadControlObject.isInvisible()) {
                                    linearLayout.setVisibility(View.GONE);
                                }
                            } else {
                                imageView.getMainImageView().setScaleType(ImageView.ScaleType.CENTER);
                                Log.d(TAG, "loadControlDefaultImgCtrl7: " + loadControlObject.getDisplayName() + "-" + loadControlObject.getControlType());
                            }
                            if (loadControlObject.getControlName() != null && !loadControlObject.getControlName().isEmpty()
                                    && loadControlObject.getControlName().equalsIgnoreCase("bhargo_icon_back")) {
                                imageView.getMainImageView().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        navigateBack();
                                    }
                                });

                            }

                            if (loadControlObject.isZoomImageEnable() && imageView.getMainImageView() != null) {
                                imageView.getMainImageView().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        zoomImage(imageView.getMainImageView());
                                    }
                                });

                            }


                            linearLayout.addView(imageView.getImageView());


//                        imageView.getMainImageView().setScaleType(ImageView.ScaleType.FIT_XY);
                            controlAlignments(AppConstants.uiLayoutPropertiesStatic, imageView.getLLMainInside());
                        }*/

                        if (section == 0) {
                            linearLayout.addView(imageView.getImageView());
                        } else {
                            linearLayoutSection.addView(imageView.getImageView());
                        }

                        if (loadControlObject.isInvisible()) {
                            imageView.getImageView().setVisibility(View.GONE);
                        } else {
                            imageView.getImageView().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                            if (loadControlObject.getControlName() != null && !loadControlObject.getControlName().isEmpty()
                                    && loadControlObject.getControlName().equalsIgnoreCase("bhargo_icon_back")) {
                                imageView.getMainImageView().setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        navigateBack();
                                    }
                                });
                            }
                        }
                        if (loadControlObject.isZoomImageEnable() && imageView.getMainImageView() != null) {
                            imageView.getMainImageView().setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    zoomImage(imageView.getMainImageView());
                                }
                            });

                        }

                        break;
                    case CONTROL_TYPE_BUTTON:
//                        Button button = new Button(context, loadControlObject, false, 0, "", strAppName);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), button);
                        Button button = null;
                        if(isPopup){
                            button = (Button) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            button = new Button(context, loadControlObject, false, 0, "", strAppName);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), button);
                        }
/*                        if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {
                            button.getButtonView().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                            button.getbtn_main().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
//                        button.getll_button().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                            android.view.ViewGroup.LayoutParams layoutParamsll_button = button.getll_button().getLayoutParams();
                            layoutParamsll_button.width = -1;
                            layoutParamsll_button.height = -1;
                            if (controlUIProperties != null && controlUIProperties.getTypeOfWidth() != null
                                    && !controlUIProperties.getTypeOfWidth().isEmpty() && controlUIProperties.getTypeOfWidth().equalsIgnoreCase(context.getString(R.string.Custom_Width))) {
                                layoutParamsll_button.width = pxToDP(Integer.parseInt(controlUIProperties.getCustomWidthInDP()));
                                layoutParamsll_button.height = pxToDP(Integer.parseInt(controlUIProperties.getCustomHeightInDP()));
                            }
                            linearLayout.addView(button.getButton());
                            button.getButton().setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                                    LinearLayout.LayoutParams.MATCH_PARENT));
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        } else*/
                        if (section == 0) {
                            linearLayout.addView(button.getButton());
                        } else {
                            linearLayoutSection.addView(button.getButton());
                        }
                        if (loadControlObject.isInvisible()) {
                            button.getButton().setVisibility(View.GONE);
                        } else {
                            button.getButton().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_AUTO_NUMBER:
//                        AutoNumber autoNumber = new AutoNumber(context, loadControlObject);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), autoNumber);

                        AutoNumber autoNumber = null;
                        if(isPopup){
                            autoNumber = (AutoNumber) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            autoNumber = new AutoNumber(context, loadControlObject);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), autoNumber);
                        }

                        if (section == 0) {
                            linearLayout.addView(autoNumber.getAutoNumber());
                        } else {
                            linearLayoutSection.addView(autoNumber.getAutoNumber());
                        }

                        if (loadControlObject.isInvisible()) {
                            autoNumber.getAutoNumber().setVisibility(View.GONE);
                        } else {
                            autoNumber.getAutoNumber().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        break;
                    case CONTROL_TYPE_RATING:
//                        Rating rating = new Rating(context, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), rating);
                        Rating rating = null;
                        if(isPopup){
                            rating = (Rating) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            rating = new Rating(context, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), rating);
                        }

                        if (section == 0) {
                            linearLayout.addView(rating.getRatingView());
                        } else {
                            linearLayoutSection.addView(rating.getRatingView());
                        }

                        if (loadControlObject.isInvisible()) {
                            rating.getRatingView().setVisibility(View.GONE);
                        } else {
                            rating.getRatingView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_GPS:
//                        Gps_Control controlGPS = new Gps_Control(this, loadControlObject);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), controlGPS);
                        Gps_Control controlGPS = null;
                        if(isPopup){
                            controlGPS = (Gps_Control) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            controlGPS = new Gps_Control(this, loadControlObject);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), controlGPS);
                        }


                        if (section == 0) {
                            linearLayout.addView(controlGPS.getControlGPSView());
                        } else {
                            linearLayoutSection.addView(controlGPS.getControlGPSView());
                        }

                        if (loadControlObject.isInvisible()) {
                            controlGPS.getControlGPSView().setVisibility(View.GONE);
                        } else {
                            controlGPS.getControlGPSView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }
                        break;

                    case CONTROL_TYPE_BAR_CODE:
//                        BarCode barcode = new BarCode(context, loadControlObject);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), barcode);
                        BarCode barcode = null;
                        if(isPopup){
                            barcode = (BarCode) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            barcode = new BarCode(context, loadControlObject);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), barcode);
                        }
                        if (section == 0) {
                            linearLayout.addView(barcode.getBarCode());
                        } else {
                            linearLayoutSection.addView(barcode.getBarCode());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_QR_CODE:
//                        QRCode qrCode = new QRCode(context, loadControlObject);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), qrCode);

                        QRCode qrCode = null;
                        if(isPopup){
                            qrCode = (QRCode) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            qrCode = new QRCode(context, loadControlObject);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), qrCode);
                        }

                        if (section == 0) {
                            linearLayout.addView(qrCode.getQRCode());
                        } else {
                            linearLayoutSection.addView(qrCode.getQRCode());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isInvisible()) {
                            qrCode.getQRCode().setVisibility(View.GONE);
                        } else {
                            qrCode.getQRCode().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;

                    case CONTROL_TYPE_DATA_CONTROL:

//                        DataControl dataControl = new DataControl(context, loadControlObject, strUserLocationStructure, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), dataControl);

                        DataControl dataControl = null;
                        if(isPopup){
                            dataControl = (DataControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            dataControl = new DataControl(context, loadControlObject, strUserLocationStructure, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), dataControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(dataControl.getDataControl());
                        } else {
                            linearLayoutSection.addView(dataControl.getDataControl());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        break;

                    case CONTROL_TYPE_SUBFORM:
                  /*  JSONArray subformJson = new JSONArray();
                    if (AppConstants.currentMultiForm == null && app_edit.equalsIgnoreCase("edit")) {
                        try {
                            JSONArray subformJsonArray = jsonObjChildForm.getJSONArray("SubForm");
                            subformJson = subformJsonArray.getJSONObject(0).getJSONArray(loadControlObject.getControlName());
                            if (subformJson.length() > 0) {
                                loadControlObject.setMinimumRows(String.valueOf(subformJson.length()));
                            }
                        } catch (Exception e) {

                        }
                    }*/
                        ScrollView scrollViewSubForm = new ScrollView(context);
//                        SubformView subformView = new SubformView(this, loadControlObject, strUserLocationStructure,
//                                List_ControlClassObjects, false, strAppName, linearLayout, globalControlObjects,
//                                dataCollectionObject.isUIFormNeeded(), scrollViewSubForm, uiLayoutProperties, layoutHeight, app_edit,
//                                dataCollectionObject.getDataManagementOptions().getEditColumns(), activityView, controlUIProperties, editDataObj, visibilityManagementOptions);
//                        subFormTableSettingsTypeMap.put(loadControlObject.getControlName(), loadControlObject.getTableSettingsType());
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), subformView);

                        SubformView subformView = null;
                        if(isPopup){
                            subformView = (SubformView) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            subformView = new SubformView(this, loadControlObject, strUserLocationStructure,
                                    List_ControlClassObjects, false, strAppName, linearLayout, globalControlObjects,
                                    dataCollectionObject.isUIFormNeeded(), scrollViewSubForm, uiLayoutProperties, layoutHeight, app_edit,
                                    dataCollectionObject.getDataManagementOptions().getEditColumns(), activityView, controlUIProperties, editDataObj, visibilityManagementOptions);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), subformView);
                        }
                        subFormTableSettingsTypeMap.put(loadControlObject.getControlName(), loadControlObject.getTableSettingsType());
                        if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {
                            scrollViewSubForm.addView(subformView.getSubFormView());
                            linearLayout.addView(scrollViewSubForm);
//                        linearLayout.addView(subformView.getSubFormView());
                        } else if (section == 0) {
                            linearLayout.addView(subformView.getSubFormView());
                        } else {
                            linearLayoutSection.addView(subformView.getSubFormView());
                        }
                        subformView.setCustomClickListener(this);
//
                        subformView.setTag(String.valueOf(subFormPos));
                        List<String> subControlNames = new ArrayList<>();
                        for (int i = 0; i < loadControlObject.getSubFormControlList().size(); i++) {
                            subControlNames.add(loadControlObject.getSubFormControlList().get(i).getControlName());
                        }

                        subFormsAutoNumberStatusMap.put(loadControlObject.getControlName(), subformView.autoNumbersAvailable());
                        subFormsAutoNumberArraysMap.put(loadControlObject.getControlName(), subformView.autoNumbersArray());

               /* if(AppConstants.GlobalObjects.getSubControls_List()!=null){
                    AppConstants.GlobalObjects.setSubControls_List(new LinkedHashMap<>());

                }
                AppConstants.GlobalObjects.getSubControls_List().put(loadControlObject.getControlName(),subControlNames);*/
                        subFormPos++;

//                    if (app_edit != null && app_edit.equalsIgnoreCase("edit")) {
//                        try {
//                            if (subformJson.length() > 0) {

//                            setSubFormValuesForEdit(loadControlObject, subformJson, subformView);
//                            }
//                        } catch (Exception e) {

//                        }
//                    }

                        bothWrapContentAndDp(controlType, controlObject.getControlName(), scrollViewSubForm);
                        if (loadControlObject.isOnAddRowEventExists()) {
                            Control_EventObject onAddRow_control_EventObject = loadControlObject.getOnAddRowEventObject();
                            hash_OnAddRow_EventObjects.put(loadControlObject.getControlName(), onAddRow_control_EventObject);
                        }
                        if (loadControlObject.isOnDeleteRowEventExists()) {
                            Control_EventObject onDeleteRow_control_EventObject = loadControlObject.getOnDeleteRowEventObject();
                            hash_OnDeleteRow_EventObjects.put(loadControlObject.getControlName(), onDeleteRow_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }


                        break;

                    case CONTROL_TYPE_GRID_CONTROL:
                   /* JSONArray gridJsonArray = new JSONArray();
                    if (AppConstants.currentMultiForm == null && app_edit.equalsIgnoreCase("edit")) {
                        try {
                            JSONArray subformJsonArray = jsonObjChildForm.getJSONArray("SubForm");
                            gridJsonArray = subformJsonArray.getJSONObject(0).getJSONArray(loadControlObject.getControlName());
                            if (gridJsonArray.length() > 0) {
                                loadControlObject.setMinimumRows(String.valueOf(gridJsonArray.length()));
                            }
                        } catch (Exception e) {

                        }
                    }*/
                        ScrollView scrollViewGridControl = new ScrollView(context);
//                        GridControl gridView = new GridControl(this, loadControlObject,
//                                strUserLocationStructure, List_ControlClassObjects, true, strAppName,
//                                ll_preViewContainer, globalControlObjects, dataCollectionObject.isUIFormNeeded(),
//                                scrollViewGridControl, uiLayoutProperties, controlUIProperties, 0,
//                                app_edit, dataCollectionObject.getDataManagementOptions().getEditColumns(),
//                                activityView, editDataObj, visibilityManagementOptions);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), gridView);

                        GridControl gridView;
                        if(isPopup){
                            gridView = (GridControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            gridView = new GridControl(this, loadControlObject,
                                    strUserLocationStructure, List_ControlClassObjects, true, strAppName,
                                    ll_preViewContainer, globalControlObjects, dataCollectionObject.isUIFormNeeded(),
                                    scrollViewGridControl, uiLayoutProperties, controlUIProperties, 0,
                                    app_edit, dataCollectionObject.getDataManagementOptions().getEditColumns(),
                                    activityView, editDataObj, visibilityManagementOptions);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), gridView);
                        }


                        subFormTableSettingsTypeMap.put(loadControlObject.getControlName(), loadControlObject.getTableSettingsType());

                        if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {
                            scrollViewGridControl.addView(gridView.getSubFormView());
                            linearLayout.addView(scrollViewGridControl);
                        } else if (section == 0) {
                            linearLayout.addView(gridView.getSubFormView());
                        } else {
                            linearLayoutSection.addView(gridView.getSubFormView());
                        }
                        gridView.setCustomClickListener(this);
                        gridView.btn_addRow().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (loadControlObject.isOnAddRowEventExists() && !AppConstants.Initialize_Flag) {
                                    AppConstants.EventFrom_subformOrNot = false;
                                    AppConstants.SF_Container_position = gridView.getTableLayoutview().getChildCount();
                                    if (AppConstants.EventCallsFrom == 1) {
                                        if (AppConstants.GlobalObjects != null) {
                                            AppConstants.GlobalObjects.setCurrent_GPS("");
                                        }
                                        if (loadControlObject.isValidateFormFields()) {
                                            v.setTag(R.string.form_validated, true);
                                        } else {
                                            v.setTag(R.string.form_validated, false);
                                        }
                                        ((MainActivity) context).addGridRowEvent(v, loadControlObject.getControlName());
                                    }
                                } else {
                                    gridView.addRowClick(gridView.getll_grid_view());
                                    bothWrapContentAndDp(controlType, controlObject.getControlName(), scrollViewGridControl);
                                }

                            }
                        });
                        gridView.deleteRow().setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (loadControlObject.isOnDeleteRowEventExists() && !AppConstants.Initialize_Flag) {

                                    if (AppConstants.EventCallsFrom == 1) {
                                        if (AppConstants.GlobalObjects != null) {
                                            AppConstants.GlobalObjects.setCurrent_GPS("");
                                        }
                                        if (loadControlObject.isValidateFormFields()) {
                                            v.setTag(R.string.form_validated, true);
                                        } else {
                                            v.setTag(R.string.form_validated, false);
                                        }
                                        ((MainActivity) context).deleteGridRowEvent(v, loadControlObject.getControlName());
                                    }
                                } else {
                                    gridView.deleteRowClick(gridView.getll_grid_view());
                                    bothWrapContentAndDp(controlType, controlObject.getControlName(), scrollViewGridControl);
                                }

                            }
                        });
                        gridView.setTag(String.valueOf(subFormPos));
                        subFormsAutoNumberStatusMap.put(loadControlObject.getControlName(), gridView.autoNumbersAvailable());
                        subFormsAutoNumberArraysMap.put(loadControlObject.getControlName(), gridView.autoNumbersArray());
                        subFormPos++;

                    /*if (app_edit != null && app_edit.equalsIgnoreCase("edit")) {
                        try {
                            if (gridJsonArray.length() > 0) {

                                setSubFormValuesForEdit(loadControlObject, gridJsonArray, gridView);
                            }
                        } catch (Exception e) {

                        }
                    }*/
                        if (loadControlObject.isOnAddRowEventExists()) {
                            Control_EventObject onAddRow_control_EventObject = loadControlObject.getOnAddRowEventObject();
                            hash_OnAddRow_EventObjects.put(loadControlObject.getControlName(), onAddRow_control_EventObject);
                        }
                        if (loadControlObject.isOnDeleteRowEventExists()) {
                            Control_EventObject onDeleteRow_control_EventObject = loadControlObject.getOnDeleteRowEventObject();
                            hash_OnDeleteRow_EventObjects.put(loadControlObject.getControlName(), onDeleteRow_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            // ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject,AppConstants.uiLayoutPropertiesStatic,controlUIProperties,List_ControlClassObjects,context);
                            // controlUiSettings.setControlUiSettings();
                        }

                        bothWrapContentAndDp(controlType, controlObject.getControlName(), scrollViewGridControl);

                        break;
                    /* Menu Decprecated In Bhargo Start*/

//                    case CONTROL_TYPE_MENU:
//
///*
//                if (loadControlObject.getTypeOfButton() != null) {
//
//                    String strTypeOfButton = loadControlObject.getTypeOfButton();
////            iTypeOfBorder = 4;
//                    Log.d(TAG, "getTypeOfButtonMA: " + strTypeOfButton);
//                    if (strTypeOfButton.equalsIgnoreCase("Icon")) {
//                        File root = new File(Environment.getExternalStorageDirectory().getAbsolutePath(),
//                                "/Improve_User/" + strOrgId + "/" + strAppName.replaceAll(" ","_") + "/" + "MenuIcons/");
//                        if (!root.exists()) {
//                            root.mkdirs();
//                        }
//
//                        String strSDCardUrl = null;
//                        Log.d(TAG, "MenuControlIconsFolder: " + strOrgId + " - " + strAppName.replaceAll(" ","_"));
//                        strSDCardUrl = "/Improve_User/" + strOrgId + "/" + strAppName.replaceAll(" ","_") + "/" + "MenuIcons/";
//                        if (isFileExists(strSDCardUrl) && !isIconsDownloaded) {
//
//                            for (int i = 0; i < loadControlObject.getMenuControlObjectList().size(); i++) {
//                                String[] imgUrlSplit = loadControlObject.getMenuControlObjectList().get(i).getIconPath().split("/");
//                                downloadMenuIcons(loadControlObject.getMenuControlObjectList().get(i).getIconPath(), strSDCardUrl + imgUrlSplit[imgUrlSplit.length - 1]);
//                                Log.d(TAG, "MenuFolders: " + loadControlObject.getMenuControlObjectList().get(i).getIconPath() + " - " + strSDCardUrl + imgUrlSplit[imgUrlSplit.length - 1]);
////                                break;
//                            }
//                            isIconsDownloaded = true;
//                        }
//                    }
//
//                }
//*/
//
//
//                        MenuControl menuControl = new MenuControl(this, loadControlObject, strOrgId, strAppName.replaceAll(" ", "_"));
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), menuControl);
//
//
//                        if (section == 0) {
//                            linearLayout.addView(menuControl.getMenuContorlLayout());
//                        } else {
//                            linearLayoutSection.addView(menuControl.getMenuContorlLayout());
//                        }
//
//                        if (loadControlObject.isOnClickEventExists()) {
//                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
//                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
//                        }
//
////                if (loadControlObject.isInvisible()) {
////                    menuControl.getMenuContorlLayout().setVisibility(View.GONE);
////                } else {
////                    menuControl.getMenuContorlLayout().setVisibility(View.VISIBLE);
////                }
//
//                        break;
                    /* Menu Decprecated In Bhargo End*/
                    case CONTROL_TYPE_SECTION:
//                        if(!loadControlObject.isMakeItAsPopup()) {
//                        SectionControl sectionControl = new SectionControl(this, dataCollectionObject, loadControlObject, strUserLocationStructure, false, 0, "", strAppName, List_ControlClassObjects, layoutHeight, uiLayoutProperties, controlUIProperties, globalControlObjects);
//                        SectionControl sectionControl = new SectionControl(this, dataCollectionObject, loadControlObject,
//                                strUserLocationStructure, false, 0, "", strAppName, List_ControlClassObjects,
//                                layoutHeight, uiLayoutProperties, controlUIProperties, globalControlObjects, activityView,
//                                subFormTableSettingsTypeMap, subFormsAutoNumberStatusMap, subFormsAutoNumberArraysMap, dataCollectionObject.getDataManagementOptions().getEditColumns(), visibilityManagementOptions, app_edit);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), sectionControl);

                        SectionControl sectionControl = null;
                        if(isPopup){
                            sectionControl = (SectionControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            sectionControl = new SectionControl(this, dataCollectionObject, loadControlObject,
                                    strUserLocationStructure, false, 0, "", strAppName, List_ControlClassObjects,
                                    layoutHeight, uiLayoutProperties, controlUIProperties, globalControlObjects, activityView,
                                    subFormTableSettingsTypeMap, subFormsAutoNumberStatusMap, subFormsAutoNumberArraysMap, dataCollectionObject.getDataManagementOptions().getEditColumns(), visibilityManagementOptions, app_edit);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), sectionControl);
                        }

                        if (dataCollectionObject.isUIFormNeeded()) {
                            ScrollView scrollViewSection = new ScrollView(context);
                            scrollViewSection.addView(sectionControl.getSectionLayout());
                            linearLayout.addView(scrollViewSection);
                        } else {
                            linearLayout.addView(sectionControl.getSectionLayout());
                        }
                        if (loadControlObject.isInvisible()) {
                            sectionControl.getSectionLayout().setVisibility(View.GONE);
                        } else {
                            sectionControl.getSectionLayout().setVisibility(View.VISIBLE);
                        }
//                        }
                        break;
               /* case CONTROL_TYPE_SECTION:
//
//                SectionControl sectionControl = new SectionControl(this, loadControlObject);
//                List_ControlClassObjects.put(loadControlObject.getControlName(), sectionControl);
//                linearLayout.addView(sectionControl.getSectionControl());
//                linearLayoutSection = sectionControl.getSectionContainerLayout();
//                if (!loadControlObject.isInvisible()) {
//
                    linearLayoutSection = new LinearLayout(context);
                    linearLayoutSection.setTag(loadControlObject.getControlName());
//                    linearLayoutSection.setBackground(getDrawable(R.drawable.avi));
                    ImproveHelper.layout_params.setMargins(5, 0, 5, 0);
                    linearLayoutSection.setLayoutParams(ImproveHelper.layout_params);
                    linearLayoutSection.setOrientation(LinearLayout.VERTICAL);
                    List_ControlClassObjects.put(loadControlObject.getControlName(), linearLayoutSection);
//
                    if (!loadControlObject.isHideDisplayName()) {

                        final LayoutInflater linflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                        View rView = linflater.inflate(R.layout.control_section, null);

                        CustomTextView tv_displayName = rView.findViewById(R.id.tv_displayName);
                        CustomTextView tv_hint = rView.findViewById(R.id.tv_hint);
                        CustomButton btn_expand = rView.findViewById(R.id.btn_expand);
                        CustomButton btn_collapse = rView.findViewById(R.id.btn_collapse);
                        btn_expand.setTag(loadControlObject.getControlName());
                        btn_collapse.setTag(loadControlObject.getControlName());
                        btn_expand.setVisibility(View.GONE);
                        btn_collapse.setVisibility(View.GONE);
                        tv_displayName.setText(loadControlObject.getDisplayName());
                        if (loadControlObject.isEnableCollapseOrExpand()) {
                            btn_collapse.setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.getHint() != null && !loadControlObject.getHint().isEmpty()) {
                            tv_hint.setText(loadControlObject.getHint());
                        } else {
                            tv_hint.setVisibility(View.GONE);
                        }
                        loadControlObject.setSectionUIFormNeeded(true);
                        if (dataCollectionObject.isUIFormNeeded() && ll_preViewContainer != null) {
                            ll_preViewContainer.addView(linearLayoutSection);
                            if (loadControlObject.isSectionUIFormNeeded()) { // SectionCheck
                                boolean isSection = loadControlObject.isSectionUIFormNeeded();
                                UIPrimaryLayoutModelClass uiPrimaryLayoutModelClass = loadControlObject.getUiPrimaryLayoutModelClass();
//                                new LoadPrimaryLayoutDataSection(uiPrimaryLayoutModelClass, linearLayoutSection).execute();
                                primaryLayoutData(uiPrimaryLayoutModelClass, linearLayoutSection);
                            }
                        } else {
                            linearLayoutSection.addView(rView);
                        }
                        btn_collapse.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                String controlName = view.getTag().toString();
                                LinearLayout layout = (LinearLayout) List_ControlClassObjects.get(controlName);
                                for (int i = 0; i < layout.getChildCount(); i++) {
                                    if (i == 0) {
                                        View displayView = layout.getChildAt(i);
                                        CustomButton btn_expand = displayView.findViewById(R.id.btn_expand);
                                        CustomButton btn_collapse = displayView.findViewById(R.id.btn_collapse);
                                        btn_collapse.setVisibility(View.GONE);
                                        btn_expand.setVisibility(View.VISIBLE);
                                    } else {
                                        layout.getChildAt(i).setVisibility(View.GONE);
                                    }

                                }

                            }
                        });
                        btn_expand.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View view) {
                                String controlName = view.getTag().toString();
                                LinearLayout layout = (LinearLayout) List_ControlClassObjects.get(controlName);
                                for (int i = 0; i < layout.getChildCount(); i++) {
                                    if (i == 0) {
                                        View displayView = layout.getChildAt(i);
                                        CustomButton btn_expand = displayView.findViewById(R.id.btn_expand);
                                        CustomButton btn_collapse = displayView.findViewById(R.id.btn_collapse);
                                        btn_collapse.setVisibility(View.VISIBLE);
                                        btn_expand.setVisibility(View.GONE);
                                    } else {
                                        layout.getChildAt(i).setVisibility(View.VISIBLE);
                                    }

                                }

                            }
                        });

                    }
                    section = 1;
//                    if (dataCollectionObject.isUIFormNeeded() && ll_preViewContainer != null) {
//                        ll_preViewContainer.addView(linearLayoutSection);
//                    }

                    break;*/

//                case CONTROL_TYPE_SECTIONEND:
//                    if (dataCollectionObject.isUIFormNeeded() && ll_preViewContainer != null) {
//                        ll_preViewContainer.addView(linearLayoutSection);
//                    } else {
//                        linearLayout.addView(linearLayoutSection);
//                    }
//                    section = 0;
//                    break;

                    case CONTROL_TYPE_MAP:
//                        MapControl mapControl = new MapControl(this, loadControlObject, false, 0, "", dataCollectionObject.isUIFormNeeded());
//                        MapControl mapControl = new MapControl(this, loadControlObject, false, 0, "", dataCollectionObject.isUIFormNeeded(), activityView);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), mapControl);
                        MapControl mapControl = null;
                        if(isPopup){
                            mapControl = (MapControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            mapControl = new MapControl(this, loadControlObject, false, 0, "", dataCollectionObject.isUIFormNeeded(), activityView);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), mapControl);
                        }


                        /*if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {

                            mapControl.ll_mapView_main().setVisibility(View.VISIBLE);
                            ViewGroup.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                            ViewGroup.LayoutParams paramsMap = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                            mapControl.ll_mapView_main().setLayoutParams(params);
//                        if(isScreenFit){
//                            int height=0;
////                            ViewGroup.LayoutParams param2s = new LinearLayout.LayoutParams(-1, (uiLayoutProperties.getHeight()*screenHeight/100));
//                            if (uiLayoutProperties!=null && uiLayoutProperties.getHeight() != 0) {
//                                Log.d(TAG, "layoutheight_inkaemaina: "+(uiLayoutProperties.getHeight()*screenHeight/100));
//                                 height = (uiLayoutProperties.getHeight()*screenHeight/100)-pxToDP(14);
//                            }
//
//                            ViewGroup.LayoutParams param2s = new LinearLayout.LayoutParams(-1, -2);
//                           linearLayout.setLayoutParams(param2s);
//                            ViewGroup.LayoutParams param1s = new LinearLayout.LayoutParams(-1, -1);
//                            mapControl.getMapView().setLayoutParams(param1s);
//                        }
                            mapControl.getMapView().setLayoutParams(paramsMap);

                            linearLayout.addView(mapControl.getMapControlLayout());

                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }

                        } else {*/
                        mapControl.ll_mapView_main().setVisibility(View.VISIBLE);
                        linearLayout.addView(mapControl.getMapControlLayout());
//                        }
                 /*   mapControl.ll_mapView_main().setVisibility(View.VISIBLE);
                    ViewGroup.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT, 0);
                    ViewGroup.LayoutParams paramsMap = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT, 0);
                    mapControl.ll_mapView_main().setLayoutParams(params);
                    mapControl.getMapView().setLayoutParams(paramsMap);

                    linearLayout.addView(mapControl.getMapControlLayout());*/

                        if (loadControlObject.isInvisible()) {
                            mapControl.getMapControlLayout().setVisibility(View.GONE);
                        } else {
                            mapControl.getMapControlLayout().setVisibility(View.VISIBLE);
                        }

                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (loadControlObject.isOnMapMarkerClickEventExists()) {
                            Control_EventObject onMarkerClick_control_EventObject = loadControlObject.getOnMapMarkerClickEventObject();
                            hash_OnMarkerclick_EventObjects.put(loadControlObject.getControlName(), onMarkerClick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();

                                } else {
                                    mapControl.ll_mapView_main().setVisibility(View.VISIBLE);
                                    ViewGroup.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                                    ViewGroup.LayoutParams paramsMap = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                                    mapControl.ll_mapView_main().setLayoutParams(params);
//                        if(isScreenFit){
//                            int height=0;
////                            ViewGroup.LayoutParams param2s = new LinearLayout.LayoutParams(-1, (uiLayoutProperties.getHeight()*screenHeight/100));
//                            if (uiLayoutProperties!=null && uiLayoutProperties.getHeight() != 0) {
//                                Log.d(TAG, "layoutheight_inkaemaina: "+(uiLayoutProperties.getHeight()*screenHeight/100));
//                                 height = (uiLayoutProperties.getHeight()*screenHeight/100)-pxToDP(14);
//                            }
//
//                            ViewGroup.LayoutParams param2s = new LinearLayout.LayoutParams(-1, -2);
//                           linearLayout.setLayoutParams(param2s);
//                            ViewGroup.LayoutParams param1s = new LinearLayout.LayoutParams(-1, -1);
//                            mapControl.getMapView().setLayoutParams(param1s);
//                        }
                                    mapControl.getMapView().setLayoutParams(paramsMap);

                                    linearLayout.addView(mapControl.getMapControlLayout());

                                    if (loadControlObject.isInvisible()) {
                                        linearLayout.setVisibility(View.GONE);
                                    }
                                }
                            }
                        }


                        mapControl.getMapView().onResume();

                        break;

                    case CONTROL_TYPE_CALENDAR_EVENT:
//                        CalendarEventControl calendarEventControl = new CalendarEventControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), calendarEventControl);
                        CalendarEventControl calendarEventControl = null;
                        if(isPopup){
                            calendarEventControl = (CalendarEventControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            calendarEventControl = new CalendarEventControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), calendarEventControl);
                        }


                        linearLayout.addView(calendarEventControl.getCalendarEventLayout());
                        if (loadControlObject.isInvisible()) {
                            calendarEventControl.getCalendarEventLayout().setVisibility(View.GONE);
                        } else {
                            calendarEventControl.getCalendarEventLayout().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();

                                }
                            }
                        }

                        break;
                    case AppConstants.CONTROL_TYPE_DATA_VIEWER:
                        ScrollView scrollViewDataViewerControl = new ScrollView(context);
//                        DataViewer DataViewer = new DataViewer(this, loadControlObject, ll_preViewContainer, dataCollectionObject, scrollViewDataViewerControl);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), DataViewer);
                        DataViewer DataViewer = null;
                        if(isPopup){
                            DataViewer = (DataViewer) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            DataViewer = new DataViewer(this, loadControlObject, ll_preViewContainer, dataCollectionObject, scrollViewDataViewerControl);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), DataViewer);
                        }

                    /*if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {
                        scrollViewDataViewerControl.addView(DataViewer.getDataViewer());
                        linearLayout.addView(scrollViewDataViewerControl);
//                        bothWrapContentAndDp(loadControlObject.getControlType(), loadControlObject.getControlName());
//                        linearLayout.addView(DataViewer.getDataViewer());
                    } else if (section == 0) {
                        linearLayout.addView(DataViewer.getDataViewer());
                    } else {
                        linearLayoutSection.addView(DataViewer.getDataViewer());
                    }*/
                        linearLayout.addView(DataViewer.getDataViewer());
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        DataViewer.setCustomClickListener(this);
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        break;
                    case CONTROL_TYPE_LiveTracking:
//                        LiveTracking ControlLiveTracking = new LiveTracking(this, loadControlObject);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), ControlLiveTracking);
                        LiveTracking ControlLiveTracking = null;
                        if(isPopup){
                            ControlLiveTracking = (LiveTracking) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            ControlLiveTracking = new LiveTracking(this, loadControlObject);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), ControlLiveTracking);
                        }

//                    linearLayout.addView(ControlLiveTracking.getMapControlLayout());

                        if (section == 0) {
                            linearLayout.addView(ControlLiveTracking.getMapControlLayout());
                        } else {
                            linearLayoutSection.addView(ControlLiveTracking.getMapControlLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            ControlLiveTracking.getMapControlLayout().setVisibility(View.GONE);
                        } else {
                            ControlLiveTracking.getMapControlLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        ControlLiveTracking.getMapView().onResume();
                        cb_submit_formControls.setVisibility(View.GONE);
                        break;
                    case CONTROL_TYPE_USER:

//                        UserControl userControl = new UserControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), userControl);

                        UserControl userControl = null;
                        if(isPopup){
                            userControl = (UserControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            userControl = new UserControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), userControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(userControl.getUserControlView());
                        } else {
                            linearLayoutSection.addView(userControl.getUserControlView());
                        }

                        if (loadControlObject.isInvisible()) {
                            userControl.getUserControlView().setVisibility(View.GONE);
                        } else {
                            userControl.getUserControlView().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                controlUiSettings.setControlUiSettings();

                            }
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }

                        }
                        break;
                    case CONTROL_TYPE_POST:

//                        PostControl postControl = new PostControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), postControl);
                        PostControl postControl = null;
                        if(isPopup){
                            postControl = (PostControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            postControl = new PostControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), postControl);
                        }


                        if (section == 0) {
                            linearLayout.addView(postControl.getPostControlView());
                        } else {
                            linearLayoutSection.addView(postControl.getPostControlView());
                        }

                        if (loadControlObject.isInvisible()) {
                            postControl.getPostControlView().setVisibility(View.GONE);
                        } else {
                            postControl.getPostControlView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                controlUiSettings.setControlUiSettings();

                            }
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        break;
                    case CONTROL_TYPE_CHART:
//                        ChartControl chartControl = new ChartControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), chartControl);
                        ChartControl chartControl = null;
                        if(isPopup){
                            chartControl = (ChartControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            chartControl = new ChartControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), chartControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(chartControl.getChartLayout());
                        } else {
                            linearLayoutSection.addView(chartControl.getChartLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            chartControl.getChartLayout().setVisibility(View.GONE);
                        } else {
                            chartControl.getChartLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();

                                }
                            }
                        }
                        break;

                    case CONTROL_TYPE_PROGRESS:
//                        ProgressControl progressControl = new ProgressControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), progressControl);
                        ProgressControl progressControl = null;
                        if(isPopup){
                            progressControl = (ProgressControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            progressControl = new ProgressControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), progressControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(progressControl.getProgressLayout());
                        } else {
                            linearLayoutSection.addView(progressControl.getProgressLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            progressControl.getProgressLayout().setVisibility(View.GONE);
                        } else {
                            progressControl.getProgressLayout().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();

                                }
                            }
                        }

                        break;
                    case CONTROL_TYPE_VIEWFILE:
//                        ViewFileControl viewFileControl = new ViewFileControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), viewFileControl);
                        ViewFileControl viewFileControl = null;
                        if(isPopup){
                            viewFileControl = (ViewFileControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            viewFileControl = new ViewFileControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), viewFileControl);
                        }

                        if (section == 0) {
//                        linearLayout.addView(viewFileControl.getViewFileLayout());

/*                            if (dataCollectionObject.isUIFormNeeded() && linearLayout != null) {

                                viewFileControl.getViewFileLayout().setVisibility(View.VISIBLE);
                            *//*    ViewGroup.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
                                ViewGroup.LayoutParams paramsMap = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
//                                viewFileControl.getViewFileMainLayout().setLayoutParams(params);
//                                viewFileControl.getViewFileLayout().setLayoutParams(paramsMap);
                                viewFileControl.getViewFileMainLayout().setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
                                viewFileControl.getViewFileLayout().setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));
                                ViewGroup.LayoutParams paramsFrame = viewFileControl.getViewFileFrameLayout().getLayoutParams();
                                paramsFrame.width = -1;
                                paramsFrame.height = -1;
                                viewFileControl.getViewFileFrameLayout().setLayoutParams(paramsFrame);
                                ViewGroup.LayoutParams paramsWV = viewFileControl.getViewFileWebView().getLayoutParams();
                                paramsWV.width = -1;
                                paramsWV.height = -1;
                                viewFileControl.getViewFileWebView().setLayoutParams(paramsWV);
*//*
                                linearLayout.addView(viewFileControl.getViewFileLayout());

                                if (loadControlObject.isInvisible()) {
                                    linearLayout.setVisibility(View.GONE);
                                }

                            } else {*/
                            viewFileControl.getViewFileLayout().setVisibility(View.VISIBLE);
                            linearLayout.addView(viewFileControl.getViewFileLayout());
//                            }
                        } else {
                            linearLayoutSection.addView(viewFileControl.getViewFileLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            viewFileControl.getViewFileLayout().setVisibility(View.GONE);
                        } else {
                            viewFileControl.getViewFileLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }


                        break;
                    case CONTROL_TYPE_COUNT_UP_TIMER:
//                        CountUpTimerControl countUpTimerControl = new CountUpTimerControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), countUpTimerControl);
                        CountUpTimerControl countUpTimerControl = null;
                        if(isPopup){
                            countUpTimerControl = (CountUpTimerControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            countUpTimerControl = new CountUpTimerControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), countUpTimerControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(countUpTimerControl.getCountUpTimerLayout());
                        } else {
                            linearLayoutSection.addView(countUpTimerControl.getCountUpTimerLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            countUpTimerControl.getCountUpTimerLayout().setVisibility(View.GONE);
                        } else {
                            countUpTimerControl.getCountUpTimerLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }

                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }

                        break;
                    case CONTROL_TYPE_COUNT_DOWN_TIMER:
//                        CountDownTimerControl countDownTimerControl = new CountDownTimerControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), countDownTimerControl);
                        CountDownTimerControl countDownTimerControl = null;
                        if(isPopup){
                            countDownTimerControl = (CountDownTimerControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            countDownTimerControl = new CountDownTimerControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), countDownTimerControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(countDownTimerControl.getCountDownTimerLayout());
                        } else {
                            linearLayoutSection.addView(countDownTimerControl.getCountDownTimerLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            countDownTimerControl.getCountDownTimerLayout().setVisibility(View.GONE);
                        } else {
                            countDownTimerControl.getCountDownTimerLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }

                        if (dataCollectionObject.isUIFormNeeded() && AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                            ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                            controlUiSettings.setControlUiSettings();

                        }


                        break;


                    case CONTROL_TYPE_AUTO_GENERATION:

                        isAutoNumbersAvaliable = true;

                        try {
                            JSONObject jsonObject = new JSONObject();
                            jsonObject.put("ControlName", loadControlObject.getControlName());
                            jsonObject.put("Prefix", loadControlObject.getPreFixValue());
                            jsonObject.put("Suffix", loadControlObject.getSuffixValue());
                            if (loadControlObject.getSuffix1Value() != null && !loadControlObject.getSuffix1Value().contentEquals("")) {
                                jsonObject.put("Suffix1", loadControlObject.getSuffix1Value());
                            }
                            jArrayAutoIncementControls.put(jsonObject);
                        } catch (JSONException e) {
//                    e.printStackTrace();
                            Log.d(TAG, "loadControlAutoGenException: " + e);
                        }
                        LinearLayout linearLayoutANG = new LinearLayout(context);
                        linearLayoutANG.setVisibility(View.GONE);
                        linearLayoutANG.setTag(loadControlObject.getControlName());
                        linearLayout.addView(linearLayoutANG);
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();

                                }
                            }
                        }
                        break;
                    case CONTROL_TYPE_DATA_TABLE:
//                        DataTableControl dataTableControl = new DataTableControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), dataTableControl);
                        DataTableControl dataTableControl = null;
                        if(isPopup){
                            dataTableControl = (DataTableControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            dataTableControl = new DataTableControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), dataTableControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(dataTableControl.getDataTableLayout());
                        } else {
                            linearLayoutSection.addView(dataTableControl.getDataTableLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            dataTableControl.getDataTableLayout().setVisibility(View.GONE);
                        } else {
                            dataTableControl.getDataTableLayout().setVisibility(View.VISIBLE);
                        }
                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }

                        if (loadControlObject.isOnClickEventExists()) {
                            Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
                            hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();

                                }
                            }
                        }


                        break;
                    case CONTROL_TYPE_SUBMIT_BUTTON:
//                        SubmitButton SubmitButton = new SubmitButton(context, loadControlObject, false, 0, "", strAppName, dataCollectionObject.isCaptchaRequired());
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), SubmitButton);
                        SubmitButton SubmitButton = null;
                        if(isPopup){
                            SubmitButton = (SubmitButton) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            SubmitButton = new SubmitButton(context, loadControlObject, false, 0, "", strAppName, dataCollectionObject.isCaptchaRequired());
                            List_ControlClassObjects.put(loadControlObject.getControlName(), SubmitButton);
                        }

                        if (dataCollectionObject.isUIFormNeeded() && ll_preViewContainer != null) {
//                    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.MATCH_PARENT,viewWidthSize);//This is the correct answer
//                    ll_preViewContainer.setLayoutParams(params);

//                    ll_preViewContainer.setLayoutParams(layoutParams);
                            SubmitButton.getButtonView().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                            SubmitButton.getbtn_main().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
//                    button.getll_btnMain().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                            SubmitButton.getll_button().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                            SubmitButton.getiv_main().setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

                            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);

//                    layoutParams.weight =1;
                            layoutParams.setMargins(10, 10, 10, 10);
                            SubmitButton.getll_btnMain().setLayoutParams(layoutParams);
                            ll_preViewContainer.addView(SubmitButton.getButton());
//                    ll_preViewContainer.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                            SubmitButton.getButton().setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                                    LinearLayout.LayoutParams.MATCH_PARENT));

                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }

                        } else if (section == 0) {
                            linearLayout.addView(SubmitButton.getButton());
                        } else {
                            linearLayoutSection.addView(SubmitButton.getButton());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
//                if (loadControlObject.isInvisible()) {
//                    SubmitButton.getButton().setVisibility(View.GONE);
//                } else {
//                    SubmitButton.getButton().setVisibility(View.VISIBLE);
//                }
                        if (dataCollectionObject.isApp_OnSubmitEvent()) {
//                    Control_EventObject onclick_control_EventObject = loadControlObject.getOnClickEventObject();
//                    hash_Onclick_EventObjects.put(loadControlObject.getControlName(), onclick_control_EventObject);
                        }
//                        if (section == 0) {
//                            linearLayout.addView(SubmitButton.getButton());
//                        } else {
//                            linearLayoutSection.addView(SubmitButton.getButton());
//                        }
                        break;

                    case CONTROL_TYPE_TIME:

//                        Time timeControl = new Time(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), timeControl);
                        Time timeControl = null;
                        if(isPopup){
                            timeControl = (Time) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            timeControl = new Time(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), timeControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(timeControl.getTimeControlLayout());
                        } else {
                            linearLayoutSection.addView(timeControl.getTimeControlLayout());
                        }


//                timeControl.ct_alertTypeTextOne(); // error message
//                timeControl.ct_alertTypeTextTwo(); // error message

                        if (loadControlObject.isInvisible()) {
                            timeControl.getTimeControlLayout().setVisibility(View.GONE);
                        } else {
                            timeControl.getTimeControlLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            } else {
                                if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                    ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                    controlUiSettings.setControlUiSettings();
                                }
                            }
                        }

                        break;
                    case CONTROL_TYPE_AUTO_COMPLETION:

//                        AutoCompletionControl autoCompletionControla = new AutoCompletionControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), autoCompletionControla);
                        AutoCompletionControl autoCompletionControla = null;
                        if(isPopup){
                            autoCompletionControla = (AutoCompletionControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            autoCompletionControla = new AutoCompletionControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), autoCompletionControla);
                        }
                        if (section == 0) {
                            linearLayout.addView(autoCompletionControla.getAutoCompletionControlView());
                        } else {
                            linearLayoutSection.addView(autoCompletionControla.getAutoCompletionControlView());
                        }

                        if (loadControlObject.isInvisible()) {
                            autoCompletionControla.getAutoCompletionControlView().setVisibility(View.GONE);
                        } else {
                            autoCompletionControla.getAutoCompletionControlView().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                controlUiSettings.setControlUiSettings();

                            }
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        break;
                    case CONTROL_TYPE_PAYMENT_GATEWAY:

//                        WizardControl wizardControl = new WizardControl(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), wizardControl);
                        WizardControl wizardControl = null;
                        if(isPopup){
                            wizardControl = (WizardControl) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            wizardControl = new WizardControl(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), wizardControl);
                        }

                        if (section == 0) {
                            linearLayout.addView(wizardControl.getWizardLayout());
                        } else {
                            linearLayoutSection.addView(wizardControl.getWizardLayout());
                        }

                        if (loadControlObject.isInvisible()) {
                            wizardControl.getWizardLayout().setVisibility(View.GONE);
                        } else {
                            wizardControl.getWizardLayout().setVisibility(View.VISIBLE);
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                controlUiSettings.setControlUiSettings();
                            }
                            if (loadControlObject.isInvisible()) {
                                linearLayout.setVisibility(View.GONE);
                            }
                        }
                        if (loadControlObject.isOnFocusEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnFocusEventObject();
                            hash_Onfocus_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        if (loadControlObject.isOnChangeEventExists()) {
                            Control_EventObject onchange_control_EventObject = loadControlObject.getOnChangeEventObject();
                            hash_Onchange_EventObjects.put(loadControlObject.getControlName(), onchange_control_EventObject);
                        }
                        break;
                    case CONTROL_TYPE_CUSTOM_HEADER:

//                        UISettingsCustomHeader UISettingsCustomHeader = new UISettingsCustomHeader(MainActivity.this, loadControlObject, false, 0, "");
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), UISettingsCustomHeader);
                        UISettingsCustomHeader UISettingsCustomHeader = null;
                        if(isPopup){
                            UISettingsCustomHeader = (UISettingsCustomHeader) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            UISettingsCustomHeader = new UISettingsCustomHeader(MainActivity.this, loadControlObject, false, 0, "");
                            List_ControlClassObjects.put(loadControlObject.getControlName(), UISettingsCustomHeader);
                        }

                        if (section == 0) {
                            linearLayout.addView(UISettingsCustomHeader.getCustomHeaderLayout());
                        } else {
                            linearLayoutSection.addView(UISettingsCustomHeader.getCustomHeaderLayout());
                        }

                        if (dataCollectionObject.isUIFormNeeded()) {
                            if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                controlUiSettings.setControlUiSettings();
                            }
                        }


                        break;

                    case CONTROL_TYPE_CUSTOM_IMAGE:

//                        UISettingsCustomImage uiSettingsCustomImage = new UISettingsCustomImage(MainActivity.this, loadControlObject, false, 0, "", controlUIProperties);
//                        List_ControlClassObjects.put(loadControlObject.getControlName(), uiSettingsCustomImage);
                        UISettingsCustomImage uiSettingsCustomImage = null;
                        if(isPopup){
                            uiSettingsCustomImage = (UISettingsCustomImage) List_ControlClassObjects.get(loadControlObject.getControlName());
                        }else {
                            uiSettingsCustomImage = new UISettingsCustomImage(MainActivity.this, loadControlObject, false, 0, "", controlUIProperties);
                            List_ControlClassObjects.put(loadControlObject.getControlName(), uiSettingsCustomImage);
                        }

                        if (section == 0) {
                            linearLayout.addView(uiSettingsCustomImage.getCustomImageLayout());
                        } else {
                            linearLayoutSection.addView(uiSettingsCustomImage.getCustomImageLayout());
                        }
                        if (dataCollectionObject.isUIFormNeeded()) {
/*
                            if(loadControlObject.getCustomImageFit() != null && !loadControlObject.getCustomImageFit().isEmpty()) {
                                String strImageFitType = loadControlObject.getCustomImageFit();
                                if (strImageFitType.equalsIgnoreCase(AppConstants.FILL)) {
                                    Log.d(TAG, "loadControlImageFitType: "+strImageFitType);
                                    LinearLayout.LayoutParams lpCtrlUI = (LinearLayout.LayoutParams) uiSettingsCustomImage.getLl_control_ui().getLayoutParams();
                                    lpCtrlUI.width = -1;
                                    lpCtrlUI.height = -1;
//                                    LinearLayout.LayoutParams lpIView = (LinearLayout.LayoutParams) uiSettingsCustomImage.getUiCustomImage().getLayoutParams();
//                                    lpIView.width = -1;
//                                    lpIView.height = -2;
                                    uiSettingsCustomImage.getLl_control_ui().setLayoutParams(lpCtrlUI);
//                                    uiSettingsCustomImage.getUiCustomImage().setLayoutParams(lpIView);
//                                    uiSettingsCustomImage.getUiCustomImage().setScaleType(ImageView.ScaleType.FIT_XY);
                                } else if (strImageFitType.equalsIgnoreCase(AppConstants.COVER)) {

                                } else if (strImageFitType.equalsIgnoreCase(AppConstants.CONTAIN)) {

                                } else{
                                    uiSettingsCustomImage.getUiCustomImage().setScaleType(ImageView.ScaleType.FIT_XY);
                                }
                            }
*/
                            if (AppConstants.uiLayoutPropertiesStatic.getAliasName() != null) {
                                ControlUiSettings controlUiSettings = new ControlUiSettings(loadControlObject, AppConstants.uiLayoutPropertiesStatic, controlUIProperties, List_ControlClassObjects, context);
                                controlUiSettings.setControlUiSettings();
                            }
                        }

                        break;


                }
      /*      uFScrollView.postDelayed(new Runnable() {
                @Override
                public void run() {
//                            uFScrollView.fullScroll(ScrollView.FOCUS_UP);
                    uFScrollView.scrollTo(0, 0);
                }
            }, 100);*/

                //}
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "loadControl", e);
        }
    }

    public void zoomImage(ImageView mainImageView) {

        mainImageView.setScaleType(ImageView.ScaleType.MATRIX);
        mainImageView.setOnTouchListener(new View.OnTouchListener() {
            @SuppressLint("ClickableViewAccessibility")
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                ImageView view = (ImageView) v;
                view.setScaleType(ImageView.ScaleType.MATRIX);
                float scale;

                dumpEvent(event);
                // Handle touch events here...

                switch (event.getAction() & MotionEvent.ACTION_MASK) {
                    case MotionEvent.ACTION_DOWN:   // first finger down only
                        matrix.set(view.getImageMatrix());
                        savedMatrix.set(matrix);
                        start.set(event.getX(), event.getY());
                        Log.d(TAG, "mode=DRAG"); // write to LogCat
                        mode = DRAG;
                        break;

                    case MotionEvent.ACTION_UP: // first finger lifted

                    case MotionEvent.ACTION_POINTER_UP: // second finger lifted

                        mode = NONE;
                        Log.d(TAG, "mode=NONE");
                        break;

                    case MotionEvent.ACTION_POINTER_DOWN: // first and second finger down

                        oldDist = spacing(event);
                        Log.d(TAG, "oldDist=" + oldDist);
                        if (oldDist > 5f) {
                            savedMatrix.set(matrix);
                            midPoint(mid, event);
                            mode = ZOOM;
                            Log.d(TAG, "mode=ZOOM");
                        }
                        break;

                    case MotionEvent.ACTION_MOVE:

                        if (mode == DRAG) {
                            matrix.set(savedMatrix);
                            matrix.postTranslate(event.getX() - start.x, event.getY() - start.y); // create the transformation in the matrix  of points
                        } else if (mode == ZOOM) {
                            // pinch zooming
                            float newDist = spacing(event);
                            Log.d(TAG, "newDist=" + newDist);
                            if (newDist > 5f) {
                                matrix.set(savedMatrix);
                                scale = newDist / oldDist; // setting the scaling of the
                                // matrix...if scale > 1 means
                                // zoom in...if scale < 1 means
                                // zoom out
                                matrix.postScale(scale, scale, mid.x, mid.y);
                            }
                        }
                        break;
                }

                view.setImageMatrix(matrix); // display the transformation on screen

                return true; // indicate event was handled
            }
        });

    }

    /**
     * nk:selectScannerOrFileManager
     * Alert dialog for scan doc or file pick
     */
    private void selectScannerOrFileManager(View v, ControlObject loadControlObject, FileBrowsing fileBrowsing) {
        final CharSequence[] items = {
                "Scanner", "File Manager", "Cancel"
        };
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setItems(items, (dialog, item) -> {
            if (items[item].equals("Scanner")) {

            } else if (items[item].equals("File Manager")) {
                selectFileManager(v, controlObject, fileBrowsing);
            } else if (items[item].equals("Cancel")) {
                dialog.dismiss();
            }
        });
        builder.show();
    }

    //nk: selectScanner
    private void selectScanner() {

    }

    //nk: selectFileManager
    private void selectFileManager(View v, ControlObject loadControlObject, FileBrowsing fileBrowsing) {
        AppConstants.Current_ClickorChangeTagName = v.getTag().toString().trim();

//                            startActivityForResult(new Intent(MainActivity.this, FilePicker.class), FILE_BROWSER_RESULT_CODE);
        Intent intent = new Intent(MainActivity.this, FilePicker.class);
        ArrayList<String> extensions = new ArrayList<>();
        if (loadControlObject.isEnableExtensions()) {
            for (int i = 0; i < loadControlObject.getExtensionsListNames().size(); i++) {
                extensions.add("." + loadControlObject.getExtensionsListNames().get(i).toLowerCase());

            }

            intent.putStringArrayListExtra(FilePicker.EXTRA_ACCEPTED_FILE_EXTENSIONS, extensions);

        }

        startActivityForResult(intent, FILE_BROWSER_RESULT_CODE);

        if (loadControlObject.isOnChangeEventExists()) {
            if (AppConstants.EventCallsFrom == 1) {
                AppConstants.GlobalObjects.setCurrent_GPS("");
                ChangeEvent(v);
            }
        }
//                        CustomTextView ct_alertTypeFileBrowser = view.findViewById(R.id.ct_alertTypeText);
        fileBrowsing.setAlertFileBrowser().setVisibility(View.GONE);
        fileBrowsing.setAlertFileBrowser().setText("");
    }

    private void shareImage(String filePath) {
        try {
            File file = new File(filePath);
            Intent intentShare = new Intent(Intent.ACTION_SEND);
            // intentShare.setType("application/pdf");
            intentShare.setType("*/*");
            // intentShare.setType("image/*");
            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.M) {
                Uri photoUri = FileProvider.getUriForFile(this, "com.bhargo.user.fileprovider", file);
                intentShare.putExtra(Intent.EXTRA_STREAM, photoUri);
            } else {
                intentShare.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));
            }
            startActivity(Intent.createChooser(intentShare, "Share the file ..."));

        } catch (Exception e) {
            ImproveHelper.showToast(context, "Failed to share file!\nTry Again..." + e.getMessage());
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {

        try {
            Log.d("WebLinkActivityResult", "RequestCode" + requestCode + " ResultCode: " + resultCode);
            IntentResult result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);
            if (result != null) {
                if (result.getContents() == null) {
                    Toast.makeText(this, "Result Not Found", Toast.LENGTH_LONG).show();
                } else {
    /*            try {
                    SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
//                    FileBrowsing fileBrowsingSF = (FileBrowsing) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                    LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                    if (sfClassObjects != null && sfClassObjects.size() > 0) {
                        TextInput textInput_readCode_SF = (TextInput) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        textInput_readCode_SF.setQRorBartext(result.getContents());
                        Toast.makeText(this, result.getContents(), Toast.LENGTH_LONG).show();
                    }
                } catch (Exception e) {
                    TextInput textInput_readcode = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
//                textInput_readcode.getCustomEditText().setText(result.getContents());
                    textInput_readcode.setQRorBartext(result.getContents());
                    Toast.makeText(this, result.getContents(), Toast.LENGTH_LONG).show();
                }*/
                    if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {

                    /*SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                    LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                    if (sfClassObjects != null && sfClassObjects.size() > 0) {
                        TextInput textInput_readCode_SF = (TextInput) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        textInput_readCode_SF.setQRorBartext(result.getContents());
                        Toast.makeText(this, result.getContents(), Toast.LENGTH_LONG).show();
                    }*/
                        SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        if (sfClassObjects != null && sfClassObjects.size() > 0) {
                            List<ControlObject> SubObjects = subformView.controlObject.getSubFormControlList();
                            if (ImproveHelper.getControlType(SubObjects, AppConstants.SF_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_TEXT_INPUT)) {
                                TextInput textInput_readCode_SF = (TextInput) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                                textInput_readCode_SF.setQRorBartext(result.getContents());
//                        Toast.makeText(this, result.getContents(), Toast.LENGTH_LONG).show();
                            } else if (ImproveHelper.getControlType(SubObjects, AppConstants.SF_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_NUMERIC_INPUT)) {
                                NumericInput numericInput_readCode_SF = (NumericInput) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                                numericInput_readCode_SF.setQRorBartext(result.getContents());
                            } else if (ImproveHelper.getControlType(SubObjects, AppConstants.SF_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_PHONE)) {
                                Phone phone_readCode_SF = (Phone) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                                phone_readCode_SF.setQRorBartext(result.getContents());
                            } else if (ImproveHelper.getControlType(SubObjects, AppConstants.SF_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_EMAIL)) {
                                Email email_readCode_SF = (Email) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                                email_readCode_SF.setQRorBartext(result.getContents());
                            }
                        }
                    } else {
                        if (List_ControlClassObjects != null && List_ControlClassObjects.containsKey(AppConstants.Current_ClickorChangeTagName)) {
                            if (ImproveHelper.getControlType(list_Control, AppConstants.Current_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_TEXT_INPUT)) {
                                TextInput textInput_readcode = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                                if (textInput_readcode.getIv_textTypeImage().getTag().toString().equalsIgnoreCase(AppConstants.Current_ClickorChangeTagName)) {
                                    textInput_readcode.setQRorBartext(result.getContents());
                                }
                            } else if (ImproveHelper.getControlType(list_Control, AppConstants.Current_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_NUMERIC_INPUT)) {
                                NumericInput numericInput_readcode = (NumericInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                                if (numericInput_readcode.getIv_textTypeImage().getTag().toString().equalsIgnoreCase(AppConstants.Current_ClickorChangeTagName)) {
                                    numericInput_readcode.setQRorBartext(result.getContents());
                                }
                            } else if (ImproveHelper.getControlType(list_Control, AppConstants.Current_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_PHONE)) {
                                Phone phone_readcode = (Phone) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                                if (phone_readcode.getIv_textTypeImage().getTag().toString().equalsIgnoreCase(AppConstants.Current_ClickorChangeTagName)) {
                                    phone_readcode.setQRorBartext(result.getContents());
                                }
                            } else if (ImproveHelper.getControlType(list_Control, AppConstants.Current_ClickorChangeTagName).equalsIgnoreCase(CONTROL_TYPE_EMAIL)) {
                                Email email_readcode = (Email) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                                if (email_readcode.getIv_textTypeImage().getTag().toString().equalsIgnoreCase(AppConstants.Current_ClickorChangeTagName)) {
                                    email_readcode.setQRorBartext(result.getContents());
                                }
                            }
//                        Toast.makeText(this, result.getContents(), Toast.LENGTH_LONG).show();
                        }
                    }
                }
            } else {
                super.onActivityResult(requestCode, resultCode, data);
            }
            switch (requestCode) {
                case LocHelper.REQUEST_CHECK_SETTINGS:
                    locHelper.startLocationUpdates();
                    break;
                case ScanQR_REQUEST_CODE:
                    System.out.println("result.getContents()===" + result.getContents());
                    LinkedHashMap<String, String> ScanQRCode_ListHash;
                    if (AppConstants.GlobalObjects.getScanQRCode_ListHash() == null) {
                        ScanQRCode_ListHash = new LinkedHashMap<String, String>();
                    } else {
                        ScanQRCode_ListHash = AppConstants.GlobalObjects.getScanQRCode_ListHash();
                    }
                    ScanQRCode_ListHash.put(AppConstants.Current_ScanName.toLowerCase(), result.getContents());
                    AppConstants.GlobalObjects.setScanQRCode_ListHash(ScanQRCode_ListHash);
                    System.out.println("size==" + AppConstants.GlobalObjects.getScanQRCode_ListHash().size());
//                    (im:Variables.Single.werewr)
                    if(AppConstants.Current_ScanName.toLowerCase().startsWith("(im:variables")){
                        AppConstants.Current_ScanName = AppConstants.Current_ScanName.split("\\.")[2];
                        setVariable(AppConstants.Current_ScanName.substring(0, Current_ScanName.lastIndexOf(")")),result.getContents(),null);
                    }else {
                        SetValuetoControl(AppConstants.Current_ScanName, result.getContents(), "", "");
                    }

                    nextEvent();

                    break;
                case REQUEST_FUSED_LOCATION:

                    if (resultCode == RESULT_OK) {
                        inparam_current_location = data.getStringExtra(LocationHelper.LOC_DATA);
                        AppConstants.CURRENT_LOCATION = inparam_current_location;
                        if (AppConstants.GlobalObjects == null) {
                            AppConstants.GlobalObjects = new GlobalObjects();
                        }
                        AppConstants.GlobalObjects.setCurrent_GPS(inparam_current_location);

                            if (callback != null) {
                                callback.onSuccess(inparam_current_location);
                            }

                    } else {
                        if (callback != null)
                            callback.onFailure(new Throwable("Failed To Capture Location."));
                    }

                    break;
                case REQUEST_FUSED_LOCATION_CF:

                    if (resultCode == RESULT_OK) {

                        inparam_current_location_cf = data.getStringExtra(LocationHelper.LOC_DATA);
                        AppConstants.CURRENT_LOCATION = inparam_current_location_cf;
                        if (AppConstants.GlobalObjects == null) {
                            AppConstants.GlobalObjects = new GlobalObjects();
                        }
                        AppConstants.GlobalObjects.setCurrent_GPS(inparam_current_location_cf);

//                    EventExecute();
                        callform(Global_ActionObj);
                    }

                    break;

                case REQUEST_FUSED_LOCATION_API:

                    if (resultCode == RESULT_OK) {

                        inparam_current_location = data.getStringExtra(LocationHelper.LOC_DATA);
                        AppConstants.CURRENT_LOCATION = inparam_current_location;
                        if (AppConstants.GlobalObjects == null) {
                            AppConstants.GlobalObjects = new GlobalObjects();
                        }
                        AppConstants.GlobalObjects.setCurrent_GPS(inparam_current_location);
                        CallAPIQueryServices(Global_ActionObj);
                    }

                    break;
                case REQUEST_GO_CURRENT_LOCATION_ON_FormLoad:

                    if (resultCode == RESULT_OK) {

                        inparam_current_location = data.getStringExtra(LocationHelper.LOC_DATA);
                        AppConstants.CURRENT_LOCATION = inparam_current_location;
                        if (AppConstants.GlobalObjects == null) {
                            AppConstants.GlobalObjects = new GlobalObjects();
                        }
                        AppConstants.GlobalObjects.setCurrent_GPS(inparam_current_location);
                        FormLoad();
//                    CallFormFields(Global_ActionObj);
                    }

                    break;
                case REQUEST_FUSED_LOCATION1:

                    if (resultCode == RESULT_OK) {
                        inparam_current_location = data.getStringExtra(LocationHelper.LOC_DATA);
                        AppConstants.CURRENT_LOCATION = inparam_current_location;
                        AppConstants.GlobalObjects.setCurrent_GPS(inparam_current_location);
//                    SetValue(Global_ActionObj);
                        loadControl_EventObject(locHelper.getControl_EventObject());
                   /* if(ActionIndex==0){
                        EventExecute();
                    }*/
                    }

                    break;
                case IMAGE_RESULT_CODE:
                    try {
//                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        if (resultCode == RESULT_OK) {
                            File photoFile = null;
                            photoFile = new File(data.getStringExtra(CameraActivity.RESULT_IMG_PATH));
                            String uriSting = photoFile.getAbsolutePath();

                            int filesize = ImproveHelper.getFileSize(uriSting);
                            if (cameraA.getControlObject().isEnableMaxUploadSize() && (filesize > (Integer.parseInt(cameraA.getControlObject().getMaxUploadSize())) * 1000)) {
//                Toast.makeText(context, controlObject.getMaxUploadError(), Toast.LENGTH_SHORT).show();
                                ImproveHelper.showToast(context, cameraA.getControlObject().getMaxUploadError());
                            } else if (cameraA.getControlObject().isEnableMinUploadSize() && (filesize < (Integer.parseInt(cameraA.getControlObject().getMinUploadSize())) * 1000)) {
//                Toast.makeText(context, controlObject.getMinUploadError(), Toast.LENGTH_SHORT).show();
                                ImproveHelper.showToast(context, cameraA.getControlObject().getMinUploadError());
                            } else {
                                cameraA.setPath(uriSting);
                            cameraA.getControlRealPath().setTag(uriSting);
                            cameraA.setFileName(uriSting);
                            //Sanjay
//                    Bitmap imageBitmap = cameraOrientations(photoFile.getAbsolutePath());
                            Bitmap imageBitmap = BitmapFactory.decodeFile(uriSting);

//                            cameraA.getLLImageView().setImageBitmap(imageBitmap);
                            if (cameraA.isImageWithGPSEnabledResults()) {
                                cameraA.setImage(imageBitmap);
                                cameraA.setImageWithGps(IMAGE_WITH_GPS_REQUEST_CODE);
                            } else {
                                cameraA.setImage(imageBitmap);
                            }

                        }
                        } else {
                            Toast.makeText(context, "No image captured", Toast.LENGTH_LONG).show();

                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        ImproveHelper.showToast(MainActivity.this, "Image Capture Failed,try again");
                    }
                    break;
                case SF_IMAGE_RESULT_CODE:
                    try {
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }

                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
//                    Camera cameraA = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        Camera cameraA = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);

                        if (resultCode == RESULT_OK) {
//                        View camview = cameraA.getCameraView();
//                        ImageView iv_CapturedImage = camview.findViewById(R.id.iv_CapturedImage);
//                        Bitmap thumbnail = BitmapFactory.decodeFile(data.getStringExtra("image_path"));
//                        cameraA.setUploadedImage(iv_CapturedImage, thumbnail, data.getStringExtra("image_path"), null, 0);
//                        cameraA.getControlRealPath().setTag(data.getStringExtra("image_path"));
//                        cameraA.setPath(data.getStringExtra("image_path"));
//                        cameraA.getFileNameTextView().setText(data.getStringExtra("image_path"));
//                        cameraA.setBitmapFromSource(thumbnail);
                            File photoFile = null;
                            photoFile = new File(data.getStringExtra(CameraActivity.RESULT_IMG_PATH));
                            String uriSting = photoFile.getAbsolutePath();
                            int filesize = ImproveHelper.getFileSize(uriSting);
                            if (cameraA.getControlObject().isEnableMaxUploadSize() && (filesize > (Integer.parseInt(cameraA.getControlObject().getMaxUploadSize())) * 1000)) {
//                Toast.makeText(context, controlObject.getMaxUploadError(), Toast.LENGTH_SHORT).show();
                                ImproveHelper.showToast(context, cameraA.getControlObject().getMaxUploadError());
                            } else if (cameraA.getControlObject().isEnableMinUploadSize() && (filesize < (Integer.parseInt(cameraA.getControlObject().getMinUploadSize())) * 1000)) {
//                Toast.makeText(context, controlObject.getMinUploadError(), Toast.LENGTH_SHORT).show();
                                ImproveHelper.showToast(context, cameraA.getControlObject().getMinUploadError());
                            } else {

                                cameraA.setPath(uriSting);
                            cameraA.getControlRealPath().setTag(uriSting);
                            cameraA.setFileName(uriSting);
                            //Sanjay
//                    Bitmap imageBitmap = cameraOrientations(photoFile.getAbsolutePath());
                            Bitmap imageBitmap = BitmapFactory.decodeFile(uriSting);

//                            cameraA.getLLImageView().setImageBitmap(imageBitmap);
                            if (cameraA.isImageWithGPSEnabledResults()) {
                                cameraA.setImage(imageBitmap);
                                cameraA.setImageWithGps(SF_IMAGE_WITH_GPS_REQUEST_CODE);
                            } else {
                                cameraA.setImage(imageBitmap);
                            }
                        }
                        } else {

                            Toast.makeText(context, "No image captured", Toast.LENGTH_LONG).show();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        ImproveHelper.showToast(MainActivity.this, "Image Capture Failed,try again");
                    }
                    break;
                case REQUEST_SIGNATURE_CONTROL_CODE:

                    if (resultCode == RESULT_OK && data != null) {
//                    SignatureView signatureView = (SignatureView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        SignatureView signatureView = (SignatureView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Uri selectedSignature = data.getData();
                        String strSignPath = getRealPathFromURI(selectedSignature);
                        signatureView.getControlRealPath().setTag(strSignPath);
                        signatureView.setPath(strSignPath);
                        signatureView.setSelectedSignature(selectedSignature);
                        Log.d(TAG, "onActivityResultSignature: " + strSignPath);
                    }

                    break;
                case SF_REQUEST_SIGNATURE_CONTROL_CODE:

                    if (resultCode == RESULT_OK && data != null) {

                        /*SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;*/

                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }

                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        SignatureView signatureView = (SignatureView) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        Uri selectedSignature = data.getData();
                        signatureView.setSelectedSignature(selectedSignature);
                        String strSignPath = getRealPathFromURI(selectedSignature);
                        signatureView.getControlRealPath().setTag(strSignPath);
                        signatureView.setPath(strSignPath);
                        Log.d(TAG, "onActivityResultSignature: " + strSignPath);
                    }else{
                        Log.d(TAG, "onActivityResultSignature: " + "Not selected");
                    }

                    break;
                case REQUEST_CAMERA_CONTROL_CODE:

                    // Working Start
                    if (resultCode == RESULT_OK) {
//                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        cameraA.getLLImageView().setVisibility(View.VISIBLE);
                        System.out.println("tag==" + cameraA.getCameraView().getTag().toString());

/*
                    //Old Working Code Start
                    Bitmap imageBitmap = BitmapFactory.decodeFile(cameraA.CapturedImagePath());
                    cameraA.getLLImageView().setImageBitmap(imageBitmap);
                    if (cameraA.isImageWithGPSEnabledResults()) {
                        cameraA.setImage(imageBitmap);
                        cameraA.setImageWithGps(IMAGE_WITH_GPS_REQUEST_CODE);
                    } else {
                        cameraA.setImage(imageBitmap);
                    }
                    //Old Working Code Endf
*/

                        File photoFile = null;
                        photoFile = new File(data.getStringExtra(CameraActivity.RESULT_IMG_PATH));
                        String uriSting = photoFile.getAbsolutePath();
                        int filesize = ImproveHelper.getFileSize(uriSting);
                        if (cameraA.getControlObject().isEnableMaxUploadSize() && (filesize > (Integer.parseInt(cameraA.getControlObject().getMaxUploadSize())) * 1000)) {
//                Toast.makeText(context, controlObject.getMaxUploadError(), Toast.LENGTH_SHORT).show();
                            ImproveHelper.showToast(context, cameraA.getControlObject().getMaxUploadError());
                        } else if (cameraA.getControlObject().isEnableMinUploadSize() && (filesize < (Integer.parseInt(cameraA.getControlObject().getMinUploadSize())) * 1000)) {
//                Toast.makeText(context, controlObject.getMinUploadError(), Toast.LENGTH_SHORT).show();
                            ImproveHelper.showToast(context, cameraA.getControlObject().getMinUploadError());
                        } else {

                            cameraA.setPath(uriSting);
                            cameraA.getControlRealPath().setTag(uriSting);
                            cameraA.setFileName(uriSting);
                            //Sanjay
//                    Bitmap imageBitmap = cameraOrientations(photoFile.getAbsolutePath());
                            Bitmap imageBitmap = BitmapFactory.decodeFile(uriSting);

//                    cameraA.getLLImageView().setImageBitmap(imageBitmap);
                            if (cameraA.isImageWithGPSEnabledResults() || cameraA.isEnableImageWithGps()) {
                                cameraA.setImage(imageBitmap);
                                cameraA.setBitmapFromSource(imageBitmap);
                                cameraA.setImageWithGps(IMAGE_WITH_GPS_REQUEST_CODE);
                            } else {
                                cameraA.setImage(imageBitmap);
//                        cameraA.getLLImageView().setImageBitmap(imageBitmap);
                            }
                        }

                    } else {
//                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
//                        cameraA.getTv_tapText().setVisibility(View.VISIBLE);
                        cameraA.getLLImageView().setVisibility(View.GONE);
                        cameraA.setLLTapText(View.VISIBLE);
                        cameraA.getReTake().setVisibility(View.VISIBLE);


                        Log.d(TAG, "onActivityResult: REQUEST_CAMERA_CONTROL_CODE");
                    }

                    break;
                case SECTION_REQUEST_CAMERA_CONTROL_CODE:

                    // Working Start
                    if (resultCode == RESULT_OK) {
//                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        cameraA.getLLImageView().setVisibility(View.VISIBLE);
                        System.out.println("tag==" + cameraA.getCameraView().getTag().toString());

/*
                    //Old Working Code Start
                    Bitmap imageBitmap = BitmapFactory.decodeFile(cameraA.CapturedImagePath());
                    cameraA.getLLImageView().setImageBitmap(imageBitmap);
                    if (cameraA.isImageWithGPSEnabledResults()) {
                        cameraA.setImage(imageBitmap);
                        cameraA.setImageWithGps(IMAGE_WITH_GPS_REQUEST_CODE);
                    } else {
                        cameraA.setImage(imageBitmap);
                    }
                    //Old Working Code Endf
*/

                        File photoFile = null;
                        photoFile = new File(data.getStringExtra(CameraActivity.RESULT_IMG_PATH));
                        String uriSting = photoFile.getAbsolutePath();
                        cameraA.setPath(uriSting);
                        cameraA.getControlRealPath().setTag(uriSting);
                        cameraA.setFileName(uriSting);
                        //Sanjay
//                    Bitmap imageBitmap = cameraOrientations(photoFile.getAbsolutePath());
                        Bitmap imageBitmap = BitmapFactory.decodeFile(uriSting);

//                    cameraA.getLLImageView().setImageBitmap(imageBitmap);
                        if (cameraA.isImageWithGPSEnabledResults() || cameraA.isEnableImageWithGps()) {
                            cameraA.setImage(imageBitmap);
//                            cameraA.setImageWithGps(IMAGE_WITH_GPS_REQUEST_CODE);
                            cameraA.setImageWithGps(SECTION_IMAGE_WITH_GPS_REQUEST_CODE);
                        } else {
                            cameraA.setImage(imageBitmap);
//                        cameraA.getLLImageView().setImageBitmap(imageBitmap);
                        }

                    } else {
//                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        cameraA.getLLImageView().setVisibility(View.GONE);
                        cameraA.setLLTapText(View.VISIBLE);
                        cameraA.getReTake().setVisibility(View.VISIBLE);


                        Log.d(TAG, "onActivityResult: REQUEST_CAMERA_CONTROL_CODE");
                    }

                    break;
                /*    case REQUEST_CAMERA_CONTROL_CODE:

                if (resultCode == RESULT_OK) {
                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    cameraA.getLLImageView().setVisibility(View.VISIBLE);
                    System.out.println("tag==" + cameraA.getCameraView().getTag().toString());
                    Log.d(TAG, "onActivityResultCameo: "+data.getExtras().get("data"));

                    Bitmap cameraControlBitmap = (Bitmap) data.getExtras().get("data");
                    if (cameraA.isImageWithGPSEnabledResults()) {
                        cameraA.setImage(cameraControlBitmap);
                        cameraA.setImageWithGps(IMAGE_WITH_GPS_REQUEST_CODE);
                    } else {
                        cameraA.setImage(cameraControlBitmap);
                    }

                    Uri tempUri = getImageUri(getApplicationContext(), cameraControlBitmap);
                    // CALL THIS METHOD TO GET THE ACTUAL PATH
                    File finalFile = new File(getRealPathFromURI(tempUri));
                    cameraA.getLLImageView().setTag(finalFile.toString());
                    System.out.println(finalFile);
                    cameraA.getControlRealPath().setTag(finalFile.toString());

                } else {
                    Camera cameraA = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    cameraA.getLLImageView().setVisibility(View.GONE);
                    Log.d(TAG, "onActivityResult: REQUEST_CAMERA_CONTROL_CODE");
                }

                break;*/
                case SF_REQUEST_CAMERA_CONTROL_CODE:
                    try {
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }

                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        if (resultCode == RESULT_OK) {

//                        Camera cameraA = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                            Camera cameraA = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                            cameraA.getLLImageView().setVisibility(View.VISIBLE);
                            System.out.println("tag==" + cameraA.getCameraView().getTag().toString());


//                        Bitmap imageBitmap = BitmapFactory.decodeFile(cameraA.CapturedImagePath());

                            File photoFile = null;
                            photoFile = new File(data.getStringExtra(CameraActivity.RESULT_IMG_PATH));
                            String uriSting = photoFile.getAbsolutePath();
                            cameraA.setPath(uriSting);
                            cameraA.getControlRealPath().setTag(uriSting);
                            cameraA.setFileName(uriSting);

                            //Sanjay
                            Bitmap imageBitmap = BitmapFactory.decodeFile(uriSting);

//                            cameraA.setImageBitmap(bmp);
                            cameraA.getLLImageView().setImageBitmap(imageBitmap);
                            if (cameraA.isImageWithGPSEnabledResults() || cameraA.isEnableImageWithGps()) {
                                cameraA.setImage(imageBitmap);
                                cameraA.setImageWithGps(SF_IMAGE_WITH_GPS_REQUEST_CODE);
                            } else {
                                cameraA.setImage(imageBitmap);
                            }

                        } else {
//                        Camera cameraA = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                            Camera cameraA = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                            cameraA.getLLImageView().setVisibility(View.VISIBLE);
                            Log.d(TAG, "onActivityResult: SF_REQUEST_CAMERA_CONTROL_CODE");
                            cameraA.getLLImageView().setVisibility(View.GONE);
                            cameraA.setLLTapText(View.VISIBLE);
                            cameraA.getReTake().setVisibility(View.VISIBLE);
                        }
                    } catch (Exception e) {
                        ImproveHelper.improveException(context, TAG, "Camera -  OnActivityresults", e);
                    }


                    break;
                case REQUEST_GALLERY_CONTROL_CODE:
//                Camera cameraB = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    Camera cameraB = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    if (resultCode == RESULT_OK) {
                        View camview = cameraB.getCameraView();
                        ImageView iv_CapturedImage = camview.findViewById(R.id.iv_CapturedImage);
                        Uri selectedImage = data.getData();
                        String strGalleryPath = getRealPathFromURI(selectedImage);
                        cameraB.setUploadedImage(iv_CapturedImage, null, strGalleryPath, selectedImage, 1);

                    } else {

                    }

                    break;
                case SF_REQUEST_GALLERY_CONTROL_CODE:
                    if (resultCode == RESULT_OK) {

                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        Camera cameraBSF = (Camera) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        View camviewSF = cameraBSF.getCameraView();
                        ImageView iv_CapturedImageSF = camviewSF.findViewById(R.id.iv_CapturedImage);
                        Uri selectedImageSF = data.getData();
                        String strGalleryPathSF = getRealPathFromURI(selectedImageSF);

                        cameraBSF.setUploadedImage(iv_CapturedImageSF, null, strGalleryPathSF, selectedImageSF, 1);

                    }
                    break;
                case FILE_BROWSER_RESULT_CODE:
                    if (resultCode == RESULT_OK) {

                        Uri filePath = data.getData();
                        FilePathUtils filePathHelper = new FilePathUtils();
                        String path4 = filePathHelper.getFilePathFromURI(filePath, this);
                        FileBrowsing fileBrowsingB = (FileBrowsing) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        fileBrowsingB.setFileBrowsing("" + path4);
                        Log.d(TAG, "onActivityResult: " + path4);
                        fileBrowsingB.getControlRealPath().setTag(path4);
                        fileBrowsingB.setPath(path4);
                    }
                    break;
                case SECTION_FILE_BROWSER_RESULT_CODE:
                    if (resultCode == RESULT_OK) {

                        Uri filePathS = data.getData();
                        FilePathUtils filePathHelperS = new FilePathUtils();
                        String path4S = filePathHelperS.getFilePathFromURI(filePathS, this);
                        FileBrowsing fileBrowsingS = (FileBrowsing) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        fileBrowsingS.setFileBrowsing("" + path4S);
                        Log.d(TAG, "onActivityResult: " + path4S);
                        fileBrowsingS.getControlRealPath().setTag(path4S);
                        fileBrowsingS.setPath(path4S);
                    }
                    break;
                case REQUEST_DOCUMENT_SCANNER:
                    if (resultCode == RESULT_OK) {
                        FileBrowsing fileBrowsingA = (FileBrowsing) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        File selectedFile = new File(data.getStringExtra(ScanConstants.DOCUMENT_PATH));
                        fileBrowsingA.setFileBrowsing("" + selectedFile.getAbsolutePath());
                        Log.d(TAG, "onActivityResult: " + selectedFile);
                        fileBrowsingA.getControlRealPath().setTag(selectedFile);
                        fileBrowsingA.setPath(selectedFile.getAbsolutePath());
                    } else {

                    }
                    break;


                case SF_FILE_BROWSER_RESULT_CODE:
                    if (resultCode == RESULT_OK) {
                        /*SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;*/
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        FileBrowsing fileBrowsing = (FileBrowsing) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);

                        Uri filePath = data.getData();
                        FilePathUtils filePathHelper = new FilePathUtils();
                        String path4 = filePathHelper.getFilePathFromURI(filePath, this);
                        fileBrowsing.setFileBrowsing("" + path4);
                        fileBrowsing.getControlRealPath().setTag(path4);
                        fileBrowsing.setPath(path4);

                    }
                    break;
                case REQUEST_VIDEO_RECORDING:
                    if (resultCode == RESULT_OK) {
                        Uri strVideoUri = data.getData();
                        VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        videoRecording.setFromCameraOrGalleyURI(strVideoUri);
                        videoRecording.setFromCameraOrGalley("Camera");
                        videoRecording.setVideoPathFromOnActivityResult(strVideoUri, "Camera");
                    }
                case SECTION_REQUEST_VIDEO_RECORDING:
                    if (resultCode == RESULT_OK) {
                        Uri strVideoUri = data.getData();
                        VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        videoRecording.setFromCameraOrGalleyURI(strVideoUri);
                        videoRecording.setFromCameraOrGalley("Camera");
                        videoRecording.setVideoPathFromOnActivityResult(strVideoUri, "Camera");
                    }
                    break;
                case SF_REQUEST_VIDEO_RECORDING:
                    if (resultCode == RESULT_OK) {

                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        VideoRecording videoRecording = (VideoRecording) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);

                        Uri strVideoUri = data.getData();
                        videoRecording.setFromCameraOrGalleyURI(strVideoUri);
                        videoRecording.setFromCameraOrGalley("Camera");
                        videoRecording.setVideoPathFromOnActivityResult(strVideoUri, "Camera");
                    }
                    break;
           /* case REQUEST_GPS:

                if (resultCode == RESULT_OK) {
                    GPS_Control controlGPS = (GPS_Control) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                    String accuracy = data.getStringExtra(GPSActivity.LOC_ACCURACY);

                    //Set Current Location to Global Object
                    GlobalObjects.setCurrent_GPS(gpsString);

                    controlGPS.setMapView(gpsString, accuracy);

                } else {
                    Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                }
                break;*/
                case REQUEST_CURRENT_LOCATION_QUERY:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        if (gpsString != null && !gpsString.isEmpty()) {
                            String delimeter = "\\$";
                            double latitude, longitude;
                            if (!gpsString.isEmpty() && gpsString != null) {
                                String[] loc = gpsString.split(delimeter);
                                latitude = Double.parseDouble(loc[0]);
                                longitude = Double.parseDouble(loc[1]);
                                PrefManger.putSharedPreferencesString(MainActivity.this, AppConstants.QUERY_CURRENT_LAT, String.valueOf(latitude));
                                PrefManger.putSharedPreferencesString(MainActivity.this, AppConstants.QUERY_CURRENT_LNG, String.valueOf(longitude));
                            }
                        }
                    }
                    break;
                case REQUEST_CURRENT_LOCATION:
                    if (resultCode == RESULT_OK) {
                        TextInput textInput = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);

                        String delimeter = "\\$";
                        double latitude, longitude;
                        if (!gpsString.isEmpty() && gpsString != null) {
                            String[] loc = gpsString.split(delimeter);
                            latitude = Double.parseDouble(loc[0]);
                            longitude = Double.parseDouble(loc[1]);
                            //Set Current Location to Global Object
//                        GlobalObjects.setCurrent_GPS(gpsString);

                            textInput.setLocationRetry(String.valueOf(latitude), String.valueOf(longitude));
                        }
                    } else {
                        Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                    }
                    break;
                case SECTION_REQUEST_CURRENT_LOCATION:
                    if (resultCode == RESULT_OK) {
                        TextInput textInput = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);

                        String delimeter = "\\$";
                        double latitude, longitude;
                        if (!gpsString.isEmpty() && gpsString != null) {
                            String[] loc = gpsString.split(delimeter);
                            latitude = Double.parseDouble(loc[0]);
                            longitude = Double.parseDouble(loc[1]);
                            //Set Current Location to Global Object
//                        GlobalObjects.setCurrent_GPS(gpsString);

                            textInput.setLocationRetry(String.valueOf(latitude), String.valueOf(longitude));
                        }


                    } else {
                        Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                    }
                    break;
                case SF_REQUEST_CURRENT_LOCATION:
                    if (resultCode == RESULT_OK) {

                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        TextInput textInput = (TextInput) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);

                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);

                        String delimeter = "\\$";
                        double latitude, longitude;
                        if (!gpsString.isEmpty() && gpsString != null) {
                            String[] loc = gpsString.split(delimeter);
                            latitude = Double.parseDouble(loc[0]);
                            longitude = Double.parseDouble(loc[1]);
                            //Set Current Location to Global Object
                            GlobalObjects.setCurrent_GPS(gpsString);

                            textInput.setLocationRetry(String.valueOf(latitude), String.valueOf(longitude));
                        }


                    } else {
                        Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_Focus:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        FocusExist(EventView);
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlert(context, "Alert", "GPS Capture Failed..", "2");
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_TextChange:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        TextChange(EventView);
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlert(context, "Alert", "GPS Capture Failed..", "2");
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_Change:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        ChangeEvent(EventView);
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlert(context, "Alert", "GPS Capture Failed..", "2");
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_Click:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        ClickEvent(EventView);
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlert(context, "Alert", "GPS Capture Failed..", "2");
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_MenuClick:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        MenuClickEvent(menuButtonobject, EventView, MenuName);
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlert(context, "Alert", "GPS Capture Failed..", "2");
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_FormLoad:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        FormLoad();
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlertWithExit(context, "Alert", "GPS Capture Failed..", "2");
                    }
                    break;
                case AppConstants.REQUEST_GO_CURRENT_LOCATION_liveTrack:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        SetLiveTrackDefultGPS();
                        dismissProgressDialog();
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlertWithExit(context, "Alert", "GPS Capture Failed..Please Try Again", "2");
                        finish();
                    }
                    break;

                case AppConstants.REQUEST_GO_CURRENT_LOCATION_Submit:
                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        GlobalObjects.setCurrent_GPS(gpsString);
                        dismissProgressDialog();
                        SubmitEvent();
                    } else {
                        dismissProgressDialog();
                        ImproveHelper.my_showAlert(context, "Alert", "GPS Capture Failed..", "2");

                    }
                    break;
                case IMAGE_WITH_GPS_REQUEST_CODE:
                    Camera cameraIWG = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);

                    if (resultCode == RESULT_OK) {

                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);

                        String[] loc = gpsString.split("\\$");
                        latitude = Double.parseDouble(loc[0]);
                        longitude = Double.parseDouble(loc[1]);

                        //Set Current Location to Global Object
                        GlobalObjects.setCurrent_GPS(gpsString);

                        cameraIWG.setImageWithGPSValues(latitude, longitude);
//                    textInput.setLocationRetry(String.valueOf(latitude), String.valueOf(longitude));

                    } else {
                        Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                        cameraIWG.setImageBitMapBNull();
                    }

                    break;
                case SECTION_IMAGE_WITH_GPS_REQUEST_CODE:
                    Camera cameraIWGSec = (Camera) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);

                    if (resultCode == RESULT_OK) {

                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);

                        String[] loc = gpsString.split("\\$");
                        latitude = Double.parseDouble(loc[0]);
                        longitude = Double.parseDouble(loc[1]);

                        //Set Current Location to Global Object
                        GlobalObjects.setCurrent_GPS(gpsString);

                        cameraIWGSec.setImageWithGPSValues(latitude, longitude);
//                    textInput.setLocationRetry(String.valueOf(latitude), String.valueOf(longitude));

                    } else {
                        Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                        cameraIWGSec.setImageBitMapBNull();
                    }

                    break;
                case SF_IMAGE_WITH_GPS_REQUEST_CODE:
                    SubformView subformView_iwgsf = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects_iwgsf = subformView_iwgsf.subform_List_ControlClassObjects;
                    LinkedHashMap<String, Object> sfClassObjects_iwgsf = subform_List_ControlClassObjects_iwgsf.get(AppConstants.SF_Container_position);
                    Camera cameraIWGSF = (Camera) sfClassObjects_iwgsf.get(AppConstants.SF_ClickorChangeTagName);

                    if (resultCode == RESULT_OK) {

                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);

                        String[] loc = gpsString.split("\\$");
                        latitude = Double.parseDouble(loc[0]);
                        longitude = Double.parseDouble(loc[1]);


                        //Set Current Location to Global Object
//                    GlobalObjects.setCurrent_GPS(gpsString);


                        cameraIWGSF.setImageWithGPSValues(latitude, longitude);

                    } else {
                        Toast.makeText(context, "gps_failed", Toast.LENGTH_SHORT).show();
                        cameraIWGSF.setImageBitMapBNull();
                    }


                    break;
                case AUTOCOMPLETE_REQUEST_CODE:
                    if (requestCode == AUTOCOMPLETE_REQUEST_CODE) {


                    }

                    break;

                case REQUEST_SPEECH_TO_TEXT:
                    if (resultCode == RESULT_OK && data != null) {
                        TextInput textInput = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        ArrayList<String> resultText = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (resultText != null && resultText.size() > 0) {
                            Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            if (resultText.get(0) != null) {
                                textInput.getCustomEditText().setText(resultText.get(0));
                                Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText.get(0));
                            }
                        }
                    }
                    break;

                case REQUEST_SPEECH_TO_TEXT_INPUT:
                    if (resultCode == RESULT_OK && data != null) {
                        //TextInput textInput = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        ArrayList<String> resultText = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (resultText != null && resultText.size() > 0) {
                            Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText);
                            //textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            if (resultText.get(0) != null) {
                                voiceInputService(resultText.get(0));
                                /*textInput.getCustomEditText().setText(resultText.get(0));
                                Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText.get(0));*/
                            }
                        }
                    }
                    break;
                case SECTION_REQUEST_SPEECH_TO_TEXT:
                    if (resultCode == RESULT_OK && data != null) {
                        TextInput textInput = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        ArrayList<String> resultText = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (resultText != null && resultText.size() > 0) {
                            Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            if (resultText.get(0) != null) {
                                textInput.getCustomEditText().setText(resultText.get(0));
                                Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText.get(0));
                            }
                        }
                    }
                    break;
                case SF_REQUEST_SPEECH_TO_TEXT:
                    if (resultCode == RESULT_OK && data != null) {

//                    TextInput textInput = (TextInput) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        TextInput textInput = (TextInput) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);

                        ArrayList<String> resultText = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
                        if (resultText != null && resultText.size() > 0) {
                            Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText);
                            textInput.getCustomEditText().setVisibility(View.VISIBLE);
                            if (resultText.get(0) != null) {
                                textInput.getCustomEditText().setText(resultText.get(0));
                                Log.d(TAG, "REQUEST_SPEECH_TO_TEXT: " + resultText.get(0));
                            }
                        }
                    }
                    break;

                case REQ_CODE_PICK_VOICE_REC:
                    if ((data != null) && (data.getData() != null)) {
                        VoiceRecording voiceRecording = (VoiceRecording) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Uri audioFileUri = data.getData();

                        FilePathUtils filePathHelper = new FilePathUtils();
                        String path = filePathHelper.getFilePathFromURI(audioFileUri, this);
                        voiceRecording.getTv_displayName().setTag(path);
                        voiceRecording.setUploadedFile(path);
                        Log.d(TAG, "onActivityResultOnlyAudio: " + path);

                    }
                case SECTION_REQ_CODE_PICK_VOICE_REC:
                    if ((data != null) && (data.getData() != null)) {
                        VoiceRecording voiceRecording = (VoiceRecording) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        Uri audioFileUri = data.getData();

                        FilePathUtils filePathHelper = new FilePathUtils();
                        String path = filePathHelper.getFilePathFromURI(audioFileUri, this);
                        voiceRecording.getTv_displayName().setTag(path);
                        voiceRecording.setUploadedFile(path);
                        Log.d(TAG, "onActivityResultOnlyAudio: " + path);

                    }

                    break;
                case SF_REQ_CODE_PICK_VOICE_REC:
                    if ((data != null) && (data.getData() != null)) {

                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }

                       /* LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        VoiceRecording voiceRecording = (VoiceRecording) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        Uri audioFileUri = data.getData();
                        voiceRecording.setfilePath(audioFileUri.toString());
                        voiceRecording.getPlayViewVoiceRecording();
                        Log.d(TAG, "onActivityResultOnlySFAudio: " + audioFileUri);*/
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        VoiceRecording voiceRecording = (VoiceRecording) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);
                        Uri audioFileUri = data.getData();

                        FilePathUtils filePathHelper = new FilePathUtils();
                        String path = filePathHelper.getFilePathFromURI(audioFileUri, this);

                        voiceRecording.setUploadedFile(path);
                    }

                    break;
                case REQ_CODE_PICK_ONLY_VIDEO_FILE:
                    if ((data != null) && (data.getData() != null)) {
                        Uri strVideoUri = data.getData();
                        VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        videoRecording.setFromCameraOrGalleyURI(strVideoUri);
                        videoRecording.setFromCameraOrGalley("Gallery");
                        videoRecording.setVideoPathFromOnActivityResult(strVideoUri, "Gallery");
                    }
                case SECTION_REQ_CODE_PICK_ONLY_VIDEO_FILE:
                    if ((data != null) && (data.getData() != null)) {
                        Uri strVideoUri = data.getData();
                        VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        videoRecording.setFromCameraOrGalleyURI(strVideoUri);
                        videoRecording.setFromCameraOrGalley("Gallery");
                        videoRecording.setVideoPathFromOnActivityResult(strVideoUri, "Gallery");
                    }
                    break;
                case SF_REQ_CODE_PICK_ONLY_VIDEO_FILE:
                    if ((data != null) && (data.getData() != null)) {
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                        if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                        } else {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                            subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                        }
                        LinkedHashMap<String, Object> sfClassObjects = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        VideoRecording videoRecording = (VideoRecording) sfClassObjects.get(AppConstants.SF_ClickorChangeTagName);

                        Uri strVideoUri = data.getData();
                        videoRecording.setFromCameraOrGalleyURI(strVideoUri);
                        videoRecording.setFromCameraOrGalley("Gallery");
                        videoRecording.setVideoPathFromOnActivityResult(strVideoUri, "Gallery");

                        Log.d(TAG, "onActivityResultOnlyAudioSF: " + strVideoUri);

                    }

                    break;
                //nk GET GPS
                case REQUEST_GET_GPSLOCATION:
                    //SubformView subformView = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);

                    if (resultCode == RESULT_OK) {
                        String gpsString = data.getStringExtra(GPSActivity.LOC_DATA);
                        showToast(MainActivity.this, "GPS Point:" + gpsString);
                        setGetGPSLocationToControlOrVariable(Global_ActionObj, gpsString);
                        // SetValuetoControl(controlName, gpsString, "");
                    } else {
                        showToast(MainActivity.this, "GPS failed, try again");
                    }
                    break;
            }
        } catch (Exception e) {
            Log.getStackTraceString(e);
        }
    }

    private void setSuccessResult(String strImagePath) {
        Intent intent = new Intent();
        intent.putExtra("image_path", strImagePath);
        setResult(RESULT_OK, intent);
        finish();
    }

    private void setFailResult() {
        try {
            setResult(RESULT_CANCELED, null);
            finish();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setFailResult", e);
        }
    }

    private File getOutputMediaFile() {
        File mediaFile = null;
        try {
            File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
                    Environment.DIRECTORY_PICTURES), saveLocation);

            if (!mediaStorageDir.exists()) {
                if (!mediaStorageDir.mkdirs()) {
                    Log.d(saveLocation, context.getString(R.string.failed_to_create_directory));
                    return null;
                }
            }

            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
                    "IMG_" + timeStamp + ".jpg");
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getOutputMediaFile", e);
        }
        return mediaFile;
    }

    public void onSearchCalled() {
        try {
            // Set the fields to specify which types of place data to return.
            List<Place.Field> fields = Arrays.asList(Place.Field.ID, Place.Field.NAME, Place.Field.ADDRESS, Place.Field.LAT_LNG);
            // Start the autocomplete intent.
            Intent intent = new Autocomplete.IntentBuilder(
                    AutocompleteActivityMode.FULLSCREEN, fields).setCountry("IN")
                    .build(this);
            startActivityForResult(intent, AUTOCOMPLETE_REQUEST_CODE);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "onSearchCalled", e);
        }
    }

    public void FocusExist(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute: FocusExistEvent Executed======");
        event("FocusExistEvent", view);
    }

    public void TextChange(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute: TextChangeEvent Executed======");
        if (!submitevent) {
            event("TextChangeEvent", view);
        }
    }

    public void ChangeEvent(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute: ChangeEvent Executed======");
        event("ChangeEvent", view);
    }

    public void ClickEvent(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute: ClickEvent Executed======");
        event("ClickEvent", view);
    }

    public void onMakerClickEvent(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute: ClickEvent Executed======");
        event("MapMarkerClickEvent", view);
    }

    public void addRowEvent(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute: AddRowEvent Executed======");
        event("AddRowEvent", view);
    }

    public void deleteRowEvent(View view) {
        dismissProgressDialog();
        System.out.println("EventExecute:  DeleteRowEvent Executed======");
        event("DeleteRowEvent", view);
    }

    public void addGridRowEvent(View view, String controlName) {
        view.setTag(controlName);
        dismissProgressDialog();
        System.out.println("EventExecute: AddRowEvent Executed======");
        event("AddRowEvent", view);
    }

    public void deleteGridRowEvent(View view, String controlName) {
        view.setTag(controlName);
        dismissProgressDialog();
        System.out.println("EventExecute:  DeleteRowEvent Executed======");
        event("DeleteRowEvent", view);
    }
    // List<Control_EventObject> list_Control_EventObject=new ArrayList<>();

    public void MenuClickEvent(ControlObject menuButtonobject, View view, String MenuName) {
        try {
            EventView = view;
            System.out.println("MenuClickEvent Executed======");
            Executeindex = 0;
            if (list_OrderByEvents_common.size() == 0) {
                ActionIndex = 0;
            }
            this.menuButtonobject = menuButtonobject;
            this.MenuName = MenuName;
            AppConstants.EventFrom_subformOrNot = false;
            showProgressDialog("Please Wait..!");

            try {
                JSONObject jobj = new JSONObject();
                jobj.put("MenuClickEvent", "Yes");
                ImproveHelper.Controlflow("MenuClickEvent", "ViewData", "DataCollection", jobj.toString());
            } catch (JSONException e) {
                ImproveHelper.improveException(context, TAG, "MenuClickEvent", e);
            }

            Control_EventObject control_EventObject = menuButtonobject.getOnClickEventObject();
            if (!CheckCurrentLocationExist(control_EventObject)) {
                loadControl_EventObject(control_EventObject);
               /* if(ActionIndex==0){
                    EventExecute();
                }*/
            } else if (CheckCurrentLocationExist(control_EventObject) && AppConstants.GlobalObjects.getCurrent_GPS().trim().length() > 0) {
                loadControl_EventObject(control_EventObject);
                /*if(ActionIndex==0){
                    EventExecute();
                }*/
            } else if (CheckCurrentLocationExist(control_EventObject) && AppConstants.GlobalObjects.getCurrent_GPS().trim().length() == 0) {
                startActivityForResult(new Intent(context, GPSActivity.class), AppConstants.REQUEST_GO_CURRENT_LOCATION_MenuClick);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "MenuClickEvent", e);
        }
    }

    public void FormPreLoad() {
        //dismissProgressDialog();
        formPreLoad = true;
        System.out.println("EventExecute: FormPreLoadEvent" + null);
        event("FormPreLoadEvent", null);
    }

    public void FormLoad() {
        iv_loading.setVisibility(View.GONE);
        AppConstants.EventFrom_subformOrNot = false;
        formLoad = true;
        System.out.println("EventExecute: FormLoadEvent" + null);
        event("FormLoadEvent", null);
    }

    public void SubmitEvent() {
        submitevent = true;
        System.out.println("EventExecute: SubmitEvent" + null);
        event("SubmitEvent", null);
    }

    public void event(String eventTag, View view) {
        try {
            if (eventTag.contentEquals("SubmitEvent")) {
//                showProgressDialog("Submitting Data...");
            } else {
                submitevent = false;
                showProgressDialog(getString(R.string.loading));
            }
            Executeindex = 0;
            if (list_OrderByEvents_common.size() == 0) {
                ActionIndex = 0;
            }

            ImproveHelper.improveLog(TAG, eventTag + " : ", "True");
            try {
                JSONObject jobj = new JSONObject();
                jobj.put(eventTag, "Yes");
                ImproveHelper.Controlflow(eventTag, "ViewData", "DataCollection", jobj.toString());
            } catch (JSONException e) {
                ImproveHelper.improveException(context, TAG, eventTag, e);
            }

            if (view != null) {
                EventView = view;
                if (!AppConstants.EventFrom_subformOrNot) {
                    for (int i = 0; i < list_Control.size(); i++) {
                        if (!list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_SECTION)) {
                            if (view.getTag().toString().equalsIgnoreCase(list_Control.get(i).getControlName())) {
                                eventOptions((String) view.getTag(), eventTag);
                                break;

                            }
                        } else {
                            if (list_Control.get(i).getSubFormControlList() != null) {
                                for (int j = 0; j < list_Control.get(i).getSubFormControlList().size(); j++) {
                                    if (!list_Control.get(i).getSubFormControlList().get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_SECTION)) {
                                        if (view.getTag().toString().equalsIgnoreCase(list_Control.get(i).getSubFormControlList().get(j).getControlName())) {
                                            eventOptions((String) view.getTag(), eventTag);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }


                    if (currentMultiForm != null && currentMultiForm.getNavMenu() != null && currentMultiForm.getNavMenu().getMenuItemList().size() > 0) {
                        List<NavMenuItem> menuItemList = currentMultiForm.getNavMenu().getMenuItemList();
                        outerloop:
                        for (int i = 0; i < menuItemList.size(); i++) {
                            if (menuItemList.get(i).getSubMenuItems() != null && menuItemList.get(i).getSubMenuItems().size() > 0) {
                                List<NavMenuItem> subMenuItems = menuItemList.get(i).getSubMenuItems();
                                for (int j = 0; j < subMenuItems.size(); j++) {

                                    if (view.getTag().toString().equalsIgnoreCase(subMenuItems.get(j).getTagName())) {
                                        eventOptions((String) view.getTag(), eventTag);
                                        break outerloop;
                                    }
                                }

                            } else {
                                if (view.getTag().toString().equalsIgnoreCase(menuItemList.get(i).getTagName())) {
                                    eventOptions((String) view.getTag(), eventTag);
                                }
                            }

                        }

                    }

                    if (currentMultiForm != null && currentMultiForm.getBottomNavigation() != null && currentMultiForm.getBottomNavigation().getMenuItemList().size() > 0) {
                        List<NavMenuItem> menuItemList = currentMultiForm.getBottomNavigation().getMenuItemList();
                        for (int i = 0; i < menuItemList.size(); i++) {
                            if (view.getTag().toString().equalsIgnoreCase(menuItemList.get(i).getTagName())) {
                                eventOptions((String) view.getTag(), eventTag);
                                break;
                            }
                        }
                    }


                } else {
                    if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof SubformView) {
                        SubformView subview = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        if (subview.controlObject.getSubFormControlList() == null)
                            return;
                        List<ControlObject> SubObjects = subview.controlObject.getSubFormControlList();
                        LinkedHashMap<String, Control_EventObject> hash_EventObjects = new LinkedHashMap<>();
                        if (eventTag.contentEquals("ClickEvent")) {
                            hash_EventObjects = subview.hash_Onclick_EventObjects;
                        } else if (eventTag.contentEquals("TextChangeEvent") || eventTag.contentEquals("ChangeEvent")) {
                            hash_EventObjects = subview.hash_Onchange_EventObjects;
                        } else if (eventTag.contentEquals("FocusExistEvent")) {
                            hash_EventObjects = subview.hash_Onfocus_EventObjects;
                        }
                        for (int i = 0; i < SubObjects.size(); i++) {
                            if (SubObjects.get(i).getControlName().equalsIgnoreCase(view.getTag().toString())) {
                                if (hash_EventObjects.containsKey(view.getTag().toString())) {
                                    Control_EventObject control_EventObject = hash_EventObjects.get(view.getTag().toString());
                                    eventOptions(control_EventObject);
                                    break;
                                }
                            }
                        }
                    } else if (List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName) instanceof GridControl) {
                        GridControl subview = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        if (subview.controlObject.getSubFormControlList() == null)
                            return;
                        List<ControlObject> SubObjects = subview.controlObject.getSubFormControlList();
                        LinkedHashMap<String, Control_EventObject> hash_EventObjects = new LinkedHashMap<>();
                        if (eventTag.contentEquals("ClickEvent")) {
                            hash_EventObjects = subview.hash_Onclick_EventObjects;
                        } else if (eventTag.contentEquals("TextChangeEvent") || eventTag.contentEquals("ChangeEvent")) {
                            hash_EventObjects = subview.hash_Onchange_EventObjects;
                        } else if (eventTag.contentEquals("FocusExistEvent")) {
                            hash_EventObjects = subview.hash_Onfocus_EventObjects;
                        }
                        for (int i = 0; i < SubObjects.size(); i++) {
                            if (SubObjects.get(i).getControlName().equalsIgnoreCase(view.getTag().toString())) {
                                if (hash_EventObjects.containsKey(view.getTag().toString())) {
                                    Control_EventObject control_EventObject = hash_EventObjects.get(view.getTag().toString());
                                    eventOptions(control_EventObject);
                                    break;
                                }
                            }
                        }
                    }

                }
            } else {
                Control_EventObject control_eventObject = null;
                switch (eventTag) {
                    case "SubmitEvent":
                        control_eventObject = dataCollectionObject.getOnSubmitClickObject();
                        break;
                    case "FormLoadEvent":
                        control_eventObject = dataCollectionObject.getOnLoadEventObject();
                        break;
                    case "FormPreLoadEvent":
                        control_eventObject = dataCollectionObject.getOnPreLoadEventObject();
                        break;
                }
                if (control_eventObject != null) {
                    eventOptions(control_eventObject);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, eventTag, e);
        }
    }

    private void eventOptions(String viewTag, String eventTag) {
        Control_EventObject control_EventObject = null;
        if (eventTag.contentEquals("ClickEvent") && hash_Onclick_EventObjects.containsKey(viewTag)) {
            control_EventObject = hash_Onclick_EventObjects.get(viewTag);
            eventOptions(control_EventObject);
        } else if (eventTag.contentEquals("MapMarkerClickEvent") && hash_OnMarkerclick_EventObjects.containsKey(viewTag)) {
            control_EventObject = hash_OnMarkerclick_EventObjects.get(viewTag);
            eventOptions(control_EventObject);
        } else if ((eventTag.contentEquals("TextChangeEvent") || eventTag.contentEquals("ChangeEvent")) && hash_Onchange_EventObjects.containsKey(viewTag)) {
            control_EventObject = hash_Onchange_EventObjects.get(viewTag);
            eventOptions(control_EventObject);
        } else if (eventTag.contentEquals("FocusExistEvent") && hash_Onfocus_EventObjects.containsKey(viewTag)) {
            control_EventObject = hash_Onfocus_EventObjects.get(viewTag);
            eventOptions(control_EventObject);
        } else if (eventTag.contentEquals("AddRowEvent") && hash_OnAddRow_EventObjects.containsKey(viewTag)) {
            control_EventObject = hash_OnAddRow_EventObjects.get(viewTag);
            eventOptions(control_EventObject);
        } else if (eventTag.contentEquals("DeleteRowEvent") && hash_OnDeleteRow_EventObjects.containsKey(viewTag)) {
            control_EventObject = hash_OnDeleteRow_EventObjects.get(viewTag);
            eventOptions(control_EventObject);
        }
    }

    private void loadControl_EventObject(Control_EventObject control_EventObject) {
        if (!submitevent && eventHasDefaultSubmitAction(control_EventObject)) {
            submitevent = true;

        }
        if (submitevent) {
            submit_control_EventObject = control_EventObject;
        }
        System.out.println("EventExecute: Current ActionIndex=====" + ActionIndex);
        System.out.println("EventExecute: Before Action Total Size=====" + list_OrderByEvents_common.size());
        if (list_OrderByEvents_common.size() > 0) {
            if (ActionIndex == (list_OrderByEvents_common.size())) {
                ActionIndex = 0;
                list_OrderByEvents_common.clear();
                System.out.println("EventExecute: Close Current ActionIndex Empty" + ActionIndex);
            }
        }
        List<OrderByEvents_Object> list_OrderByEvents_vals = getEventsByOrder(control_EventObject);

        for (int i = 0; i < list_OrderByEvents_vals.size(); i++) {
            list_OrderByEvents_common.add(list_OrderByEvents_vals.get(i));
        }

        System.out.println("EventExecute: Event Action found Size=====" + list_OrderByEvents_vals.size());
        System.out.println("EventExecute: After Action Total Size=====" + list_OrderByEvents_common.size());
        ActionIndex = 0;
        if (ActionIndex == 0) {
            // System.out.println("EventExecute: Calling ActionIndex start with 0 :" + list_OrderByEvents_common.size());
            EventExecute();
        }
    }

    private boolean eventHasDefaultSubmitAction(Control_EventObject control_eventObject) {

        boolean flag = false;
        List<ActionWithCondition_Bean> conditionalActions = new ArrayList<>();
        List<ActionWithoutCondition_Bean> actions = new ArrayList<>();
        try {
            if (control_eventObject != null && control_eventObject.getActionWithConditionList() != null) {
                conditionalActions = control_eventObject.getActionWithConditionList();
            }
            if (control_eventObject != null && control_eventObject.getActionWithOutConditionList() != null) {
                actions = control_eventObject.getActionWithOutConditionList();
            }
            for (int i = 0; i < actions.size(); i++) {
                if (actions.get(i).getActionType() != null && actions.get(i).getActionType().contentEquals("Default Submit")) {
                    flag = true;
                    break;
                }

            }
            if (!flag) {
                if (conditionalActions != null && conditionalActions.size() > 0) {
                    for (int i = 0; i < conditionalActions.size(); i++) {
                        IfElseBlock_Bean ifBean = conditionalActions.get(i).getIfBlock();
                        if (ifBean.getActionsList() != null) {
                            for (int j = 0; j < ifBean.getActionsList().size(); j++) {
                                if (ifBean.getActionsList().get(j).getActionType().contentEquals("Default Submit")) {
                                    flag = true;
                                    break;
                                }
                            }
                        }
                        if (!flag) {
                            List<IfElseBlock_Bean> elseIfBeans = conditionalActions.get(i).getElseBlockList();
                            if (elseIfBeans != null) {
                                for (int j = 0; j < elseIfBeans.size(); j++) {
                                    IfElseBlock_Bean elseIfBean = elseIfBeans.get(j);
                                    if (elseIfBean.getActionsList() != null) {
                                        for (int k = 0; k < elseIfBean.getActionsList().size(); k++) {
                                            if (elseIfBean.getActionsList().get(k).getActionType().contentEquals("Default Submit")) {
                                                flag = true;
                                                break;
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        if (!flag) {
                            IfElseBlock_Bean elseBlock_bean = conditionalActions.get(i).getElseBlock();
                            if (elseBlock_bean != null && elseBlock_bean.getActionsList() != null) {
                                for (int j = 0; j < elseBlock_bean.getActionsList().size(); j++) {

                                    if (elseBlock_bean.getActionsList().get(j).getActionType().contentEquals("Default Submit")) {
                                        flag = true;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
            }

        } catch (Exception e) {
            Log.getStackTraceString(e);
        }
        return flag;
    }

    private void eventOptions(Control_EventObject control_EventObject) {
        boolean locationExists = CheckCurrentLocationExist(control_EventObject);
        if (!locationExists) {
            loadControl_EventObject(control_EventObject);
           /* if(ActionIndex==0){
                EventExecute();
            }*/
        } else if (AppConstants.GlobalObjects.getCurrent_GPS().trim().length() > 0) {
            loadControl_EventObject(control_EventObject);
           /* if(ActionIndex==0){
                EventExecute();
            }*/
        } else if (AppConstants.GlobalObjects.getCurrent_GPS().trim().length() == 0) {
            getLocation(control_EventObject);
        } else {
            dismissProgressDialog();
        }
    }

    private void getLocation(Control_EventObject control_EventObject) {
        showProgressDialog("Getting Location...");
        locHelper = new LocHelper(context);
        locHelper.setControl_EventObject(control_EventObject);
//        locHelper.init();
        Intent in = new Intent(this, LocationHelper.class);
        startActivityForResult(in, REQUEST_FUSED_LOCATION1);
        //locationHelperIntent("");
    }

    private void addFormEditEvent() {
        OrderByEvents_Object editObj = new OrderByEvents_Object();
        editObj.setActionType(AppConstants.ACTION_WITH_OUT_CONDITION);
        ActionWithoutCondition_Bean ActionWithoutCondition_Bean = new ActionWithoutCondition_Bean();
        ActionWithoutCondition_Bean.setActive(true);
        ActionWithoutCondition_Bean.setActionType("FormEdit");
        editObj.setActionWithoutCondition(ActionWithoutCondition_Bean);
        list_OrderByEvents_common.add(editObj);
        EventExecute();
    }


    public void EventExecute() {
        try {
            System.out.println("EventExecute: ActionIndex=====" + ActionIndex);
            int j = ActionIndex;
            if (j < list_OrderByEvents_common.size()) {
                if (list_OrderByEvents_common.get(j).getActionType().equalsIgnoreCase(AppConstants.ACTION_WITH_CONDITION)) {
                    ActionIndex = j;
                    Executeindex = 0;

                    ActionWithCondition_Bean ActionWithCondition_Bean = list_OrderByEvents_common.get(j).getActionWithCondition();
                    if (ActionWithCondition_Bean.isActive()) {
                        System.out.println("EventExecute: Action With Condition is: " + ActionWithCondition_Bean.getActionWithConditionName());
                        CheckActionWithConditionEvents(ActionWithCondition_Bean);
                    } else {
                        ActionIndex++;
                        nextEvent();
                    }

                } else if (list_OrderByEvents_common.get(j).getActionType().equalsIgnoreCase(AppConstants.ACTION_WITH_OUT_CONDITION)) {
                    ActionWithoutCondition_Bean ActionWithoutCondition_Bean = list_OrderByEvents_common.get(j).getActionWithoutCondition();
                    FromAction = 1;
                    ActionIndex++;
                    System.out.println("EventExecute: Action Type is: " + ActionWithoutCondition_Bean.getActionName() + ":" + ActionWithoutCondition_Bean.getActionType());
                    ExecuteAction(ActionWithoutCondition_Bean, true);
                }
            }
            if (submitevent) {
                submitevent = false;
                if (j >= list_OrderByEvents_common.size()) {

                    if (dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                        String Message = ehelper.ExpressionHelper(MainActivity.this, dataCollectionObject.getSubmitButtonSuccessMessage());

                        if (dataCollectionObject.getSubmitButtonMessageSuccess_DisplayType().equalsIgnoreCase("2")) {
                            ShowMessageDialogWithOk(context, Message, 1);
                        } else {

                            if (defaultSubmitDone) {
                                Toast.makeText(context, Message, Toast.LENGTH_SHORT).show();
                                afterSync();
                            }
                        }

                    } else if (dataCollectionObject.isSubmitButtonSuccessMessageIsEnable()) {
                        afterSync();
                    } else {
                        ImproveHelper.showToast(context, "Data Submitted successfully.");
//                        Toast.makeText(context, "Data Submitted successfully.", Toast.LENGTH_SHORT).show();
                        afterSync();
                    }
//                    afterSync();
                } else if (list_OrderByEvents_common.size() != 0) {
                    submitevent = true;
                }
            } else if (formLoad) {

                if (j >= list_OrderByEvents_common.size()) {

                    formLoad = false;
                    if (AppConstants.EDIT_MODE) {
                        addFormEditEvent();
                    }


                }
            } else if (formPreLoad) {
                if (j >= list_OrderByEvents_common.size()) {
                    formPreLoad = false;
                    frameLayout.setVisibility(View.VISIBLE);
                    frame_progress.setVisibility(View.GONE);
                    callafterFormPreLoad();
                }
            }
            if (j == (list_OrderByEvents_common.size() - 1) || j == (list_OrderByEvents_common.size())) {
                ActionIndex = 0;
                // list_Control_EventObject.clear();
                list_OrderByEvents_common.clear();
                System.out.println("EventExecute: ====Close ActionIndex===" + ActionIndex + ":" + "empty" + ":" + list_OrderByEvents_common.size());
                dismissProgressDialog();
            }
        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "EventExecute", e);
        }

    }


    public boolean CheckCurrentLocationExist(Control_EventObject control_EventObject) {
        boolean gpsflag = false;
        try {
            List<OrderByEvents_Object> list_OrderByEvents = getEventsByOrder(control_EventObject);
            for (int j = 0; j < list_OrderByEvents.size(); j++) {
                if (list_OrderByEvents.get(j).getActionType().equalsIgnoreCase(AppConstants.ACTION_WITH_CONDITION)) {
                    ActionWithCondition_Bean actionWithCondition_Bean = list_OrderByEvents.get(j).getActionWithCondition();
                    gpsflag = checkCurrentLocatioAtConditions(actionWithCondition_Bean);
                    if (gpsflag) {
                        break;
                    }
                } else if (list_OrderByEvents.get(j).getActionType().equalsIgnoreCase(AppConstants.ACTION_WITH_OUT_CONDITION)) {
                    ActionWithoutCondition_Bean ActionWithoutCondition_Bean = list_OrderByEvents.get(j).getActionWithoutCondition();
                    gpsflag = checkCurrentLocatioAtExecuteAction(ActionWithoutCondition_Bean);
                    if (gpsflag) {
                        break;
                    }
                    if (gpsflag) {
                        break;
                    }
                }
            }
        } catch (Exception e) {
            gpsflag = false;
            ImproveHelper.improveException(this, TAG, "CheckCurrentLocationExist", e);
        }
        return gpsflag;
    }

    public boolean checkCurrentLocatioAtConditions(ActionWithCondition_Bean actionWithCondition_Bean) {
        boolean gpsflag = false;
        try {
            IfElseBlock_Bean IfElseBlock = actionWithCondition_Bean.getIfBlock();
            List<IfElseBlock_Bean> List_IfElseBlock_Bean = actionWithCondition_Bean.getElseBlockList();
            IfElseBlock_Bean ElseBlock_Bean = actionWithCondition_Bean.getElseBlock();

            List<IfElseBlock_Bean> TempList = new ArrayList<IfElseBlock_Bean>();
            TempList.add(IfElseBlock);
            if (List_IfElseBlock_Bean.size() > 0) {
                for (int i = 0; i < List_IfElseBlock_Bean.size(); i++) {
                    TempList.add(List_IfElseBlock_Bean.get(i));
                }
            }
            if (ElseBlock_Bean.getActionsList().size() != 0) {
                TempList.add(ElseBlock_Bean);
            }
            //----------------
            for (int a = 0; a < TempList.size(); a++) {
                IfElseBlock_Bean IfElseBlock_Bean = TempList.get(a);
                if (!IfElseBlock_Bean.isExpressionExists()) {
                    List<Condition_Bean> list_Conditions = IfElseBlock_Bean.getConditionsList();
                    if (list_Conditions != null) {
                        for (int i = 0; i < list_Conditions.size(); i++) {
                            if (list_Conditions.get(i).getValue().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())) {
                                gpsflag = true;
                                break;
                            }
                            if (list_Conditions.get(i).getTarget().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())) {
                                gpsflag = true;
                                break;
                            }
                        }
                        if (!gpsflag) {
                            List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                            for (int i = 0; i < list_Actions.size(); i++) {
                                gpsflag = checkCurrentLocatioAtExecuteAction(list_Actions.get(i));
                                if (gpsflag) {
                                    break;
                                }
                            }
                        }
                    }
                }

                if (gpsflag) {
                    break;
                }
            }
        } catch (Exception e) {
            gpsflag = false;
            ImproveHelper.improveException(this, TAG, "checkCurrentLocatioAtConditions", e);
        }
        return gpsflag;
    }

    public boolean checkCurrentLocatioAtExecuteAction(final ActionWithoutCondition_Bean ActionObj) {
        boolean gpsflag = false;
        try {
            switch (ActionObj.getActionType()) {
                case AppConstants.call_api_query:
                    List<API_InputParam_Bean> list_input = ActionObj.getList_API_InParams();
                    for (int i = 0; i < list_input.size(); i++) {
                        if (list_input.get(i).getInParam_Mapped_ID().startsWith("(im:" + AppConstants.Global_GPSControl)) {
                            gpsflag = true;
                            break;
                        }
                    }
                    break;
                case AppConstants.call_form_fields:
                    List<API_InputParam_Bean> list_Forminput = ActionObj.getList_Form_InParams();
                    for (int i = 0; i < list_Forminput.size(); i++) {
                        if (list_Forminput.get(i).getInParam_Mapped_ID().startsWith("(im:" + AppConstants.Global_GPSControl)) {
                            gpsflag = true;
                            break;
                        }
                    }

                    List<API_OutputParam_Bean> list_Formout = ActionObj.getList_Form_OutParams();
                    for (int i = 0; i < list_Formout.size(); i++) {
                        if (list_Formout.get(i).getOutParam_Mapped_Expression() != null && list_Formout.get(i).getOutParam_Mapped_Expression().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())) {
                            gpsflag = true;
                            break;
                        }
                    }
                    break;
                case AppConstants.set_value:
                    String typeofSource = ActionObj.getSv_TypeofSource();
                    if (typeofSource.equalsIgnoreCase("Control")) {
                        String typeofControl = ActionObj.getSv_ControlType();
                        if (typeofControl.contentEquals("Single")) {
                            List<AssignControl_Bean> assignControl_beans = ActionObj.getSv_single_control_assign_controls();
                            if(assignControl_beans!=null&&assignControl_beans.size()>0) {
                                for (int index = 0; index <assignControl_beans.size() ; index++) {
                                    AssignControl_Bean assignControl_bean = assignControl_beans.get(index);
                                    if(assignControl_bean.getControlValue().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())){
                                        gpsflag = true;
                                        break;
                                    }
                                }
                            }
                        }else{
                            List<AssignControl_Bean> assignControl_beanList = ActionObj.getSv_Multiple_List_AssignControls();
                            for (int i = 0; i <assignControl_beanList.size() ; i++) {
                                AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
                                if(assignControl_bean.getControlValue().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())){
                                    gpsflag = true;
                                    break;
                                }
                                if(assignControl_bean.getControlIdValue().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())){
                                    gpsflag = true;
                                    break;
                                }

                            }
                        }
                    }else if (typeofSource.contentEquals("Variable")) {
                        AssignControl_Bean assignControl_bean = ActionObj.getSv_Single_List_AssignControls();
                        if (assignControl_bean.getControlValue() != null) {
                            if(assignControl_bean.getControlValue().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())){
                                gpsflag = true;
                                break;
                            }
                        }
                    }

                    break;
                case AppConstants.show_msg:

                    if((ActionObj.getMessage_Noraml()!=null&&ActionObj.getMessage_Noraml().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase()))
                            ||(ActionObj.getMessage_Advanced()!=null&&ActionObj.getMessage_Advanced().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase()))){
                        gpsflag = true;
                    }
                    break;
                case AppConstants.call_sql:
                    List<API_InputParam_Bean> list_sqlinput = ActionObj.getList_Form_InParams();
                    for (int i = 0; i < list_sqlinput.size(); i++) {
                        if (list_sqlinput.get(i).getInParam_Mapped_ID().startsWith("(im:" + AppConstants.Global_GPSControl)) {
                            gpsflag = true;
                            break;
                        }
                    }
                    break;
                case AppConstants.open_google_maps:
                    List<EnabledControl_Bean> enabledControl_beanList = ActionObj.getEnabledControl_beanList();
                    for (int i = 0; i < enabledControl_beanList.size(); i++) {
                        if (enabledControl_beanList.get(i).getSelectedValue().startsWith("(im:" + AppConstants.Global_GPSControl)) {
                            gpsflag = true;
                            break;
                        }
                    }


                    break;


            }
        } catch (Exception e) {
            gpsflag = false;
            ImproveHelper.improveException(this, TAG, "checkCurrentLocatioAtExecuteAction", e);
        }
        return gpsflag;
    }

    public void CheckActionWithConditionEvents(ActionWithCondition_Bean actionWithCondition_Bean) {
        try {
            Conditionflag = false;
            IfElseBlock_Bean IfElseBlock = actionWithCondition_Bean.getIfBlock();
            List<IfElseBlock_Bean> List_IfElseBlock_Bean = actionWithCondition_Bean.getElseBlockList();
            IfElseBlock_Bean ElseBlock_Bean = actionWithCondition_Bean.getElseBlock();

            try {
                JSONObject jobj = new JSONObject();
                jobj.put("CheckActionWithConditionEvents", "Yes");
                jobj.put("ActionName", actionWithCondition_Bean.getActionWithConditionName());
                ImproveHelper.Controlflow("CheckActionWithConditionEvents", "DataCollection", "Action", jobj.toString());
            } catch (JSONException e) {
                ImproveHelper.improveException(context, TAG, "CheckActionWithConditionEvents", e);
            }

            boolean Condetion = false;
            if (IfElseBlock != null) {
                Condetion = checkandExecute(IfElseBlock);
            }

            if (!Condetion) {
                if (List_IfElseBlock_Bean != null && List_IfElseBlock_Bean.size() > 0) {
                    for (int i = 0; i < List_IfElseBlock_Bean.size(); i++) {
                        Condetion = checkandExecute(List_IfElseBlock_Bean.get(i));
                        if (Condetion) {
                            break;
                        }
                    }
                }
            }

            if (!Condetion) {
                if (ElseBlock_Bean != null) {
                    checkandExecute(ElseBlock_Bean);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "CheckActionWithConditionEvents", e);
        }
    }

    public boolean checkandExecute(IfElseBlock_Bean IfElseBlock_Bean) {
        boolean doflag = false;
        try {
            this.IfElseBlock_Bean = IfElseBlock_Bean;
            if (!IfElseBlock_Bean.isExpressionExists()) {
                List<Condition_Bean> list_Conditions = IfElseBlock_Bean.getConditionsList();
                if (list_Conditions != null) {
                    if (list_Conditions.size() == 1) {
                        if (!Conditionflag && CheckActionCondition(list_Conditions.get(0))) {
                            doflag = true;
                            //==do_Actions==
                            List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                            int i = Executeindex;
                            Conditionflag = true;
                            if (i < list_Actions.size()) {
                                FromAction = 2;
                                Executeindex = i;
                                ExecuteAction(list_Actions.get(i), true);
                            }

                        } else if (Conditionflag) {
                            doflag = true;
                            //==do_Actions==
                            List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                            int i = Executeindex;
                            Conditionflag = true;
                            if (i < list_Actions.size()) {
                                FromAction = 2;
                                Executeindex = i;
                                ExecuteAction(list_Actions.get(i), true);
                            } else {
                                FromAction = 2;
                                ActionIndex++;
                                EventExecute();
                            }

                        }

                    } else {
                        doflag = true;
                        if (IfElseBlock_Bean.getConditionType().equalsIgnoreCase(AppConstants.All_conditions_satisfied)) {
                            for (int i = 0; i < list_Conditions.size(); i++) {
                                if (!Conditionflag && !CheckActionCondition(list_Conditions.get(i))) {
                                    doflag = false;
                                    break;
                                }
                            }
                        } else {
                            doflag = false;
                            if (!Conditionflag) {
                                for (int i = 0; i < list_Conditions.size(); i++) {
                                    if (!Conditionflag && CheckActionCondition(list_Conditions.get(i))) {
                                        doflag = true;
                                        break;
                                    }
                                }
                            } else {
                                doflag = true;
                            }
                        }
                        if (doflag) {
                            //==do_Actions==
                            List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                            int i = Executeindex;
                            Conditionflag = true;
                            if (i < list_Actions.size()) {
                                FromAction = 2;
                                Executeindex = i;
                                ExecuteAction(list_Actions.get(i), true);
                            } else {
                                FromAction = 2;
                                ActionIndex++;
                                EventExecute();
                            }

                        }
                    }
                } else {
                    if (IfElseBlock_Bean.getActionsList() != null) {
                        List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                        int i = Executeindex;
                        Conditionflag = true;
                        if (i < list_Actions.size()) {
                            FromAction = 2;
                            Executeindex = i;
                            ExecuteAction(list_Actions.get(i), true);
                        } else {
                            FromAction = 2;
                            ActionIndex++;
                            EventExecute();
                        }

                    }
                }
            } else {
                if (IfElseBlock_Bean.getAdvancedCondition() != null && IfElseBlock_Bean.getAdvancedCondition().trim().length() > 0) {
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Condetion = ehelper.ExpressionHelper(this, IfElseBlock_Bean.getAdvancedCondition());
                    if (!Conditionflag && Condetion.equalsIgnoreCase("true")) {
                        Conditionflag = true;
                        doflag = true;
                        //==do_Actions==
                        List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                        int i = Executeindex;
                        if (i < list_Actions.size()) {
                            FromAction = 2;
                            Executeindex = i;
                            ExecuteAction(list_Actions.get(i), true);
                        } else {
                            FromAction = 2;
                            ActionIndex++;
                            EventExecute();
                        }

                    } else if (Conditionflag) {
                        Conditionflag = true;
                        doflag = true;
                        //==do_Actions==
                        List<ActionWithoutCondition_Bean> list_Actions = IfElseBlock_Bean.getActionsList();
                        int i = Executeindex;
                        if (i < list_Actions.size()) {
                            FromAction = 2;
                            Executeindex = i;
                            ExecuteAction(list_Actions.get(i), true);
                        } else {
                            FromAction = 2;
                            ActionIndex++;
                            EventExecute();
                        }

                    }
                }
            }
            System.out.println("Condetion is ==" + doflag);
        } catch (Exception e) {
            doflag = false;
            ImproveHelper.improveException(this, TAG, "checkandExecute", e);
        }
        return doflag;
    }

    public boolean CheckActionCondition(Condition_Bean condition_Bean) {
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(dataCollectionObject.getApp_Name());

        boolean returnflag = false;
        String value = "", TargetValue = "";

        try {
            String ConditionValue = "";
            System.out.println("condition_Bean.getValue()===" + condition_Bean.getValue());
            System.out.println("condition_Bean.getTarget()===" + condition_Bean.getTarget());

            if (condition_Bean.getValueType().equalsIgnoreCase(AppConstants.Static)) {
                if (condition_Bean.getValue().charAt(0) == 34) {
                    value = condition_Bean.getValue().substring(1, condition_Bean.getValue().length() - 1);
                } else {
                    value = condition_Bean.getValue();
                }

            } else {
                value = ImproveHelper.getValueFromGlobalObject(MainActivity.this, condition_Bean.getValue());
            }


            String TargetStr = condition_Bean.getTarget();

            boolean multipleitems_flag = false;
            if (TargetStr.startsWith("(im:")) {
                TargetStr = TargetStr.substring(TargetStr.indexOf(":") + 1, TargetStr.lastIndexOf(")"));
                String TargetType = TargetStr.split("\\.")[0];
                String TargetControlName = TargetStr.substring(TargetStr.lastIndexOf(".") + 1);


                if (TargetType.equalsIgnoreCase(AppConstants.Static)) {
                    TargetValue = TargetControlName;
                } else if (TargetType.equalsIgnoreCase(AppConstants.Global_ControlsOnForm)) {
                    for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                        if (temp_controlObj.getControlName().trim().equalsIgnoreCase(TargetControlName)) {
                            if (temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_DROP_DOWN) ||
                                    temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_RADIO_BUTTON) ||
                                    temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_CHECK_LIST) ||
                                    temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_CHECKBOX)) {
                                multipleitems_flag = true;
                                TargetValue = TextUtils.join(",", condition_Bean.getTargetItemsList());

                            } else {
                                if (dataCollectionObject.isUIFormNeeded) {//If form has custom UI
                                    String controlPos = controlPositionInUI.get(temp_controlObj.getControlName());
                                    if (controlPos.contains("$")) {//If control is in sublayout
                                        Log.d(TAG, "controlPos: " + controlPos + temp_controlObj.getControlName());
                                        String[] positions = controlPos.split("\\$");
                                        int layoutPosition = Integer.parseInt(positions[0]);
                                        int sublayoutPosition = Integer.parseInt(positions[1]);
                                        View viewE = ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) linearLayout.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).getChildAt(0);
                                        TargetValue = getTargetvaluefromView(viewE, temp_controlObj, condition_Bean);
                                    } else {//If control is in layout
                                        View viewE = ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos))).getChildAt(0);
                                        TargetValue = getTargetvaluefromView(viewE, temp_controlObj, condition_Bean);
                                    }
                                } else {
                                    TargetValue = getTargetvaluefromView(linearLayout.getChildAt(i), temp_controlObj, condition_Bean);
                                }
                            }

                            break;
                        }
                    }
                } else {
                    TargetValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, condition_Bean.getTarget());
                }
            } else {
                TargetValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, condition_Bean.getTarget());
            }

            System.out.println("value==========" + value);
            System.out.println("TargetValue========" + TargetValue);


            switch (condition_Bean.getCondition().trim()) {
                case AppConstants.Conditions_Equals:
                    if (!multipleitems_flag && value.trim().equalsIgnoreCase(TargetValue.trim())) {
                        returnflag = true;
                    } else if (multipleitems_flag && TargetValue.trim().contains(value.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_NotEquals:
                    if (!multipleitems_flag && !value.trim().equalsIgnoreCase(TargetValue.trim())) {
                        returnflag = true;
                    } else if (multipleitems_flag && !TargetValue.trim().contains(value.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_lessThan:

                   /* if (Integer.parseInt(value.trim()) < Integer.parseInt(TargetValue.trim())) {
                        returnflag = true;
                    }*/
                    if (Float.parseFloat(value.trim()) < Float.parseFloat(TargetValue.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_GreaterThan:
                  /*  if (Integer.parseInt(value.trim()) > Integer.parseInt(TargetValue.trim())) {
                        returnflag = true;
                    }*/
                    if (Float.parseFloat(value.trim()) > Float.parseFloat(TargetValue.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_LessThanEqualsTo:
                    /*if (Integer.parseInt(value.trim()) <= Integer.parseInt(TargetValue.trim())) {
                        returnflag = true;
                    }*/
                    if (Float.parseFloat(value.trim()) <= Float.parseFloat(TargetValue.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_GreaterThanEqualsTo:
                    /*if (Integer.parseInt(value.trim()) >= Integer.parseInt(TargetValue.trim())) {
                        returnflag = true;
                    }*/
                    if (Float.parseFloat(value.trim()) >= Float.parseFloat(TargetValue.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_Contains:
                    if (value.trim().contains(TargetValue.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_StartsWith:
                    if (value.trim().startsWith(TargetValue.trim())) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_EndsWith:
                    if (value.trim().endsWith(TargetValue.trim())) {
                        returnflag = true;
                    }
                case AppConstants.Conditions_IsNull:
                    if (value.trim() == null) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_IsNotNull:
                    if (value.trim() == null) {
                        returnflag = true;
                    }
                    break;
                case AppConstants.Conditions_WithInDistance:
                    String CuurentGps = "", CompareValue = "";
                    if (!condition_Bean.getValueType().equalsIgnoreCase(AppConstants.Global_GPSControl)) {
                        CuurentGps = value.trim();
                        CompareValue = TargetValue.trim();
                    } else {
                        CuurentGps = TargetValue.trim();
                        CompareValue = value.trim();
                    }

                    CompareValue = CompareValue.replace(",", "$");
                    returnflag = improveHelper.checkGeoFenceWithinRangeorNot(CuurentGps, CompareValue, Double.parseDouble(condition_Bean.getGPSRadius()));
                    break;
                case AppConstants.Conditions_WithInBoundary:

                    String BCuurentGps = "", BCompareValue = "";
                    if (!condition_Bean.getValueType().equalsIgnoreCase(AppConstants.Global_GPSControl)) {
                        BCuurentGps = value.trim();
                        BCompareValue = TargetValue.trim();
                    } else {
                        BCuurentGps = TargetValue.trim();
                        BCompareValue = value.trim();
                    }

                    BCompareValue = BCompareValue.replace(",", "$");
                    returnflag = improveHelper.checkGeoFenceWithInBoundaryOrNot(BCuurentGps, BCompareValue);
                    break;
            }


        } catch (Exception e) {
            returnflag = false;
            Log.d(TAG, "CheckActionConditionException: " + e);
            ImproveHelper.improveException(this, TAG, "CheckActionCondition", e);
        }
        return returnflag;
    }

    public List<OrderByEvents_Object> getEventsByOrder(Control_EventObject control_EventObject) {

        List<OrderByEvents_Object> totalActionsList = new ArrayList<>();
        try {
            List<ActionWithoutCondition_Bean> listActionWithoutConditions = control_EventObject.getActionWithOutConditionList() != null ? control_EventObject.getActionWithOutConditionList() : new ArrayList<ActionWithoutCondition_Bean>();
            List<ActionWithCondition_Bean> listActionWithConditions = control_EventObject.getActionWithConditionList() != null ? control_EventObject.getActionWithConditionList() : new ArrayList<ActionWithCondition_Bean>();

            int totalActions = listActionWithoutConditions.size() + listActionWithConditions.size();

            if (totalActions > 0) {

                for (int i = 0; i < totalActions; i++) {

//                if(submitevent&&i==0){
//                    i++;
//                }

                    for (int j = 0; j < listActionWithConditions.size(); j++) {
                        ActionWithCondition_Bean actionWithCondition_bean = listActionWithConditions.get(j);

                        if (actionWithCondition_bean.getPositionInEvent() == i) {

                            OrderByEvents_Object orderByEvents_object = new OrderByEvents_Object();

                            orderByEvents_object.setActionType(AppConstants.ACTION_WITH_CONDITION);
                            orderByEvents_object.setPositionInEvent(i);
                            orderByEvents_object.setActionWithCondition(actionWithCondition_bean);

                            totalActionsList.add(orderByEvents_object);
                        }

                    }

                    for (int j = 0; j < listActionWithoutConditions.size(); j++) {
                        ActionWithoutCondition_Bean actionWithoutCondition_bean = listActionWithoutConditions.get(j);

                        if (actionWithoutCondition_bean.getPositionInEvent() == i) {

                            OrderByEvents_Object orderByEvents_object = new OrderByEvents_Object();

                            orderByEvents_object.setActionType(AppConstants.ACTION_WITH_OUT_CONDITION);
                            orderByEvents_object.setPositionInEvent(i);
                            orderByEvents_object.setActionWithoutCondition(actionWithoutCondition_bean);

                            totalActionsList.add(orderByEvents_object);
                        }

                    }

                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getEventsByOrder", e);
        }
        return totalActionsList;

    }

    public String setErrortoView(View view, ControlObject cntrlObject, String ErrorMessage) {
        String value = "";
        CustomTextView ct_showText;
        try {
            switch (cntrlObject.getControlType()) {
                case CONTROL_TYPE_TEXT_INPUT:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_NUMERIC_INPUT:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_PHONE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_EMAIL:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_LARGE_INPUT:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_CAMERA:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_FILE_BROWSING:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_CALENDER:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_CHECKBOX:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_RADIO_BUTTON:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_DROP_DOWN:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_CHECK_LIST:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_RATING:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_VOICE_RECORDING:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_VIDEO_RECORDING:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_AUDIO_PLAYER:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_VIDEO_PLAYER:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_PERCENTAGE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_SIGNATURE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_URL_LINK:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_DECIMAL:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_PASSWORD:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_CURRENCY:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_IMAGE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_DATA_CONTROL:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_GPS:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_BUTTON:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_DYNAMIC_LABEL:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_TIME:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_PROGRESS:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_VIEWFILE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_COUNT_DOWN_TIMER:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_COUNT_UP_TIMER:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                case CONTROL_TYPE_BAR_CODE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                case CONTROL_TYPE_QR_CODE:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_USER:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_POST:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_AUTO_COMPLETION:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_CHART:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
                case CONTROL_TYPE_MAP:
                    ct_showText = view.findViewById(R.id.ct_showText);
                    ct_showText.setText(ErrorMessage);
                    ct_showText.setVisibility(View.VISIBLE);
                    break;
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setErrortoView", e);
        }
        return value;
    }

    public String getTargetvaluefromView(View view, ControlObject cntrlObject, Condition_Bean condition_Bean) {
        String value = "";
        try {
            switch (cntrlObject.getControlType()) {
                case CONTROL_TYPE_TEXT_INPUT:
                    CustomEditText ce_TextType = view.findViewById(R.id.ce_TextType);
                    value = ce_TextType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_NUMERIC_INPUT:
                    CustomEditText ce_NumType = view.findViewById(R.id.ce_TextType);
                    value = ce_NumType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_PHONE:
                    CustomEditText ce_PhoneType = view.findViewById(R.id.ce_TextType);
                    value = ce_PhoneType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_EMAIL:
                    CustomEditText ce_EmailType = view.findViewById(R.id.ce_TextType);
                    value = ce_EmailType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_LARGE_INPUT:
                    CustomEditText ce_LargeType = view.findViewById(R.id.ce_TextType);
                    value = ce_LargeType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_CHECKBOX:
                    LinearLayout ll_cb_main = view.findViewById(R.id.cb_container);
                    CustomEditText ce_other = view.findViewById(R.id.ce_otherchoice);
                    for (int i = 0; i < ll_cb_main.getChildCount(); i++) {
                        CheckBox cb_item = (CheckBox) ll_cb_main.getChildAt(i);
                        if (cb_item.isChecked()) {
                            if (cb_item.getText().toString().trim().equalsIgnoreCase("Other")) {
                                value = value + "," + ce_other.getText().toString().trim();
                            } else {
                                value = value + "," + cb_item.getText().toString().trim();
                            }
                        }
                    }
                    value = value.substring(1);

//                List<String> CheckTargets = condition_Bean.getTargetItemsList();
//                for (int i = 0; i < CheckTargets.size(); i++) {
//                    value = value + "," + CheckTargets.get(i);
//                }
//                value = value.substring(1);
                    break;
                case CONTROL_TYPE_CALENDER:
                    com.bhargo.user.controls.standard.Calendar calendar = (com.bhargo.user.controls.standard.Calendar) List_ControlClassObjects.get(cntrlObject.getControlName());
                    CustomEditText ce_CalenderType = view.findViewById(R.id.ce_TextType);
//                    value = ce_CalenderType.getText().toString().trim();
                    value = calendar.getFinalDateWithServerFormat();
                    break;
                case CONTROL_TYPE_PERCENTAGE:
                    CustomEditText ce_PercentageType = view.findViewById(R.id.ce_TextType);
                    value = ce_PercentageType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_RADIO_BUTTON:
                    RadioGroup rg_main = view.findViewById(R.id.rg_container);
                    CustomEditText ce_rg_other = view.findViewById(R.id.ce_otherchoice);
                    RadioButton rb_item = findViewById(rg_main.getCheckedRadioButtonId());
                    if (rb_item.getText().toString().trim().equalsIgnoreCase("Other")) {
                        value = ce_rg_other.getText().toString().trim();
                    } else {
                        value = rb_item.getText().toString().trim();
                    }

//                List<String> RadioTargets = condition_Bean.getTargetItemsList();
//                for (int i = 0; i < RadioTargets.size(); i++) {
//                    value = value + "," + RadioTargets.get(i);
//                }
//                value = value.substring(1);
                    break;
                case CONTROL_TYPE_DROP_DOWN:
                    SearchableSpinner searchableSpinner = view.findViewById(R.id.searchableSpinner_main);
                    CustomEditText ce_dropother = view.findViewById(R.id.ce_otherchoice);
                    if (searchableSpinner.getSelectedName().trim().equalsIgnoreCase("Other")) {
                        value = ce_dropother.getText().toString().trim();
                    } else {
                        value = searchableSpinner.getSelectedName().trim();
                    }

//                List<String> DropTargets = condition_Bean.getTargetItemsList();
//                for (int i = 0; i < DropTargets.size(); i++) {
//                    value = value + "," + DropTargets.get(i);
//                }
//                value = value.substring(1);
                    break;
                case CONTROL_TYPE_CHECK_LIST:
                    SearchableMultiSpinner multiSearchableSpinner = view.findViewById(R.id.multiSearchableSpinner);
                    List<String> Items = multiSearchableSpinner.getSelectedNames();
                    for (int i = 0; i < Items.size(); i++) {
                        value = value + "," + Items.get(i);
                    }
                    value = value.substring(1);

//                List<String> CheckListTargets = condition_Bean.getTargetItemsList();
//                for (int i = 0; i < CheckListTargets.size(); i++) {
//                    value = value + "," + CheckListTargets.get(i);
//                }
//                value = value.substring(1);
                    break;
                case CONTROL_TYPE_DECIMAL:
                    CustomEditText ce_DecimalType = view.findViewById(R.id.ce_TextType);
                    value = ce_DecimalType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_PASSWORD:
                    CustomTextInputEditText ce_PasswordType = view.findViewById(R.id.tie_password);
                    value = ce_PasswordType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_CURRENCY:
                    CustomEditText ce_CurrType = view.findViewById(R.id.ce_TextType);
                    value = ce_CurrType.getText().toString().trim();
                    break;
                case CONTROL_TYPE_RATING:
                    SmileRating smileRating = view.findViewById(R.id.smile_rating);
                    RatingBar ratingBar = view.findViewById(R.id.ratingStar);

                    if (controlObject.getRatingType().equalsIgnoreCase("Smiley")) {
                        value = "" + smileRating.getRating();
                    } else {
                        value = "" + ratingBar.getRating();
                    }
                    break;
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getTargetvaluefromView", e);
        }
        return value;
    }

    private void nextEvent() {
        if (FromAction == 1) {
            Executeindex++;
            EventExecute();
        } else {
            Executeindex++;
            checkandExecute(IfElseBlock_Bean);
        }
    }
    public void addActionEvent(String actionType) {
        OrderByEvents_Object editObj = new OrderByEvents_Object();
        editObj.setActionType(AppConstants.ACTION_WITH_OUT_CONDITION);
        ActionWithoutCondition_Bean ActionWithoutCondition_Bean = new ActionWithoutCondition_Bean();
        ActionWithoutCondition_Bean.setActive(true);
        ActionWithoutCondition_Bean.setActionType(actionType);
        editObj.setActionWithoutCondition(ActionWithoutCondition_Bean);
        list_OrderByEvents_common.add(editObj);
        EventExecute();
    }
    public void shareApp(String title,String msg,String packageName,String referralCode,
                         int appIcon) {
        packageName="com.visakha.diary";
        String shareMsg=msg+
                "\nAvailable App in PlayStore. " +
                "Download Now:https://play.google.com/store/apps/details?id="+packageName+""+
                "\nUse my referral code "+referralCode;

        if(isNetworkStatusAvialable(context)){
            try {
                Bitmap bitmap = BitmapFactory.decodeResource(getResources(),
                        appIcon);
                ByteArrayOutputStream bytes = new ByteArrayOutputStream();
                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
                String path = MediaStore.Images.Media.insertImage(
                        getContentResolver(), bitmap, title, null);
                Uri imageUri = Uri.parse(path);

                Intent share = new Intent(Intent.ACTION_SEND);
                //share.setType("text/plain");
                share.setType("image/jpeg");
                share.putExtra(Intent.EXTRA_STREAM, imageUri);
                share.putExtra(android.content.Intent.EXTRA_SUBJECT, title);
                share.putExtra(Intent.EXTRA_TEXT, shareMsg);
                startActivity(Intent.createChooser(share, "Share via"));
            } catch (Exception e) {
                ImproveHelper.showToast(context,e.getMessage());
            }
        }else{
            ImproveHelper.showToast(context,getString(R.string.no_internet_available));
        }
    }

    public void ExecuteAction(final ActionWithoutCondition_Bean ActionObj, boolean condetion) {
        try {
            try {
                JSONObject jobj = new JSONObject();
                jobj.put("ExecuteAction", "Yes");
                jobj.put("ActionType", ActionObj.getActionType());
                ImproveHelper.Controlflow("ExecuteAction", "DataCollection", "Action", jobj.toString());
            } catch (JSONException e) {
                ImproveHelper.improveException(context, TAG, "ExecuteAction", e);
            }
            ImproveHelper.improveLog(TAG, "ExecuteAction", "Action Type : " + ActionObj.getActionType());
            if (ActionObj.isActive()) {
                Global_ActionObj = ActionObj;
                switch (ActionObj.getActionType()) {
                    case AppConstants.shareData:
                        shareApp("Test App","Msg",context.getPackageName(),"NK007",R.drawable.icon_bhargo_user);
                        break;
                    case "Download As PDF" :
                        downLoadAsPdf(ActionObj);
                        nextEvent();
                        break;
                    case "Download As Excel":
                        downLoadAsExcell(ActionObj);
                        nextEvent();
                        break;
                    case "Print" :
                        print(ActionObj);
                        break;
                    case "FormEdit":
                        if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm") &&
                                app_edit.equalsIgnoreCase("edit")) {
                            SetEditDataToControlValues setEditData = new SetEditDataToControlValues(context, this,
                                    List_ControlClassObjects, list_Control);
                            setEditData.jsonWiseExecute(jsonObjChildForm, new com.bhargo.user.interfaces.Callback() {
                                @Override
                                public void onSuccess(Object result) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                                        uFScrollView.getChildAt(0).setFocusable(View.FOCUSABLE);
                                    }
                                    uFScrollView.getChildAt(0).setFocusableInTouchMode(true);
                                    uFScrollView.getChildAt(0).requestFocus();
                                    nextEvent();
                                }

                                @Override
                                public void onFailure(Throwable throwable) {
                                    nextEvent();
                                }
                            });
                        } else {
                            nextEvent();
                        }
                       /* if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                            EditThread();
                        }
                        if (app_edit.equalsIgnoreCase("edit")) {
                            setEditValues(false);
                        }
                        nextEvent();*/
                        break;
                    case AppConstants.POP_UP_MANAGEMENT:
                        popUpManagement(ActionObj);
                        nextEvent();
                        break;
                    case AppConstants.Remove_Row:
                        removeRow(ActionObj);
                        nextEvent();
                        break;
                    case AppConstants.GET_DATA:
                        dismissProgressDialog();
                        GetData getData = new GetData(context, sessionManager, strAppName,
                                List_ControlClassObjects, dataCollectionObject, ActionObj, getServices,
                                new com.bhargo.user.interfaces.Callback() {
                                    @Override
                                    public void onSuccess(Object result) {
                                        nextEvent();
                                    }

                                    @Override
                                    public void onFailure(Throwable throwable) {
                                        ImproveHelper.showToastRunOnUI(MainActivity.this, throwable.getMessage().toString());
                                        nextEvent();
                                    }
                                });
                        break;
                    case AppConstants.MANAGE_DATA:
                        ManageData manageData = new ManageData(context, strAppName, ActionObj, condetion,dataCollectionObject,List_ControlClassObjects, new com.bhargo.user.interfaces.Callback() {
                            @Override
                            public void onSuccess(Object result) {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        ImproveHelper.showToastAlert(context, result.toString());
                                    }
                                });
                                nextEvent();
                            }

                            @Override
                            public void onFailure(Throwable throwable) {
                                runOnUiThread(new Runnable() {
                                    public void run() {
                                        ImproveHelper.showToastAlert(context, throwable.toString());
                                    }
                                });
                                nextEvent();
                            }
                        });
                        break;

                    case AppConstants.call_syncformdata:
                        if (condetion) {
                            if (ImproveHelper.isNetworkStatusAvialable(context)) {
                                if(ActionObj.getSyncFormData().getSyncType().equalsIgnoreCase("Request offline data synchronization")){
                                    List<OfflineSaveRequestPojo> offlineSaveRequestPojoList=getSaveRequestsBasedOnAppName(ActionObj.getSyncFormData().getFormName());
                                    if(offlineSaveRequestPojoList.size()>0){
                                        SyncSaveRequest syncSaveRequest = new SyncSaveRequest(context, offlineSaveRequestPojoList, new com.bhargo.user.interfaces.Callback() {
                                            @Override
                                            public void onSuccess(Object result) {
                                                showToastRunOnUI(MainActivity.this, result.toString());
                                            }

                                            @Override
                                            public void onFailure(Throwable throwable) {
                                                ImproveHelper.confirmDialog(context, "Failed", throwable.getMessage(), "OK", "", new Helper.IL() {
                                                    @Override
                                                    public void onSuccess() {
                                                        nextEvent();
                                                    }

                                                    @Override
                                                    public void onCancel() {
                                                        nextEvent();
                                                    }
                                                });
                                                //showToastRunOnUI(MainActivity.this, throwable.getMessage());
                                            }
                                        });
                                    }else{
                                        ImproveHelper.showToastRunOnUI(MainActivity.this,"No Saved Request!");
                                    }

                                }else{
                                    SyncData syncData = new SyncData(MainActivity.this, ActionObj.getSyncFormData(), new SyncData.SyncDataListener() {
                                        @Override
                                        public void onSuccess(String msg) {
                                            showToastRunOnUI(MainActivity.this, msg);
                                            nextEvent();
                                        }

                                        @Override
                                        public void onFailed(String errorMessage) {
                                            showToastRunOnUI(MainActivity.this, errorMessage);
                                            nextEvent();
                                        }
                                    });
                                }
                            } else {
                                showToast(context, context.getString(R.string.no_internet));
                                nextEvent();
                            }
                        } else {
                            nextEvent();
                        }
                        break;
                    case AppConstants.call_api_query:
                        if (condetion) {
                            if (ImproveHelper.isNetworkStatusAvialable(context)) {
                                boolean actionContainGPS = false;
                                List<API_InputParam_Bean> list_input = ActionObj.getList_API_InParams();
                                for (int i = 0; i < list_input.size(); i++) {
                                    if (list_input.get(i).getInParam_Mapped_ID().startsWith("(im:" + AppConstants.Global_GPSControl)) {
                                        actionContainGPS = true;
                                        break;
                                    }
                                }
                                if (actionContainGPS) {

                                    Global_ActionObj = ActionObj;
                                    Intent intent = new Intent(this, LocationHelper.class);
                                    startActivityForResult(intent, REQUEST_FUSED_LOCATION_API);

                                } else {
                                    CallAPIQueryServices(ActionObj);
                                }
                            } else {
                                if (ActionObj.getSaveOfflineType().equalsIgnoreCase("Request")) {
                                    String APIName = ActionObj.getSelectedAPIName();
                                    final List<API_InputParam_Bean> list_input = ActionObj.getList_API_InParams();
                                    Map<String, String> InputMap = new HashMap<>();
                                    LinkedHashMap<String, List<String>> temp_InparamsList = new LinkedHashMap<String, List<String>>();
                                    for (int i = 0; i < list_input.size(); i++) {
                                        String inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_Mapped_ID().trim());
                                        InputMap.put(list_input.get(i).getInParam_Name().split("\\^")[0], inValue);
                                        List<String> invalu = new ArrayList<>();
                                        invalu.add(inValue);
                                        if (temp_InparamsList.containsKey(list_input.get(i).getInParam_Name().split("\\^")[0].toLowerCase())) {

                                            List<String> invalu_temp = temp_InparamsList.get(list_input.get(i).getInParam_Name().split("\\^")[0].toLowerCase());
                                            invalu_temp.addAll(invalu);
                                            temp_InparamsList.put(list_input.get(i).getInParam_Name().split("\\^")[0].toLowerCase(), invalu_temp);
                                        } else {
                                            temp_InparamsList.put(list_input.get(i).getInParam_Name().split("\\^")[0].toLowerCase(), invalu);
                                        }
                                    }

                                    //nk realm:
                                    if (RealmDBHelper.existTable(context, APIName)) {
                                        RealmDBHelper.deleteTable(context, APIName);
                                    }
                                    //insert
                                    RealmDBHelper.createTableWithLHM(context, APIName, temp_InparamsList);
                                    RealmDBHelper.insertFromWithLHM(context, APIName, temp_InparamsList);
                                    //nk realm
                                   /* LinkedHashMap<String, LinkedHashMap<String, List<String>>> RequestOfflineData = new LinkedHashMap<String, LinkedHashMap<String, List<String>>>();
                                    RequestOfflineData.put(APIName.toLowerCase(), temp_InparamsList);
                                    if (AppConstants.GlobalObjects.getAPIsRequestOfflineData_ListHash() == null) {
                                        AppConstants.GlobalObjects.setAPIsRequestOfflineData_ListHash(RequestOfflineData);
                                    } else {
                                        AppConstants.GlobalObjects.getAPIsRequestOfflineData_ListHash().put(APIName.toLowerCase(), temp_InparamsList);
                                    }*/

                                    Gson gson = new Gson();
                                    String json = gson.toJson(InputMap);

                                    improveDataBase.insertIntoCallAPI_Request(ImproveDataBase.CallAPI_Request_TABLE, AppConstants.GlobalObjects.getOrg_Name(),
                                            GlobalObjects.getUser_ID(), APIName, json);

                                    showToast(context, context.getString(R.string.request_saved));
                                    nextEvent();
                                }
                                else if (ActionObj.getSaveOfflineType().equalsIgnoreCase("Response")) {
                                    SessionManager sessionManager = new SessionManager(context);
                                    LinkedHashMap<String, List<String>> OutputData = sessionManager.getCallAPIResponseData(strAppName + "_" + ActionObj.getSelectedAPIName());
                                    if (OutputData != null && OutputData.size() > 0) {
                                        LoadCallAPIOfflineData(OutputData, ActionObj);
                                    } else {
                                        nextEvent();
                                    }
                                } else {
                                    nextEvent();
                                }
                            }
                        }else{
                            nextEvent();
                        }
                        break;
                    case AppConstants.set_value:
                        if (condetion) {
                            boolean actionContainGPS = false;
                            if (ActionObj.getSv_Map_DataSource() != null &&
                                    ActionObj.getSv_Map_DataSource().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())) {
                                actionContainGPS = true;
                            } else if (ActionObj.getSv_Single_List_AssignControls() != null && ActionObj.getSv_Single_List_AssignControls().getControlValue() != null && ActionObj.getSv_Single_List_AssignControls().getControlValue().toLowerCase().contains("(im:" + AppConstants.Global_GPSControl.toLowerCase())) {
                                actionContainGPS = true;
                            }
                            SetValue(ActionObj);
                        } else {
                            nextEvent();
                        }
                        break;
                    case AppConstants.disable_control:
                        if (condetion) {
                            List<String> Disable_ControlNames = ActionObj.getList_DisableControlIds();
                            SetDisable(Disable_ControlNames);
                            List<SubControls_Advance_Bean> Disable_SubControls_Advance = ActionObj.getList_SubControl_Advance();
//                            SetSubformDisable(Disable_SubControls_Advance);
                            setDisableSubControls(Disable_SubControls_Advance,false);
                        } else {
                            List<String> Disable_ControlNames = ActionObj.getList_DisableControlIds();
                            SetEnable(Disable_ControlNames);
                        }
                        nextEvent();
                        break;
                    case AppConstants.enable_control:
                        if (condetion) {
                            List<String> Enable_ControlNames = ActionObj.getList_EnableControlIds();
                            SetEnable(Enable_ControlNames);

                            List<SubControls_Advance_Bean> Enable_SubControls_Advance = ActionObj.getList_SubControl_Advance();
//                            SetSubformEnable(Enable_SubControls_Advance);
                            setDisableSubControls(Enable_SubControls_Advance,true);

                        } else {
                            List<String> Enable_ControlNames = ActionObj.getList_EnableControlIds();
                            SetDisable(Enable_ControlNames);
                        }
                        nextEvent();
                        break;
                    case AppConstants.visibility_on:
                        if (condetion) {
                            List<String> VisibleOn_ControlNames = ActionObj.getList_VisibleOnControlIds();
                            if (VisibleOn_ControlNames.size() > 0)
                                SetVisibleOn(VisibleOn_ControlNames);
                            List<SubControls_Advance_Bean> VisibleOn_SubControls_Advance = ActionObj.getList_SubControl_Advance();
                            if (VisibleOn_SubControls_Advance.size() > 0)
                                SetSubformVisibleOn(VisibleOn_SubControls_Advance);
                        } else {
                            List<String> VisibleOn_ControlNames = ActionObj.getList_VisibleOnControlIds();
                            if (VisibleOn_ControlNames.size() > 0)
                                SetVisibleOff(VisibleOn_ControlNames);
                        }
                        nextEvent();
                        break;
                    case AppConstants.visibility_off:
                        if (condetion) {
                            List<String> VisibleOff_ControlNames = ActionObj.getList_VisibleOffControlIds();
                            if (VisibleOff_ControlNames.size() > 0)
                                SetVisibleOff(VisibleOff_ControlNames);
                            List<SubControls_Advance_Bean> VisibleOff_SubControls_Advance = ActionObj.getList_SubControl_Advance();
                            if (VisibleOff_SubControls_Advance.size() > 0)
                                SetSubformVisibleOff(VisibleOff_SubControls_Advance);
                        } else {
                            List<String> VisibleOff_ControlNames = ActionObj.getList_VisibleOffControlIds();
                            if (VisibleOff_ControlNames.size() > 0)
                                SetVisibleOn(VisibleOff_ControlNames);
                        }
                        nextEvent();
                        break;

                    case AppConstants.clear_control:
                        Log.d(TAG, "ExecuteAction: " + "ClearControl");
                        if (condetion) {
                            List<String> Clear_ControlNames = ActionObj.getList_ClearControlIds();
                            List<Item> Clear_ControlNames_list = ActionObj.getList_ClearControlItems();
//                            SetClearControls(Clear_ControlNames);
                            improveHelper.clearControls(Clear_ControlNames_list, dataCollectionObject.getControls_list(), dataCollectionObject.getList_Varibles(), List_ControlClassObjects);
                            List<SubControls_Advance_Bean> Clear_SubControls_Advance = ActionObj.getList_SubControl_Advance();
                            SetSubformClear(Clear_SubControls_Advance);
                        }
                        nextEvent();
                        break;
                    case AppConstants.show_msg:
                        if (condetion) {
                            CallMessage(ActionObj);
                        } else {
                            nextEvent();
                        }
                        break;
                    case AppConstants.notifications:
                        if (condetion) {
                            CallNotification(ActionObj);
                        }
                        nextEvent();
                        break;
                    case AppConstants.callform:
                        if (condetion) {
                            boolean actionContainGPS = false;
                            if (ActionObj.getDataManagementOptions() != null &&
                                    ActionObj.getDataManagementOptions().getFilterColumns() != null &&
                                    ActionObj.getDataManagementOptions().getFilterColumns().size() > 0) {
                                List<API_InputParam_Bean> list_input = ActionObj.getDataManagementOptions().getFilterColumns();
                                for (int i = 0; i < list_input.size(); i++) {
                                    if (list_input.get(i).isEnable()) {
                                        if (list_input.get(i).getInParam_Mapped_ID().contentEquals(CONTROL_TYPE_GPS)) {
                                            actionContainGPS = true;
                                        }
                                    }
                                }
                            }

                            if (actionContainGPS) {
                                Global_ActionObj = ActionObj;
                                Intent intent = new Intent(this, LocationHelper.class);
                                startActivityForResult(intent, REQUEST_FUSED_LOCATION_CF);
                            } else {
                                callform(ActionObj);
                            }
                        }
                        nextEvent();
                        break;
                    case AppConstants.callweb:
                        if (condetion) {
//                            String weburl = ActionObj.getCallWeb_Link();
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            String weburl = ehelper.ExpressionHelper(this, ActionObj.getCallWeb_Link());
                            if (ActionObj.getCallWeb_LinkType().equalsIgnoreCase(getResources().getString(R.string.query_string))) {
                                weburl = weburl + "?" + getQueryString(ActionObj.getCallWeb_Params());
                            } else if (ActionObj.getCallWeb_LinkType().equalsIgnoreCase(getResources().getString(R.string.delimiter))) {
                                weburl = weburl + "/" + getdelimiterString(ActionObj.getCallWeb_Params());
                            }

                            Intent intent = new Intent(context, CallWebPageViewActivity.class);
                            intent.putExtra("WebLink", weburl);
                            dismissProgressDialog();
                            context.startActivity(intent);


                        } else {
                            nextEvent();
                        }


                        break;
                    case AppConstants.setgps:
                        if (condetion) {
                            String GpsControlName = ActionObj.getGeoTag_ControlName();
                            String GeoTag_GPSSource = ActionObj.getGeoTag_GPSSource();
                            String GeoTag_GPSType = ActionObj.getGeoTag_GPSType();
                            String GPS_acuuracy = "", interval_Type = "", interval = "";
                            Gps_Control gps_Control = (Gps_Control) List_ControlClassObjects.get(GpsControlName);
                            if (GeoTag_GPSSource.equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                                GPS_acuuracy = ActionObj.getGeoTag_GPSAccuracy();
                            }

                            if (GeoTag_GPSType.equalsIgnoreCase(AppConstants.Multi_points_line) ||
                                    GeoTag_GPSType.equalsIgnoreCase(AppConstants.Polygon) ||
                                    GeoTag_GPSType.equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
                                interval_Type = ActionObj.getGeoTag_GPSIntervalType();
                                interval = ActionObj.getGeoTag_GPSIntervalValue();
                            }

                            gps_Control.clearAll();
                            gps_Control.setGPS_Mode(GeoTag_GPSSource, GPS_acuuracy);
                            gps_Control.setGPS_Type(GeoTag_GPSType, interval_Type, interval);
                        }
                        nextEvent();
                        break;
                    case AppConstants.set_showmap:
                        if (condetion) {
                            setShowMap(ActionObj);
                        }

                        nextEvent();
                        break;
                    case AppConstants.set_calender_event:
                        if (condetion) {
                            String Calenderevent_Control = ActionObj.getCalenderevent_Control();
                            String Calenderevent_Type = ActionObj.getCalenderevent_Type();

                            setCalenderEvents(Calenderevent_Control, ActionObj);
                        }
                        nextEvent();
                        break;
                    case AppConstants.set_dial_number:
                        if (condetion) {
                            String dialNumberValue = ActionObj.getDialNumberValue();

                            setDialNumber(dialNumberValue, ActionObj);
                        }
                        nextEvent();
                        break;
                    case AppConstants.set_text_to_speech:
                        if (condetion) {
                            String textToVoiceValue = ActionObj.getVoiceTextValue();

                            setTextToVoice(textToVoiceValue, ActionObj);
                        }
                        nextEvent();
                        break;
                    case AppConstants.set_start_tracking:
                        if (condetion) {
                            String Live_Tracking_Control = ActionObj.getLiveTrackingControl();

                            setStartTracking(Live_Tracking_Control, ActionObj);
                        }
                        nextEvent();
                        break;

                    case AppConstants.set_stop_tracking:
                        if (condetion) {
                            String Live_Tracking_Control = ActionObj.getLiveTrackingControl();

                            setStopTracking(Live_Tracking_Control, ActionObj);
                        }
                        nextEvent();
                        break;

                    case AppConstants.default_submit:
                        try {
                            if (formValidated(list_Control)) {
                                if (checkAnyMapExisting()) {
                                    DefaultActionMapExisting();
                                } else {
                                    DefultAction();
                                }
                            }
//                            }
                        } catch (InterruptedException e) {

                        }

                        break;
                    case AppConstants.default_exit:
//                        navigateBack();
                        finish();
                        break;
                    case AppConstants.Set_Focus:
                        if (condetion) {
                            SetFocus(ActionObj);
                        }
                        nextEvent();
                        break;
                    case AppConstants.Set_Selection:
                        setSelection(ActionObj);
                        nextEvent();
                        break;
                    case AppConstants.Scan_QR_Code:
                        ScanQRCode(ActionObj);
                        break;
                    case AppConstants.Call_Chat_Window:
                        String[] TabsData0 = AppConstants.WINDOWS_AVAILABLE.split("\\|");
//                        if(TabsData0[0].split("\\^")[1].equalsIgnoreCase("Yes")) {
                        Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        intent.putExtra("FromAction", "1");
                        intent.putExtra("FromCallWindowAction", true);
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        startActivity(intent);
                        dismissProgressDialog();
//                        }else{
//                            ImproveHelper.showToastAlert(MainActivity.this,"You have no permission to access this Window..");
//                        }
                        break;

                    case AppConstants.Call_Notification_Window:
                        String[] TabsDataNotify = AppConstants.WINDOWS_AVAILABLE.split("\\|");
//                        if(TabsData0[0].split("\\^")[1].equalsIgnoreCase("Yes")) {
                        Intent intentNotify = new Intent(MainActivity.this, NotificationsActivity.class);
                        intentNotify.putExtra("FromAction", "1");
                        intentNotify.putExtra("FromCallWindowAction", true);
                        startActivity(intentNotify);
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        dismissProgressDialog();
//                        }else{
//                            ImproveHelper.showToastAlert(MainActivity.this,"You have no permission to access this Window..");
//                        }
                        break;
                    case AppConstants.Call_Apps_Window:
                        String[] TabsData1 = AppConstants.WINDOWS_AVAILABLE.split("\\|");
//                        if(TabsData1[1].split("\\^")[1].equalsIgnoreCase("Yes")){
                        Intent intentA = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        intentA.putExtra("FromAction", "2");
                        intentA.putExtra("FromCallWindowAction", true);
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        startActivity(intentA);
                        dismissProgressDialog();
//                        }else{
//                            ImproveHelper.showToastAlert(MainActivity.this,"You have no permission to access this Window..");
//                        }

                        break;
                    case AppConstants.Call_Reports_Window:
                        String[] TabsData2 = AppConstants.WINDOWS_AVAILABLE.split("\\|");
//                        if(TabsData2[2].split("\\^")[1].equalsIgnoreCase("Yes")) {
                        Intent intentR = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        intentR.putExtra("FromAction", "3");
                        intentR.putExtra("FromCallWindowAction", true);
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        startActivity(intentR);
                        dismissProgressDialog();
//                        }else{
//                            ImproveHelper.showToastAlert(MainActivity.this,"You have no permission to access this Window..");
//                        }
                        break;
                    case AppConstants.Call_Tasks_Window:
                        String[] TabsData3 = AppConstants.WINDOWS_AVAILABLE.split("\\|");
//                        if(TabsData3[3].split("\\^")[1].equalsIgnoreCase("Yes")) {
                        Intent intentT = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        intentT.putExtra("FromAction", "4");
                        intentT.putExtra("FromCallWindowAction", true);
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        startActivity(intentT);
                        dismissProgressDialog();
//                        }else{
//                            ImproveHelper.showToastAlert(MainActivity.this,"You have no permission to access this Window..");
//                        }
                        break;
                    case AppConstants.Call_ELearning_Window:
                        String[] TabsData4 = AppConstants.WINDOWS_AVAILABLE.split("\\|");
//                        if(TabsData4[4].split("\\^")[1].equalsIgnoreCase("Yes")) {
                        Intent intentE = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        intentE.putExtra("FromAction", "5");
                        intentE.putExtra("FromCallWindowAction", true);
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        startActivity(intentE);
//                        }else{
//                            ImproveHelper.showToastAlert(MainActivity.this,"You have no permission to access this Window..");
//                        }
                        break;
                    case AppConstants.Call_Bhargo_Home_Screen:
                        Intent intentB = new Intent(MainActivity.this, BottomNavigationActivity.class);
                        intentB.putExtra("FromAction", "6");
                        checkFinishOptions(ActionObj);
                        dismissProgressDialog();
                        startActivity(intentB);
                        break;
                    case AppConstants.Call_Bhargo_Login:
                        CallLogin(ActionObj);
                        break;
                    case AppConstants.Call_Bhargo_Logout:
                        CallLogout();
                        break;
                    case AppConstants.Change_Language:
                        setLanguage(ActionObj);
                        break;
                   /* case AppConstants.Set_Properties:
                        setSet_Properties(ActionObj);
                        break;*/
                    case AppConstants.open_whatsapp:
                        openWhatsApp(ActionObj);
                        break;
                    case AppConstants.open_email:
                        openEmailClient(ActionObj);
                        break;
                    case AppConstants.open_google_maps:
                        openGoogleMaps(ActionObj);
                        break;
                    case AppConstants.download_file:
                        downloadFile(ActionObj);
                        break;
                    case AppConstants.get_gps_location:
                        //nk CallMessage(ActionObj);
                        Global_ActionObj = ActionObj;
                        Intent intentGPS = new Intent(MainActivity.this, GPSActivity.class);
                        intentGPS.putExtra("GET_GPS_LOCATION", "GET_GPS_LOCATION");
                        intentGPS.putExtra(GPSActivity.PROVIDER, ActionObj.getGetGPSLocation_GPSMode());
                        intentGPS.putExtra(GPSActivity.MAX_ACCURACY, ActionObj.getGetGPSLocation_GPSAccuracy());
                        startActivityForResult(intentGPS, REQUEST_GET_GPSLOCATION);


                        break;

                    case AppConstants.manage_count_down_timer:
                        //nk CallMessage(ActionObj);
                        Global_ActionObj = ActionObj;
                        manageCountDownTimer(ActionObj);


                        break;
                    case AppConstants.manage_count_up_timer:
                        //nk CallMessage(ActionObj);
                        Global_ActionObj = ActionObj;
                        manageCountUpTimer(ActionObj);


                        break;
                    case AppConstants.set_properties:

                        setSetProperties(ActionObj);
                        nextEvent();
                        break;
                    case AppConstants.add_row:
                        if (ActionObj.getResult_DisplayType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(ActionObj.getAddRowEvent_SubFormName());
                            gridControl.addGridRow();
                        } else {
                            SubformView subformViewAdd = (SubformView) List_ControlClassObjects.get(ActionObj.getAddRowEvent_SubFormName());
                            View view = subformViewAdd.getSubFormView();
                            LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                            subformViewAdd.addInnerSubFormStrip(subformViewAdd.getContext(), ll_MainSubFormContainer, true);
                        }


                        nextEvent();
                        break;
                    case AppConstants.delete_row:

                        if (ActionObj.getResult_DisplayType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(ActionObj.getDeleteRowEvent_SubFormName());
                            gridControl.deleteTableRow(AppConstants.SF_Selected_View, AppConstants.SF_Selected_position);
                        } else {
                            SubformView subformViewDelete = (SubformView) List_ControlClassObjects.get(ActionObj.getDeleteRowEvent_SubFormName());
                            View viewDelete = subformViewDelete.getSubFormView();
                            LinearLayout ll_MainSubFormContainerDelete = viewDelete.findViewById(R.id.ll_MainSubFormContainer);
                            subformViewDelete.iv_deleteSubFormClick(ll_MainSubFormContainerDelete, AppConstants.SF_Selected_View);
                        }
                        nextEvent();
                        break;

                }
            } else {
                nextEvent();
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "ExecuteAction", e);
        }
    }

    private List<OfflineSaveRequestPojo> getSaveRequestsBasedOnAppName(String appName) {
        List<OfflineSaveRequestPojo> offlineSaveRequestPojoList=new ArrayList<>();
        List<List<String>> db_data = improveDataBase.getTableColDataByCond(RealmTables.SaveRequestTable.TABLE_NAME_,
                RealmTables.SaveRequestTable.colsWithRowID,
                new String[]{RealmTables.SaveRequestTable.AppName},
                new String[]{appName});
            for (int i = 0; i < db_data.size(); i++) {
                OfflineSaveRequestPojo offlineSaveRequestPojo = new OfflineSaveRequestPojo();
                offlineSaveRequestPojo.setRowID(db_data.get(i).get(0));
                offlineSaveRequestPojo.setActionType(db_data.get(i).get(1));
                offlineSaveRequestPojo.setQueryType(db_data.get(i).get(2));
                offlineSaveRequestPojo.setActionID(db_data.get(i).get(3));
                offlineSaveRequestPojo.setActionName(db_data.get(i).get(4));
                offlineSaveRequestPojo.setExistingTableName(db_data.get(i).get(5));
                offlineSaveRequestPojo.setTypeOfInput(db_data.get(i).get(6));
                offlineSaveRequestPojo.setFilesControlNames(db_data.get(i).get(7));
                offlineSaveRequestPojo.setTempCol(db_data.get(i).get(8));
                offlineSaveRequestPojo.setSendingObj(db_data.get(i).get(9));
                offlineSaveRequestPojo.setAppName(db_data.get(i).get(10));
                offlineSaveRequestPojoList.add(offlineSaveRequestPojo);
            }


        return  offlineSaveRequestPojoList;
    }


    private void downLoadAsPdf(ActionWithoutCondition_Bean ActionObj){
        GeneratePDFReport generatePDFReport = new GeneratePDFReport();
        File filePath = ImproveHelper.getOutputFilePath(context,ActionObj.getDownload_selectedControl(), ".pdf");
        DataTableControl dataTableControl = (DataTableControl)List_ControlClassObjects.get(ActionObj.getDownload_selectedControl()) ;
        List<DataTableColumn_Bean> dataTableColumn_beans = new ArrayList<>();
        ControlObject controlObject = new ControlObject();
        ActionWithoutCondition_Bean dataTableAction = new ActionWithoutCondition_Bean();
        if(dataTableControl!=null){
            dataTableColumn_beans = dataTableControl.getDataTableColumn_beans();
            controlObject = dataTableControl.getControlObject();
            dataTableAction =dataTableControl.getActionObject();
        }
        generatePDFReport.setHeaderData(dataTableColumn_beans, controlObject);
        generatePDFReport.setBodyData(RealmDBHelper.getTableDataBaseOnDataTableColBean(context, dataTableAction.getActionId(), dataTableColumn_beans));
        boolean pdfStatus = generatePDFReport.createPDF(context, ActionObj.getDownload_selectedControl(), filePath);
        if (pdfStatus) {
            ImproveHelper improveHelper = new ImproveHelper();
            improveHelper.openFile(filePath.getAbsolutePath(), context);
        } else {
            ImproveHelper.showToast(context, "Failed To Generate PDF Report! Please Try Again.");
        }
    }
    private void downLoadAsExcell(ActionWithoutCondition_Bean ActionObj){
        File filePath = ImproveHelper.getOutputFilePath(context,"excel" + ActionObj.getDownload_selectedControl(), ".xls");
        DataTableControl dataTableControl = (DataTableControl)List_ControlClassObjects.get(ActionObj.getDownload_selectedControl()) ;
        List<DataTableColumn_Bean> dataTableColumn_beans = new ArrayList<>();
        ControlObject controlObject = new ControlObject();
        ActionWithoutCondition_Bean dataTableAction = new ActionWithoutCondition_Bean();
        if(dataTableControl!=null){
            dataTableColumn_beans = dataTableControl.getDataTableColumn_beans();
            controlObject = dataTableControl.getControlObject();
            dataTableAction =dataTableControl.getActionObject();
        }
        List<List<String>> llTableData= RealmDBHelper.getTableDataBaseOnDataTableColBean(context, dataTableAction.getActionId(), dataTableColumn_beans);
        boolean isExcelGenerated = ExcelUtils.exportDataIntoWorkbook(context,
                filePath, ActionObj.getDownload_selectedControl(), llTableData, dataTableColumn_beans, controlObject);
        if (isExcelGenerated) {
            ImproveHelper improveHelper = new ImproveHelper();
            improveHelper.openFile(filePath.getAbsolutePath(), context);
        } else {
            ImproveHelper.showToast(context, "Failed To Generate PDF Report! Please Try Again.");
        }
    }
    private void print(ActionWithoutCondition_Bean ActionObj){

    }
    private void LoadCallAPIOfflineData(LinkedHashMap<String, List<String>> OutputData,
                                        ActionWithoutCondition_Bean ActionBean) {
        try {
            List<API_OutputParam_Bean> List_API_OutParams = ActionBean.getList_API_OutParams();

            setAPIParamstoGlobalObjects(ActionBean.getSelectedAPIName(), OutputData);
            if (ActionBean.getResult_NoOfRecords().equalsIgnoreCase("Single")) {
                for (int i = 0; i < List_API_OutParams.size(); i++) {
                    if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                        ControlUtils.setSingleValuetoControlFromCallAPIORGetData(context,OutputData,
                                List_API_OutParams.get(i),dataCollectionObject,List_ControlClassObjects);
                    }
                }
            } else {
                String SelectedSubForm = ActionBean.getSelectedSubForm();
                if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_SUBFORM)) {
                    SubformView subform = (SubformView) List_ControlClassObjects.get(SelectedSubForm);
                    List<String> MappedControlID = new ArrayList<String>();
                    List<String> MappedParamName = new ArrayList<String>();

                    for (int i = 0; i < List_API_OutParams.size(); i++) {
                        if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                            MappedControlID.add(List_API_OutParams.get(i).getOutParam_Mapped_ID().trim());
                            MappedParamName.add(List_API_OutParams.get(i).getOutParam_Name());
                        }
                    }
                    List<String> MappedValues = OutputData.get(MappedControlID.get(0).toLowerCase());
                    subform.setiMinRows(MappedValues.size());

                    if (subform.iMaxRows <= MappedValues.size()) {
                        subform.setiMaxRows(MappedValues.size());
                    } else {
                        subform.setiMaxRows(Integer.parseInt(subform.controlObject.getMaximumRows()));
                    }

                    View view = subform.getSubFormView();
                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subform.getList_ControlClassObjects();
                    if (!ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                        ll_MainSubFormContainer.removeAllViews();
                        subform_List_ControlClassObjects.removeAll(subform_List_ControlClassObjects);
                    }
                    int totalrowsbeforeadding = subform.getList_ControlClassObjects().size();
                    for (int i = 0; i < MappedValues.size(); i++) {
                        subform.addInnerSubFormStrip(subform.getContext(), ll_MainSubFormContainer, true);
                        LinkedHashMap<String, Object> temp_object = subform.getList_ControlClassObjects().get(totalrowsbeforeadding + i);

                        ActionUitls.SetValuetoMultiControlInCallAPIFormUsedbyControlObject(this,i, OutputData, List_API_OutParams, subform.controlObject.getSubFormControlList(), temp_object);
                    }

                } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_GRIDFORM)) {
                    GridControl subform = (GridControl) List_ControlClassObjects.get(SelectedSubForm);
                    List<String> MappedControlID = new ArrayList<String>();
                    List<String> MappedParamName = new ArrayList<String>();

                    for (int i = 0; i < List_API_OutParams.size(); i++) {
                        if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                            MappedControlID.add(List_API_OutParams.get(i).getOutParam_Mapped_ID().trim());
                            MappedParamName.add(List_API_OutParams.get(i).getOutParam_Name());
                        }
                    }
                    List<String> MappedValues = OutputData.get(MappedControlID.get(0).toLowerCase());
                    subform.setiMinRows(MappedValues.size());
                    if (subform.iMaxRows <= MappedValues.size()) {
                        subform.setiMaxRows(MappedValues.size());
                    } else {
                        subform.setiMaxRows(Integer.parseInt(subform.controlObject.getMaximumRows()));
                    }

                    View view = subform.getSubFormView();

                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                    subform.SubFormTAG = 0;
                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subform.getList_ControlClassObjects();
                    if (!ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                        ll_grid_view.removeAllViews();
                        subform_List_ControlClassObjects.removeAll(subform_List_ControlClassObjects);
                    }

                    int totalrowsbeforeadding = subform.getList_ControlClassObjects().size();

                    for (int i = 0; i < MappedValues.size(); i++) {
                        subform.addGridRow();
                        LinkedHashMap<String, Object> temp_object = subform.getList_ControlClassObjects().get(totalrowsbeforeadding + i);

                        ActionUitls.SetValuetoMultiControlInCallAPIFormUsedbyControlObject(this,i, OutputData, List_API_OutParams, subform.controlObject.getSubFormControlList(), temp_object);
                    }

                } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                    DataViewer DataViewer = (DataViewer) List_ControlClassObjects.get(SelectedSubForm);
                    List<DataViewerModelClass> dataViewerModelClassList = new ArrayList<>();
                    DataViewer.setOutputData(OutputData);
                    List<String> Header_list = OutputData.get(ActionBean.getHeader_Mapped_item().toLowerCase());
                    List<String> SubHeader_list = new ArrayList<>();
                    List<String> DateandTime_list = new ArrayList<>();
                    List<String> ImagePath_list = new ArrayList<>();
                    List<String> ProfileImagePath_list = new ArrayList<>();
                    LinkedHashMap<String, List<String>> hash_Description = new LinkedHashMap<String, List<String>>();
                    List<String> Advance_ImageSource = new ArrayList<>();
                    List<String> Advance_ConditionColumn = new ArrayList<>();
                    //--EV--//
                    List<String> Distance_list = new ArrayList<>();
                    List<String> WorkingHours_list = new ArrayList<>();
                    List<String> ItemOne_list = new ArrayList<>();
                    List<String> ItemTwo_list = new ArrayList<>();
                    List<String> Rating_list = new ArrayList<>();
                    List<String> Source_Icons_list = new ArrayList<>();
                    List<String> Source_Name_list = new ArrayList<>();
                    List<String> Source_Time_list = new ArrayList<>();
                    List<String> News_Type_list = new ArrayList<>();
                    //--EV--//


                    if (ActionBean.getSubHeader_Mapped_item() != null && ActionBean.getSubHeader_Mapped_item().length() > 0) {
                        SubHeader_list = OutputData.get(ActionBean.getSubHeader_Mapped_item().toLowerCase());
                    }
                    if (ActionBean.getDateandTime_Mapped_item() != null && ActionBean.getDateandTime_Mapped_item().length() > 0) {
                        DateandTime_list = OutputData.get(ActionBean.getDateandTime_Mapped_item().toLowerCase());
                    }

                    if (ActionBean.getImage_Mapped_item() != null && ActionBean.getImage_Mapped_item().length() > 0) {
                        ImagePath_list = OutputData.get(ActionBean.getImage_Mapped_item().toLowerCase());
                    }
                    if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                        if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                            Advance_ImageSource = OutputData.get(ActionBean.getImageAdvanced_ImageSource().toLowerCase());
                        }
                        Advance_ConditionColumn = OutputData.get(ActionBean.getImageAdvanced_ConditionColumn().toLowerCase());
                    }

                    if (ActionBean.getProfileImage_Mapped_item() != null && ActionBean.getProfileImage_Mapped_item().length() > 0) {
                        ProfileImagePath_list = OutputData.get(ActionBean.getProfileImage_Mapped_item().toLowerCase());
                    }
                    if (ActionBean.getDescription_Mapped_item() != null && ActionBean.getDescription_Mapped_item().size() > 0) {
                        for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                            List<String> X_ItemList = OutputData.get(ActionBean.getDescription_Mapped_item().get(x).toLowerCase());
                            hash_Description.put(ActionBean.getDescription_Mapped_item().get(x), X_ItemList);
                        }
                    }
                    //--EV--//
                    if (ActionBean.getDistance() != null && ActionBean.getDistance().length() > 0) {
                        Distance_list = OutputData.get(ActionBean.getDistance().toLowerCase());
                    }
                    if (ActionBean.getWorking_hours() != null && ActionBean.getWorking_hours().length() > 0) {
                        WorkingHours_list = OutputData.get(ActionBean.getWorking_hours().toLowerCase());
                    }
                    if (ActionBean.getItem_one_count() != null && ActionBean.getItem_one_count().length() > 0) {
                        ItemOne_list = OutputData.get(ActionBean.getItem_one_count().toLowerCase());
                    }
                    if (ActionBean.getItem_two_count() != null && ActionBean.getItem_two_count().length() > 0) {
                        ItemTwo_list = OutputData.get(ActionBean.getItem_two_count().toLowerCase());
                    }
                    if (ActionBean.getRating() != null && ActionBean.getRating().length() > 0) {
                        Rating_list = OutputData.get(ActionBean.getRating().toLowerCase());
                    }
                    if (ActionBean.getSource_icon() != null && ActionBean.getSource_icon().length() > 0) {
                        Source_Icons_list = OutputData.get(ActionBean.getSource_icon().toLowerCase());
                    }
                    if (ActionBean.getSource_name() != null && ActionBean.getSource_name().length() > 0) {
                        Source_Name_list = OutputData.get(ActionBean.getSource_name().toLowerCase());
                    }
                    if (ActionBean.getSource_time() != null && ActionBean.getSource_time().length() > 0) {
                        Source_Time_list = OutputData.get(ActionBean.getSource_time().toLowerCase());
                    }
                    if (ActionBean.getNews_type() != null && ActionBean.getNews_type().length() > 0) {
                        News_Type_list = OutputData.get(ActionBean.getNews_type().toLowerCase());
                    }
                    //--EV--//

                    for (int i = 0; i < Header_list.size(); i++) {
                        DataViewerModelClass dmv = new DataViewerModelClass();
                        dmv.setHeading(Header_list.get(i));
                        List<String> Description = new ArrayList<String>();
                        switch (DataViewer.controlObject.getDataViewer_UI_Pattern()) {
                            case AppConstants.GridView_With_Image_2_Columns:
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        dmv.setImage_Path(null);
                                        dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                    }
                                    dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                    dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                }
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Image_3_Columns:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        dmv.setImage_Path(null);
                                        dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                    }
                                    dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                    dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                }
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Image_2_Columns_call:
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        dmv.setImage_Path(null);
                                        dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                    }
                                    dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                    dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                }
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Image_3_Columns_call:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        dmv.setImage_Path(null);
                                        dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                    }
                                    dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                    dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                }
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Video_2_Columns:
                                dmv.setVideo_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Video_3_Columns:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setVideo_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Video_2_Columns_call:
                                dmv.setVideo_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.GridView_With_Video_3_Columns_call:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setVideo_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.ListView_2_Columns:
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.ListView_With_Image_2_Columns:
                                dmv.setImage_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.ListView_With_Image_3_Columns:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setImage_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.Geo_Spatial_View:
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setGpsValue(ImagePath_list.get(i));
                                }
                                dmv.setSubHeading(SubHeader_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.TimeLine_View:
                                dmv.setDateandTime(DateandTime_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.TimeLine_With_Photo_View:
                                if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
                                    dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
                                }

                                dmv.setDateandTime(DateandTime_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.LinearView_With_Video:
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.BlogSpot_View:
                                if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
                                    dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
                                }
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setImage_Path(ImagePath_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.MapView_Item_Info:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setDistance(Distance_list.get(i));
                                dmv.setWorkingHours(WorkingHours_list.get(i));
                                dmv.setItemOneCount(ItemOne_list.get(i));
                                dmv.setItemTwoCount(ItemTwo_list.get(i));
                                break;
                            case AppConstants.EV_Dashboard_Design_One:
                            case AppConstants.EV_Dashboard_Design_Three:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        dmv.setImage_Path(null);
                                        dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                    }
                                    dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                    dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                }
                                dmv.setRating(Rating_list.get(i));
                                break;
                            case AppConstants.EV_Dashboard_Design_Two:
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        dmv.setImage_Path(null);
                                        dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                    }
                                    dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                    dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                }

                                break;
                            case AppConstants.EV_News_Design:
                                if (Source_Icons_list.size() > 0) {
                                    dmv.setSource_icon(Source_Icons_list.get(i));
                                    dmv.setSource_name(Source_Name_list.get(i));
                                    dmv.setSource_time(Source_Time_list.get(i));
                                }
                                dmv.setNews_type(News_Type_list.get(i));
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.EV_Notifications_Design:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                            case AppConstants.EV_Dealers_Design:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setDistance(Distance_list.get(i));
                                dmv.setWorkingHours(WorkingHours_list.get(i));
                                if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                    dmv.setImage_Path(ImagePath_list.get(i));
                                }
                                break;
                            case AppConstants.EV_Jobs_Design:
                                dmv.setSubHeading(SubHeader_list.get(i));
                                dmv.setSource_name(Source_Name_list.get(i));
                                dmv.setSource_time(Source_Time_list.get(i));
                                for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                    List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                    Description.add(xItem.get(i));
                                }
                                dmv.setDescription(Description);
                                break;
                        }
                        dataViewerModelClassList.add(dmv);
                    }

                    DataViewer.SetDataViewerData(dataViewerModelClassList);

                } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
                    String cName = ActionBean.getResult_ListView_FilterMappedControl();
                    String mapControl = ActionBean.getResult_ListView_FilterItem();

                    List<String> MappedValues = OutputData.get(mapControl);
                    List<String> MappedValuesIDS = OutputData.get(mapControl);
                    Log.e("Result: ", "" + MappedValues.toString());
                    SetMultipleValuesbyControlID(cName, MappedValues, MappedValuesIDS);
               /* List<String> MappedValues = OutputData.get(MappedParamName.get(0).toLowerCase());
                SetMultipleValuesbyControlID(ActionBean.getResult_ListView_FilterItem(), MappedValues);*/
//
//                List<String> MappedValues = OutputData.get(ActionBean.getSelectedSubForm());
//                List<String> MappedValuesIDS = OutputData.get(ActionBean.getSelectedSubForm());
//                SetMultipleValuesbyControlID(ActionBean.getResult_ListView_FilterItem(), MappedValues, MappedValuesIDS);


                } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_MAPVIEW)) {
                    MapControl MapControl = (MapControl) List_ControlClassObjects.get(SelectedSubForm);
                    if (List_API_OutParams.get(0).getOutParam_Mapped_ID() != null && List_API_OutParams.get(0).getOutParam_Mapped_ID().length() > 0) {
                        String MappedValue = List_API_OutParams.get(0).getOutParam_Mapped_ID();
                        List<String> MappedValues = OutputData.get(MappedValue.toLowerCase());
                        String DefultMarker = List_API_OutParams.get(0).getOutParam_Marker_defultImage();
                        MapControl.setMapPonitsDynamically(AppConstants.map_Multiple_Marker, MappedValues, DefultMarker);
                    } else {

                    }

                } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CALENDARVIEW)) {
                    CalendarEventControl CalendarEventControl = (CalendarEventControl) List_ControlClassObjects.get(SelectedSubForm);

                    String MappedValue_Date = List_API_OutParams.get(0).getOutParam_Mapped_ID();
                    String MappedValue_Message = List_API_OutParams.get(1).getOutParam_Mapped_ID();
                    List<String> MappedValues_Date = OutputData.get(MappedValue_Date.toLowerCase());
                    List<String> MappedValues_Message = OutputData.get(MappedValue_Message.toLowerCase());

                    for (int x = 0; x < MappedValues_Date.size(); x++) {
                        CalendarEventControl.AddDateDynamically("Single", MappedValues_Date.get(x), MappedValues_Message.get(x));
                    }

                }

                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "LoadCallAPIOfflineData", e);
        }
    }
    private void removeRow(ActionWithoutCondition_Bean actionWithoutConditionBean) {
        ExpressionMainHelper expressionMainHelper = new ExpressionMainHelper();
        RemoveRowAction removeRowAction = actionWithoutConditionBean.getRemoveRowAction();
        switch (removeRowAction.getMultiControlTYpe()) {
            case CONTROL_TYPE_SUBFORM:
                SubformView subformView = (SubformView) List_ControlClassObjects.get(removeRowAction.getMultiControlName());
                if (removeRowAction.isSelectSubControl()) {
                    List<RemoveControlItem> removeControlItems = removeRowAction.getRemoveControlItems();
                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                    for (int i = 0; i < removeControlItems.size(); i++) {
                        RemoveControlItem removeControlItem = removeControlItems.get(i);
                        removeControlItem.setControlType(CONTROL_TYPE_DROP_DOWN);
                        if (removeControlItem.getControlRowType().equalsIgnoreCase("allRows")) {
                            for (int j = 0; j < subform_List_ControlClassObjects.size(); j++) {
                                LinkedHashMap<String, Object> map = subform_List_ControlClassObjects.get(j);
                                switch (removeControlItem.getControlType()) {
                                    case CONTROL_TYPE_DROP_DOWN:
                                        DropDown dropDown = (DropDown) map.get(removeControlItem.getControlName());
                                        String value = expressionMainHelper.ExpressionHelper(this, removeControlItem.getControlValue());
                                        String[] values = value.split(",");
                                        List<String> list = new ArrayList<>(Arrays.asList(values));
                                        if (dropDown != null) {
                                            dropDown.deleteItem(list);
                                        }
                                        break;
                                    case CONTROL_TYPE_RADIO_BUTTON:
                                        RadioButton radioButton = (RadioButton) map.get(removeControlItem.getControlName());
                                        break;
                                    case CONTROL_TYPE_CHECKBOX:
                                        CheckBox checkBox = (CheckBox) map.get(removeControlItem.getControlName());
                                        break;
                                    case CONTROL_TYPE_CHECK_LIST:
                                        CheckList checkList = (CheckList) map.get(removeControlItem.getControlName());
                                        break;
                                }
                            }

                        } else if (removeControlItem.getControlRowType().equalsIgnoreCase("currentRows")) {
                            LinkedHashMap<String, Object> map = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                            switch (removeControlItem.getControlType()) {
                                case CONTROL_TYPE_DROP_DOWN:
                                    DropDown dropDown = (DropDown) map.get(removeControlItem.getControlName());
                                    String value = expressionMainHelper.ExpressionHelper(this, removeControlItem.getControlValue());
                                    String[] values = value.split(",");
                                    List<String> list = new ArrayList<>();
                                    for (int k = 0; k < values.length; k++) {
                                        list.add(values[k]);

                                    }
                                    dropDown.deleteItem(list);
                                    break;
                            }
                        } else {
                            String value = expressionMainHelper.ExpressionHelper(this, removeControlItem.getControlRowValue());
                            String[] values = value.split(",");
                            List<Integer> list = new ArrayList<>();
                            for (int k = 0; k < values.length; k++) {
                                list.add(Integer.parseInt(values[k]));
                            }
                            for (int j = 0; j < subform_List_ControlClassObjects.size(); j++) {
                                LinkedHashMap<String, Object> map = subform_List_ControlClassObjects.get(j);
                                if (list.contains(j)) {
                                    switch (removeControlItem.getControlType()) {
                                        case CONTROL_TYPE_DROP_DOWN:
                                            DropDown dropDown = (DropDown) map.get(removeControlItem.getControlName());
                                            String value1 = expressionMainHelper.ExpressionHelper(this, removeControlItem.getControlValue());
                                            String[] values1 = value1.split(",");
                                            List<String> list1 = new ArrayList<>();
                                            for (int k = 0; k < values1.length; k++) {
                                                list1.add(values1[k]);

                                            }
                                            dropDown.deleteItem(list1);
                                            break;
                                    }
                                }
                            }
                        }


                    }

                } else {
                    if (removeRowAction.getSelectedRowType().equalsIgnoreCase("allRows")) {
                        if (removeRowAction.getRemoveOrHide().equalsIgnoreCase("Hide")) {
                            subformView.hideRows(true, new ArrayList<>());
                        } else {
                            subformView.removeRows(true, new ArrayList<>());
                        }

                    } else if (removeRowAction.getSelectedRowType().equalsIgnoreCase("currentRows")) {
                        if (removeRowAction.getRemoveOrHide().equalsIgnoreCase("Hide")) {
                            subformView.hideRowWithPosition(AppConstants.SF_Container_position);
                        } else {
                            subformView.removeRowWithPosition(AppConstants.SF_Container_position);
                        }
                    } else {

                        String value = expressionMainHelper.ExpressionHelper(this, removeRowAction.getRowPositionValue());
                        String[] values = value.split(",");
                        List<Integer> list = new ArrayList<>();
                        for (int i = 0; i < values.length; i++) {
                            list.add(Integer.parseInt(values[i]));

                        }
                        if (removeRowAction.getRemoveOrHide().equalsIgnoreCase("Hide")) {
                            subformView.hideRows(false, list);
                        } else {
                            subformView.removeRows(false, list);
                        }


                    }
                }
                break;
            case CONTROL_TYPE_GRID_CONTROL:
                GridControl gridControl = (GridControl) List_ControlClassObjects.get(removeRowAction.getMultiControlName());
                break;
        }
/*        int position =-1;
        String controlName = actionWithoutConditionBean.getControlName();
        String controlType = actionWithoutConditionBean.getControlType();
        if (actionWithoutConditionBean.isSubformControl()) {
            controlName = actionWithoutConditionBean.getParentControlName();
            controlType = actionWithoutConditionBean.getParentControlType();
        }
        switch (controlType) {
            case CONTROL_TYPE_SUBFORM:
                SubformView subformView = (SubformView) List_ControlClassObjects.get(controlName);
                position = Integer.parseInt(actionWithoutConditionBean.getRowId());
                if (actionWithoutConditionBean.isSubformControl()) {
                    String sControlName = actionWithoutConditionBean.getControlName();
                    String sControlType = actionWithoutConditionBean.getControlType();
                    switch (sControlType) {
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) subformView.subform_List_ControlClassObjects.get(position).get(sControlName);
                            dropDown.deleteItem(actionWithoutConditionBean.getDdId());
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView radioGroupView = (RadioGroupView) subformView.subform_List_ControlClassObjects.get(position).get(sControlName);
                            radioGroupView.deleteItem(actionWithoutConditionBean.getDdId());
                            break;
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList checkList = (CheckList) subformView.subform_List_ControlClassObjects.get(position).get(sControlName);
                            checkList.deleteItem(actionWithoutConditionBean.getCheckListIds());
                            break;
                    }
                } else {
                    subformView.removeRowWithPosition(position);
                }

                break;
            case CONTROL_TYPE_GRID_CONTROL:
                GridControl gridControl = (GridControl) List_ControlClassObjects.get(controlName);
                position = Integer.parseInt(actionWithoutConditionBean.getRowId());
                if (actionWithoutConditionBean.isSubformControl()) {
                    String sControlName = actionWithoutConditionBean.getControlName();
                    String sControlType = actionWithoutConditionBean.getControlType();
                    switch (sControlType) {
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) gridControl.gridControl_List_ControlClassObjects.get(position).get(sControlName);
                            dropDown.deleteItem(actionWithoutConditionBean.getDdId());
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView radioGroupView = (RadioGroupView) gridControl.gridControl_List_ControlClassObjects.get(position).get(sControlName);
                            radioGroupView.deleteItem(actionWithoutConditionBean.getDdId());
                            break;
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList checkList = (CheckList) gridControl.gridControl_List_ControlClassObjects.get(position).get(sControlName);
                            checkList.deleteItem(actionWithoutConditionBean.getCheckListIds());
                            break;
                    }
                } else {
                    gridControl.deleteTableRow(AppConstants.SF_Selected_View, AppConstants.SF_Selected_position);
                }

                break;
            case CONTROL_TYPE_DATA_VIEWER:
                DataViewer dataViewer = (DataViewer) List_ControlClassObjects.get(controlName);
                position = Integer.parseInt(actionWithoutConditionBean.getRowId());
                dataViewer.customAdapter.deleteRow(position);
                break;
        }*/


    }

    private void checkFinishOptions(ActionWithoutCondition_Bean actionWithoutConditionBean) {
        if (actionWithoutConditionBean.isCloseParentEnabled()) {
            finish();
        }
        if (actionWithoutConditionBean.isCloseAllFormsEnabled()) {
            finish();
            finishAffinity();
        }
    }

    private void manageCountDownTimer(ActionWithoutCondition_Bean ActionObj) {

        String typeofSource = ActionObj.getManageCountDownTimer_Type();
        //if (typeofSource.contentEquals("Control")) {
            String controlName = ActionObj.getManageCountDownTimer_Control_Selected();
            SetValuetoControl(controlName, ActionObj.getManageCountDownTimer_Option(), "", "");
        //}
        nextEvent();
    }

    private void manageCountUpTimer(ActionWithoutCondition_Bean ActionObj) {

        String typeofSource = ActionObj.getManageCountUpTimer_Type();
       // if (typeofSource.contentEquals("Control")) {
            String controlName = ActionObj.getManageCountUpTimer_Control_Selected();
            SetValuetoControl(controlName, ActionObj.getManageCountUpTimer_Option(), "", "");
        //}
        nextEvent();
    }

    private void downloadFile(ActionWithoutCondition_Bean actionObj) {
        List<EnabledControl_Bean> enabledControl_beanList = actionObj.getEnabledControl_beanList();
        EnabledControl_Bean enabledControl_bean = enabledControl_beanList.get(0);
        ExpressionMainHelper ehelper = new ExpressionMainHelper();
        String value = ehelper.ExpressionHelper(this, enabledControl_bean.getSelectedValue());
        if (value != null && !value.contentEquals("")) {
            ImproveHelper.startFileDownload(context, value);
         /*  FileDownloadFromURL fileDownloadFromURL = new FileDownloadFromURL(context, value, new FileDownloadFromURL.FileDownloadListener() {
                @Override
                public void onSuccess(File file) {

                    ImproveHelper.showToast(context, "File Downloaded to " + file.getAbsolutePath());
                }

                @Override
                public void onFailed(String errorMessage) {
                    Log.d(TAG, "onFailedFileDownloadFromURL: "+errorMessage);
                }
            });*/

//            ImproveHelper. startFileDownload(context,value);
        }
    }

    private void openWhatsApp(ActionWithoutCondition_Bean actionObj) {
        String mobileNumber = "", message = "";
        ExpressionMainHelper ehelper = new ExpressionMainHelper();
        List<EnabledControl_Bean> enabledControl_beanList = actionObj.getEnabledControl_beanList();
        for (int i = 0; i < enabledControl_beanList.size(); i++) {
            EnabledControl_Bean enabledControl_bean = enabledControl_beanList.get(i);
            if (enabledControl_bean.getControlName().contentEquals("Mobile Number")) {
                mobileNumber = enabledControl_bean.getControlName();
                mobileNumber = ehelper.ExpressionHelper(this, enabledControl_bean.getSelectedValue());
            } else if (enabledControl_bean.getControlName().contentEquals("Message")) {
                message = enabledControl_bean.getControlName();
                message = ehelper.ExpressionHelper(this, enabledControl_bean.getSelectedValue());
            }

        }
        if (mobileNumber != null && !mobileNumber.contentEquals("")) {
            if (mobileNumber.length() != 0) {
//                mobileNumber = "+91 "+mobileNumber;
                ImproveHelper.sendPhoneNumberAndMessageWithWhatsApp(context, mobileNumber, message);
            }

        }


    }

    private void openEmailClient(ActionWithoutCondition_Bean actionObj) {

        ExpressionMainHelper ehelper = new ExpressionMainHelper();
        List<EnabledControl_Bean> enabledControl_beanList = actionObj.getEnabledControl_beanList();
        String value = ehelper.ExpressionHelper(this, enabledControl_beanList.get(0).getSelectedValue());
        String[] values = new String[1];
        values[0] = value;
        if (value != null && !value.contentEquals("")) {
            ImproveHelper.sendEmail(context, values);
        }

    }

    private void openGoogleMaps(ActionWithoutCondition_Bean actionObj) {
        String sourceLatLng = "", destinationLatLng = "";
        double sourceLat = 0.0, destinationLat = 0.0;
        double sourceLng = 0.0, destinationLng = 0.0;
        ExpressionMainHelper ehelper = new ExpressionMainHelper();
        List<EnabledControl_Bean> enabledControl_beanList = actionObj.getEnabledControl_beanList();
        for (int i = 0; i < enabledControl_beanList.size(); i++) {
            EnabledControl_Bean enabledControl_bean = enabledControl_beanList.get(i);
            if (enabledControl_bean.getControlName().contentEquals("Source")) {
                sourceLatLng = ehelper.ExpressionHelper(this, enabledControl_bean.getSelectedValue());
            } else if (enabledControl_bean.getControlName().contentEquals("Destination")) {
                destinationLatLng = ehelper.ExpressionHelper(this, enabledControl_bean.getSelectedValue());
            }

        }

        if (!sourceLatLng.contentEquals("") && !destinationLatLng.contentEquals("")) {
            if (sourceLatLng.contains("$")) {
                sourceLat = Double.parseDouble(sourceLatLng.split("\\$")[0]);
                sourceLng = Double.parseDouble(sourceLatLng.split("\\$")[1]);
            }

            if (destinationLatLng.contains("$")) {
                destinationLat = Double.parseDouble(destinationLatLng.split("\\$")[0]);
                destinationLng = Double.parseDouble(destinationLatLng.split("\\$")[1]);
            }

            ImproveHelper.openGoogleMapsNavigationAToBPoints(context, sourceLat, sourceLng, destinationLat, destinationLng);

        }
    }

    private void setSelection(ActionWithoutCondition_Bean actionObj) {
        try {
            List<SetSelectionControl_Bean> setSelectionControl_beanList = actionObj.getSetSelectionControl_beans();
            if (setSelectionControl_beanList.size() > 0) {
                for (int i = 0; i < setSelectionControl_beanList.size(); i++) {
                    SetSelectionControl_Bean setSelectionControl_bean = setSelectionControl_beanList.get(i);
                    String controlName = setSelectionControl_bean.getControlName();
                    String typeOfControl = setSelectionControl_bean.getControlType();
                    String selectionId = setSelectionControl_bean.getSelectedId();
                    String parentControlName = "";
                    String controlType = "";
                    boolean expressionExists = setSelectionControl_bean.isExpressionExists();
                    if (expressionExists) {
                        ExpressionMainHelper expressionMainHelper = new ExpressionMainHelper();
                        selectionId = expressionMainHelper.ExpressionHelper(this, selectionId);
                    }
                    if (typeOfControl.contentEquals("Multi")) {
                        parentControlName = setSelectionControl_bean.getParentControlName();
                        controlType = ImproveHelper.getControlType(ImproveHelper.getSubControlsList(dataCollectionObject.getControls_list(), parentControlName), controlName);
                        SubformView subformView = (SubformView) List_ControlClassObjects.get(parentControlName);
                        for (int j = 0; j < selectionId.split(",").length; j++) {
                            LinkedHashMap<String, Object> ObjectsView = subformView.subform_List_ControlClassObjects.get(j);
                            switch (controlType) {
                                case CONTROL_TYPE_CHECKBOX:
                                    Checkbox checkboxView = (Checkbox) List_ControlClassObjects.get(controlName);
                                    if (checkboxView != null) {
                                        checkboxView.check(selectionId);
                                    }
                                    break;
                                case CONTROL_TYPE_RADIO_BUTTON:
                                    RadioGroupView radioGroupView = (RadioGroupView) ObjectsView.get(controlName);
                                    if (radioGroupView != null) {
                                        radioGroupView.check(selectionId.split(",")[j]);
                                    }
                                    break;
                                case CONTROL_TYPE_DROP_DOWN:
                                    DropDown dropDown = (DropDown) ObjectsView.get(controlName);
                                    if (dropDown != null) {
                                        dropDown.setItemId(selectionId.split(",")[j], "");
                                    }
                                    break;
                                case CONTROL_TYPE_DATA_CONTROL:
                                    DataControl dataControl = (DataControl) ObjectsView.get(controlName);
                                    if (dataControl != null) {
                                        dataControl.setItemId(selectionId.split(",")[j]);
                                    }
                                    break;
                                case CONTROL_TYPE_CHECK_LIST:
                                    CheckList checkList = (CheckList) ObjectsView.get(controlName);
                                    if(checkList!=null){
                                        String [] ids = selectionId.split("\\^");
                                        checkList.check(ids);
                                    }
                                    break;
                            }
                        }


                    } else {
                        controlType = ImproveHelper.getControlType(dataCollectionObject.getControls_list(), controlName);
                        if (selectionId.contains(",") &&
                                (controlType.contains(CONTROL_TYPE_RADIO_BUTTON) || controlType.contains(CONTROL_TYPE_DROP_DOWN))) {
                            selectionId = selectionId.split(",")[0];
                        }
                        switch (controlType) {
                            case CONTROL_TYPE_CHECKBOX:
                                Checkbox checkboxView = (Checkbox) List_ControlClassObjects.get(controlName);
                                if (checkboxView != null) {
                                    checkboxView.check(selectionId);
                                }
                                break;
                            case CONTROL_TYPE_RADIO_BUTTON:
                                RadioGroupView radioGroupView = (RadioGroupView) List_ControlClassObjects.get(controlName);
                                if (radioGroupView != null) {
                                    radioGroupView.check(selectionId);
                                }
                                break;
                            case CONTROL_TYPE_DROP_DOWN:
                                DropDown dropDown = (DropDown) List_ControlClassObjects.get(controlName);
                                if (dropDown != null) {
                                    dropDown.setItemId(selectionId, "");
                                }
                                break;
                            case CONTROL_TYPE_DATA_CONTROL:
                                DataControl dataControl = (DataControl) List_ControlClassObjects.get(controlName);
                                dataControl.getControlObject().setDefaultValue(selectionId);
                                if (dataControl != null) {
                                    dataControl.setItemId(selectionId);
                                }
                                break;
                            case CONTROL_TYPE_DATA_VIEWER:
                                DataViewer dataViewer = (DataViewer) List_ControlClassObjects.get(controlName);
                                if (dataViewer != null) {
                                    dataViewer.setSelection(selectionId);
                                }
                            case CONTROL_TYPE_CHECK_LIST:
                                CheckList checkList = (CheckList) List_ControlClassObjects.get(controlName);
                                if(checkList!=null){
                                    String [] ids = selectionId.split(",");
                                    checkList.check(ids);
                                }
                                break;

                        }
                    }


                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setSelection", e);
        }
    }

    public void SetDisable(List<String> Disable_ControlNames) {
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (Disable_ControlNames.contains(temp_controlObj.getControlName()) && !improveHelper.alwaysEnable(temp_controlObj.getControlType())) {
                    if (Disable_ControlNames.contains(temp_controlObj.getControlName())) {
                        setEnable(false, temp_controlObj, List_ControlClassObjects);
                    } else {
                        setEnable(true, temp_controlObj, List_ControlClassObjects);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetDisable", e);
        }
    }

    public void SetDisableCopy(List<String> Disable_ControlNames) {
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM) ||
                        temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                    for (int j = 0; j < temp_controlObj.getSubFormControlList().size(); j++) {
                        ControlObject sub_controlObj = temp_controlObj.getSubFormControlList().get(i);
                        if (Disable_ControlNames.contains(sub_controlObj.getControlName()) && improveHelper.alwaysEnable(sub_controlObj.getControlType())) {
                            if (Disable_ControlNames.contains(sub_controlObj.getControlName())) {
                                setEnable(false, sub_controlObj, List_ControlClassObjects);
                            } else {
                                setEnable(true, sub_controlObj, List_ControlClassObjects);
                            }
                        }
                    }
                }
                if (Disable_ControlNames.contains(temp_controlObj.getControlName()) && improveHelper.alwaysEnable(temp_controlObj.getControlType())) {
                    if (Disable_ControlNames.contains(temp_controlObj.getControlName())) {
                        setEnable(false, temp_controlObj, List_ControlClassObjects);
                    } else {
                        setEnable(true, temp_controlObj, List_ControlClassObjects);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetDisable", e);
        }
    }

    public void SetDisable_Old(List<String> Disable_ControlNames) {
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(dataCollectionObject.getApp_Name());
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (Disable_ControlNames.contains(temp_controlObj.getControlName()) && improveHelper.alwaysEnable(temp_controlObj.getControlType())) {
                    if (dataCollectionObject.isUIFormNeeded) {//If form has custom UI
                        String controlPos = controlPositionInUI.get(temp_controlObj.getControlName());
                        if (controlPos.contains("$")) {//If control is in sublayout
                            Log.d(TAG, "controlPos: " + controlPos + temp_controlObj.getControlName());
                            String[] positions = controlPos.split("\\$");
                            int layoutPosition = Integer.parseInt(positions[0]);
                            int sublayoutPosition = Integer.parseInt(positions[1]);
                            View viewE = ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) linearLayout.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).getChildAt(0);
                            setViewDisable(viewE, false);
                            Log.d(TAG, "SetDisableCheck: " + "1");
                        } else {//If control is in layout
                            View viewE = ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos))).getChildAt(2);
                            setViewDisable(viewE, false);
                            Log.d(TAG, "SetDisableCheck: " + "2");
                        }
                    } else {
//                        setViewDisable(linearLayout.getChildAt(i), false);
                        setViewDisableOrEnableDefault(context, linearLayout.getChildAt(i), false);
                        Log.d(TAG, "SetDisableCheck: " + "3");
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetDisable", e);
        }
    }

    public void setDisableSubControls(List<SubControls_Advance_Bean> Disable_SubControls_Advance,boolean enable){
        List<ControlObject> controlObjectList = dataCollectionObject.getControls_list();
        for (int i = 0; i <Disable_SubControls_Advance.size() ; i++) {
            SubControls_Advance_Bean subControls_advance_bean = Disable_SubControls_Advance.get(i);
            for (int j = 0; j <controlObjectList.size() ; j++) {
                ControlObject controlObject = controlObjectList.get(j);
                if(subControls_advance_bean.getSubformControlName().contentEquals(controlObject.getControlName())){
                    String mainControlName  = controlObject.getControlName();
                    List<ControlObject> subControlObjectList = controlObject.getSubFormControlList();
                   if(controlObject.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                        SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(mainControlName);
                       LinkedHashMap<String, Object> subform_List_ControlClassObjects = null;
                       if (sectionControl != null) {
                           subform_List_ControlClassObjects = sectionControl.New_list_ControlClassObjects;
                       }
                       for (int k = 0; k <subControlObjectList.size() ; k++) {
                            ControlObject subControlObject = subControlObjectList.get(k);
                            if(subControls_advance_bean.getControlName().contentEquals(subControlObject.getControlName())){
                                setEnable(enable, subControlObject, subform_List_ControlClassObjects);
                            }
                        }

                    }else{
                        List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = new ArrayList<>();
                        if(controlObject.getControlType().contentEquals(CONTROL_TYPE_SUBFORM)) {
                            SubformView subformView = (SubformView) List_ControlClassObjects.get(mainControlName);
                            if (subformView != null) {
                                subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                            }
                        }else if(controlObject.getControlType().contentEquals(CONTROL_TYPE_GRID_CONTROL)) {
                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(mainControlName);
                            if (gridControl != null) {
                                subform_List_ControlClassObjects = gridControl.gridControl_List_ControlClassObjects;
                            }
                        }

                        if(subControls_advance_bean.getValueType().equalsIgnoreCase("allrows")){
                            String controlName = subControls_advance_bean.getControlName();
                            controlName = controlName.substring(0,controlName.lastIndexOf("_"));
                            for (int k = 0; k <subform_List_ControlClassObjects.size() ; k++) {
                                LinkedHashMap<String, Object> map = subform_List_ControlClassObjects.get(k);
                                setEnable(enable, ImproveHelper.getControlObject(subControlObjectList,controlName), map);
                            }
                        }else if(subControls_advance_bean.getValueType().equalsIgnoreCase("advance")){
                            String controlName = subControls_advance_bean.getControlName();
                            controlName = controlName.substring(0,controlName.lastIndexOf("_"));
                            String positions = new ExpressionMainHelper().ExpressionHelper(context,subControls_advance_bean.getValueExpression());
                            List<String> positionsList = Arrays.asList(positions.split(","));
                            for (int k = 0; k <subform_List_ControlClassObjects.size() ; k++) {
                                LinkedHashMap<String, Object> map = subform_List_ControlClassObjects.get(k);
                                if(positionsList.contains(String.valueOf(k))) {
                                    setEnable(enable, ImproveHelper.getControlObject(subControlObjectList, controlName), map);
                                }
                            }
                        }else if(subControls_advance_bean.getValueType().equalsIgnoreCase("currentrow")){
                            String controlName = subControls_advance_bean.getControlName();
                            controlName = controlName.substring(0,controlName.lastIndexOf("_"));
                            LinkedHashMap<String, Object> map = subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                            setEnable(enable, ImproveHelper.getControlObject(subControlObjectList,controlName), map);
                        }
                    }

                }

            }

        }

    }
    public void SetSubformDisable(List<SubControls_Advance_Bean> Disable_SubControls_Advance) {
        try {
            for (int i = 0; i < Disable_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Disable_SubControls_Advance.get(i);
                String SubControlName = SubControls_Advance.getControlName();
                String subFormControlName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {

                        String[] postions = Expvalue.split("\\,");


                        String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subControlName.startsWith(temp_controlObj.getControlName())) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    if (ll_MainSubFormContainer == null) {
                                        ll_MainSubFormContainer = view.findViewById(R.id.ll_grid_view);
                                    }
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                                    setViewDisable(ll_innerSubFormContainer.getChildAt(y), false);
                                                    Log.d(TAG, "SetSubformDisableCheck: " + "1");
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_grid_view.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_grid_view.getChildAt((int) Double.parseDouble(postions[z]));
                                                    setViewDisable(((LinearLayout) innerView).getChildAt(y), false);
                                                    Log.d(TAG, "SetSubformDisableCheck: " + "2");
//                                                    innerView.setBackgroundColor(context.getColor(R.color.LightGrey));
//                                                    if(list_SubControl.get(y).getControlType().equalsIgnoreCase(CONTROL_TYPE_DROP_DOWN)){
//                                                        DropDown dropDown = new DropDown(context, list_SubControl.get(y), false, 0, "");
//                                                        dropDown.getLl_transparent().setVisibility(View.VISIBLE);
//                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subControlName.startsWith(temp_controlObj.getControlName())) {
                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                            //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                            View view = SubformView.getSubFormView();
                            if (!SubformView.isGrid) {
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            setViewDisable(ll_innerSubFormContainer.getChildAt(y), false);
                                            Log.d(TAG, "SetSubformDisableCheck: " + "3");
                                        }
                                    }
                                }
                            } else {
                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_grid_view.getChildCount(); z++) {
                                            View innerView = ll_grid_view.getChildAt(z);
                                            setViewDisable(((LinearLayout) innerView).getChildAt(y), false);
                                            Log.d(TAG, "SetSubformDisableCheck: " + "4");
                                        }
                                    }
                                }
                            }

                        }
                    }

                } else {
//                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subFormControlName.contentEquals(temp_controlObj.getControlName())) {
                            if (!temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {

                                            View innerView = ll_MainSubFormContainer.getChildAt(AppConstants.SF_Container_position);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            setViewDisable(ll_innerSubFormContainer.getChildAt(y), false);
                                            Log.d(TAG, "SetSubformDisableCheck: " + "5");
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {
                                            View innerView = ll_grid_view.getChildAt(AppConstants.SF_Container_position);
                                            setViewDisable(((LinearLayout) innerView).getChildAt(y), false);
                                            Log.d(TAG, "SetSubformDisableCheck: " + "6");
                                        }
                                    }
                                }
                            } else {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subFormControlName);
                                List<ControlObject> list_sectionControl = sectionControl.controlObject.getSubFormControlList();
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (SubControlName.contentEquals((String) view.getTag())) {
                                        setViewDisable(view, false);

                                    }

                                }

                            }

                        }
                    }
                }


            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformDisable", e);
        }
    }

    public void SetEnable(List<String> Enable_ControlNames) {
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (Enable_ControlNames.contains(temp_controlObj.getControlName())) {
                    setEnable(true, temp_controlObj, List_ControlClassObjects);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetEnable", e);
        }
    }

    public void SetEnable_Old(List<String> Enable_ControlNames) {
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(dataCollectionObject.getApp_Name());
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (Enable_ControlNames.contains(temp_controlObj.getControlName())) {
                    if (dataCollectionObject.isUIFormNeeded) {//If form has custom UI
                        String controlPos = controlPositionInUI.get(temp_controlObj.getControlName());
                        if (controlPos.contains("$")) {//If control is in sublayout
                            Log.d(TAG, "controlPos: " + controlPos + temp_controlObj.getControlName());
                            String[] positions = controlPos.split("\\$");
                            int layoutPosition = Integer.parseInt(positions[0]);
                            int sublayoutPosition = Integer.parseInt(positions[1]);
                            View viewE = ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) linearLayout.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).getChildAt(0);
                            setViewDisable(viewE, true);
                        } else {//If control is in layout
                            View viewE = ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos))).getChildAt(2);
                            setViewDisable(viewE, true);
                        }
                    } else {
//                        setViewDisable(linearLayout.getChildAt(i), true);
                        setViewDisableOrEnableDefault(context, linearLayout.getChildAt(i), true);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetEnable", e);
        }
    }

    public void SetSubformEnable(List<SubControls_Advance_Bean> Enable_SubControls_Advance) {
        try {
            for (int i = 0; i < Enable_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Enable_SubControls_Advance.get(i);
                String SubControlName = SubControls_Advance.getControlName();
                String subFormControlName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {

                        String[] postions = Expvalue.split("\\,");


                        String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subControlName.startsWith(temp_controlObj.getControlName())) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    setViewDisable(ll_innerSubFormContainer.getChildAt(y), true);
                                                    setViewDisableOrEnableDefault(context, ll_innerSubFormContainer.getChildAt(y), true);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_grid_view.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_grid_view.getChildAt((int) Double.parseDouble(postions[z]));
//                                                    setViewDisable(((LinearLayout) innerView).getChildAt(y), true);
                                                    setViewDisableOrEnableDefault(context, ((LinearLayout) innerView).getChildAt(y), true);
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }

                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subControlName.startsWith(temp_controlObj.getControlName())) {
                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                            //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                            View view = SubformView.getSubFormView();
                            if (!SubformView.isGrid) {
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                            setViewDisable(ll_innerSubFormContainer.getChildAt(y), true);
                                            setViewDisableOrEnableDefault(context, ll_innerSubFormContainer.getChildAt(y), true);
                                        }
                                    }
                                }
                            } else {
                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_grid_view.getChildCount(); z++) {
                                            View innerView = ll_grid_view.getChildAt(z);
//                                            setViewDisable(((LinearLayout) innerView).getChildAt(y), true);
                                            setViewDisableOrEnableDefault(context, ((LinearLayout) innerView).getChildAt(y), true);
                                        }
                                    }
                                }
                            }

                        }
                    }

                } else {

//                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subFormControlName.contentEquals(temp_controlObj.getControlName())) {
                            if (!temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {

                                            View innerView = ll_MainSubFormContainer.getChildAt(AppConstants.SF_Container_position);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                            setViewDisable(ll_innerSubFormContainer.getChildAt(y), true);
                                            setViewDisableOrEnableDefault(context, ll_innerSubFormContainer.getChildAt(y), true);
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {

                                            View innerView = ll_grid_view.getChildAt(AppConstants.SF_Container_position);
//                                            setViewDisable(((LinearLayout) innerView).getChildAt(y), true);
                                            setViewDisableOrEnableDefault(context, ((LinearLayout) innerView).getChildAt(y), true);
                                        }
                                    }
                                }
                            } else {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subFormControlName);
                                List<ControlObject> list_sectionControl = sectionControl.controlObject.getSubFormControlList();
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (SubControlName.contentEquals((String) view.getTag())) {
//                                        setViewDisable(view, true);
                                        setViewDisableOrEnableDefault(context, view, true);
                                    }

                                }

                            }

                        }
                    }

                }

            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformEnable", e);
        }
    }

    public void SetSubformEnableCopy(List<SubControls_Advance_Bean> Enable_SubControls_Advance) {
        try {
            for (int i = 0; i < Enable_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Enable_SubControls_Advance.get(i);
                String SubControlName = SubControls_Advance.getControlName();
                String subFormControlName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {

                        String[] postions = Expvalue.split("\\,");


                        String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subControlName.startsWith(temp_controlObj.getControlName())) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                                    setViewDisable(ll_innerSubFormContainer.getChildAt(y), true);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_grid_view.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_grid_view.getChildAt((int) Double.parseDouble(postions[z]));
                                                    setViewDisable(((LinearLayout) innerView).getChildAt(y), true);
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }

                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subControlName.startsWith(temp_controlObj.getControlName())) {
                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                            //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                            View view = SubformView.getSubFormView();
                            if (!SubformView.isGrid) {
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            setViewDisable(ll_innerSubFormContainer.getChildAt(y), true);
                                        }
                                    }
                                }
                            } else {
                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_grid_view.getChildCount(); z++) {
                                            View innerView = ll_grid_view.getChildAt(z);
                                            setViewDisable(((LinearLayout) innerView).getChildAt(y), true);
                                        }
                                    }
                                }
                            }

                        }
                    }

                } else {

//                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subFormControlName.contentEquals(temp_controlObj.getControlName())) {
                            if (!temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {

                                            View innerView = ll_MainSubFormContainer.getChildAt(AppConstants.SF_Container_position);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            setViewDisable(ll_innerSubFormContainer.getChildAt(y), true);

                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {

                                            View innerView = ll_grid_view.getChildAt(AppConstants.SF_Container_position);
                                            setViewDisable(((LinearLayout) innerView).getChildAt(y), true);
                                        }
                                    }
                                }
                            } else {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subFormControlName);
                                List<ControlObject> list_sectionControl = sectionControl.controlObject.getSubFormControlList();
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (SubControlName.contentEquals((String) view.getTag())) {
                                        setViewDisable(view, true);

                                    }

                                }

                            }

                        }
                    }

                }

            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformEnable", e);
        }
    }

    public void SetVisibleOn(List<String> VisibleOn_ControlNames) {
        Log.d(TAG, "SetVisibleOn: " + VisibleOn_ControlNames);
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_SECTION) && temp_controlObj.isMakeItAsPopup()) {
                    List<ControlObject> sectionControlObjectList = temp_controlObj.getSubFormControlList();
                    for (int j = 0; j < sectionControlObjectList.size(); j++) {
                        ControlObject section_controlObj = sectionControlObjectList.get(j);
                        if (VisibleOn_ControlNames.contains(section_controlObj.getControlName())) {
                            ImproveHelper.setVisible(true, section_controlObj, List_ControlClassObjects);
                        }
                    }
                } else {
                    if (VisibleOn_ControlNames.contains(temp_controlObj.getControlName())) {
                        ImproveHelper.setVisible(true, temp_controlObj, List_ControlClassObjects);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetVisibleOn", e);
        }
    }

    public void SetVisibleOn_Old(List<String> VisibleOn_ControlNames) {
        Log.d(TAG, "SetVisibleOn: " + VisibleOn_ControlNames);
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(dataCollectionObject.getApp_Name());
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (VisibleOn_ControlNames.contains(temp_controlObj.getControlName())) {
                    if (dataCollectionObject.isUIFormNeeded) {//If form has custom UI
                        String controlPos = controlPositionInUI.get(temp_controlObj.getControlName());
                        if (controlPos.contains("$")) {//If control is in sublayout
                            Log.d(TAG, "ovcontrolPos: " + controlPos + temp_controlObj.getControlName());
                            String[] positions = controlPos.split("\\$");
                            int layoutPosition = Integer.parseInt(positions[0]);
                            int sublayoutPosition = Integer.parseInt(positions[1]);
                            LinearLayout linearLayoutP = ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) linearLayout.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition));
                            linearLayoutP.setVisibility(View.VISIBLE);
                            linearLayoutP.getChildAt(0).setVisibility(View.VISIBLE);
//                            ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) ((LinearLayout) linearLayout.getChildAt(layoutPosition))).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).setVisibility(View.VISIBLE);
//                            ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) ((LinearLayout) linearLayout.getChildAt(layoutPosition))).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).getChildAt(0).setVisibility(View.VISIBLE);
//                            break;
                        } else {//If control is in layout
                            LinearLayout linearLayoutP = ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos)));
                            linearLayoutP.setVisibility(View.VISIBLE);
                            linearLayoutP.getChildAt(2).setVisibility(View.VISIBLE);
//                            ((LinearLayout) ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos)))).setVisibility(View.VISIBLE);
//                            ((LinearLayout) ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos)))).getChildAt(2).setVisibility(View.VISIBLE);
                        }
                    } else {
                        /*if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                            ((LinearLayout) List_ControlClassObjects.get(temp_controlObj.getControlName())).setVisibility(View.VISIBLE);
                        }*/
                        linearLayout.getChildAt(i).setVisibility(View.VISIBLE);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetVisibleOn", e);
        }
    }

    public void SetSubformVisibleOnCopy2(List<SubControls_Advance_Bean> VisibleOn_SubControls_Advance) {
        try {
            for (int i = 0; i < VisibleOn_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = VisibleOn_SubControls_Advance.get(i);
                String SubControlName = SubControls_Advance.getControlName();
                String subFormControlName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
//                            if (subControlName.startsWith(temp_controlObj.getControlName()) ) {
                            if (subControlName.startsWith(temp_controlObj.getControlName()) && temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {

                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_grid_view.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_grid_view.getChildAt((int) Double.parseDouble(postions[z]));
                                                    ((LinearLayout) innerView).getChildAt(y).setVisibility(View.VISIBLE);
                                                }
                                            }
                                        }
                                    }

                                }

                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subControlName.startsWith(temp_controlObj.getControlName())) {
                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                            //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                            View view = SubformView.getSubFormView();

                            if (!SubformView.isGrid) {
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                            ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                            }
                                        }
                                    }
                                }
                            } else {

                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_grid_view.getChildCount(); z++) {
                                            View innerView = ll_grid_view.getChildAt(z);
                                            ((LinearLayout) innerView).getChildAt(y).setVisibility(View.VISIBLE);
                                        }
                                    }
                                }

                            }
                        }
                    }

                } else {
//                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subFormControlName.startsWith(temp_controlObj.getControlName())) {
                            if (!temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
//                                        if (SubControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(AppConstants.SF_Container_position);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                            }
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {
                                            View innerView = ll_grid_view.getChildAt(AppConstants.SF_Container_position);
                                            ((LinearLayout) innerView).getChildAt(y).setVisibility(View.VISIBLE);
                                        }
                                    }

                                }
                            } else {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subFormControlName);
                                List<ControlObject> list_sectionControl = sectionControl.controlObject.getSubFormControlList();
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (SubControlName.contentEquals((String) view.getTag())) {
                                        view.setVisibility(View.VISIBLE);

                                    }

                                }

                            }

                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOn", e);
        }
    }

    public void SetVisibleOff(List<String> Visibleoff_ControlNames) {
        Log.d(TAG, "SetVisibleOff: " + Visibleoff_ControlNames);
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_SECTION)
                        && temp_controlObj.isMakeItAsPopup()) {
                    List<ControlObject> sectionControlObjectList = temp_controlObj.getSubFormControlList();
                    for (int j = 0; j < sectionControlObjectList.size(); j++) {
                        ControlObject section_controlObj = sectionControlObjectList.get(j);
                        if (Visibleoff_ControlNames.contains(section_controlObj.getControlName())) {
                            ImproveHelper.setVisible(false, section_controlObj, List_ControlClassObjects);
                        }
                    }
                } else {
                    if (Visibleoff_ControlNames.contains(temp_controlObj.getControlName())) {
                        Log.d(TAG, "SetVisibleOff_: " + temp_controlObj.getControlName());
                        ImproveHelper.setVisible(false, temp_controlObj, List_ControlClassObjects);
                    }
                }
            }
        } catch (Exception e) {
            Log.d(TAG, "SetVisibleOff: " + e.getStackTrace());

            ImproveHelper.improveException(this, TAG, "SetVisibleOff", e);
        }
    }


    public void SetSubformVisibleOnCopy(List<SubControls_Advance_Bean> VisibleOn_SubControls_Advance) {
        try {
            for (int i = 0; i < VisibleOn_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = VisibleOn_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        AllControls:
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                    View view = SubformView.getSubFormView();
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                                    }
                                                }
                                            }
                                        }

                                    }
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.setVisibleOn(controlName, postions, true);

                                }

                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if (subformName.equals(temp_controlObjSec.getControlName())) {
                                        if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                            View view = SubformView.getSubFormView();
                                            LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                            for (int y = 0; y < list_SubControl.size(); y++) {
                                                if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                                    for (int z = 0; z < postions.length; z++) {
                                                        if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                            View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                            if (AppConstants.subformWithUI.contains(temp_controlObjSec.getControlName())) {
                                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                                ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                                            } else {
                                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                                            }
                                                        }
                                                    }
                                                    break AllControls;
                                                }

                                            }
                                        } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.setVisibleOn(controlName, postions, true);

                                        }
                                    }

                                }
                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                View view = SubformView.getSubFormView();
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                            }
                                        }
                                    }
                                }
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOn(controlName, null, false);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);

                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                        View view = SubformView.getSubFormView();
                                        LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                        for (int y = 0; y < list_SubControl.size(); y++) {
                                            if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                                for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt(z);
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObjSec.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.VISIBLE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.VISIBLE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.VISIBLE);
                                                    }
                                                }
                                                break AllControls;
                                            }
                                        }
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOn(controlName, null, false);
                                    }
                                }

                            }
                        }
                    }

                } else {
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.contentEquals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                LinearLayout linearLayout = ll_sectionContainer;
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (controlName.contentEquals((String) view.getTag())) {
                                        view.setVisibility(View.VISIBLE);
                                        break AllControls;
                                    }
                                }
                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subformName);
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (controlName.contentEquals((String) view.getTag())) {
                                        view.setVisibility(View.VISIBLE);
                                        break AllControls;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }

    public void SetSubformVisibleOn(List<SubControls_Advance_Bean> VisibleOn_SubControls_Advance) {
        try {
            for (int i = 0; i < VisibleOn_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = VisibleOn_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();
                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        AllControls:
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    SubformView.setVisibleOn(controlName, postions, true);
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.setVisibleOn(controlName, postions, true);
                                }
                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if (subformName.equals(temp_controlObjSec.getControlName())) {
                                        if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            SubformView.setVisibleOn(controlName, postions, true);
                                        } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.setVisibleOn(controlName, postions, true);

                                        }
                                    }

                                }
                            }
                        }
                    }

                }
                else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.setVisibleOn(controlName, null, false);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOn(controlName, null, false);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.setVisibleOn(controlName, null, false);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOn(controlName, null, false);
                                    }
                                }
                            }
                        }
                    }
                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("CurrentRow")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String[] positions = new String[1];
                    positions[0] = String.valueOf(AppConstants.SF_Container_position);
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.setVisibleOn(controlName, positions, true);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOn(controlName, positions, true);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.setVisibleOn(controlName, positions, true);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOn(controlName, positions, true);

                                    }
                                }
                            }
                        }
                    }
                } else {
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.contentEquals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                List<ControlObject> sectionControlObjectList = temp_controlObj.getSubFormControlList();
                                for (int j = 0; j < sectionControlObjectList.size(); j++) {
                                    ControlObject section_controlObj = sectionControlObjectList.get(j);
                                    if (controlName.equalsIgnoreCase(section_controlObj.getControlName())) {
                                        ImproveHelper.setVisible(true, section_controlObj, List_ControlClassObjects);
                                        break AllControls;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }

    public void SetSubformVisibleOff(List<SubControls_Advance_Bean> Visibleoff_SubControls_Advance) {
        try {
            for (int i = 0; i < Visibleoff_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Visibleoff_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();
                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    SubformView.setVisibleOff(controlName, postions, true);
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.setVisibleOff(controlName, postions, true);
                                }
                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if (subformName.equals(temp_controlObjSec.getControlName())) {
                                        if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            SubformView.setVisibleOff(controlName, postions, true);
                                        } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.setVisibleOff(controlName, postions, true);

                                        }
                                    }

                                }
                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.setVisibleOff(controlName, null, false);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOff(controlName, null, false);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.setVisibleOff(controlName, null, false);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOff(controlName, null, false);
                                    }
                                }
                            }
                        }
                    }
                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("CurrentRow")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String[] positions = new String[1];
                    positions[0] = String.valueOf(AppConstants.SF_Container_position);
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.setVisibleOff(controlName, positions, true);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOff(controlName, positions, true);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.setVisibleOff(controlName, positions, true);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOff(controlName, positions, true);

                                    }
                                }

                            }
                        }
                    }


                } else {
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.contentEquals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                List<ControlObject> sectionControlObjectList = temp_controlObj.getSubFormControlList();
                                for (int j = 0; j < sectionControlObjectList.size(); j++) {
                                    ControlObject section_controlObj = sectionControlObjectList.get(j);
                                    if (controlName.equalsIgnoreCase(section_controlObj.getControlName())) {
                                        ImproveHelper.setVisible(false, section_controlObj, List_ControlClassObjects);
                                        break AllControls;
                                    }
                                }
                            } else {

                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }

    public void SetSubformVisibleOffCopy(List<SubControls_Advance_Bean> Visibleoff_SubControls_Advance) {
        try {
            for (int i = 0; i < Visibleoff_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Visibleoff_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();
                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        AllControls:
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    SubformView.setVisibleOff(controlName, postions, true);
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.setVisibleOff(controlName, postions, true);
                                }
                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if (subformName.equals(temp_controlObjSec.getControlName())) {
                                        if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            SubformView.setVisibleOff(controlName, postions, true);
                                        } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.setVisibleOff(controlName, postions, true);

                                        }
                                    }

                                }
                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.setVisibleOff(controlName, null, false);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOff(controlName, null, false);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.setVisibleOff(controlName, null, false);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOff(controlName, null, false);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.contentEquals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                List<ControlObject> sectionControlObjectList = temp_controlObj.getSubFormControlList();
                                for (int j = 0; j < sectionControlObjectList.size(); j++) {
                                    ControlObject section_controlObj = sectionControlObjectList.get(j);
                                    if (controlName.equalsIgnoreCase(section_controlObj.getControlName())) {
                                        ImproveHelper.setVisible(false, section_controlObj, List_ControlClassObjects);
                                        break AllControls;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }

    public void SetSubformVisibleOffCopy3(List<SubControls_Advance_Bean> Visibleoff_SubControls_Advance) {
        try {
            for (int i = 0; i < Visibleoff_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Visibleoff_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();
                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        AllControls:
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                    View view = SubformView.getSubFormView();
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.GONE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    }
                                                }
                                            }
                                            break AllControls;
                                        }

                                    }
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.setVisibleOff(controlName, postions, true);

                                }

                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if (subformName.equals(temp_controlObjSec.getControlName())) {
                                        if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                            View view = SubformView.getSubFormView();
                                            LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                            for (int y = 0; y < list_SubControl.size(); y++) {
                                                if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                                    for (int z = 0; z < postions.length; z++) {
                                                        if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                            View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                            if (AppConstants.subformWithUI.contains(temp_controlObjSec.getControlName())) {
                                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                                ll_innerSubFormContainer.setVisibility(View.GONE);
                                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                                            } else {
                                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                            }
                                                        }
                                                    }
                                                    break AllControls;
                                                }

                                            }
                                        } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.setVisibleOff(controlName, postions, true);

                                        }
                                    }

                                }
                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                View view = SubformView.getSubFormView();
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.GONE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                            }
                                        }
                                        break AllControls;
                                    }
                                }
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOff(controlName, null, false);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);

                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                        View view = SubformView.getSubFormView();
                                        LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                        for (int y = 0; y < list_SubControl.size(); y++) {
                                            if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                                for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt(z);
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObjSec.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.GONE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    }
                                                }
                                                break AllControls;
                                            }
                                        }
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.setVisibleOff(controlName, null, false);
                                    }
                                }

                            }
                        }
                    }
                } else {
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.contentEquals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                LinearLayout linearLayout = ll_sectionContainer;
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (controlName.contentEquals((String) view.getTag())) {
                                        view.setVisibility(View.GONE);
                                        break AllControls;
                                    }
                                }
                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subformName);
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (controlName.contentEquals((String) view.getTag())) {
                                        view.setVisibility(View.GONE);
                                        break AllControls;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }

    public void SetSubformVisibleOffCopy2(List<SubControls_Advance_Bean> Visibleoff_SubControls_Advance) {
        try {
            for (int i = 0; i < Visibleoff_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Visibleoff_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();
                controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");

                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                    View view = SubformView.getSubFormView();


                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);


                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.GONE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    }
                                                }
                                            }
                                        }

                                    }
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.setVisibleOff(controlName, postions, true);

                                }

                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                View view = SubformView.getSubFormView();
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (controlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.GONE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                            }
                                        }
                                    }
                                }
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.setVisibleOff(controlName, null, false);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }

    public void SetSubformVisibleOffCopy1(List<SubControls_Advance_Bean> Visibleoff_SubControls_Advance) {
        try {
            for (int i = 0; i < Visibleoff_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Visibleoff_SubControls_Advance.get(i);
                String SubControlName = SubControls_Advance.getControlName();
                String subformControlName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subControlName.startsWith(temp_controlObj.getControlName())) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();

                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);


                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                                    ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                        ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                        ll_innerSubFormContainer.setVisibility(View.GONE);
                                                        ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                                    } else {
                                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {

                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_grid_view.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_grid_view.getChildAt((int) Double.parseDouble(postions[z]));
                                                    ((LinearLayout) innerView).getChildAt(y).setVisibility(View.GONE);
                                                }
                                            }
                                        }
                                    }

                                }

                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subControlName.startsWith(temp_controlObj.getControlName())) {

                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                            //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                            View view = SubformView.getSubFormView();
                            if (!SubformView.isGrid) {
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                            ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.GONE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                            }
                                        }
                                    }
                                }
                            } else {

                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_grid_view.getChildCount(); z++) {
                                            View innerView = ll_grid_view.getChildAt(z);
                                            ((LinearLayout) innerView).getChildAt(y).setVisibility(View.GONE);
                                        }
                                    }
                                }

                            }

                        }
                    }

                } else {
//                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformControlName.contentEquals(temp_controlObj.getControlName())) {
                            if (!temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());

                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd

                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
//                                        if (SubControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(AppConstants.SF_Container_position);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);
//                                        ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                            if (AppConstants.subformWithUI.contains(temp_controlObj.getControlName())) {
                                                ll_innerSubFormContainer = getInnerSubFormContainer(ll_innerSubFormContainer, list_SubControl.get(y).getControlName());
                                                ll_innerSubFormContainer.setVisibility(View.GONE);
                                                ll_innerSubFormContainer.getChildAt(0).setVisibility(View.GONE);
                                            } else {
                                                ll_innerSubFormContainer.getChildAt(y).setVisibility(View.GONE);
                                            }
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            View innerView = ll_grid_view.getChildAt(AppConstants.SF_Container_position);
                                            ((LinearLayout) innerView).getChildAt(y).setVisibility(View.GONE);
                                        }
                                    }

                                }
                            } else {
                                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(subformControlName);
                                List<ControlObject> list_sectionControl = sectionControl.controlObject.getSubFormControlList();
                                LinearLayout linearLayout = sectionControl.getLl_sectionContainer();
                                for (int j = 0; j < linearLayout.getChildCount(); j++) {
                                    LinearLayout view = (LinearLayout) linearLayout.getChildAt(j);
                                    if (SubControlName.contentEquals((String) view.getTag())) {
                                        view.setVisibility(View.GONE);
                                    }

                                }

                            }

                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformVisibleOff", e);
        }
    }


    public void SetSubformClear(List<SubControls_Advance_Bean> Clear_SubControls_Advance) {
        try {
            for (int i = 0; i < Clear_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Clear_SubControls_Advance.get(i);
                String controlName = SubControls_Advance.getControlName();
                String subformName = SubControls_Advance.getSubformControlName();
                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");
                        AllControls:
                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subformName.equals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    SubformView.clearControls(controlName, postions, true);
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    gridControl.clearControls(controlName, postions, true);
                                }
                            } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                    temp_controlObj.isMakeItAsPopup()) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if (subformName.equals(temp_controlObjSec.getControlName())) {
                                        if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            SubformView.clearControls(controlName, postions, true);
                                        } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.clearControls(controlName, postions, true);

                                        }
                                    }

                                }
                            }
                        }
                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.clearControls(controlName, null, false);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.clearControls(controlName, null, false);
                            }
                        } else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.clearControls(controlName, null, false);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.clearControls(controlName, null, false);
                                    }
                                }
                            }
                        }
                    }
                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("CurrentRow")) {
                    controlName = controlName.substring(0, controlName.lastIndexOf("_"));
                    String[] positions =new String[1];
                    positions[0]= String.valueOf(AppConstants.SF_Container_position);
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.equals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                SubformView.clearControls(controlName,positions,true);
                            } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.clearControls(controlName,positions,true);
                            }
                        }else if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION) &&
                                temp_controlObj.isMakeItAsPopup()) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if (subformName.equals(temp_controlObjSec.getControlName())) {
                                    if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                        SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        SubformView.clearControls(controlName,positions,true);
                                    } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                        gridControl.clearControls(controlName,positions,true);

                                    }
                                }

                            }}
                    }

                }else{
                    AllControls:
                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subformName.contentEquals(temp_controlObj.getControlName())) {
                            if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                List<ControlObject> sectionControlObjectList = temp_controlObj.getSubFormControlList();
                                for (int j = 0; j < sectionControlObjectList.size(); j++) {
                                    ControlObject section_controlObj = sectionControlObjectList.get(j);
                                    if (controlName.equalsIgnoreCase(section_controlObj.getControlName())) {
                                        improveHelper.clearControl(section_controlObj, List_ControlClassObjects);
                                        break AllControls;
                                    }
                                }
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformClear", e);
        }
    }

    public void SetSubformClearCopy(List<SubControls_Advance_Bean> Clear_SubControls_Advance) {
        try {
            for (int i = 0; i < Clear_SubControls_Advance.size(); i++) {
                SubControls_Advance_Bean SubControls_Advance = Clear_SubControls_Advance.get(i);
                String SubControlName = SubControls_Advance.getControlName();
                String subFormControlName = SubControls_Advance.getSubformControlName();

                if (SubControls_Advance.getValueType().equalsIgnoreCase("Advance")) {
                    String ValueExpression = SubControls_Advance.getValueExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, ValueExpression);
                    if (!Expvalue.contentEquals("")) {
                        String[] postions = Expvalue.split("\\,");

                        String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                        for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                            if (subControlName.startsWith(temp_controlObj.getControlName())) {
                                SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                // SubForm_MainLayer hear we added layout_by click add
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_MainSubFormContainer.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_MainSubFormContainer.getChildAt((int) Double.parseDouble(postions[z]));
                                                    LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);

                                                    //LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get(z);
                                                    LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get((int) Double.parseDouble(postions[0]));
                                                    Object ControlObject = New_list_ControlClassObjects.get(subControlName);
                                                    ControlObject ClearControlObject = SubformView.controlObject.getSubFormControlList().get(y);

                                                    SubcontrolClear(ControlObject, ClearControlObject, ll_innerSubFormContainer.getChildAt(y), New_list_ControlClassObjects);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                            for (int z = 0; z < postions.length; z++) {
                                                if (ll_grid_view.getChildCount() > (int) Double.parseDouble(postions[z])) {
                                                    View innerView = ll_grid_view.getChildAt((int) Double.parseDouble(postions[z]));

//                                            LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get(z);
                                                    LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get((int) Double.parseDouble(postions[0]));
                                                    Object ControlObject = New_list_ControlClassObjects.get(subControlName);
                                                    ControlObject ClearControlObject = SubformView.controlObject.getSubFormControlList().get(y);

                                                    SubcontrolClear(ControlObject, ClearControlObject, ((LinearLayout) innerView).getChildAt(y), New_list_ControlClassObjects);
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                        }


                    }

                } else if (SubControls_Advance.getValueType().equalsIgnoreCase("AllRows")) {

                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subControlName.startsWith(temp_controlObj.getControlName())) {
                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                            //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                            View view = SubformView.getSubFormView();
                            if (!SubformView.isGrid) {
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {

                                        for (int z = 0; z < ll_MainSubFormContainer.getChildCount(); z++) {
                                            View innerView = ll_MainSubFormContainer.getChildAt(z);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);

                                            LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get(z);
                                            Object ControlObject = New_list_ControlClassObjects.get(subControlName);
                                            ControlObject ClearControlObject = SubformView.controlObject.getSubFormControlList().get(y);

                                            SubcontrolClear(ControlObject, ClearControlObject, ll_innerSubFormContainer.getChildAt(y), New_list_ControlClassObjects);
                                        }
                                    }
                                }
                            } else {
                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                for (int y = 0; y < list_SubControl.size(); y++) {
                                    if (subControlName.equalsIgnoreCase(list_SubControl.get(y).getControlName())) {
                                        for (int z = 0; z < ll_grid_view.getChildCount(); z++) {
                                            View innerView = ll_grid_view.getChildAt(z);

                                            LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get(z);
                                            Object ControlObject = New_list_ControlClassObjects.get(subControlName);
                                            ControlObject ClearControlObject = SubformView.controlObject.getSubFormControlList().get(y);

                                            SubcontrolClear(ControlObject, ClearControlObject, ((LinearLayout) innerView).getChildAt(y), New_list_ControlClassObjects);
                                        }
                                    }
                                }
                            }

                        }
                    }

                } else {

//                    String subControlName = SubControlName.substring(0, SubControlName.lastIndexOf("_"));

                    for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                        ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                        if (subFormControlName.startsWith(temp_controlObj.getControlName())) {
                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            if (SubformView != null) {
                                List<ControlObject> list_SubControl = SubformView.controlObject.getSubFormControlList();
                                //SubForm_MainLayer_hear_weadded_layout_by_clickadd
                                View view = SubformView.getSubFormView();
                                if (!SubformView.isGrid) {
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);

                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {

                                            View innerView = ll_MainSubFormContainer.getChildAt(AppConstants.SF_Container_position);
                                            LinearLayout ll_innerSubFormContainer = innerView.findViewById(R.id.ll_innerSubFormContainer);

                                            LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                                            Object ControlObject = New_list_ControlClassObjects.get(list_SubControl.get(y).getControlName());
                                            ControlObject ClearControlObject = SubformView.controlObject.getSubFormControlList().get(y);

                                            SubcontrolClear(ControlObject, ClearControlObject, ll_innerSubFormContainer.getChildAt(y), New_list_ControlClassObjects);

                                        }
                                    }
                                } else {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);
                                    for (int y = 0; y < list_SubControl.size(); y++) {
                                        if (SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_CurrentRow") || SubControlName.contentEquals(list_SubControl.get(y).getControlName() + "_currentrow")) {

                                            View innerView = ll_grid_view.getChildAt(AppConstants.SF_Container_position);

                                            LinkedHashMap<String, Object> New_list_ControlClassObjects = SubformView.subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                                            Object ControlObject = New_list_ControlClassObjects.get(SubControlName);
                                            ControlObject ClearControlObject = SubformView.controlObject.getSubFormControlList().get(y);

                                            SubcontrolClear(ControlObject, ClearControlObject, ((LinearLayout) innerView).getChildAt(y), New_list_ControlClassObjects);

                                        }
                                    }
                                }
                            }

                        }
                    }

                }


            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubformClear", e);
        }
    }

    public void SubcontrolClear(Object ControlObject, ControlObject temp_controlObj, View tempView, LinkedHashMap<String, Object> New_list_ControlClassObjects) {
        try {
            switch (temp_controlObj.getControlType()) {
                case CONTROL_TYPE_TEXT_INPUT:
                    TextInput clearTextView = (TextInput) ControlObject;
                    clearTextView.Clear();
                    break;
                case CONTROL_TYPE_NUMERIC_INPUT:
                    NumericInput numverTextView = (NumericInput) ControlObject;
                    numverTextView.Clear();
                    break;
                case CONTROL_TYPE_PHONE:
                    Phone PhoneView = (Phone) ControlObject;
                    PhoneView.Clear();
                    break;
                case CONTROL_TYPE_EMAIL:
                    Email EmailView = (Email) ControlObject;
                    EmailView.getCustomEditText().setText("");
                    break;
                case CONTROL_TYPE_CAMERA:
                    Camera CameraView = (Camera) ControlObject;
//                    Camera camera = new Camera(this, temp_controlObj, false, 0, "");
                    Camera camera = new Camera(this, temp_controlObj, false, 0, "");
                    New_list_ControlClassObjects.put(temp_controlObj.getControlName(), camera);
                    ((LinearLayout) tempView).removeAllViews();
                    ((LinearLayout) tempView).addView(camera.getCameraView());

                    break;
                case CONTROL_TYPE_LARGE_INPUT:
                    LargeInput LargeInputView = (LargeInput) ControlObject;
                    LargeInputView.getCustomEditText().setText("");
                    break;
                case CONTROL_TYPE_CHECKBOX:
                    Checkbox CheckBoxView = (Checkbox) ControlObject;
                    LinearLayout cbview = CheckBoxView.getCheckbox();
                    for (int j = 0; j < cbview.getChildCount(); j++) {
                        CheckBox cb_main = (CheckBox) cbview.getChildAt(j);
                        cb_main.setChecked(false);
                    }
                    break;
                case CONTROL_TYPE_FILE_BROWSING:
                    FileBrowsing FileBrowsingView = (FileBrowsing) ControlObject;

//                    FileBrowsing Filebrowsing = new FileBrowsing(this, temp_controlObj);
                    FileBrowsing Filebrowsing = new FileBrowsing(this, temp_controlObj, false, 0, "");
                    New_list_ControlClassObjects.put(temp_controlObj.getControlName(), Filebrowsing);
                    ((LinearLayout) tempView).removeAllViews();
                    ((LinearLayout) tempView).addView(Filebrowsing.getFileBrowsingView());
                    break;
                case CONTROL_TYPE_CALENDER:
                    Calendar CalendarView = (Calendar) ControlObject;
                    CalendarView.Clear();
                    break;
                case CONTROL_TYPE_AUDIO_PLAYER:
                    AudioPlayer audioPlayer_ = (AudioPlayer) ControlObject;

                    break;
                case CONTROL_TYPE_VIDEO_PLAYER:
                    VideoPlayer VideoPlayerView = (VideoPlayer) ControlObject;

                    break;
                case CONTROL_TYPE_PERCENTAGE:
                    Percentage PercentageView = (Percentage) ControlObject;
                    PercentageView.Clear();
                    break;
                case CONTROL_TYPE_RADIO_BUTTON:
                    RadioGroupView RadioGroupview = (RadioGroupView) ControlObject;
                    RadioGroupview.Clear();
                    break;
                case CONTROL_TYPE_DROP_DOWN:
                    DropDown DropDownview = (DropDown) ControlObject;
                    DropDownview.Clear();
                    break;
                case CONTROL_TYPE_CHECK_LIST:
                    CheckList CheckListview = (CheckList) ControlObject;
                    CheckListview.Clear();
                    break;
                case CONTROL_TYPE_SIGNATURE:
                    SignatureView Signatureview = (SignatureView) ControlObject;
                    Signatureview.Clear();
                    break;
                case CONTROL_TYPE_URL_LINK:

                    break;
                case CONTROL_TYPE_DECIMAL:
                    DecimalView Decimalview = (DecimalView) ControlObject;
                    Decimalview.Clear();
                    break;
                case CONTROL_TYPE_PASSWORD:
                    Password Passwordview = (Password) ControlObject;
                    Passwordview.Clear();
                    break;
                case CONTROL_TYPE_CURRENCY:
                    Currency Currencyview = (Currency) ControlObject;
                    Currencyview.Clear();
                    break;
                case CONTROL_TYPE_RATING:
                    Rating Ratingview = (Rating) ControlObject;
                    Ratingview.Clear();
                    break;
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SubcontrolClear", e);
        }
    }

    private void setGetGPSLocationToControlOrVariable(ActionWithoutCondition_Bean ActionObj, String gpsvalue) {
        String typeofSource = ActionObj.getGetGPSLocation_Type();
        if (typeofSource.contentEquals("Control")) {
            String controlName = ActionObj.getGetGPSLocation_Control_Selected();
            SetValuetoControl(controlName, gpsvalue, "", "");
        } else if (typeofSource.contentEquals("Variable")) {
            String variableName = ActionObj.getGetGPSLocation_Variable_Selected();
            List<Variable_Bean> variable_beanList = dataCollectionObject.getList_Varibles();
            for (int i = 0; i < variable_beanList.size(); i++) {
                if (variableName.contentEquals(variable_beanList.get(i).getVariable_Name())) {
                    variable_beanList.get(i).setVariable_singleValue(gpsvalue);
                }
            }
        }
        nextEvent();
    }



    private APIOutputDetails getAPIDataFormRealm(Context context, String actionID, List<AssignControl_Bean> assignControl_beans) {
        LinkedHashMap<String, List<String>> OutputData = new LinkedHashMap<>();
        LinkedHashMap<String,String> outputParamswithPaths=RealmDBHelper.getAPIOutputDataInLMP(context,actionID+"_OutputPaths");
        String filterTableName = "";
        boolean flagFirstTime=true;
        List<String> l_tableNames = new ArrayList<>();
        List<String> l_ColNames = new ArrayList<>();
        if(outputParamswithPaths.size()>0){
            for (int i = 0; i < assignControl_beans.size(); i++) {
                String outputMapped_ID = outputParamswithPaths.get(assignControl_beans.get(i).getControlValue());
                String temp_TableName = actionID;
                if (outputMapped_ID.contains("/")) {
                    String checkingColName=outputMapped_ID.substring(outputMapped_ID.lastIndexOf("/") + 1);
                    String temp = outputMapped_ID.substring(0, outputMapped_ID.lastIndexOf("/")).replace("/", "_");
                    if(RealmDBHelper.isAPIJsonArrayWithoutKeyExist(context,actionID,checkingColName)){
                        temp=outputMapped_ID.replace("/", "_");
                        temp_TableName = actionID + "_" + temp;
                    }else{
                        temp_TableName = actionID + "_" + temp;
                    }
                }
                List<String> ldata = RealmDBHelper.getTableData(context, RealmTables.APIMapping.TABLE_NAME, RealmTables.APIMapping.MapppingID, RealmTables.APIMapping.ActionIDWithTableName, temp_TableName);
                if (ldata.size() > 0) {
                    String tableName = ldata.get(0);
                    if(flagFirstTime){
                        flagFirstTime=false;
                        filterTableName=tableName;
                    }
                    // String tableName = ActionBean.getActionId().substring(0, 9) + "_" + temp;
                    l_tableNames.add(tableName);
                    if (l_tableNames.get(i).contains(filterTableName)) {
                        filterTableName = l_tableNames.get(i);
                    }
                    if (RealmDBHelper.isModifyColNameExist(context,outputMapped_ID)) {
                        String colName = outputMapped_ID.substring(outputMapped_ID.lastIndexOf("/") + 1);
                        l_ColNames.add(tableName + "_" + colName);
                    } else {
                        String colName = outputMapped_ID.substring(outputMapped_ID.lastIndexOf("/") + 1);
                        l_ColNames.add(colName);
                    }
                }
            }
            if (l_tableNames.size() > 0) {
                OutputData = RealmDBHelper.getAPIDataInLHMBasedOnAssignControl_Bean(context, filterTableName, l_ColNames, assignControl_beans);
            }
        }
        if(OutputData.size()>0){
            APIOutputDetails apiOutputDetails=new APIOutputDetails();
            apiOutputDetails.setOutputData(OutputData);
            apiOutputDetails.setFilterTableName(filterTableName);
            apiOutputDetails.setL_ColNames(l_ColNames);
            apiOutputDetails.setL_tableNames(l_tableNames);
            return apiOutputDetails;
        }else{
            return null;
        }

    }

    public void SetValue(ActionWithoutCondition_Bean ActionObj) {
        try {
            String typeofSource = ActionObj.getSv_TypeofSource();
            if (typeofSource.equalsIgnoreCase("Control")) {
                String typeofControl = ActionObj.getSv_ControlType();
                if (typeofControl.contentEquals("Single")) {
                    List<AssignControl_Bean> assignControl_beans = ActionObj.getSv_single_control_assign_controls();
                    if(assignControl_beans!=null&&assignControl_beans.size()>0) {
                        for (int index = 0; index <assignControl_beans.size() ; index++) {
                            AssignControl_Bean assignControl_bean = assignControl_beans.get(index);
                            if (assignControl_bean.getTwoValueControlType() != null && assignControl_bean.getTwoValueControlType().equals(CONTROL_TYPE_PROGRESS)) {
                                String controlName = assignControl_bean.getControlName();
                                setTwoValuetoControl(assignControl_bean);
                            } else if (assignControl_bean.getTwoValueControlType() != null && assignControl_bean.getTwoValueControlType().equals(CONTROL_TYPE_COUNT_DOWN_TIMER)) {
                                String controlName = assignControl_bean.getControlName();
                                setTwoValuetoControl(assignControl_bean);
                            } else if (assignControl_bean.getTwoValueControlType() != null && assignControl_bean.getTwoValueControlType().equals(CONTROL_TYPE_COUNT_UP_TIMER)) {
                                String controlName = assignControl_bean.getControlName();
                                setTwoValuetoControl(assignControl_bean);
                            } else if (assignControl_bean.getTwoValueControlType() != null && assignControl_bean.getTwoValueControlType().equals(CONTROL_TYPE_CHECKBOX)) {
                                String controlName = assignControl_bean.getControlName();
                                setTwoValuetoControl(assignControl_bean);
                            } else if (assignControl_bean.getControlValue() != null) {
                                String controlName = assignControl_bean.getControlName();
                                String controlValue = assignControl_bean.getControlValue();
                                boolean isExpression = assignControl_bean.isExpression();
                                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                if (typeofSource.equalsIgnoreCase("Control")) {
                                    if (!assignControl_bean.isTwovaluecontrol()) {
                                        if (!isExpression) {
                                            SetValuetoControl(controlName, controlValue, "", "");
                                        } else {
                                            if (assignControl_bean.getList_OutParam_Languages() != null && assignControl_bean.getList_OutParam_Languages().size() > 0) {
                                                String currentLang = ImproveHelper.getLocale(MainActivity.this);
                                                String value = "";
                                                for (int x = 0; x < assignControl_bean.getList_OutParam_Languages().size(); x++) {
                                                    if (assignControl_bean.getList_OutParam_Languages().get(x).getOutParam_Lang_Name().equalsIgnoreCase(currentLang)) {
                                                        value = ehelper.ExpressionHelper(this, assignControl_bean.getList_OutParam_Languages().get(x).getOutParam_Lang_Mapped());
                                                        SetValuetoControl(controlName, value, "", "");
                                                        break;
                                                    }
                                                }
                                            } else {
                                                String value = ehelper.ExpressionHelper(this, controlValue);
                                                Log.d(TAG, "SetValuebha: " + value);
                                                SetValuetoControl(controlName, value, "", "");
                                            }
                                        }
                                    } else {
                                        List<Item> itemList = new ArrayList<>();

                                        if (assignControl_bean.getMultiplevalue_Type().equalsIgnoreCase("Static")) {
                                            List<String> multipleValueIds = assignControl_bean.getMultiplevalueIDs();
                                            List<String> multipleValueTexts = assignControl_bean.getMultiplevalueTexts();
                                            List<Boolean> multipleValueExpressionIds = assignControl_bean.getMultipleExpressionID();
                                            List<Boolean> multipleValueExpressionTexts = assignControl_bean.getMultipleExpressionText();

                                            if (multipleValueIds != null && multipleValueIds.size() > 0) {
                                                for (int i = 0; i < multipleValueIds.size(); i++) {

                                                    Item item = new Item();
                                                    if (multipleValueExpressionIds.get(i)) {
                                                        item.setId(ehelper.ExpressionHelper(this, multipleValueIds.get(i)));
                                                    } else {
                                                        item.setId(multipleValueIds.get(i));
                                                    }

                                                    if (multipleValueExpressionTexts.get(i)) {
                                                        item.setValue(ehelper.ExpressionHelper(this, multipleValueTexts.get(i)));
                                                    } else {
                                                        item.setValue(multipleValueTexts.get(i));
                                                    }

                                                    if (item.getId().contains(",")) {
                                                        String[] ItemsArr = item.getId().split("\\,");
                                                        String[] ItemvalArr = item.getValue().split("\\,");
                                                        for (int j = 0; j < ItemsArr.length; j++) {
                                                            Item item_temp = new Item();
                                                            item_temp.setId(ItemsArr[j]);
                                                            item_temp.setValue(ItemvalArr[j]);
                                                            itemList.add(item_temp);
                                                        }


                                                    } else {
                                                        itemList.add(item);
                                                    }
                                                }
                                            }
                                        } else if (assignControl_bean.getMultiplevalue_Type().equalsIgnoreCase("Advance")) {

                                            Item item = new Item();
                                            item.setId(ehelper.ExpressionHelper(this, assignControl_bean.getMultiplevalue_Advance_ItemID()));
                                            item.setValue(ehelper.ExpressionHelper(this, assignControl_bean.getMultiplevalue_Advance_ItemText()));

                                            if (item.getId().contains(",")) {
                                                String[] ItemsArr = item.getId().split("\\,");
                                                String[] ItemvalArr = item.getValue().split("\\,");
                                                for (int j = 0; j < ItemsArr.length; j++) {
                                                    Item item_temp = new Item();
                                                    item_temp.setId(ItemsArr[j]);
                                                    item_temp.setValue(ItemvalArr[j]);
                                                    itemList.add(item_temp);
                                                }

                                            } else {
                                                itemList.add(item);
                                            }

                                        }

                                        ControlObject tempObject = new ControlObject();
                                        for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {

                                            if (dataCollectionObject.getControls_list().get(i).getControlName().contentEquals(controlName)) {
                                                tempObject = dataCollectionObject.getControls_list().get(i);
                                                break;
                                            }

                                        }

                                        SetMultipleValues_New(tempObject, List_ControlClassObjects.get(controlName), assignControl_bean.getActivity(), itemList);

                                    }
                                }
                            }
                        }
                    }
                } else {
                    String multiValueControlName = ActionObj.getSv_Multiple_ControlName();
                    String multiValueControlType = ImproveHelper.getControlType(dataCollectionObject.getControls_list(), multiValueControlName);
                    List<AssignControl_Bean> assignControl_beanList = ActionObj.getSv_Multiple_List_AssignControls();
                    if (multiValueControlType.contentEquals(CONTROL_TYPE_SUBFORM) || multiValueControlType.contentEquals(CONTROL_TYPE_GRID_CONTROL)) {
                        String rowType = ActionObj.getSv_Multiple_RowType().trim();
                        String assignType = "";
                        AppConstants.EventFrom_subformOrNot = true;
                        AppConstants.Current_ClickorChangeTagName = multiValueControlName;
                        if (rowType.equalsIgnoreCase("Insert New Row")) {
                            assignType = ActionObj.getSv_Multiple_multi_assignType();
                            String dataSource = ActionObj.getSv_data_source();
                            LinkedHashMap<String, List<String>> map_Data = new LinkedHashMap<>();
                            String valueType = dataSource.substring(4, dataSource.indexOf("."));
                            String sourceName = dataSource.substring(4, dataSource.indexOf(")"));
                            int rowsToInsert = 0;
                            if(valueType.equalsIgnoreCase("Variables")){
                                sourceName = sourceName.split("\\.")[2].trim().toLowerCase();
                            }else{
                                sourceName = sourceName.split("\\.")[1].trim().toLowerCase();
                            }
                            if (valueType.equalsIgnoreCase(AppConstants.Global_SubControls)) {
                                List<ControlObject> list_Controls = new ArrayList<>();
                                List<Integer> noOfRowsList = new ArrayList<>();
                                if (MainActivity.getInstance().List_ControlClassObjects.get(sourceName) instanceof GridControl) {
                                    GridControl gridControl = (GridControl) MainActivity.getInstance().List_ControlClassObjects.get(sourceName);
                                    if (gridControl != null) {
                                        list_Controls = gridControl.controlObject.getSubFormControlList();
                                    }
                                } else {
                                    SubformView subview = (SubformView) MainActivity.getInstance().List_ControlClassObjects.get(sourceName);
                                    if (subview != null) {
                                        list_Controls = subview.controlObject.getSubFormControlList();
                                    }
                                }
                                for (int i = 0; i < list_Controls.size(); i++) {
                                    ControlObject temp_controlObj = list_Controls.get(i);
                                    if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_RADIO_BUTTON)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_DROP_DOWN)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CHECKBOX)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CHECK_LIST)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_DATA_CONTROL)) {
                                        List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(context, dataSource.substring(0, dataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_id_allrows)");
                                        map_Data.put(temp_controlObj.getControlName() + "_id", Valuestr);
                                    }
                                    List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(context, dataSource.substring(0, dataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_allrows)");
                                    noOfRowsList.add(Valuestr.size());
                                    map_Data.put(temp_controlObj.getControlName(), Valuestr);
                                }
                                rowsToInsert = ImproveHelper.getMax(noOfRowsList);
                            } else  if (valueType.equalsIgnoreCase(Global_API)) {
                                APIOutputDetails apiOutputDetails=getAPIDataFormRealm(context,sourceName,assignControl_beanList);
                               if(apiOutputDetails!=null){
                                   map_Data = apiOutputDetails.getOutputData();
                                   sourceName=apiOutputDetails.getFilterTableName();
                                   rowsToInsert = RealmDBHelper.getCount(context, sourceName);
                               }
                            } else {
                                map_Data = RealmDBHelper.getTableDataInLHM(context, sourceName);
                                rowsToInsert = RealmDBHelper.getCount(context, sourceName);
                            }

                            if (multiValueControlType.contentEquals(CONTROL_TYPE_SUBFORM)) {
                                SubformView subformView = (SubformView) List_ControlClassObjects.get(multiValueControlName);
                                if (subformView != null) {
                                    if (assignType.equalsIgnoreCase("Replace")) {
                                        subformView.replaceRows(((Activity) context), rowsToInsert, false, null);
                                    } else {
                                        subformView.appendRows(((Activity) context), rowsToInsert);
                                    }
                                }

                            } else if (multiValueControlType.contentEquals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(multiValueControlName);
                                if (gridControl != null) {
                                    if (assignType.equalsIgnoreCase("Replace")) {
                                        gridControl.replaceRows(((Activity) context), rowsToInsert, false, null);
                                    } else {
                                        gridControl.appendRows(((Activity) context), rowsToInsert);
                                    }
                                }
                            }


                            for (int i = 0; i < assignControl_beanList.size(); i++) {

                                AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
                                String controlName = assignControl_bean.getControlName();
                                String controlValue = assignControl_bean.getControlValue();
                                String controlIdValue = assignControl_bean.getControlIdValue();
                                if (map_Data.containsKey(controlValue)) {
                                    List<String> valuesList = map_Data.get(controlValue);
                                    List<String> valuesIdList = new ArrayList<>();
                                    if (controlIdValue != null) {
                                        valuesIdList = map_Data.get(controlIdValue);
                                    }
                                    if (valuesList != null) {
                                        for (int j = 0; j < valuesList.size(); j++) {
                                            SF_Container_position = j;
                                            String valueId = "";
                                            if (j < valuesIdList.size()) {
                                                valueId = valuesIdList.get(j);
                                            }
                                            SetValuetoControl(controlName, valuesList.get(j), valueId, multiValueControlType);
                                        }
                                    }
                                } else {
                                    ExpressionMainHelper eHelper = new ExpressionMainHelper();
                                    String value = eHelper.ExpressionHelper(context, controlValue);
                                    String valueId = "";
                                    if (controlIdValue != null) {
                                        valueId = eHelper.ExpressionHelper(context, controlIdValue);
                                    }
                                    for (int j = 0; j < rowsToInsert; j++) {
                                        SF_Container_position = j;
                                        SetValuetoControl(controlName, value, valueId, multiValueControlType);

                                    }

                                }
                            }


                        } else if (rowType.equalsIgnoreCase("Update All Rows") ||
                                rowType.equalsIgnoreCase("Update Specific Rows") ||
                                rowType.equalsIgnoreCase("Update Current Rows")) {
                            int rowsToUpdate = 0;
                            String rowPositions = "";
                            ExpressionMainHelper eHelper = new ExpressionMainHelper();
                            if (multiValueControlType.contentEquals(CONTROL_TYPE_SUBFORM)) {
                                SubformView subformView = (SubformView) List_ControlClassObjects.get(multiValueControlName);
                                if (subformView != null) {
                                    if (rowType.equalsIgnoreCase("Update All Rows")) {
                                        rowsToUpdate = subformView.getSubFormRows();
                                    } else if (rowType.equalsIgnoreCase("Update Specific Rows")) {
                                        rowPositions = eHelper.ExpressionHelper(context, ActionObj.getSv_Multiple_Single_rowPosition());
                                        rowsToUpdate = rowPositions.split(",").length;
                                    } else {
                                        rowsToUpdate = 1;
                                    }
                                }

                            } else if (multiValueControlType.contentEquals(CONTROL_TYPE_GRID_CONTROL)) {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(multiValueControlName);
                                if (gridControl != null) {
                                    rowsToUpdate = gridControl.getSubFormRows();
                                }
                            }

                            for (int i = 0; i < rowsToUpdate; i++) {

                                for (int j = 0; j < assignControl_beanList.size(); j++) {
                                    AssignControl_Bean assignControl_bean = assignControl_beanList.get(j);
                                    String controlName = assignControl_bean.getControlName();
                                    String controlValue = assignControl_bean.getControlValue();
                                    String controlIdValue = assignControl_bean.getControlIdValue();

                                    String value = "";
                                    String valueId = "";
                                    if (rowType.equalsIgnoreCase("Update All Rows")) {
                                        SF_Container_position = i;
                                    } else if (rowType.equalsIgnoreCase("Update Specific Rows")) {
                                        SF_Container_position = Integer.parseInt(rowPositions.split(",")[j]);
                                    }
                                    if (controlValue != null) {
                                        value = eHelper.ExpressionHelper(context, controlValue);
                                    }
                                    if (controlIdValue != null) {
                                        valueId = eHelper.ExpressionHelper(context, controlIdValue);
                                    }

                                    SetValuetoControl(controlName, value, valueId, multiValueControlType);

                                }

                            }

                        }
                    } else if (multiValueControlType.contentEquals(CONTROL_TYPE_MAP)) {
                        MapControl mapControl = (MapControl) List_ControlClassObjects.get(multiValueControlName);
                        AssignControl_Bean assignControl_bean = assignControl_beanList.get(0);
                        String DataSource = ActionObj.getSv_Map_DataSource();
                        if (assignControl_bean.getControlValue() != null) {
                            String controlName = multiValueControlName;
                            String controlValue = assignControl_bean.getControlValue();
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            boolean isExpression = assignControl_bean.isExpression();
                            String finalValue = "";
                            LinkedHashMap<String, List<String>> map_Data = new LinkedHashMap<>();
                            String valueType = DataSource.substring(4, DataSource.indexOf("."));
                            String sourceName = DataSource.substring(4, DataSource.indexOf(")"));
                            if(valueType.equalsIgnoreCase("Variables")){
                                sourceName = sourceName.split("\\.")[2].trim().toLowerCase();
                            }else{
                                sourceName = sourceName.split("\\.")[1].trim().toLowerCase();
                            }
//                            sourceName = sourceName.split("\\.")[1].toLowerCase();
                            if (valueType.equalsIgnoreCase(AppConstants.Global_SubControls)) {
                                List<ControlObject> list_Controls = new ArrayList<>();
                                if (MainActivity.getInstance().List_ControlClassObjects.get(sourceName) instanceof GridControl) {
                                    GridControl gridControl = (GridControl) MainActivity.getInstance().List_ControlClassObjects.get(sourceName);
                                    if (gridControl != null) {
                                        list_Controls = gridControl.controlObject.getSubFormControlList();
                                    }
                                } else {
                                    SubformView subview = (SubformView) MainActivity.getInstance().List_ControlClassObjects.get(sourceName);
                                    if (subview != null) {
                                        list_Controls = subview.controlObject.getSubFormControlList();
                                    }
                                }
                                for (int i = 0; i < list_Controls.size(); i++) {
                                    ControlObject temp_controlObj = list_Controls.get(i);
                                    if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_RADIO_BUTTON)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_DROP_DOWN)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CHECKBOX)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CHECK_LIST)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_DATA_CONTROL)) {
                                        List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(context, DataSource.substring(0, DataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_id_allrows)");
                                        map_Data.put(temp_controlObj.getControlName() + "_id", Valuestr);
                                    }
                                    List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(context, DataSource.substring(0, DataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_allrows)");
                                    map_Data.put(temp_controlObj.getControlName(), Valuestr);
                                }
                            } else {
                                map_Data = RealmDBHelper.getTableDataInLHM(context, sourceName);
                            }

                            List<String> MappedValues1 = new ArrayList<>();

                            List<String> ConditionColumn = new ArrayList<>();
                            HashMap<String, List<String>> hash_popupdata = new LinkedHashMap<String, List<String>>();
                            String Operator = "";

                            String DefultMarker = assignControl_bean.getOutParam_Marker_defultImage();
                            String RenderingType = assignControl_bean.getOutParam_Marker_RenderingType();

                            if (assignControl_bean.getOutParam_MarkerAdvanced_ConditionColumn() != null) {
                                ConditionColumn = map_Data.get(assignControl_bean.getOutParam_MarkerAdvanced_ConditionColumn().toLowerCase());
                                Operator = assignControl_bean.getOutParam_MarkerAdvanced_Operator();
                            }
                            if (assignControl_bean.getOutParam_Marker_popupData() != null && assignControl_bean.getOutParam_Marker_popupData().size() > 0) {
                                for (int i = 0; i < assignControl_bean.getOutParam_Marker_popupData().size(); i++) {
                                    if (map_Data.containsKey(assignControl_bean.getOutParam_Marker_popupData().get(i).toLowerCase())) {
                                        hash_popupdata.put(assignControl_bean.getOutParam_Marker_popupData().get(i), map_Data.get(assignControl_bean.getOutParam_Marker_popupData().get(i).toLowerCase()));
                                    }
                                }

                            }
                            if (map_Data.size() > 0) {
                                MappedValues1.addAll(map_Data.get(controlValue));
                            }

                            boolean replace = ActionObj.getSv_Multiple_multi_assignType().equalsIgnoreCase("Replace");
                            if (assignControl_bean.getList_OutParam_MarkerAdvanced_Items() != null && assignControl_bean.getList_OutParam_MarkerAdvanced_Items().size() > 0) {
                                List<ImageAdvanced_Mapped_Item> List_OutParam_MarkerAdvanced_Items = assignControl_bean.getList_OutParam_MarkerAdvanced_Items();

                                mapControl.setMapMarkersDynamically(RenderingType, DefultMarker, MappedValues1, ConditionColumn, Operator, List_OutParam_MarkerAdvanced_Items, assignControl_bean.getOutParam_Marker_popupData(), hash_popupdata, replace);
                            } else {
                                mapControl.setMapMarkersDynamically(RenderingType, DefultMarker, MappedValues1, null, null, null, assignControl_bean.getOutParam_Marker_popupData(), hash_popupdata, replace);
                            }

                        }


                    } else if (multiValueControlType.contentEquals(CONTROL_TYPE_DATA_VIEWER)) {
                        DataViewer DataViewer = (DataViewer) List_ControlClassObjects.get(multiValueControlName);
                        String assignType = "";
                        String rowType = ActionObj.getSv_Multiple_RowType().trim();
                        if (rowType.equalsIgnoreCase("Insert New Row")) {
                            assignType = ActionObj.getSv_Multiple_multi_assignType();
                            String dataSource = ActionObj.getSv_data_source();
                            LinkedHashMap<String, List<String>> map_Data = new LinkedHashMap<>();
                            String valueType = dataSource.substring(4, dataSource.indexOf("."));
                            String sourceName = dataSource.substring(4, dataSource.indexOf(")"));
                            if (valueType.equalsIgnoreCase("Variables")) {
                                sourceName = sourceName.split("\\.")[2].trim().toLowerCase();
                            } else {
                                sourceName = sourceName.split("\\.")[1].trim().toLowerCase();
                            }
                            if (valueType.equalsIgnoreCase(AppConstants.Global_SubControls)) {
                                List<ControlObject> list_Controls = new ArrayList<>();
                                if (MainActivity.getInstance().List_ControlClassObjects.get(sourceName) instanceof GridControl) {
                                    GridControl gridControl = (GridControl) MainActivity.getInstance().List_ControlClassObjects.get(sourceName);
                                    if (gridControl != null) {
                                        list_Controls = gridControl.controlObject.getSubFormControlList();
                                    }
                                } else {
                                    SubformView subview = (SubformView) MainActivity.getInstance().List_ControlClassObjects.get(sourceName);
                                    if (subview != null) {
                                        list_Controls = subview.controlObject.getSubFormControlList();
                                    }
                                }
                                for (int i = 0; i < list_Controls.size(); i++) {
                                    ControlObject temp_controlObj = list_Controls.get(i);
                                    if (temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_RADIO_BUTTON)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_DROP_DOWN)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CHECKBOX)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CHECK_LIST)
                                            || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_DATA_CONTROL)) {
                                        List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(context, dataSource.substring(0, dataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_id_allrows)");
                                        map_Data.put(temp_controlObj.getControlName() + "_id", Valuestr);
                                    }
                                    List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(context, dataSource.substring(0, dataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_allrows)");
                                    map_Data.put(temp_controlObj.getControlName(), Valuestr);
                                }
                            } else {
                                map_Data = RealmDBHelper.getTableDataInLHM(context, sourceName);
                            }

                            List<DataViewerModelClass> dataViewerModelClassList = new ArrayList<>();

                            List<String> Header_list = new ArrayList<>();
                            List<String> CornerText_list = new ArrayList<>();
                            List<String> SubHeader_list = new ArrayList<>();
                            List<String> DescriptionList = new ArrayList<>();
                            List<String> DateandTime_list = new ArrayList<>();
                            List<String> ImagePath_list = new ArrayList<>();
                            List<String> ProfileImagePath_list = new ArrayList<>();
                            List<String> DatesList = new ArrayList<>();
                            List<String> MessagesList = new ArrayList<>();
                            LinkedHashMap<String, List<String>> hash_Description = new LinkedHashMap<String, List<String>>();
                            //--EV--//
                            List<String> Distance_list = new ArrayList<>();
                            List<String> WorkingHours_list = new ArrayList<>();
                            List<String> ItemOne_list = new ArrayList<>();
                            List<String> ItemTwo_list = new ArrayList<>();
                            List<String> Rating_list = new ArrayList<>();
                            List<String> Source_Icons_list = new ArrayList<>();
                            List<String> Source_Name_list = new ArrayList<>();
                            List<String> Source_Time_list = new ArrayList<>();
                            List<String> News_Type_list = new ArrayList<>();
                            List<String> all_values_list = new ArrayList<>();

                                        //--EV--//
                            List<String> DV_TransID_List = new ArrayList<>();
                            List<Integer> sizesList = new ArrayList<>();

                            for (int i = 0; i < assignControl_beanList.size(); i++) {

                                AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);

                                if (assignControl_bean != null) {

                                    String controlName = assignControl_bean.getControlName();
                                    String controlValue = assignControl_bean.getControlValue();
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    boolean isExpression = assignControl_bean.isExpression();
                                    String finalValue ="";
                                    if (map_Data.containsKey(controlValue)) {
                                        for (int j = 0; j <map_Data.get(controlValue).size() ; j++) {
                                            if(j==0){
                                                finalValue = map_Data.get(controlValue).get(j);
                                            }else{
                                                finalValue = finalValue+","+map_Data.get(controlValue).get(j);
                                            }

                                        }
                                        all_values_list.addAll(map_Data.get(controlValue));
                                    } else {

                                        finalValue = ehelper.ExpressionHelper(context, controlValue);
                                        all_values_list.addAll(Arrays.asList(finalValue.split("\\,")));

                                    }
                                    if (controlName.contentEquals("GPSCoordinates")) {

                                        ImagePath_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(ImagePath_list.size());

                                    } else if (controlName.contentEquals("Date")) {

                                        DatesList = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(DatesList.size());

                                    } else if (controlName.contentEquals("Message")) {

                                        MessagesList = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(MessagesList.size());

                                    } else if (controlName.contentEquals("Corner Value")) {

                                        CornerText_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(CornerText_list.size());

                                    }else if (controlName.contentEquals("Corner Value")) {

                                        CornerText_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(CornerText_list.size());

                                    } else if (controlName.contentEquals("Video")) {

                                        ImagePath_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(ImagePath_list.size());

                                    } else if (controlName.contentEquals("Image")) {
                                        ImagePath_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(ImagePath_list.size());

                                    } else if (controlName.contentEquals("Header")) {
                                        Header_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(Header_list.size());

                                    } else if (controlName.contentEquals("Description")) {
                                        DescriptionList = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(DescriptionList.size());

                                    } else if (controlName.contentEquals("Sub Header")) {
                                        SubHeader_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(SubHeader_list.size());

                                    } else if (controlName.contentEquals("Date and Time")) {
                                        DateandTime_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(DateandTime_list.size());

                                    } else if (controlName.contentEquals("Profile Image")) {
                                        ProfileImagePath_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(ProfileImagePath_list.size());

                                    } else if (controlName.contentEquals("Image/Video/Audio")) {
                                        ImagePath_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(ImagePath_list.size());

                                    } else if (controlName.contentEquals("Rating")) {
                                        Rating_list = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(Rating_list.size());

                                    } else if (controlName.contentEquals("Trans_id")) {
                                        DV_TransID_List = Arrays.asList(finalValue.split("\\,"));
                                        sizesList.add(DV_TransID_List.size());

                                    }
                                }

                            }

                            int max = ImproveHelper.getMax(sizesList);

                            if (checkDataViewerValuesListIsEmpty(all_values_list)) {
                                max = 0;
                            }

                            for (int i = 0; i < max; i++) {
                                DataViewerModelClass dmv = new DataViewerModelClass();
                                dmv.setHeading(Header_list.get(i));
                                List<String> Description = new ArrayList<String>();
                                switch (DataViewer.controlObject.getDataViewer_UI_Pattern()) {
                                    case AppConstants.GridView_With_Image_2_Columns:
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                        }
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.GridView_With_Image_3_Columns:
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                        }
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.GridView_With_Image_2_Columns_call:
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                        }
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.GridView_With_Image_3_Columns_call:
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                        }
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.GridView_With_Video_2_Columns:
                                        dmv.setVideo_Path(ImagePath_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.GridView_With_Video_3_Columns:
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        dmv.setVideo_Path(ImagePath_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.GridView_With_Video_2_Columns_call:
                                        dmv.setVideo_Path(ImagePath_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.GridView_With_Video_3_Columns_call:
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        dmv.setVideo_Path(ImagePath_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.ListView_2_Columns:
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.ListView_With_Image_2_Columns:
                                        dmv.setImage_Path(ImagePath_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.ListView_With_Image_3_Columns:
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        dmv.setImage_Path(ImagePath_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        if (CornerText_list != null && CornerText_list.size() != 0) {
                                            dmv.setCornerText(CornerText_list.get(i));
                                        }
                                        break;
                                    case AppConstants.Geo_Spatial_View:
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setGpsValue(ImagePath_list.get(i));
                                        }
                                        if (SubHeader_list.size() > 0) {
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                        }
                                        Description.add(DescriptionList.get(i));
                                        if (Description.size() > 0) {
                                            dmv.setDescription(Description);
                                        } else {
                                            dmv.setDescription(new ArrayList<>());
                                        }
                                        break;
                                    case AppConstants.TimeLine_View:
                                        dmv.setDateandTime(DateandTime_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.TimeLine_With_Photo_View:
                                        if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
                                            dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
                                        }

                                        dmv.setDateandTime(DateandTime_list.get(i));
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.LinearView_With_Video:
                                        Description.add(DescriptionList.get(i));
                                        dmv.setDescription(Description);
                                        break;
                                    case AppConstants.BlogSpot_View:
                                        if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
                                            dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
                                        }
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                        }
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        dmv.setImage_Path(ImagePath_list.get(i));
                                        break;
                                    case AppConstants.EV_Dashboard_Design_One:
                                    case AppConstants.EV_Dashboard_Design_Three:
                                        dmv.setSubHeading(SubHeader_list.get(i));
                                        if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                        }
                                        if (Rating_list != null && Rating_list.size() != 0) {
                                            dmv.setRating(Rating_list.get(i));
                                        }
                                        if (Header_list != null && Header_list.size() != 0) {
                                            dmv.setHeading(Header_list.get(i));
                                        }
                                        if (SubHeader_list != null && SubHeader_list.size() != 0) {
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                        }
                                        break;
                                }
                                if (DV_TransID_List != null && DV_TransID_List.size() != 0) {
                                    dmv.setDv_trans_id(DV_TransID_List.get(i));
                                }
                                dataViewerModelClassList.add(dmv);
                            }

                            DataViewer.SetDataViewerData(dataViewerModelClassList);

                        }

                    } else if (multiValueControlType.contentEquals(CONTROL_TYPE_CALENDAR_EVENT)) {

                        CalendarEventControl calendarEventControl = (CalendarEventControl) List_ControlClassObjects.get(multiValueControlName);
                        List<String> MappedValues_Date = new ArrayList<>();
                        List<String> MappedValues_Message = new ArrayList<>();
                        for (int i = 0; i <assignControl_beanList.size() ; i++) {
                            AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
                            String controlName = assignControl_bean.getControlName();
                            String controlValue = assignControl_bean.getControlValue();
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            boolean isExpression = assignControl_bean.isExpression();
                            String finalValue = ehelper.ExpressionHelper(this, controlValue);

                            if (controlName.equalsIgnoreCase("Date")) {
                                MappedValues_Date = Arrays.asList(finalValue.split(","));
                            } else {
                                MappedValues_Message = Arrays.asList(finalValue.split(","));
                            }
                        }

                        for (int x = 0; x < MappedValues_Date.size(); x++) {
                            calendarEventControl.AddDateDynamically("Single", MappedValues_Date.get(x), MappedValues_Message.get(x));
                        }

                    }
                }


//                    if (assignControl_beanList.size() > 0) {
//                        switch (rowType) {
//                            case "specificRows":
//                            case "singleRow":
//                                String assignLevel = ActionObj.getSv_Multiple_Single_assignLevel();
//                                String rowPos = "-1";
//                                switch (assignLevel) {
//                                    case "Specific Row":
//                                    case "Specific Rows":
//                                        if (ActionObj.isSv_Multiple_Single_rowPosition_Expression()) {
//                                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                            rowPos = ehelper.ExpressionHelper(this, ActionObj.getSv_Multiple_Single_rowPosition());
//                                        } else {
//                                            rowPos = ActionObj.getSv_Multiple_Single_rowPosition();
//                                        }
//                                        break;
//                                    case "Current Row":
//                                        rowPos = String.valueOf(AppConstants.SF_Container_position);
//                                        break;
//                                    case "New Row":
//                                        SubformView subformView = (SubformView) List_ControlClassObjects.get(multiValueControlName);
//                                        subformView.addNewRows(this, 1);
//                                        rowPos = String.valueOf(subformView.getSubFormRows() - 1);
//
//                                        break;
//                                }
//                                String[] postions = rowPos.split("\\,");
//                                for (int i = 0; i < assignControl_beanList.size(); i++) {
//                                    AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
//                                    if (assignControl_bean.getControlValue() != null) {
//                                        String controlName = assignControl_bean.getControlName();
//                                        String controlValue = assignControl_bean.getControlValue();
//                                        String controlIdValue = assignControl_bean.getControlIdValue();
//                                        String finalValue = "";
//                                        String finalValue1 = "";
//                                        boolean isExpression = assignControl_bean.isExpression();
//                                        finalValue = controlValue;
//                                        if (isExpression) {
//                                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                            if (assignControl_bean.getList_OutParam_Languages() != null && assignControl_bean.getList_OutParam_Languages().size() > 0) {
//                                                String currentLang = ImproveHelper.getLocale(MainActivity.this);
//                                                String value = "";
//                                                for (int x = 0; x < assignControl_bean.getList_OutParam_Languages().size(); x++) {
//                                                    if (assignControl_bean.getList_OutParam_Languages().get(x).getOutParam_Lang_Name().equalsIgnoreCase(currentLang)) {
//                                                        finalValue = ehelper.ExpressionHelper(this, assignControl_bean.getList_OutParam_Languages().get(x).getOutParam_Lang_Mapped());
//                                                    }
//                                                }
//                                            } else {
//
//                                                finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                            }
//                                        }
//                                        if (assignControl_bean.getActivity() != null && !assignControl_bean.getActivity().contentEquals("")) {
//                                            if (controlIdValue != null) {
//                                                ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                                finalValue1 = ehelper.ExpressionHelper(this, controlIdValue);
//
//                                            }
//                                        }
//                                        if (finalValue.trim().length() == 0) {
//                                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                            if (assignControl_bean.getList_OutParam_Languages() != null && assignControl_bean.getList_OutParam_Languages().size() > 0) {
//                                                String currentLang = ImproveHelper.getLocale(MainActivity.this);
//                                                String value = "";
//                                                for (int x = 0; x < assignControl_bean.getList_OutParam_Languages().size(); x++) {
//                                                    if (assignControl_bean.getList_OutParam_Languages().get(x).getOutParam_Lang_Name().equalsIgnoreCase(currentLang)) {
//                                                        finalValue = ehelper.ExpressionHelper(this, assignControl_bean.getList_OutParam_Languages().get(x).getOutParam_Lang_Mapped());
//                                                    }
//                                                }
//                                            }
//                                        }
//
//                                        if (finalValue.startsWith("(im:")) {
//                                            finalValue = ImproveHelper.getValueFromGlobalObject(this, finalValue);
//                                        }
//
//                                        for (String postion : postions) {
//                                            AppConstants.SF_Container_position = Integer.parseInt("" + Math.round(Double.parseDouble(postion)));
//                                            SetValuetoControl(controlName, finalValue, finalValue1, multiValueControlType);
//                                        }
//                                    }
//
//                                }
//                                break;
//                            case "allRows":
//                            case "MultiRows":
//                                if (multiValueControlType.equalsIgnoreCase(CONTROL_TYPE_SUBFORM)) {
//                                    SubformView subformView = (SubformView) List_ControlClassObjects.get(multiValueControlName);
//                                    List<String> valuesList = new ArrayList<>();
//                                    List<String> listvalues = new ArrayList<>();
//                                    List<String> listControlNames = new ArrayList<>();
//                                    List<String> controlNamesList = new ArrayList<>();
//                                    List<Integer> noOfRowsList = new ArrayList<>();
//                                    LinkedHashMap<Integer, String> valueIds = new LinkedHashMap<>();
//                                    List<String> checkBoxValues = new ArrayList<>();
//                                    LinkedHashMap<String, List<String>> outputData = new LinkedHashMap<>();
//                                    List<API_OutputParam_Bean> list_Form_OutParams = new ArrayList<>();
//                                    LinkedHashMap<Integer, String> checkBoxIds = new LinkedHashMap<>();
//                                    for (int i = 0; i < assignControl_beanList.size(); i++) {
//                                        AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
//                                        Log.d("activity_type", assignControl_bean.getActivity());
//                                        String controlName = assignControl_bean.getControlName();
//                                        String controlValue = assignControl_bean.getControlValue();
//                                        String controlIdValue = assignControl_bean.getControlIdValue();
//                                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                        if (!controlValue.toLowerCase().contains("_processrow")) {
//                                            if (assignControl_bean.getActivity() != null && !assignControl_bean.getActivity().contentEquals("")) {
//                                                if (assignControl_bean.getActivity().contentEquals("none")) {
//                                                    String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                    noOfRowsList.add(finalValue.split("\\,").length);
//                                                    valuesList.add(finalValue);
//                                                    controlNamesList.add(controlName);
//                                                    String finalValue1 = "";
//                                                    if (controlIdValue != null) {
//                                                        finalValue1 = ehelper.ExpressionHelper(this, controlIdValue);
//                                                        checkBoxIds.put(valuesList.size() - 1, finalValue1);
//                                                    }
//                                                } else {
//                                                    int noOfRows = subformView.getSubFormRows();
//                                                    noOfRowsList.add(noOfRows);
//                                                    String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                    String finalValue1 = "";
//                                                    listvalues.add(finalValue);
//                                                    listControlNames.add(controlName);
//                                                    if (controlIdValue != null) {
//                                                        finalValue1 = ehelper.ExpressionHelper(this, controlIdValue);
//                                                        valueIds.put(listvalues.size() - 1, finalValue1);
//                                                    }
//
//                                                    List<String> listVals = new ArrayList<>();
//                                                    List<String> listIds = new ArrayList<>();
//                                                    for (int j = 0; j < finalValue.split("\\,").length; j++) {
//                                                        listVals.add(finalValue.split("\\,")[j]);
//                                                    }
//                                                    if (!finalValue1.contentEquals("")) {
//                                                        for (int j = 0; j < finalValue1.split("\\,").length; j++) {
//                                                            listIds.add(finalValue1.split("\\,")[j]);
//                                                        }
//                                                    }
//                                                    Log.d(TAG, "SetValue_vtype: " + "" + listVals.size());
//                                                    if (listVals.size() > 0) {
//                                                        outputData.put(controlName, listVals);
//                                                        list_Form_OutParams.add(new API_OutputParam_Bean(controlName, controlName, false));
//
//                                                    }
//                                                    if (listIds.size() > 0) {
//                                                        outputData.put(controlName + "_id", listIds);
//                                                        list_Form_OutParams.add(new API_OutputParam_Bean(controlName + "_id", controlName + "_id", false));
//                                                    }
//
//
//                                                }
//
//                                            } else {
//                                                String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                int noOfRows = 0;
//                                                noOfRows = finalValue.split("\\,").length;
//                                                noOfRowsList.add(noOfRows);
//                                                valuesList.add(finalValue);
//                                                controlNamesList.add(controlName);
//                                            }
//                                        } else {
//
//
//                                            noOfRowsList.add(subformView.getSubFormRows());
//                                            String Value = "";
//
//                                            for (int j = 0; j < subformView.getSubFormRows(); j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                Value = Value + "," + ehelper.ExpressionHelper(this, controlValue);
//
//                                            }
//                                            controlNamesList.add(controlName);
//                                            valuesList.add(Value.substring(1));
//
//                                        }
//                                    }
//
//                                    if (list_Form_OutParams.size() > 0) {
//                                        subformView.saveNewRowData(outputData, list_Form_OutParams);
//                                    }
//
//                                    if (assignType.equalsIgnoreCase("replace")) {
//                                        int max = ImproveHelper.getMax(noOfRowsList);
//                                        /*if (app_edit.toLowerCase().equalsIgnoreCase("edit")) {
//                                            if (!strAppName.equalsIgnoreCase("Commodity price update")) {
//                                                subformView.replaceRows(this, max);
//                                            }
//                                        } else {
//                                            subformView.replaceRows(this, max);
//                                        }*/
//                                        subformView.replaceRows(((Activity) context), max, false, null);
//
//                                        for (int i = 0; i < valuesList.size(); i++) {
//                                            String value = valuesList.get(i);
//                                            String[] array = value.split("\\,");
//                                            String[] idArray = new String[1];
//                                            if (checkBoxIds.containsKey(i)) {
//                                                idArray = checkBoxIds.get(i).split("\\,");
//                                            }
//
//                                            for (int j = 0; j < array.length; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                if (checkBoxIds.containsKey(i)) {
//                                                    SetValuetoControl(controlNamesList.get(i), array[j], idArray[j], multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(controlNamesList.get(i), array[j], "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                        for (int i = 0; i < listvalues.size(); i++) {
//                                            for (int j = 0; j < max; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                if (valueIds.containsKey(i)) {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), valueIds.get(i), multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                    } else if (assignType.equalsIgnoreCase("update")) {
//                                        int max = ImproveHelper.getMax(noOfRowsList);
//                                        subformView.updateRows(this, max);
//                                        for (int i = 0; i < valuesList.size(); i++) {
//                                            String value = valuesList.get(i);
//                                            String[] array = value.split("\\,");
//
//                                            for (int j = 0; j < array.length; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                SetValuetoControl(controlNamesList.get(i), array[j], "", multiValueControlType);
//                                            }
//                                        }
//                                        for (int i = 0; i < listvalues.size(); i++) {
//                                            for (int j = 0; j < max; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                if (valueIds.containsKey(i)) {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), valueIds.get(i), multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                    } else if (assignType.equalsIgnoreCase("append")) {
//                                        int max = ImproveHelper.getMax(noOfRowsList);
//                                        int subFormRowsBeforeAppend = subformView.getSubFormRows();
//                                        subformView.appendRows(this, max);
//
//                                        for (int i = 0; i < valuesList.size(); i++) {
//                                            String value = valuesList.get(i);
//                                            String[] array = value.split("\\,");
//
//                                            for (int j = 0; j < array.length; j++) {
//                                                AppConstants.SF_Container_position = j + subFormRowsBeforeAppend;
//                                                SetValuetoControl(controlNamesList.get(i), array[j], "", multiValueControlType);
//                                            }
//                                        }
//                                        for (int i = 0; i < listvalues.size(); i++) {
//                                            for (int j = 0; j < max; j++) {
//                                                AppConstants.SF_Container_position = j + subFormRowsBeforeAppend;
//                                                if (valueIds.containsKey(i)) {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), valueIds.get(i), multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                    }
//                                } else if (multiValueControlType.equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
//                                    //nk pending because separated the subform and gridcontrol
//                                    GridControl subformView = (GridControl) List_ControlClassObjects.get(multiValueControlName);
//                                    List<String> valuesList = new ArrayList<>();
//                                    List<String> listvalues = new ArrayList<>();
//                                    List<String> listControlNames = new ArrayList<>();
//                                    List<String> controlNamesList = new ArrayList<>();
//                                    List<Integer> noOfRowsList = new ArrayList<>();
//                                    LinkedHashMap<Integer, String> valueIds = new LinkedHashMap<>();
//                                    List<String> checkBoxValues = new ArrayList<>();
//                                    LinkedHashMap<String, List<String>> outputData = new LinkedHashMap<>();
//                                    List<API_OutputParam_Bean> list_Form_OutParams = new ArrayList<>();
//                                    LinkedHashMap<Integer, String> checkBoxIds = new LinkedHashMap<>();
//                                    for (int i = 0; i < assignControl_beanList.size(); i++) {
//                                        AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
//                                        Log.d("activity_type", assignControl_bean.getActivity());
//                                        String controlName = assignControl_bean.getControlName();
//                                        String controlValue = assignControl_bean.getControlValue();
//                                        String controlIdValue = assignControl_bean.getControlIdValue();
//                                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                        if (!controlValue.toLowerCase().contains("_processrow")) {
//                                            if (assignControl_bean.getActivity() != null && !assignControl_bean.getActivity().contentEquals("")) {
//                                                if (assignControl_bean.getActivity().contentEquals("none")) {
//                                                    //||assignControl_bean.getActivity().contentEquals("None")
//                                                    String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                    noOfRowsList.add(finalValue.split("\\,").length);
//                                                    valuesList.add(finalValue);
//                                                    controlNamesList.add(controlName);
//                                                    String finalValue1 = "";
//                                                    if (controlIdValue != null) {
//                                                        finalValue1 = ehelper.ExpressionHelper(this, controlIdValue);
//                                                        checkBoxIds.put(valuesList.size() - 1, finalValue1);
//                                                    }
//                                                } else {
//                                                    int noOfRows = subformView.getSubFormRows();
//                                                    noOfRowsList.add(noOfRows);
//                                                    String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                    String finalValue1 = "";
//                                                    listvalues.add(finalValue);
//                                                    listControlNames.add(controlName);
//                                                    if (controlIdValue != null) {
//                                                        finalValue1 = ehelper.ExpressionHelper(this, controlIdValue);
//                                                        valueIds.put(listvalues.size() - 1, finalValue1);
//                                                    }
//
//                                                    List<String> listVals = new ArrayList<>();
//                                                    List<String> listIds = new ArrayList<>();
//                                                    for (int j = 0; j < finalValue.split("\\,").length; j++) {
//                                                        listVals.add(finalValue.split("\\,")[j]);
//                                                    }
//                                                    if (!finalValue1.contentEquals("")) {
//                                                        for (int j = 0; j < finalValue1.split("\\,").length; j++) {
//                                                            listIds.add(finalValue1.split("\\,")[j]);
//                                                        }
//                                                    }
//                                                    Log.d(TAG, "SetValue_vtype: " + "" + listVals.size());
//                                                    if (listVals.size() > 0) {
//                                                        outputData.put(controlName, listVals);
//                                                        list_Form_OutParams.add(new API_OutputParam_Bean(controlName, controlName, false));
//
//                                                    }
//                                                    if (listIds.size() > 0) {
//                                                        outputData.put(controlName + "_id", listIds);
//                                                        list_Form_OutParams.add(new API_OutputParam_Bean(controlName + "_id", controlName + "_id", false));
//                                                    }
//
//
//                                                }
//
//                                            } else {
//                                                String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                int noOfRows = 0;
//                                                noOfRows = finalValue.split("\\,").length;
//                                                noOfRowsList.add(noOfRows);
//                                                valuesList.add(finalValue);
//                                                controlNamesList.add(controlName);
//                                            }
//                                        } else {
//
//
//                                            noOfRowsList.add(subformView.getSubFormRows());
//                                            String Value = "";
//
//                                            for (int j = 0; j < subformView.getSubFormRows(); j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                Value = Value + "," + ehelper.ExpressionHelper(this, controlValue);
//
//                                            }
//                                            controlNamesList.add(controlName);
//                                            valuesList.add(Value.substring(1));
//
//                                        }
//                                    }
//
//                                    if (list_Form_OutParams.size() > 0) {
//                                        subformView.saveNewRowData(outputData, list_Form_OutParams);
//                                    }
//
//                                    if (assignType.equalsIgnoreCase("replace")) {
//                                        int max = ImproveHelper.getMax(noOfRowsList);
//                                        /*if (app_edit.toLowerCase().equalsIgnoreCase("edit")) {
//                                            if (!strAppName.equalsIgnoreCase("Commodity price update")) {
//                                                subformView.replaceRows(this, max);
//                                            }
//                                        } else {
//                                            subformView.replaceRows(this, max);
//                                        }*/
//                                        subformView.replaceRows(((Activity) context), max, false, null);
//
//                                        for (int i = 0; i < valuesList.size(); i++) {
//                                            String value = valuesList.get(i);
//                                            String[] array = value.split("\\,");
//                                            String[] idArray = new String[1];
//                                            if (checkBoxIds.containsKey(i)) {
//                                                idArray = checkBoxIds.get(i).split("\\,");
//                                            }
//
//                                            for (int j = 0; j < array.length; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                if (checkBoxIds.containsKey(i)) {
//                                                    SetValuetoControl(controlNamesList.get(i), array[j], idArray[j], multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(controlNamesList.get(i), array[j], "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                        for (int i = 0; i < listvalues.size(); i++) {
//                                            for (int j = 0; j < max; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                if (valueIds.containsKey(i)) {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), valueIds.get(i), multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                    } else if (assignType.equalsIgnoreCase("update")) {
//                                        int max = ImproveHelper.getMax(noOfRowsList);
//                                        subformView.updateRows(this, max);
//                                        for (int i = 0; i < valuesList.size(); i++) {
//                                            String value = valuesList.get(i);
//                                            String[] array = value.split("\\,");
//
//                                            for (int j = 0; j < array.length; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                SetValuetoControl(controlNamesList.get(i), array[j], "", multiValueControlType);
//                                            }
//                                        }
//                                        for (int i = 0; i < listvalues.size(); i++) {
//                                            for (int j = 0; j < max; j++) {
//                                                AppConstants.SF_Container_position = j;
//                                                if (valueIds.containsKey(i)) {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), valueIds.get(i), multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                    } else if (assignType.equalsIgnoreCase("append")) {
//                                        int max = ImproveHelper.getMax(noOfRowsList);
//                                        int subFormRowsBeforeAppend = subformView.getSubFormRows();
//                                        subformView.appendRows(this, max);
//
//                                        for (int i = 0; i < valuesList.size(); i++) {
//                                            String value = valuesList.get(i);
//                                            String[] array = value.split("\\,");
//
//                                            for (int j = 0; j < array.length; j++) {
//                                                AppConstants.SF_Container_position = j + subFormRowsBeforeAppend;
//                                                SetValuetoControl(controlNamesList.get(i), array[j], "", multiValueControlType);
//                                            }
//                                        }
//                                        for (int i = 0; i < listvalues.size(); i++) {
//                                            for (int j = 0; j < max; j++) {
//                                                AppConstants.SF_Container_position = j + subFormRowsBeforeAppend;
//                                                if (valueIds.containsKey(i)) {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), valueIds.get(i), multiValueControlType);
//                                                } else {
//                                                    SetValuetoControl(listControlNames.get(i), listvalues.get(i), "", multiValueControlType);
//                                                }
//                                            }
//                                        }
//                                    }
//                                } else if (multiValueControlType.equalsIgnoreCase(CONTROL_TYPE_DATA_VIEWER)) {
//                                    DataViewer DataViewer = (DataViewer) List_ControlClassObjects.get(multiValueControlName);
////                                    DataViewer.setOutputData(OutputData);
//                                    if (assignType.equalsIgnoreCase("update") || assignType.equalsIgnoreCase("replace")) {
//                                        List<DataViewerModelClass> dataViewerModelClassList = new ArrayList<>();
//                                        List<String> Header_list = new ArrayList<>();
//                                        List<String> CornerText_list = new ArrayList<>();
//                                        List<String> SubHeader_list = new ArrayList<>();
//                                        List<String> DescriptionList = new ArrayList<>();
//                                        List<String> DateandTime_list = new ArrayList<>();
//                                        List<String> ImagePath_list = new ArrayList<>();
//                                        List<String> ProfileImagePath_list = new ArrayList<>();
//                                        List<String> DatesList = new ArrayList<>();
//                                        List<String> MessagesList = new ArrayList<>();
//                                        LinkedHashMap<String, List<String>> hash_Description = new LinkedHashMap<String, List<String>>();
//                                        //--EV--//
//                                        List<String> Distance_list = new ArrayList<>();
//                                        List<String> WorkingHours_list = new ArrayList<>();
//                                        List<String> ItemOne_list = new ArrayList<>();
//                                        List<String> ItemTwo_list = new ArrayList<>();
//                                        List<String> Rating_list = new ArrayList<>();
//                                        List<String> Source_Icons_list = new ArrayList<>();
//                                        List<String> Source_Name_list = new ArrayList<>();
//                                        List<String> Source_Time_list = new ArrayList<>();
//                                        List<String> News_Type_list = new ArrayList<>();
//                                        List<String> all_values_list = new ArrayList<>();
//
//                                        //--EV--//
//                                        List<String> DV_TransID_List = new ArrayList<>();
//
//                                        List<Integer> sizesList = new ArrayList<>();
//                                        for (int i = 0; i < assignControl_beanList.size(); i++) {
//
//                                            AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
//
//                                            if (assignControl_bean != null) {
//
//                                                String controlName = assignControl_bean.getControlName();
//                                                String controlValue = assignControl_bean.getControlValue();
//                                                ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                                boolean isExpression = assignControl_bean.isExpression();
//                                                String finalValue = ehelper.ExpressionHelper(this, controlValue);
//                                                all_values_list.addAll(Arrays.asList(finalValue.split("\\,")));
//                                                if (controlName.contentEquals("GPSCoordinates")) {
//
//                                                    ImagePath_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(ImagePath_list.size());
//
//                                                } else if (controlName.contentEquals("Date")) {
//
//                                                    DatesList = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(DatesList.size());
//
//                                                } else if (controlName.contentEquals("Message")) {
//
//                                                    MessagesList = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(MessagesList.size());
//
//                                                } else if (controlName.contentEquals("Corner Value")) {
//
//                                                    CornerText_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(CornerText_list.size());
//
//                                                } else if (controlName.contentEquals("Video")) {
//
//                                                    ImagePath_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(ImagePath_list.size());
//
//                                                } else if (controlName.contentEquals("Image")) {
//                                                    ImagePath_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(ImagePath_list.size());
//
//                                                } else if (controlName.contentEquals("Header")) {
//                                                    Header_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(Header_list.size());
//
//                                                } else if (controlName.contentEquals("Description")) {
//                                                    DescriptionList = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(DescriptionList.size());
//
//                                                } else if (controlName.contentEquals("Sub Header")) {
//                                                    SubHeader_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(SubHeader_list.size());
//
//                                                } else if (controlName.contentEquals("Date and Time")) {
//                                                    DateandTime_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(DateandTime_list.size());
//
//                                                } else if (controlName.contentEquals("Profile Image")) {
//                                                    ProfileImagePath_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(ProfileImagePath_list.size());
//
//                                                } else if (controlName.contentEquals("Image/Video/Audio")) {
//                                                    ImagePath_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(ImagePath_list.size());
//
//                                                } else if (controlName.contentEquals("Rating")) {
//                                                    Rating_list = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(Rating_list.size());
//
//                                                } else if (controlName.contentEquals("Trans_id")) {
//                                                    DV_TransID_List = Arrays.asList(finalValue.split("\\,"));
//                                                    sizesList.add(DV_TransID_List.size());
//
//                                                }
//                                            }
//
//                                        }
//
//                                        int max = ImproveHelper.getMax(sizesList);
//
//                                        if (checkDataViewerValuesListIsEmpty(all_values_list)) {
//                                            max = 0;
//                                        }
//
//                                        for (int i = 0; i < max; i++) {
//                                            DataViewerModelClass dmv = new DataViewerModelClass();
//                                            dmv.setHeading(Header_list.get(i));
//                                            List<String> Description = new ArrayList<String>();
//                                            switch (DataViewer.controlObject.getDataViewer_UI_Pattern()) {
//                                                case AppConstants.GridView_With_Image_2_Columns:
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setImage_Path(ImagePath_list.get(i));
//                                                    }
//                                                    if (CornerText_list != null && CornerText_list.size() != 0) {
//                                                        dmv.setCornerText(CornerText_list.get(i));
//                                                    }
//
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.GridView_With_Image_3_Columns:
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setImage_Path(ImagePath_list.get(i));
//                                                    }
//                                                    if (CornerText_list != null && CornerText_list.size() != 0) {
//                                                        dmv.setCornerText(CornerText_list.get(i));
//                                                    }
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.GridView_With_Image_2_Columns_call:
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setImage_Path(ImagePath_list.get(i));
//                                                    }
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.GridView_With_Image_3_Columns_call:
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setImage_Path(ImagePath_list.get(i));
//                                                    }
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    if (CornerText_list != null && CornerText_list.size() != 0) {
//                                                        dmv.setCornerText(CornerText_list.get(i));
//                                                    }
//                                                    break;
//                                                case AppConstants.GridView_With_Video_2_Columns:
//                                                    dmv.setVideo_Path(ImagePath_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.GridView_With_Video_3_Columns:
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    dmv.setVideo_Path(ImagePath_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.GridView_With_Video_2_Columns_call:
//                                                    dmv.setVideo_Path(ImagePath_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.GridView_With_Video_3_Columns_call:
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    dmv.setVideo_Path(ImagePath_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.ListView_2_Columns:
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.ListView_With_Image_2_Columns:
//                                                    dmv.setImage_Path(ImagePath_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.ListView_With_Image_3_Columns:
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    dmv.setImage_Path(ImagePath_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.Geo_Spatial_View:
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setGpsValue(ImagePath_list.get(i));
//                                                    }
//                                                    if (SubHeader_list.size() > 0) {
//                                                        dmv.setSubHeading(SubHeader_list.get(i));
//                                                    }
//                                                    Description.add(DescriptionList.get(i));
//                                                    if (Description.size() > 0) {
//                                                        dmv.setDescription(Description);
//                                                    } else {
//                                                        dmv.setDescription(new ArrayList<>());
//                                                    }
//                                                    break;
//                                                case AppConstants.TimeLine_View:
//                                                    dmv.setDateandTime(DateandTime_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.TimeLine_With_Photo_View:
//                                                    if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
//                                                        dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
//                                                    }
//
//                                                    dmv.setDateandTime(DateandTime_list.get(i));
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.LinearView_With_Video:
//                                                    Description.add(DescriptionList.get(i));
//                                                    dmv.setDescription(Description);
//                                                    break;
//                                                case AppConstants.BlogSpot_View:
//                                                    if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
//                                                        dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
//                                                    }
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setImage_Path(ImagePath_list.get(i));
//                                                    }
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    dmv.setImage_Path(ImagePath_list.get(i));
//                                                    break;
//                                                case AppConstants.EV_Dashboard_Design_One:
//                                                case AppConstants.EV_Dashboard_Design_Three:
//                                                    dmv.setSubHeading(SubHeader_list.get(i));
//                                                    if (ImagePath_list != null && ImagePath_list.size() != 0) {
//                                                        dmv.setImage_Path(ImagePath_list.get(i));
//                                                    }
//                                                    if (Rating_list != null && Rating_list.size() != 0) {
//                                                        dmv.setRating(Rating_list.get(i));
//                                                    }
//                                                    if (Header_list != null && Header_list.size() != 0) {
//                                                        dmv.setHeading(Header_list.get(i));
//                                                    }
//                                                    if (SubHeader_list != null && SubHeader_list.size() != 0) {
//                                                        dmv.setSubHeading(SubHeader_list.get(i));
//                                                    }
//                                                    break;
//                                            }
//                                            if (DV_TransID_List != null && DV_TransID_List.size() != 0) {
//                                                dmv.setDv_trans_id(DV_TransID_List.get(i));
//                                            }
//                                            dataViewerModelClassList.add(dmv);
//                                        }
//
//                                        DataViewer.SetDataViewerData(dataViewerModelClassList);
//                                    }
//                                } else if (multiValueControlType.equalsIgnoreCase(CONTROL_TYPE_MAP)) {
//                                    MapControl mapControl = (MapControl) List_ControlClassObjects.get(multiValueControlName);
//
//                                    AssignControl_Bean assignControl_bean = assignControl_beanList.get(0);
//                                    String DataSource = ActionObj.getSv_Map_DataSource();
//
//                                    if (assignControl_bean.getControlValue() != null) {
//                                        String controlName = assignControl_bean.getControlName();
//                                        String controlValue = assignControl_bean.getControlValue();
//                                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                        boolean isExpression = assignControl_bean.isExpression();
//                                        String finalValue = "";
//                                        LinkedHashMap<String, List<String>> OutputData = new LinkedHashMap<String, List<String>>();
//                                        boolean realmFlag = false;
//                                        if (ActionObj.isSv_Map_DataSource_Expression()) {
//                                            finalValue = ehelper.ExpressionHelper(this, DataSource);
//                                            if (DataSource.toLowerCase().contains("getnearbyvalue") ||
//                                                    DataSource.toLowerCase().contains("getmulticolumnnearbyvalue")
//                                                    || DataSource.toLowerCase().contains("getnearbyvaluewithinrange") ||
//                                                    DataSource.toLowerCase().contains("getmulticolumnnearbyvaluewithinrange")) {
//                                                OutputData = ActionUitls.ConvertGetvaluestoHashMap(context, finalValue, 1, DataSource);
//                                            } else {
//                                                OutputData = ActionUitls.ConvertGetvaluestoHashMap(context, finalValue, 0, DataSource);
//                                            }
//                                        } else {
//                                            realmFlag = true;
//                                            //nk realm:get data from realm not from globalobject
//                                           /* if (AppConstants.GlobalObjects.getAPIs_ListHash() != null) {
//                                                if (AppConstants.GlobalObjects.getAPIs_ListHash().containsKey(DataSource.toLowerCase())) {
//                                                    OutputData = AppConstants.GlobalObjects.getAPIs_ListHash().get(DataSource.toLowerCase());
//                                                }
//                                            }*/
//
//                                            /*if (AppConstants.GlobalObjects.getForms_ListHash() != null) {
//                                                if (AppConstants.GlobalObjects.getForms_ListHash().containsKey(DataSource.toLowerCase())) {
//                                                    OutputData = AppConstants.GlobalObjects.getForms_ListHash().get(DataSource.toLowerCase());
//                                                }
//                                            }*/
//                                            if (RealmDBHelper.existTable(context, DataSource)) {
//                                                OutputData = RealmDBHelper.getTableDataInLHM(context, DataSource);
//                                            }
//                                        }
//                                        List<String> MappedValues1 = new ArrayList<>();
//
//                                        List<String> ConditionColumn = new ArrayList<>();
//                                        HashMap<String, List<String>> hash_popupdata = new LinkedHashMap<String, List<String>>();
//                                        String Operator = "";
//
//                                        String DefultMarker = assignControl_bean.getOutParam_Marker_defultImage();
//                                        String RenderingType = assignControl_bean.getOutParam_Marker_RenderingType();
//
//                                        if (realmFlag) {
//
//                                        } else {
//
//                                        }
//                                        if (assignControl_bean.getOutParam_MarkerAdvanced_ConditionColumn() != null) {
//                                            ConditionColumn = OutputData.get(assignControl_bean.getOutParam_MarkerAdvanced_ConditionColumn().toLowerCase());
//                                            Operator = assignControl_bean.getOutParam_MarkerAdvanced_Operator();
//                                        }
//                                        if (assignControl_bean.getOutParam_Marker_popupData() != null && assignControl_bean.getOutParam_Marker_popupData().size() > 0) {
//                                            for (int i = 0; i < assignControl_bean.getOutParam_Marker_popupData().size(); i++) {
//                                                if (OutputData.containsKey(assignControl_bean.getOutParam_Marker_popupData().get(i).toLowerCase())) {
//                                                    hash_popupdata.put(assignControl_bean.getOutParam_Marker_popupData().get(i), OutputData.get(assignControl_bean.getOutParam_Marker_popupData().get(i).toLowerCase()));
//                                                }
//                                            }
//
//                                        }
//                                        if (OutputData.size() > 0) {
//                                            MappedValues1.addAll(OutputData.get(controlValue.toLowerCase()));
//                                        }
//                                        if (assignControl_bean.getList_OutParam_MarkerAdvanced_Items() != null && assignControl_bean.getList_OutParam_MarkerAdvanced_Items().size() > 0) {
//                                            List<ImageAdvanced_Mapped_Item> List_OutParam_MarkerAdvanced_Items = assignControl_bean.getList_OutParam_MarkerAdvanced_Items();
//
//                                            mapControl.setMapMarkersDynamically(RenderingType, DefultMarker, MappedValues1, ConditionColumn, Operator, List_OutParam_MarkerAdvanced_Items, assignControl_bean.getOutParam_Marker_popupData(), hash_popupdata);
//                                        } else {
//                                            mapControl.setMapMarkersDynamically(RenderingType, DefultMarker, MappedValues1, null, null, null, assignControl_bean.getOutParam_Marker_popupData(), hash_popupdata);
//                                        }
//                                    }
//
//                                } else if (multiValueControlType.equalsIgnoreCase(CONTROL_TYPE_CALENDAR_EVENT)) {
//                                    CalendarEventControl CalendarEventControl = (CalendarEventControl) List_ControlClassObjects.get(multiValueControlName);
//                                    if (assignType.equalsIgnoreCase("update") || assignType.equalsIgnoreCase("replace")) {
//                                        List<String> MappedValues_Date = new ArrayList<>();
//                                        List<String> MappedValues_Message = new ArrayList<>();
//                                        for (int i = 0; i < assignControl_beanList.size(); i++) {
//
//                                            AssignControl_Bean assignControl_bean = assignControl_beanList.get(i);
//                                            if (assignControl_bean != null) {
//                                                String controlName = assignControl_bean.getControlName();
//                                                String controlValue = assignControl_bean.getControlValue();
//                                                ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                                                boolean isExpression = assignControl_bean.isExpression();
//                                                String finalValue = ehelper.ExpressionHelper(this, controlValue);
//
//                                                if (controlName.equalsIgnoreCase("Date")) {
//                                                    MappedValues_Date = Arrays.asList(finalValue.split("\\,"));
//                                                } else {
//                                                    MappedValues_Message = Arrays.asList(finalValue.split("\\,"));
//                                                }
//                                            }
//
//                                        }
//
//                                        for (int x = 0; x < MappedValues_Date.size(); x++) {
//                                            CalendarEventControl.AddDateDynamically("Single", MappedValues_Date.get(x), MappedValues_Message.get(x));
//                                        }
//                                    }
//                                }
//
//                                break;
//
//                        }
//                    }
//                }
            } else if (typeofSource.contentEquals("Variable")) {
                AssignControl_Bean assignControl_bean = ActionObj.getSv_Single_List_AssignControls();
                if (assignControl_bean.getControlValue() != null) {
                    String controlName = assignControl_bean.getControlName();
                    String controlValue = assignControl_bean.getControlValue();
                    boolean isExpression = assignControl_bean.isExpression();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    controlValue = ehelper.ExpressionHelper(this, controlValue);
                    setVariable(controlName,controlValue,ActionObj);
                }

            } else if (typeofSource.contentEquals("Global Variable")) {
                AssignControl_Bean assignControl_bean = ActionObj.getSv_Single_List_AssignControls();
                if (assignControl_bean.getControlValue() != null) {
                    String controlName = assignControl_bean.getControlName();
                    String controlValue = assignControl_bean.getControlValue();
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    if (controlName.contentEquals("Login Status")) {
                        if (controlValue.contentEquals("True")) {
                            AppConstants.GlobalObjects.setLogin_status("200");
                            sessionManager.createloginstatusSession("200");
                        } else if (controlValue.contentEquals("False")) {
                            AppConstants.GlobalObjects.setLogin_status("100");
                            sessionManager.createloginstatusSession("100");
                        } else {
                            AppConstants.GlobalObjects.setLogin_status(ehelper.ExpressionHelper(this, controlValue));
                            sessionManager.createloginstatusSession(AppConstants.GlobalObjects.getLogin_status());
                        }

                    } else if (controlName.contentEquals("User MobileNo")) {
                        controlValue = ehelper.ExpressionHelper(this, controlValue);
                        AppConstants.GlobalObjects.setUser_MobileNo(controlValue);
                        sessionManager.createloginUserMobileNumberSession(controlValue);
                    } else if (controlName.contentEquals("GPS Current Location")) {
                        controlValue = ehelper.ExpressionHelper(this, controlValue);
                        AppConstants.GlobalObjects.setCurrent_GPS(controlValue);

                    } else if (controlName.contentEquals("User location Name")) {
                        controlValue = ehelper.ExpressionHelper(this, controlValue);
                        AppConstants.GlobalObjects.setUser_location_name(controlValue);
                        PrefManger.putSharedPreferencesString(context, "User location Name", controlValue);
                    } else if (controlName.contentEquals(AppConstants.User_Name)) {
                        controlValue = ehelper.ExpressionHelper(this, controlValue);
                        AppConstants.GlobalObjects.setUser_Name(controlValue);
                        PrefManger.putSharedPreferencesString(context, AppConstants.User_Name, controlValue);
                    }

                }
            }
            if (FromAction == 1) {
                Executeindex++;
                EventExecute();
            } else {
                Executeindex++;
                checkandExecute(IfElseBlock_Bean);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetValue", e);
        }
    }

    private void setVariable(String variableName,String controlValue,ActionWithoutCondition_Bean ActionObj){
        Variable_Bean variable_bean = null;
        AssignControl_Bean assignControl_bean = null;
        if(ActionObj!=null) {
            assignControl_bean = ActionObj.getSv_Single_List_AssignControls();
        }
        List<Variable_Bean> variable_beanList = dataCollectionObject.getList_Varibles();
        for (int i = 0; i < variable_beanList.size(); i++) {
            if (variableName.trim().contentEquals(variable_beanList.get(i).getVariable_Name().trim())) {
                variable_bean = variable_beanList.get(i);
                break;
            }
        }
        if (variable_bean != null) {
            if (variable_bean.getVariable_Type().equalsIgnoreCase("Single")) {
//                            controlValue = ehelper.ExpressionHelper(this, controlValue);
                variable_bean.setVariable_singleValue(controlValue);
                ImproveHelper.setOfflineSingleVariableToSharedPref(context, variable_bean.getVariable_Name(), controlValue);
            } else if (variable_bean.getVariable_Type().equalsIgnoreCase("Multiple")) {
//                            controlValue = ehelper.ExpressionHelper(this, controlValue);
                List<String> values = new ArrayList<String>();
                values.addAll(Arrays.asList(controlValue.split("\\,")));
                variable_bean.setVariable_multiValue(values);
                ImproveHelper.setOfflineMultiVariableToSharedPref(context, variable_bean.getVariable_Name(), Arrays.asList(controlValue.split("\\,")), ",");
            } else {
                //controlValue= RealmDBHelper.getTableDataInJSONArray(context,"20230120125524185ce1164308973").toString();
//                            controlValue = ehelper.ExpressionHelper(this, controlValue);//20230120125524185ce1164308973//20230111163607185a0823c491948
                String datasource = assignControl_bean.getDataSource().substring(1, assignControl_bean.getDataSource().length() - 1);
                String[] split = datasource.split("\\.");
                String tableNameforCols = "";
                if (datasource.startsWith("im:GetData")) {
                    tableNameforCols = split[1];
                }
                Set<String> colNames = RealmDBHelper.getColNames(context, tableNameforCols);
                colNames.add("__distance");
                //insert into realm with variableName as TableName In Multidimensional
                variableName = variableName.toLowerCase();
                if (RealmDBHelper.existTable(context, variableName)) {
                    RealmDBHelper.deleteTable(context, variableName);
                }
                if (controlValue.trim().length() > 0) {
                    RealmDBHelper.createTableFromStringArray(context, variableName, colNames.toArray(new String[0]));
                    RealmDBHelper.insertFromString(context, variableName, colNames.toArray(new String[0]), controlValue);
                    // RealmDBHelper.createTableWithInsertFromAction(context, ActionBean.getSelect_FormName(), response);
                    if (variable_bean.isOffline_Variable()) {
                        RealmDBHelper.updateSaveOfflineTable(context, strAppName, variableName, ActionObj.getActionType(), "Offline");
                    } else {
                        RealmDBHelper.updateSaveOfflineTable(context, strAppName, variableName, ActionObj.getActionType(), "Online");
                    }
                }
            }
        }


    }

    private boolean checkDataViewerValuesListIsEmpty(List<String> list) {
        for (int i = 0; i < list.size(); i++) {
            if (!list.get(i).contentEquals("")) {
                return false;
            }
        }
        return true;
    }

    public void setTwoValuetoControl(AssignControl_Bean assignControl_bean) {
        switch (assignControl_bean.getTwoValueControlType()) {
            case CONTROL_TYPE_PROGRESS:
                ProgressControl progressControl = (ProgressControl) List_ControlClassObjects.get(assignControl_bean.getControlName());
                progressControl.setControlValues(assignControl_bean);
                break;
            case CONTROL_TYPE_COUNT_UP_TIMER:
                CountUpTimerControl countUpTimerControl = (CountUpTimerControl) List_ControlClassObjects.get(assignControl_bean.getControlName());
                countUpTimerControl.setControlValues(assignControl_bean);
                break;
            case CONTROL_TYPE_COUNT_DOWN_TIMER:
                CountDownTimerControl countDownTimerControl = (CountDownTimerControl) List_ControlClassObjects.get(assignControl_bean.getControlName());
                countDownTimerControl.setControlValues(assignControl_bean);
                break;
            case CONTROL_TYPE_CHECKBOX:
                Checkbox checkbox = (Checkbox) List_ControlClassObjects.get(assignControl_bean.getControlName());
                checkbox.setValueToCheckBoxBoolean(assignControl_bean);
                break;

        }
    }

    public void SetValuetoControl(String ControlID, String Value, String valueID, String multiValueControlType) {
        try {
            if (/*!AppConstants.EventFrom_subformOrNot*/multiValueControlType.contentEquals("")) {
                for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                    ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                    boolean checkflag = false;
                    if (temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_DROP_DOWN) ||
                            temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_RADIO_BUTTON) ||
                            temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_CHECK_LIST)) {
                        if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                            checkflag = true;
                        } else if ((temp_controlObj.getControlName().trim() + "_ID").equalsIgnoreCase(ControlID.trim())) {
                            checkflag = true;
                        }

                    } else if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                        checkflag = true;
                    }
                    if (checkflag) {
                        switch (temp_controlObj.getControlType()) {
                            case CONTROL_TYPE_TEXT_INPUT:
                                TextInput clearTextView = (TextInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Value = Value.split("\\,")[0];
                                clearTextView.getCustomEditText().setText(Value);
                                CustomTextView tv_tapTextType = clearTextView.gettap_text();
                                tv_tapTextType.setVisibility(View.GONE);
                                clearTextView.getCustomEditText().setVisibility(View.VISIBLE);
                                break;
                            case CONTROL_TYPE_NUMERIC_INPUT:
                                NumericInput numverTextView = (NumericInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Value = Value.split("\\,")[0];
                                numverTextView.getNumericTextView().setText(Value);
                                CustomTextView tv_numtapTextType = numverTextView.gettap_text();
                                tv_numtapTextType.setVisibility(View.GONE);
                                numverTextView.getNumericTextView().setVisibility(View.VISIBLE);
                                numverTextView.gettap_text().setVisibility(View.GONE);
                                break;
                            case CONTROL_TYPE_PHONE:
                                Phone PhoneView = (Phone) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Value = Value.split("\\,")[0];
                                PhoneView.getCustomEditText().setText(Value);
                                CustomTextView tv_phonetapTextType = PhoneView.gettap_text();
                                tv_phonetapTextType.setVisibility(View.GONE);
                                PhoneView.getCustomEditText().setVisibility(View.VISIBLE);
                                break;
                            case CONTROL_TYPE_EMAIL:
                                Email EmailView = (Email) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Value = Value.split("\\,")[0];
                                EmailView.getCustomEditText().setText(Value);
                                CustomTextView tv_emailtapTextType = EmailView.gettap_text();
                                tv_emailtapTextType.setVisibility(View.GONE);
                                EmailView.getCustomEditText().setVisibility(View.VISIBLE);
                                break;
                            case CONTROL_TYPE_CAMERA:

                                break;
                            case CONTROL_TYPE_IMAGE:
                                Image ImageView = (Image) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                if (Value.startsWith("http")) {

                                    ImageView.SetImagesDynamically(Arrays.asList(Value.split("\\,")));
//                                    Value = Value.split("\\,")[0];
//                                    temp_controlObj.setImageData(Value);
//                                    if (isNetworkStatusAvialable(context)) {
//                                        Glide.with(context).load(Value).into(ImageView.mainImageView);
//                                    }
                                }
                                break;
                            case CONTROL_TYPE_LARGE_INPUT:
                                LargeInput LargeInputView = (LargeInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Value = Value.split("\\,")[0];
                                CustomTextView tv_largetapTextType = LargeInputView.gettap_text();
                                tv_largetapTextType.setVisibility(View.GONE);
                                if (LargeInputView.isEditorModeEnabled()) {
                                    LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                    LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                    LargeInputView.getEditorToolBar().setVisibility(View.VISIBLE);
                                    LargeInputView.getTextEditor().setHtml(Value);
                                } else if (LargeInputView.isHTMLViewerEnabled()) {
                                    LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                    LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                    LargeInputView.getEditorToolBar().setVisibility(View.GONE);
                                    LargeInputView.getTextEditor().setHtml(Value);
                                } else {
                                    LargeInputView.getCustomEditText().setVisibility(View.VISIBLE);
                                    LargeInputView.getCustomEditText().setText(Value);
                                }
                                break;
                            case CONTROL_TYPE_CHECKBOX:
                                Checkbox CheckBoxView = (Checkbox) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                CheckBoxView.setValueToCheckBoxItem(Value);
                                break;
                            case CONTROL_TYPE_FILE_BROWSING:

                                break;
                            case CONTROL_TYPE_CALENDER:

                                break;
                            case CONTROL_TYPE_AUDIO_PLAYER:

                                break;
                            case CONTROL_TYPE_VIDEO_PLAYER:

                                break;
                            case CONTROL_TYPE_PERCENTAGE:
                                Percentage PercentageView = (Percentage) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                PercentageView.getCustomEditText().setText(Value);
                                CustomTextView tv_pertapTextType = PercentageView.gettap_text();
                                tv_pertapTextType.setVisibility(View.GONE);
                                PercentageView.getCustomEditText().setVisibility(View.VISIBLE);
                                break;
                            case CONTROL_TYPE_RADIO_BUTTON:
                                RadioGroupView RGroup = (RadioGroupView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                boolean foundflag = true;
                                /*int childs = RGroup.getRadioGroup().getChildCount();
                                for (int j = 0; j < childs; j++) {
                                    RadioButton rb = (RadioButton) RGroup.getRadioGroup().getChildAt(j);
                                    if (rb.getText().toString().trim().equalsIgnoreCase(Value.trim())) {
                                        foundflag = false;
                                        RGroup.getRadioGroup().check(rb.getId());
                                    }
                                }
                                if (foundflag) {
                                    RadioButton rb = (RadioButton) RGroup.getRadioGroup().getChildAt(RGroup.getRadioGroup().getChildCount() - 1);
                                    if (rb.getText().toString().equalsIgnoreCase(context.getString(R.string.other))) {
                                        RGroup.getRadioGroup().check(rb.getId());
                                        View v = RGroup.getRadioGroupView();
                                        CustomEditText ce_rg_other = v.findViewById(R.id.ce_otherchoice);
                                        ce_rg_other.setText(Value);
                                    }
                                }*/
                                List<Item> itemListR = new ArrayList<>();
                                if (!Value.contentEquals("")) {
                                    String[] valuesR = Value.split("\\,");
                                    if (!valueID.contentEquals("")) {
                                        String[] ids = valueID.split("\\,");

                                        for (int j = 0; j < valuesR.length; j++) {
                                            Item item = new Item();
                                            item.setId(ids[j]);
                                            item.setValue(valuesR[j]);
                                            itemListR.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < valuesR.length; j++) {
                                            Item item = new Item();
                                            item.setId(valuesR[j]);
                                            item.setValue(valuesR[j]);
                                            itemListR.add(item);
                                        }
                                    }
                                }

                                RGroup.setnewItemsListDynamically(itemListR);
                                break;
                            case CONTROL_TYPE_DROP_DOWN:
                                DropDown dropDown = (DropDown) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                boolean dropfoundflag = true;
                                List<Item> itemList = new ArrayList<>();
                                System.out.println("Value===" + Value);
                                if (!Value.contentEquals("")) {
                                    String[] values = Value.split("\\,");
                                    if (!valueID.contentEquals("")) {
                                        String[] ids = valueID.split("\\,");

                                        for (int j = 0; j < values.length; j++) {
                                            Item item = new Item();
                                            item.setId(ids[j]);
                                            item.setValue(values[j]);
                                            itemList.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < values.length; j++) {
                                            Item item = new Item();
                                            item.setId(values[j]);
                                            item.setValue(values[j]);
                                            itemList.add(item);
                                        }
                                    }

                                    dropDown.setnewItemsListDynamically(itemList);
                                } else {
                                    dropDown.setnewItemsListDynamically(new ArrayList<>());
                                }

                                break;

                            case CONTROL_TYPE_CHECK_LIST:
                                CheckList checklist = (CheckList) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                boolean CheckListflag = true;
                                List<Item> itemListC = new ArrayList<>();
                                if (!Value.contentEquals("")) {
                                    String[] valuesC = Value.split("\\,");
                                    if (!valueID.contentEquals("")) {
                                        String[] ids = valueID.split("\\,");

                                        for (int j = 0; j < valuesC.length; j++) {
                                            Item item = new Item();
                                            item.setId(ids[j]);
                                            item.setValue(valuesC[j]);
                                            itemListC.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < valuesC.length; j++) {
                                            Item item = new Item();
                                            item.setId(valuesC[j]);
                                            item.setValue(valuesC[j]);
                                            itemListC.add(item);
                                        }
                                    }
                                }
                                checklist.setnewItemsListDynamically(itemListC);

                                break;
                            case CONTROL_TYPE_SIGNATURE:

                                break;
                            case CONTROL_TYPE_URL_LINK:
                                UrlView urlView = (UrlView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                urlView.setText(Value);
                                break;
                            case CONTROL_TYPE_DECIMAL:
                                DecimalView Decimalview = (DecimalView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Decimalview.getCustomEditText().setText(Value);
                                CustomTextView tv_DectapTextType = Decimalview.gettap_text();
                                tv_DectapTextType.setVisibility(View.GONE);
                                Decimalview.getCustomEditText().setVisibility(View.VISIBLE);
                                break;
                            case CONTROL_TYPE_PASSWORD:
                                Password Passwordview = (Password) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Passwordview.getCustomEditText().setText(Value);
                                LinearLayout ll_tap_text = Passwordview.gettap_text();
                                ll_tap_text.setVisibility(View.GONE);
                                Passwordview.getCustomEditText().setVisibility(View.VISIBLE);

                                break;
                            case CONTROL_TYPE_CURRENCY:
                                Currency Currencyview = (Currency) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                Currencyview.getCustomEditText().setText(Value);
                                CustomTextView tv_CurtapTextType = Currencyview.gettap_text();
                                tv_CurtapTextType.setVisibility(View.GONE);
                                Currencyview.getCustomEditText().setVisibility(View.VISIBLE);
                                break;
                            case CONTROL_TYPE_RATING:
                                break;
                            case CONTROL_TYPE_DYNAMIC_LABEL:
                                DynamicLabel DynamicLabeliew = (DynamicLabel) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                CustomTextView tv_dynamicLabel = DynamicLabeliew.getValueView();
//                                tv_dynamicLabel.setText(Value);
                                DynamicLabeliew.setValue(Value);
                                break;
                            case CONTROL_TYPE_QR_CODE:
                                QRCode qrCode = (QRCode) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                qrCode.createQrCodeDynamically(Value);
                                break;
                            case CONTROL_TYPE_BAR_CODE:
                                BarCode barCode = (BarCode) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                barCode.createBarCodeDynamically(Value);
                                break;
                            case CONTROL_TYPE_AUTO_COMPLETION:
                                AutoCompletionControl autoCompleteTextView = (AutoCompletionControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                List<String> list_values = new ArrayList<>();
                                list_values.addAll(Arrays.asList(Value.split("\\,")));
                                autoCompleteTextView.setList_ControlItems(list_values);
                                break;
                            case CONTROL_TYPE_COUNT_DOWN_TIMER:
                                CountDownTimerControl countDownTimerControl = (CountDownTimerControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                countDownTimerControl.startTimer(Value);

                                break;
                            case CONTROL_TYPE_COUNT_UP_TIMER:
                                CountUpTimerControl countUpTimerControl = (CountUpTimerControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                countUpTimerControl.startTimer(Value);

                                break;
                            case CONTROL_TYPE_VIEWFILE:
                                ViewFileControl viewFileControl = (ViewFileControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                viewFileControl.setFileLink(Value);

                                break;


                        }
                    }
                }
            } else {
                LinkedHashMap<String, Object> ObjectsView = new LinkedHashMap<>();
                ControlObject subobj = null;
                Object ViewObj = null;
                switch (multiValueControlType) {
                    case CONTROL_TYPE_SUBFORM:
                        SubformView subformControl = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        ObjectsView = subformControl.subform_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        ViewObj = ObjectsView.get(ControlID.trim());
                        for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                            if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                                subobj = temp_controlObj;
                                ViewObj = List_ControlClassObjects.get(temp_controlObj.getControlName());
                            }
                        }
                        if (subobj == null) {
                            for (int i = 0; i < subformControl.controlObject.getSubFormControlList().size(); i++) {
                                if (subformControl.controlObject.getSubFormControlList().get(i).getControlName().equalsIgnoreCase(ControlID.trim())) {
                                    subobj = subformControl.controlObject.getSubFormControlList().get(i);
                                }
                            }
                        }
                        break;
                    case CONTROL_TYPE_GRID_CONTROL:
                        GridControl gridControl = (GridControl) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
                        ObjectsView = gridControl.gridControl_List_ControlClassObjects.get(AppConstants.SF_Container_position);
                        ViewObj = ObjectsView.get(ControlID.trim());
                        for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                            ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                            if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                                subobj = temp_controlObj;
                                ViewObj = List_ControlClassObjects.get(temp_controlObj.getControlName());
                            }
                        }
                        if (subobj == null) {
                            for (int i = 0; i < gridControl.controlObject.getSubFormControlList().size(); i++) {
                                if (gridControl.controlObject.getSubFormControlList().get(i).getControlName().equalsIgnoreCase(ControlID.trim())) {
                                    subobj = gridControl.controlObject.getSubFormControlList().get(i);
                                }
                            }
                        }
                        break;
                }
                if (subobj != null) {
                    switch (subobj.getControlType()) {
                        case CONTROL_TYPE_TEXT_INPUT:
                            TextInput clearTextView = (TextInput) ViewObj;
                            clearTextView.getCustomEditText().setText(Value);
                            CustomTextView tv_tapTextType = clearTextView.gettap_text();
                            tv_tapTextType.setVisibility(View.GONE);
                            clearTextView.getCustomEditText().setVisibility(View.VISIBLE);
                            break;
                        case CONTROL_TYPE_NUMERIC_INPUT:
                            NumericInput numverTextView = (NumericInput) ViewObj;
                            numverTextView.getNumericTextView().setText(Value);
                            CustomTextView tv_numtapTextType = numverTextView.gettap_text();
                            tv_numtapTextType.setVisibility(View.GONE);
                            numverTextView.getNumericTextView().setVisibility(View.VISIBLE);
                            numverTextView.gettap_text().setVisibility(View.GONE);
                            break;
                        case CONTROL_TYPE_PHONE:
                            Phone PhoneView = (Phone) ViewObj;
                            PhoneView.getCustomEditText().setText(Value);
                            CustomTextView tv_phonetapTextType = PhoneView.gettap_text();
                            tv_phonetapTextType.setVisibility(View.GONE);
                            PhoneView.getCustomEditText().setVisibility(View.VISIBLE);
                            break;
                        case CONTROL_TYPE_EMAIL:
                            Email EmailView = (Email) ViewObj;
                            EmailView.getCustomEditText().setText(Value);
                            CustomTextView tv_emailtapTextType = EmailView.gettap_text();
                            tv_emailtapTextType.setVisibility(View.GONE);
                            EmailView.getCustomEditText().setVisibility(View.VISIBLE);
                            break;
                        case CONTROL_TYPE_CAMERA:

                            break;
                        case CONTROL_TYPE_IMAGE:
                            Image ImageView = (Image) ViewObj;
                            if (Value.startsWith("http")) {
                                Value = Value.split("\\,")[0];
                                subobj.setImageData(Value);
                                if (isNetworkStatusAvialable(context)) {
                                    Glide.with(context).load(Value).into(ImageView.mainImageView);
                                }
                            }
                            break;
                        case CONTROL_TYPE_LARGE_INPUT:
                            LargeInput LargeInputView = (LargeInput) ViewObj;
                            CustomTextView tv_largetapTextType = LargeInputView.gettap_text();
                            tv_largetapTextType.setVisibility(View.GONE);
                            if (LargeInputView.isEditorModeEnabled()) {
                                LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                LargeInputView.getEditorToolBar().setVisibility(View.VISIBLE);
                                LargeInputView.getTextEditor().setHtml(Value);
                            } else if (LargeInputView.isHTMLViewerEnabled()) {
                                LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                LargeInputView.getEditorToolBar().setVisibility(View.GONE);
                                LargeInputView.getTextEditor().setHtml(Value);
                            } else {
                                LargeInputView.getCustomEditText().setVisibility(View.VISIBLE);
                                LargeInputView.getCustomEditText().setText(Value);
                            }
                            break;
                        case CONTROL_TYPE_CHECKBOX:
                            Checkbox CheckBoxView = (Checkbox) ViewObj;
                            View cbview = CheckBoxView.getCheckboxContainer().getChildAt(0);
//                            CheckBox checkBox = view.findViewById(R.id.checkbox);

                            /* for (int j = 0; j < cbview.getChildCount(); j++) {*/
                            CheckBox cb_main = cbview.findViewById(R.id.checkbox);
                            cb_main.setText(Value);
                            if (valueID.contentEquals("")) {
                                cb_main.setTag(Value);
                            } else {
                                cb_main.setTag(valueID);
                            }
                            cb_main.setChecked(false);
//                                cb_main.setChecked(Boolean.parseBoolean(Value));
                            //}
                            break;
                        case CONTROL_TYPE_FILE_BROWSING:

                            break;
                        case CONTROL_TYPE_CALENDER:

                            Calendar calendar = (Calendar) ViewObj;
                            calendar.getCe_TextType().setVisibility(View.VISIBLE);
                            calendar.getCe_TextType().setText(Value);


                            break;
                        case CONTROL_TYPE_AUDIO_PLAYER:

                            break;
                        case CONTROL_TYPE_VIDEO_PLAYER:

                            break;
                        case CONTROL_TYPE_PERCENTAGE:
                            Percentage PercentageView = (Percentage) ViewObj;
                            PercentageView.getCustomEditText().setText(Value);
                            CustomTextView tv_pertapTextType = PercentageView.gettap_text();
                            tv_pertapTextType.setVisibility(View.GONE);
                            PercentageView.getCustomEditText().setVisibility(View.VISIBLE);
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView RGroup = (RadioGroupView) ViewObj;
                            boolean foundflag = true;
                            List<Item> itemListR = new ArrayList<>();
                            if (!Value.contentEquals("")) {
                                String[] valuesR = Value.split("\\,");
                                if (!valueID.contentEquals("")) {
                                    String[] ids = valueID.split("\\,");

                                    for (int j = 0; j < valuesR.length; j++) {
                                        Item item = new Item();
                                        item.setId(ids[j]);
                                        item.setValue(valuesR[j]);
                                        itemListR.add(item);
                                    }
                                } else {
                                    for (int j = 0; j < valuesR.length; j++) {
                                        Item item = new Item();
                                        item.setId(valuesR[j]);
                                        item.setValue(valuesR[j]);
                                        itemListR.add(item);
                                    }
                                }
                            }

                            RGroup.setnewItemsListDynamically(itemListR);
                            break;
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) ViewObj;
                            boolean dropfoundflag = true;
                            List<Item> itemList = new ArrayList<>();
                            if (!Value.contentEquals("")) {
                                String[] values = Value.split("\\,");
                                if (!valueID.contentEquals("")) {
                                    String[] ids = valueID.split("\\,");

                                    for (int j = 0; j < values.length; j++) {
                                        Item item = new Item();
                                        item.setId(ids[j]);
                                        item.setValue(values[j]);
                                        itemList.add(item);
                                    }
                                } else {
                                    for (int j = 0; j < values.length; j++) {
                                        Item item = new Item();
                                        item.setId(values[j]);
                                        item.setValue(values[j]);
                                        itemList.add(item);
                                    }
                                }

                                dropDown.setnewItemsListDynamically(itemList);
                            } else {
                                dropDown.setnewItemsListDynamically(new ArrayList<>());
                            }
                            break;
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList checklist = (CheckList) ViewObj;
                            boolean CheckListflag = true;
                            List<Item> itemListC = new ArrayList<>();
                            if (!Value.contentEquals("")) {
                                String[] valuesC = Value.split("\\,");
                                if (!valueID.contentEquals("")) {
                                    String[] ids = valueID.split("\\,");

                                    for (int j = 0; j < valuesC.length; j++) {
                                        Item item = new Item();
                                        item.setId(ids[j]);
                                        item.setValue(valuesC[j]);
                                        itemListC.add(item);
                                    }
                                } else {
                                    for (int j = 0; j < valuesC.length; j++) {
                                        Item item = new Item();
                                        item.setId(valuesC[j]);
                                        item.setValue(valuesC[j]);
                                        itemListC.add(item);
                                    }
                                }
                            }
                            checklist.setnewItemsListDynamically(itemListC);
                            break;
                        case CONTROL_TYPE_SIGNATURE:

                            break;
                        case CONTROL_TYPE_URL_LINK:
                            break;
                        case CONTROL_TYPE_DECIMAL:
                            DecimalView Decimalview = (DecimalView) ViewObj;
                            Decimalview.getCustomEditText().setText(Value);
                            CustomTextView tv_DectapTextType = Decimalview.gettap_text();
                            tv_DectapTextType.setVisibility(View.GONE);
                            Decimalview.getCustomEditText().setVisibility(View.VISIBLE);
                            break;
                        case CONTROL_TYPE_PASSWORD:
                            Password Passwordview = (Password) ViewObj;
                            Passwordview.getCustomEditText().setText(Value);
                            LinearLayout ll_tap_text = Passwordview.gettap_text();
                            ll_tap_text.setVisibility(View.GONE);
                            Passwordview.getCustomEditText().setVisibility(View.VISIBLE);

                            break;
                        case CONTROL_TYPE_CURRENCY:
                            Currency Currencyview = (Currency) ViewObj;
                            Currencyview.getCustomEditText().setText(Value);
                            CustomTextView tv_CurtapTextType = Currencyview.gettap_text();
                            tv_CurtapTextType.setVisibility(View.GONE);
                            Currencyview.getCustomEditText().setVisibility(View.VISIBLE);
                            break;
                        case CONTROL_TYPE_RATING:
                            break;
                        case CONTROL_TYPE_DYNAMIC_LABEL:
                            DynamicLabel DynamicLabeliew = (DynamicLabel) ViewObj;
                            CustomTextView tv_dynamicLabel = DynamicLabeliew.getValueView();
//                            tv_dynamicLabel.setText(Value);
                            DynamicLabeliew.setValue(Value);
                            break;
                        case CONTROL_TYPE_QR_CODE:
                            QRCode qrCode = (QRCode) ViewObj;
                            if (!Value.contentEquals("")) {
                                qrCode.createQrCodeDynamically(Value);
                            }
                            break;
                        case CONTROL_TYPE_BAR_CODE:
                            BarCode barCode = (BarCode) ViewObj;
                            if (!Value.contentEquals("")) {
                                barCode.createBarCodeDynamically(Value);
                            }
                            break;
                        case CONTROL_TYPE_DATA_CONTROL:
                            DataControl dataControl = (DataControl) ViewObj;
                            if (!Value.contentEquals("")) {
                                SearchableSpinner searchableSpinner = dataControl.getSpinner();
                                searchableSpinner.setItemID(Value);
                            }
                            break;
                        case CONTROL_TYPE_AUTO_COMPLETION:
                            AutoCompletionControl autoCompleteTextView = (AutoCompletionControl) ViewObj;
                            List<String> list_values = new ArrayList<>();
                            list_values.addAll(Arrays.asList(Value.split("\\,")));
                            autoCompleteTextView.setList_ControlItems(list_values);
                            break;
                    }

                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetValuetoControl", e);
        }
    }

    public void SetMultipleValuesbyControlID(String ControlID, List<String> Value, List<String> Ids) {
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                List<Item> AppendValues_list = new ArrayList<Item>();
                List<String> AppendValuesStr_list = new ArrayList<String>();
                if (Value != null) {
                    for (int j = 0; j < Value.size(); j++) {
                        Item item = new Item();
                        item.setValue(Value.get(j));
                        if (Ids != null) {
                            item.setId(Ids.get(j));
                        } else {
                            item.setId(Value.get(j));
                        }
                        AppendValuesStr_list.add(Value.get(j));
                        AppendValues_list.add(item);
                    }


                }
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                    switch (temp_controlObj.getControlType()) {
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            boolean dropfoundflag = true;

                            Log.e("Result: ", "" + AppendValues_list);
                            if (dropfoundflag) {
                                dropDown.setnewItemsListDynamically(AppendValues_list);
                            }
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView RGroup = (RadioGroupView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            RGroup.setnewItemsListDynamically(AppendValues_list);
                            break;
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList checklist = (CheckList) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            checklist.setnewItemsListDynamically(AppendValues_list);
                            break;
                        case CONTROL_TYPE_CHECKBOX:
                            Checkbox checkBox = (Checkbox) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            checkBox.setValueToCheckBoxItems(Value);

                            break;
                        case CONTROL_TYPE_AUTO_COMPLETION:
                            AutoCompletionControl autoCompletionControl = (AutoCompletionControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            autoCompletionControl.setList_ControlItems(AppendValuesStr_list);

                            break;

                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetMultipleValuesbyControlID", e);
        }
    }

    public void SetMultipleValuestoImageControl(String ControlID, List<String> Value) {
        try {
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                List<Item> AppendValues_list = new ArrayList<Item>();
                List<String> AppendValuesStr_list = new ArrayList<String>();
                if (Value != null) {
                    for (int j = 0; j < Value.size(); j++) {
                        Item item = new Item();
                        item.setValue(Value.get(j));
                        AppendValuesStr_list.add(Value.get(j));
                        AppendValues_list.add(item);
                    }


                }
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                    switch (temp_controlObj.getControlType()) {
                        case CONTROL_TYPE_IMAGE:
                            Image Image = (Image) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Image.SetImagesDynamically(AppendValuesStr_list);

                            break;

                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetMultipleValuesbyControlID", e);
        }
    }

    public void SetMultipleValues_New(ControlObject temp_controlObj, Object viewObject, String typeOfAppend, List<Item> itemList) {
        try {
            switch (temp_controlObj.getControlType()) {
                case CONTROL_TYPE_DROP_DOWN:
                    DropDown dropDown = (DropDown) viewObject;
                    if (typeOfAppend.contentEquals("Replace")) {
                        dropDown.setnewItemsListDynamically(itemList);
                    } else {
                        dropDown.addItemsListDynamically(itemList);
                    }
                    break;
                case CONTROL_TYPE_RADIO_BUTTON:
                    RadioGroupView RadioGroup = (RadioGroupView) viewObject;
                    if (typeOfAppend.contentEquals("Replace")) {
                        RadioGroup.setnewItemsListDynamically(itemList);
                    } else {
                        RadioGroup.addNewItemsListDynamically(itemList);
                    }
                    break;
                case CONTROL_TYPE_CHECK_LIST:
                    CheckList checklist = (CheckList) viewObject;
                    if (typeOfAppend.contentEquals("Replace")) {
                        checklist.setNewItemsListDynamically(itemList);
                    } else {
                        checklist.addNewItemsListDynamically(itemList);
                    }
                    break;
                case CONTROL_TYPE_CHECKBOX:
                    Checkbox checkbox = (Checkbox) viewObject;
                    if (typeOfAppend.contentEquals("Replace")) {
                        checkbox.setValueToCheckBoxItemslistReplace(itemList);
                    } else {
                        checkbox.setValueToCheckBoxItemslistAppend(itemList);
                    }
                    break;
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetMultipleValues_New", e);
        }
    }

    public void CallAPIQueryServices(final ActionWithoutCondition_Bean APIActionObject) {
        try {
            String APIName = APIActionObject.getSelectedAPIName();
            final List<API_InputParam_Bean> list_input = APIActionObject.getList_API_InParams();
            InputMap.clear();

            Map<String, String> data = new HashMap<>();
//            data.put("OrgId", AppConstants.GlobalObjects.getOrg_Name());
//            data.put("loginID", GlobalObjects.getUser_ID());
            data.put("APIName", APIName);

            ImproveHelper.improveLog(TAG, "InParams for GetAPIDetailsNew1 ", new Gson().toJson(data));

            Call<String> call = getServices.GetAPIDetailsNew1(sessionManager.getAuthorizationTokenId(), data);
            call.enqueue(new Callback<String>() {
                @Override
                public void onResponse(Call<String> call, Response<String> response) {

                    try {
                        String resBody=response.body();
                        if(response.code()==401){
                            showToastRunOnUI(MainActivity.this,response.message());
                            resBody="{\"Status\":\"200\",\"Message\":\"Success\",\"ServiceData\":{\"ServiceID\":\"API_20230717155817670\",\"ServiceName\":\"FiveLevelsInputAPI\",\"ServiceDesc\":\"For testing\",\"ServiceType\":\"Web API Service\",\"ServiceTypeShortCut\":\"webapi\",\"ServiceURL\":\"http://182.18.157.124/Bhargo_V4.0_Demo_DbConnections/V1.0/APIBuilderRemainingCases/MirrorForInputObject\",\"ServiceURL_Mask\":\"http://182.18.157.124/Bhargo_V4.0_Demo_DbConnections/V1.0/APIBuilder/APIServiceExecutionMethod\",\"SuccessCaseDetails\":{\"InputParameters\":{\"Input Parameters\":[],\"Authorization\":{\"authType\":\"1\"},\"Header\":[],\"Body\":{\"postInputType\":\"4\",\"postInputRawType\":\"2\",\"postInputRawTypeContent\":{\"States\":[{\"StateID\":\"01\",\"StateName\":\"Andhra Pradesh\",\"AreaCoordinates\":[\"71.88978\",\"69.09885\",\"67.966434\"],\"Districts\":[{\"DistrictID\":\"01\",\"DistrictName\":\"Visakha Patnam\",\"Mandals\":[{\"MandalID\":\"01\",\"MandalName\":\"Pendurthi\",\"Schools\":[{\"SchoolID\":\"01\",\"SchoolName\":\"Mahathi Public School\",\"Address\":{\"DoorNo\":\"1-111\",\"LandMark\":\"Near CMR Shopping Mall\",\"Village\":\"Pursotha puram\"},\"Classes\":[]}]},{\"MandalID\":\"02\",\"MandalName\":\"Kanchara Palem\",\"Schools\":[]}]},{\"DistrictID\":\"02\",\"DistrictName\":\"Anakapalli\",\"Mandals\":[{\"MandalID\":\"01\",\"MandalName\":\"Sabbavaram\",\"Schools\":[{\"SchoolID\":\"01\",\"SchoolName\":\"Mother Public School\",\"Address\":{\"DoorNo\":\"1-110\",\"LandMark\":\"Opp. Ramalayam\",\"Village\":\"Amrutha puram\"},\"Classes\":[{\"ClassID\":\"01\",\"ClassName\":\"10th\",\"Sections\":[{\"SectionID\":\"01\",\"SectionName\":\"A\"}]}]}]},{\"MandalID\":\"02\",\"MandalName\":\"Parawada\",\"Schools\":[]}]}]},{\"StateID\":\"02\",\"StateName\":\"Bihar\",\"AreaCoordinates\":[\"72.88978\",\"83.09885\",\"85.966434\"],\"Districts\":[]}]},\"postInputRawTypeContentKeys\":[{\"keyName\":\"States\",\"path\":\"States\",\"pathRepresents\":\"JArray\",\"type\":\"Multiple\"},{\"keyName\":\"StateID\",\"path\":\"States/StateID\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"StateName\",\"path\":\"States/StateName\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"AreaCoordinates\",\"path\":\"States/AreaCoordinates\",\"pathRepresents\":\"Array\",\"type\":\"Multiple\"},{\"keyName\":\"Districts\",\"path\":\"States/Districts\",\"pathRepresents\":\"JArray\",\"type\":\"Multiple\"},{\"keyName\":\"DistrictID\",\"path\":\"States/Districts/DistrictID\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"DistrictName\",\"path\":\"States/Districts/DistrictName\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"Mandals\",\"path\":\"States/Districts/Mandals\",\"pathRepresents\":\"JArray\",\"type\":\"Multiple\"},{\"keyName\":\"MandalID\",\"path\":\"States/Districts/Mandals/MandalID\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"MandalName\",\"path\":\"States/Districts/Mandals/MandalName\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"Schools\",\"path\":\"States/Districts/Mandals/Schools\",\"pathRepresents\":\"JArray\",\"type\":\"Multiple\"},{\"keyName\":\"SchoolID\",\"path\":\"States/Districts/Mandals/Schools/SchoolID\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"SchoolName\",\"path\":\"States/Districts/Mandals/Schools/SchoolName\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"Address\",\"path\":\"States/Districts/Mandals/Schools/Address\",\"pathRepresents\":\"JObject\",\"type\":\"Single\"},{\"keyName\":\"DoorNo\",\"path\":\"States/Districts/Mandals/Schools/Address/DoorNo\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"LandMark\",\"path\":\"States/Districts/Mandals/Schools/Address/LandMark\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"Village\",\"path\":\"States/Districts/Mandals/Schools/Address/Village\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"Classes\",\"path\":\"States/Districts/Mandals/Schools/Classes\",\"pathRepresents\":\"JArray\",\"type\":\"Multiple\"},{\"keyName\":\"ClassID\",\"path\":\"States/Districts/Mandals/Schools/Classes/ClassID\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"ClassName\",\"path\":\"States/Districts/Mandals/Schools/Classes/ClassName\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"Sections\",\"path\":\"States/Districts/Mandals/Schools/Classes/Sections\",\"pathRepresents\":\"JArray\",\"type\":\"Multiple\"},{\"keyName\":\"SectionID\",\"path\":\"States/Districts/Mandals/Schools/Classes/Sections/SectionID\",\"pathRepresents\":\"Value\",\"type\":\"Single\"},{\"keyName\":\"SectionName\",\"path\":\"States/Districts/Mandals/Schools/Classes/Sections/SectionName\",\"pathRepresents\":\"Value\",\"type\":\"Single\"}]}},\"ManualResponse\":\"No\",\"OutputType\":\"JSON\",\"hdTestOutputData\":\"{\\\"Status\\\":\\\"200\\\",\\\"Message\\\":\\\"Success\\\",\\\"Data\\\":{\\\"States\\\":[{\\\"StateID\\\":\\\"01\\\",\\\"StateName\\\":\\\"Andhra Pradesh\\\",\\\"AreaCoordinates\\\":[\\\"71.88978\\\",\\\"69.09885\\\",\\\"67.966434\\\"],\\\"Districts\\\":[{\\\"DistrictID\\\":\\\"01\\\",\\\"DistrictName\\\":\\\"Visakha Patnam\\\",\\\"Mandals\\\":[{\\\"MandalID\\\":\\\"01\\\",\\\"MandalName\\\":\\\"Pendurthi\\\",\\\"Schools\\\":[{\\\"SchoolID\\\":\\\"01\\\",\\\"SchoolName\\\":\\\"Mahathi Public School\\\",\\\"Address\\\":{\\\"DoorNo\\\":\\\"1-111\\\",\\\"LandMark\\\":\\\"Near CMR Shopping Mall\\\",\\\"Village\\\":\\\"Pursotha puram\\\"},\\\"Classes\\\":[]}]},{\\\"MandalID\\\":\\\"02\\\",\\\"MandalName\\\":\\\"Kanchara Palem\\\",\\\"Schools\\\":[]}]},{\\\"DistrictID\\\":\\\"02\\\",\\\"DistrictName\\\":\\\"Anakapalli\\\",\\\"Mandals\\\":[{\\\"MandalID\\\":\\\"01\\\",\\\"MandalName\\\":\\\"Sabbavaram\\\",\\\"Schools\\\":[{\\\"SchoolID\\\":\\\"01\\\",\\\"SchoolName\\\":\\\"Mother Public School\\\",\\\"Address\\\":{\\\"DoorNo\\\":\\\"1-110\\\",\\\"LandMark\\\":\\\"Opp. Ramalayam\\\",\\\"Village\\\":\\\"Amrutha puram\\\"},\\\"Classes\\\":[{\\\"ClassID\\\":\\\"01\\\",\\\"ClassName\\\":\\\"10th\\\",\\\"Sections\\\":[{\\\"SectionID\\\":\\\"01\\\",\\\"SectionName\\\":\\\"A\\\"}]}]}]},{\\\"MandalID\\\":\\\"02\\\",\\\"MandalName\\\":\\\"Parawada\\\",\\\"Schools\\\":[]}]}]},{\\\"StateID\\\":\\\"02\\\",\\\"StateName\\\":\\\"Bihar\\\",\\\"AreaCoordinates\\\":[\\\"72.88978\\\",\\\"83.09885\\\",\\\"85.966434\\\"],\\\"Districts\\\":[]}]}}\",\"hdOutputSaveFlow\":\"{\\\"structure\\\":[{\\\"keyName\\\":\\\"Status\\\",\\\"path\\\":\\\"Status\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Message\\\",\\\"path\\\":\\\"Message\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Data\\\",\\\"path\\\":\\\"Data\\\",\\\"pathRepresents\\\":\\\"JObject\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"States\\\",\\\"path\\\":\\\"Data/States\\\",\\\"pathRepresents\\\":\\\"JArray\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"StateID\\\",\\\"path\\\":\\\"Data/States/StateID\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"StateName\\\",\\\"path\\\":\\\"Data/States/StateName\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"AreaCoordinates\\\",\\\"path\\\":\\\"Data/States/AreaCoordinates\\\",\\\"pathRepresents\\\":\\\"Array\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"Districts\\\",\\\"path\\\":\\\"Data/States/Districts\\\",\\\"pathRepresents\\\":\\\"JArray\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"DistrictID\\\",\\\"path\\\":\\\"Data/States/Districts/DistrictID\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"DistrictName\\\",\\\"path\\\":\\\"Data/States/Districts/DistrictName\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Mandals\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals\\\",\\\"pathRepresents\\\":\\\"JArray\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"MandalID\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/MandalID\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"MandalName\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/MandalName\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Schools\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools\\\",\\\"pathRepresents\\\":\\\"JArray\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"SchoolID\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/SchoolID\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"SchoolName\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/SchoolName\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Address\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Address\\\",\\\"pathRepresents\\\":\\\"JObject\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"DoorNo\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Address/DoorNo\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"LandMark\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Address/LandMark\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Village\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Address/Village\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Classes\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Classes\\\",\\\"pathRepresents\\\":\\\"JArray\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"ClassID\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Classes/ClassID\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"ClassName\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Classes/ClassName\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"Sections\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Classes/Sections\\\",\\\"pathRepresents\\\":\\\"JArray\\\",\\\"type\\\":\\\"Multiple\\\"},{\\\"keyName\\\":\\\"SectionID\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionID\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"},{\\\"keyName\\\":\\\"SectionName\\\",\\\"path\\\":\\\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionName\\\",\\\"pathRepresents\\\":\\\"Value\\\",\\\"type\\\":\\\"Single\\\"}]}\",\"OutputParameters\":[{\"KeyName\":\"Status\",\"Path\":\"Status\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Message\",\"Path\":\"Message\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Data\",\"Path\":\"Data\",\"PathRepresents\":\"JObject\"},{\"KeyName\":\"States\",\"Path\":\"Data/States\",\"PathRepresents\":\"JArray\"},{\"KeyName\":\"StateID\",\"Path\":\"Data/States/StateID\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"StateName\",\"Path\":\"Data/States/StateName\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"AreaCoordinates\",\"Path\":\"Data/States/AreaCoordinates\",\"PathRepresents\":\"Array\"},{\"KeyName\":\"Districts\",\"Path\":\"Data/States/Districts\",\"PathRepresents\":\"JArray\"},{\"KeyName\":\"DistrictID\",\"Path\":\"Data/States/Districts/DistrictID\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"DistrictName\",\"Path\":\"Data/States/Districts/DistrictName\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Mandals\",\"Path\":\"Data/States/Districts/Mandals\",\"PathRepresents\":\"JArray\"},{\"KeyName\":\"MandalID\",\"Path\":\"Data/States/Districts/Mandals/MandalID\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"MandalName\",\"Path\":\"Data/States/Districts/Mandals/MandalName\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Schools\",\"Path\":\"Data/States/Districts/Mandals/Schools\",\"PathRepresents\":\"JArray\"},{\"KeyName\":\"SchoolID\",\"Path\":\"Data/States/Districts/Mandals/Schools/SchoolID\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"SchoolName\",\"Path\":\"Data/States/Districts/Mandals/Schools/SchoolName\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Address\",\"Path\":\"Data/States/Districts/Mandals/Schools/Address\",\"PathRepresents\":\"JObject\"},{\"KeyName\":\"DoorNo\",\"Path\":\"Data/States/Districts/Mandals/Schools/Address/DoorNo\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"LandMark\",\"Path\":\"Data/States/Districts/Mandals/Schools/Address/LandMark\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Village\",\"Path\":\"Data/States/Districts/Mandals/Schools/Address/Village\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Classes\",\"Path\":\"Data/States/Districts/Mandals/Schools/Classes\",\"PathRepresents\":\"JArray\"},{\"KeyName\":\"ClassID\",\"Path\":\"Data/States/Districts/Mandals/Schools/Classes/ClassID\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"ClassName\",\"Path\":\"Data/States/Districts/Mandals/Schools/Classes/ClassName\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"Sections\",\"Path\":\"Data/States/Districts/Mandals/Schools/Classes/Sections\",\"PathRepresents\":\"JArray\"},{\"KeyName\":\"SectionID\",\"Path\":\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionID\",\"PathRepresents\":\"Value\"},{\"KeyName\":\"SectionName\",\"Path\":\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionName\",\"PathRepresents\":\"Value\"}]},\"FailureCaseDetails\":{},\"OutputType\":\"JSON\",\"Accessibility\":\"Public\",\"XMLFormat\":\"<?xml version=\\\"1.0\\\"?><APIService><CreatedUserID>BHAR00000001</CreatedUserID><CreatedLoginTypeID>1</CreatedLoginTypeID><CreatedLoginTypeDependentID>1</CreatedLoginTypeDependentID><ServiceID>API_20230717155817670</ServiceID><ServiceName>FiveLevelsInputAPI</ServiceName><ServiceName_Logic>FiveLevelsInputAPI</ServiceName_Logic><ServiceDesc>For testing</ServiceDesc><Accessibility>Public</Accessibility><ServiceSource>Service Based</ServiceSource><ServiceType>Web API Service</ServiceType><ServiceCallsAt>Mobile</ServiceCallsAt><ServiceResult>Single</ServiceResult><OutputType>JSON</OutputType><MethodType>POST</MethodType><ServiceURL>http://182.18.157.124/Bhargo_V4.0_Demo_DbConnections/V1.0/APIBuilderRemainingCases/MirrorForInputObject</ServiceURL><ServiceURL_Mask>http://182.18.157.124/Bhargo_V4.0_Demo_DbConnections/V1.0/APIBuilder/APIServiceExecutionMethod</ServiceURL_Mask><MethodName></MethodName><SuccessCaseDetails>{\\r\\n  \\\"InputParameters\\\": {\\r\\n    \\\"Input Parameters\\\": [],\\r\\n    \\\"Authorization\\\": {\\r\\n      \\\"authType\\\": \\\"1\\\"\\r\\n    },\\r\\n    \\\"Header\\\": [],\\r\\n    \\\"Body\\\": {\\r\\n      \\\"postInputType\\\": \\\"4\\\",\\r\\n      \\\"postInputRawType\\\": \\\"2\\\",\\r\\n      \\\"postInputRawTypeContent\\\": {\\r\\n        \\\"States\\\": [\\r\\n          {\\r\\n            \\\"StateID\\\": \\\"01\\\",\\r\\n            \\\"StateName\\\": \\\"Andhra Pradesh\\\",\\r\\n            \\\"AreaCoordinates\\\": [\\r\\n              \\\"71.88978\\\",\\r\\n              \\\"69.09885\\\",\\r\\n              \\\"67.966434\\\"\\r\\n            ],\\r\\n            \\\"Districts\\\": [\\r\\n              {\\r\\n                \\\"DistrictID\\\": \\\"01\\\",\\r\\n                \\\"DistrictName\\\": \\\"Visakha Patnam\\\",\\r\\n                \\\"Mandals\\\": [\\r\\n                  {\\r\\n                    \\\"MandalID\\\": \\\"01\\\",\\r\\n                    \\\"MandalName\\\": \\\"Pendurthi\\\",\\r\\n                    \\\"Schools\\\": [\\r\\n                      {\\r\\n                        \\\"SchoolID\\\": \\\"01\\\",\\r\\n                        \\\"SchoolName\\\": \\\"Mahathi Public School\\\",\\r\\n                        \\\"Address\\\": {\\r\\n                          \\\"DoorNo\\\": \\\"1-111\\\",\\r\\n                          \\\"LandMark\\\": \\\"Near CMR Shopping Mall\\\",\\r\\n                          \\\"Village\\\": \\\"Pursotha puram\\\"\\r\\n                        },\\r\\n                        \\\"Classes\\\": []\\r\\n                      }\\r\\n                    ]\\r\\n                  },\\r\\n                  {\\r\\n                    \\\"MandalID\\\": \\\"02\\\",\\r\\n                    \\\"MandalName\\\": \\\"Kanchara Palem\\\",\\r\\n                    \\\"Schools\\\": []\\r\\n                  }\\r\\n                ]\\r\\n              },\\r\\n              {\\r\\n                \\\"DistrictID\\\": \\\"02\\\",\\r\\n                \\\"DistrictName\\\": \\\"Anakapalli\\\",\\r\\n                \\\"Mandals\\\": [\\r\\n                  {\\r\\n                    \\\"MandalID\\\": \\\"01\\\",\\r\\n                    \\\"MandalName\\\": \\\"Sabbavaram\\\",\\r\\n                    \\\"Schools\\\": [\\r\\n                      {\\r\\n                        \\\"SchoolID\\\": \\\"01\\\",\\r\\n                        \\\"SchoolName\\\": \\\"Mother Public School\\\",\\r\\n                        \\\"Address\\\": {\\r\\n                          \\\"DoorNo\\\": \\\"1-110\\\",\\r\\n                          \\\"LandMark\\\": \\\"Opp. Ramalayam\\\",\\r\\n                          \\\"Village\\\": \\\"Amrutha puram\\\"\\r\\n                        },\\r\\n                        \\\"Classes\\\": [\\r\\n                          {\\r\\n                            \\\"ClassID\\\": \\\"01\\\",\\r\\n                            \\\"ClassName\\\": \\\"10th\\\",\\r\\n                            \\\"Sections\\\": [\\r\\n                              {\\r\\n                                \\\"SectionID\\\": \\\"01\\\",\\r\\n                                \\\"SectionName\\\": \\\"A\\\"\\r\\n                              }\\r\\n                            ]\\r\\n                          }\\r\\n                        ]\\r\\n                      }\\r\\n                    ]\\r\\n                  },\\r\\n                  {\\r\\n                    \\\"MandalID\\\": \\\"02\\\",\\r\\n                    \\\"MandalName\\\": \\\"Parawada\\\",\\r\\n                    \\\"Schools\\\": []\\r\\n                  }\\r\\n                ]\\r\\n              }\\r\\n            ]\\r\\n          },\\r\\n          {\\r\\n            \\\"StateID\\\": \\\"02\\\",\\r\\n            \\\"StateName\\\": \\\"Bihar\\\",\\r\\n            \\\"AreaCoordinates\\\": [\\r\\n              \\\"72.88978\\\",\\r\\n              \\\"83.09885\\\",\\r\\n              \\\"85.966434\\\"\\r\\n            ],\\r\\n            \\\"Districts\\\": []\\r\\n          }\\r\\n        ]\\r\\n      },\\r\\n      \\\"postInputRawTypeContentKeys\\\": [\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"States\\\",\\r\\n          \\\"path\\\": \\\"States\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JArray\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"StateID\\\",\\r\\n          \\\"path\\\": \\\"States/StateID\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"StateName\\\",\\r\\n          \\\"path\\\": \\\"States/StateName\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"AreaCoordinates\\\",\\r\\n          \\\"path\\\": \\\"States/AreaCoordinates\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Array\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Districts\\\",\\r\\n          \\\"path\\\": \\\"States/Districts\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JArray\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"DistrictID\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/DistrictID\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"DistrictName\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/DistrictName\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Mandals\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JArray\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"MandalID\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/MandalID\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"MandalName\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/MandalName\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Schools\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JArray\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"SchoolID\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/SchoolID\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"SchoolName\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/SchoolName\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Address\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Address\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JObject\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"DoorNo\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Address/DoorNo\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"LandMark\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Address/LandMark\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Village\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Address/Village\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Classes\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Classes\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JArray\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"ClassID\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Classes/ClassID\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"ClassName\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Classes/ClassName\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"Sections\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Classes/Sections\\\",\\r\\n          \\\"pathRepresents\\\": \\\"JArray\\\",\\r\\n          \\\"type\\\": \\\"Multiple\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"SectionID\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Classes/Sections/SectionID\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        },\\r\\n        {\\r\\n          \\\"keyName\\\": \\\"SectionName\\\",\\r\\n          \\\"path\\\": \\\"States/Districts/Mandals/Schools/Classes/Sections/SectionName\\\",\\r\\n          \\\"pathRepresents\\\": \\\"Value\\\",\\r\\n          \\\"type\\\": \\\"Single\\\"\\r\\n        }\\r\\n      ]\\r\\n    }\\r\\n  },\\r\\n  \\\"ManualResponse\\\": \\\"No\\\",\\r\\n  \\\"OutputType\\\": \\\"JSON\\\",\\r\\n  \\\"hdTestOutputData\\\": \\\"{\\\\\\\"Status\\\\\\\":\\\\\\\"200\\\\\\\",\\\\\\\"Message\\\\\\\":\\\\\\\"Success\\\\\\\",\\\\\\\"Data\\\\\\\":{\\\\\\\"States\\\\\\\":[{\\\\\\\"StateID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"StateName\\\\\\\":\\\\\\\"Andhra Pradesh\\\\\\\",\\\\\\\"AreaCoordinates\\\\\\\":[\\\\\\\"71.88978\\\\\\\",\\\\\\\"69.09885\\\\\\\",\\\\\\\"67.966434\\\\\\\"],\\\\\\\"Districts\\\\\\\":[{\\\\\\\"DistrictID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"DistrictName\\\\\\\":\\\\\\\"Visakha Patnam\\\\\\\",\\\\\\\"Mandals\\\\\\\":[{\\\\\\\"MandalID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"MandalName\\\\\\\":\\\\\\\"Pendurthi\\\\\\\",\\\\\\\"Schools\\\\\\\":[{\\\\\\\"SchoolID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"SchoolName\\\\\\\":\\\\\\\"Mahathi Public School\\\\\\\",\\\\\\\"Address\\\\\\\":{\\\\\\\"DoorNo\\\\\\\":\\\\\\\"1-111\\\\\\\",\\\\\\\"LandMark\\\\\\\":\\\\\\\"Near CMR Shopping Mall\\\\\\\",\\\\\\\"Village\\\\\\\":\\\\\\\"Pursotha puram\\\\\\\"},\\\\\\\"Classes\\\\\\\":[]}]},{\\\\\\\"MandalID\\\\\\\":\\\\\\\"02\\\\\\\",\\\\\\\"MandalName\\\\\\\":\\\\\\\"Kanchara Palem\\\\\\\",\\\\\\\"Schools\\\\\\\":[]}]},{\\\\\\\"DistrictID\\\\\\\":\\\\\\\"02\\\\\\\",\\\\\\\"DistrictName\\\\\\\":\\\\\\\"Anakapalli\\\\\\\",\\\\\\\"Mandals\\\\\\\":[{\\\\\\\"MandalID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"MandalName\\\\\\\":\\\\\\\"Sabbavaram\\\\\\\",\\\\\\\"Schools\\\\\\\":[{\\\\\\\"SchoolID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"SchoolName\\\\\\\":\\\\\\\"Mother Public School\\\\\\\",\\\\\\\"Address\\\\\\\":{\\\\\\\"DoorNo\\\\\\\":\\\\\\\"1-110\\\\\\\",\\\\\\\"LandMark\\\\\\\":\\\\\\\"Opp. Ramalayam\\\\\\\",\\\\\\\"Village\\\\\\\":\\\\\\\"Amrutha puram\\\\\\\"},\\\\\\\"Classes\\\\\\\":[{\\\\\\\"ClassID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"ClassName\\\\\\\":\\\\\\\"10th\\\\\\\",\\\\\\\"Sections\\\\\\\":[{\\\\\\\"SectionID\\\\\\\":\\\\\\\"01\\\\\\\",\\\\\\\"SectionName\\\\\\\":\\\\\\\"A\\\\\\\"}]}]}]},{\\\\\\\"MandalID\\\\\\\":\\\\\\\"02\\\\\\\",\\\\\\\"MandalName\\\\\\\":\\\\\\\"Parawada\\\\\\\",\\\\\\\"Schools\\\\\\\":[]}]}]},{\\\\\\\"StateID\\\\\\\":\\\\\\\"02\\\\\\\",\\\\\\\"StateName\\\\\\\":\\\\\\\"Bihar\\\\\\\",\\\\\\\"AreaCoordinates\\\\\\\":[\\\\\\\"72.88978\\\\\\\",\\\\\\\"83.09885\\\\\\\",\\\\\\\"85.966434\\\\\\\"],\\\\\\\"Districts\\\\\\\":[]}]}}\\\",\\r\\n  \\\"hdOutputSaveFlow\\\": \\\"{\\\\\\\"structure\\\\\\\":[{\\\\\\\"keyName\\\\\\\":\\\\\\\"Status\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Status\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Message\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Message\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Data\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JObject\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"States\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JArray\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"StateID\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/StateID\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"StateName\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/StateName\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"AreaCoordinates\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/AreaCoordinates\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Array\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Districts\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JArray\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"DistrictID\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/DistrictID\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"DistrictName\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/DistrictName\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Mandals\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JArray\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"MandalID\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/MandalID\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"MandalName\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/MandalName\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Schools\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JArray\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"SchoolID\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/SchoolID\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"SchoolName\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/SchoolName\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Address\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Address\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JObject\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"DoorNo\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Address/DoorNo\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"LandMark\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Address/LandMark\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Village\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Address/Village\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Classes\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Classes\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JArray\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"ClassID\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Classes/ClassID\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"ClassName\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Classes/ClassName\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"Sections\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Classes/Sections\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"JArray\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Multiple\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"SectionID\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionID\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"},{\\\\\\\"keyName\\\\\\\":\\\\\\\"SectionName\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionName\\\\\\\",\\\\\\\"pathRepresents\\\\\\\":\\\\\\\"Value\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"Single\\\\\\\"}]}\\\",\\r\\n  \\\"OutputParameters\\\": [\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Status\\\",\\r\\n      \\\"Path\\\": \\\"Status\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Message\\\",\\r\\n      \\\"Path\\\": \\\"Message\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Data\\\",\\r\\n      \\\"Path\\\": \\\"Data\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JObject\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"States\\\",\\r\\n      \\\"Path\\\": \\\"Data/States\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JArray\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"StateID\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/StateID\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"StateName\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/StateName\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"AreaCoordinates\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/AreaCoordinates\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Array\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Districts\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JArray\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"DistrictID\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/DistrictID\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"DistrictName\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/DistrictName\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Mandals\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JArray\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"MandalID\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/MandalID\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"MandalName\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/MandalName\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Schools\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JArray\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"SchoolID\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/SchoolID\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"SchoolName\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/SchoolName\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Address\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Address\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JObject\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"DoorNo\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Address/DoorNo\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"LandMark\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Address/LandMark\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Village\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Address/Village\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Classes\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Classes\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JArray\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"ClassID\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Classes/ClassID\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"ClassName\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Classes/ClassName\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"Sections\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Classes/Sections\\\",\\r\\n      \\\"PathRepresents\\\": \\\"JArray\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"SectionID\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionID\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    },\\r\\n    {\\r\\n      \\\"KeyName\\\": \\\"SectionName\\\",\\r\\n      \\\"Path\\\": \\\"Data/States/Districts/Mandals/Schools/Classes/Sections/SectionName\\\",\\r\\n      \\\"PathRepresents\\\": \\\"Value\\\"\\r\\n    }\\r\\n  ]\\r\\n}</SuccessCaseDetails><FailureCaseDetails>{}</FailureCaseDetails><SharedMembersList></SharedMembersList><ServiceCategory></ServiceCategory><ControlMapping>NA</ControlMapping><PublishedStatus></PublishedStatus><NameSpace>http://tempuri.org/</NameSpace><XMLFilePath>http://182.18.157.124/BhargoUploadFiles/Bhargo_BhargoInnovations/APIXMLFiles/FiveLevelsInputAPI.xml</XMLFilePath><QueryType></QueryType><Version>1</Version><IsActive>Y</IsActive><RecordState>Update</RecordState><APICategory>3</APICategory><JSONFilePath>http://182.18.157.124/BhargoUploadFiles/Bhargo_BhargoInnovations/BhargoBoXJsonObj/API/FiveLevelsInputAPI.txt</JSONFilePath></APIService>\",\"serviceMethod\":\"\",\"MethodType\":\"POST\",\"ServiceSource\":\"Service Based\",\"CreatedUserID\":\"BHAR00000001\",\"Name\":\"Santhosh Kumar Gandi\",\"OrgName\":\"Pollution control board Vijayawada\",\"TrDate\":\"17-07-2023 15:58:17\",\"UpdatedDate\":\"18-07-2023 21:46:39\",\"serviceStatus\":\"Active\",\"QueryType\":\"\",\"ServiceCallsAt\":\"Mobile\",\"ServiceResult\":\"Single\",\"NameSpace\":\"http://tempuri.org/\",\"Version\":\"3\",\"APICategory\":\"3\"}}";
                            //return;
                        }
                        JSONObject Jobj = new JSONObject(resBody);
                        GetAPIDetails_Bean getAPIDetails = new GetAPIDetails_Bean();

                        if (Jobj.getString("Status").equalsIgnoreCase("200")) {
                            getAPIDetails.setStatus(Jobj.getString("Status"));
                            JSONObject JS_ServiceData = Jobj.getJSONObject("ServiceData");
                            GetAPIDetails_Bean.APIDetails ServiceData = getAPIDetails.NewAPIDetails();

                            ServiceData.setServiceName(JS_ServiceData.getString("ServiceName"));
                            ServiceData.setServiceDesc(JS_ServiceData.getString("ServiceDesc"));
                            ServiceData.setServiceType(JS_ServiceData.getString("ServiceType"));
                            ServiceData.setServiceSource(JS_ServiceData.getString("ServiceSource"));
                            ServiceData.setServiceCallsAt(JS_ServiceData.getString("ServiceCallsAt"));
                            ServiceData.setServiceResult(JS_ServiceData.getString("ServiceResult"));
                            ServiceData.setServiceURl(JS_ServiceData.getString("ServiceURL"));
                            ServiceData.setServiceURl_Mask(JS_ServiceData.getString("ServiceURL_Mask"));
                            ServiceData.setOutputType(JS_ServiceData.getString("OutputType"));
                            ServiceData.setMethodName(JS_ServiceData.getString("serviceMethod"));
                            ServiceData.setNameSpace(JS_ServiceData.getString("NameSpace"));
                            ServiceData.setMethodType(JS_ServiceData.getString("MethodType"));
                            ServiceData.setQueryType(JS_ServiceData.getString("QueryType"));
                            ServiceData.setSuccessCaseDetails(JS_ServiceData.getJSONObject("SuccessCaseDetails").toString());
                            getAPIDetails.setServiceData(ServiceData);
                            CallAPIInput callAPIInput=new CallAPIInput(MainActivity.this,APIActionObject,getAPIDetails);
                            JSONObject inputHashMap=callAPIInput.getInputHashMapObj(list_input,JS_ServiceData.getJSONObject("SuccessCaseDetails").toString());
                            if (JS_ServiceData.getString("MethodType").equalsIgnoreCase("POST")) {


                                InputMap = getPostObject(list_input, JS_ServiceData.getJSONObject("SuccessCaseDetails").toString());
                                LinkedHashMap<String, String> OnlyInputMap = getOnlyInparamsPostObject(list_input, JS_ServiceData.getJSONObject("SuccessCaseDetails").toString());

                                try {
                                    JSONObject jobj = new JSONObject(JS_ServiceData.getJSONObject("SuccessCaseDetails").toString());
                                    JSONObject inputObject = jobj.getJSONObject("InputParameters");
                                    JSONObject BodyObject = inputObject.getJSONObject("Body");
                                    Map<String, String> InputImages = new HashMap<>();
//                                    if (!BodyObject.has("postInputTypeParameters")) {

                                    InputImages = checkandImageandGetImages(list_input);
//                                    }


                                    if (!BodyObject.has("postInputTypeParameters") && InputImages.size() > 0) {
                                        UploadInputImagesandContinue(APIActionObject, getAPIDetails, InputMap, InputImages);
                                    } else {
                                        callServices(APIActionObject, getAPIDetails, InputMap, InputImages, OnlyInputMap);
                                    }
                                } catch (Exception e) {
                                    ImproveHelper.improveException(MainActivity.this, TAG, "getPostObject", e);
                                }


                            }
                            else {
                                for (int i = 0; i < list_input.size(); i++) {

                                    if (list_input.get(i).getInParam_Static().equalsIgnoreCase("Yes")) {
                                        String inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_Mapped_ID().trim());
                                        InputMap.put(list_input.get(i).getInParam_Name().split("\\^")[0], inValue);
                                    } else {
                                        System.out.println("getInParam_Mapped_ID==" + list_input.get(i).getInParam_Mapped_ID());

                                        String inValue = "";
                                        if (list_input.get(i).isInParam_ExpressionExists()) {
                                            inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_ExpressionValue().trim());
                                        } else {
                                            inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_Mapped_ID().trim());
                                        }

                                        System.out.println(list_input.get(i).getInParam_Name().split("\\^")[0] + "==========" + inValue);
                                        InputMap.put(list_input.get(i).getInParam_Name().split("\\^")[0], inValue);
                                    }
                                }
                                Map<String, String> InputImages = checkandImageandGetImages(list_input);
                                LinkedHashMap<String, String> OnlyInputMap = getOnlyInparamsPostObject(list_input, JS_ServiceData.getJSONObject("SuccessCaseDetails").toString());

                                if (InputImages.size() > 0) {
                                    UploadInputImagesandContinue(APIActionObject, getAPIDetails, InputMap, InputImages);
                                } else {
                                    callServices(APIActionObject, getAPIDetails, InputMap, InputImages, OnlyInputMap);
                                }
                            }

                        } else {
                            if (Jobj.has("Message")) {
                                showToast(context, Jobj.getString("Message"));
                            }
                        }
                    } catch (Exception e) {
                        dismissProgressDialog();
                        ImproveHelper.improveException(context, TAG, "CallAPIQueryServices - Api", e);
                        ImproveHelper.showToastRunOnUI(MainActivity.this,e.getMessage());
                    }

                }

                @Override
                public void onFailure(Call<String> call, Throwable t) {
                    if (FromAction == 1) {
                        Executeindex++;
                        EventExecute();
                    } else {
                        Executeindex++;
                        checkandExecute(IfElseBlock_Bean);
                    }
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "CallAPIQueryServices", e);
        }
    }

    public void UploadInputImagesandContinue(ActionWithoutCondition_Bean APIActionObject,
                                             GetAPIDetails_Bean getAPIDetails,
                                             Map<String, String> InputMap, Map<String, String> InputImages) {
        try {
            TM1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            if (InputImages != null && InputImages.size() > 0) {
                                int filesCount = InputImages.size();
                                Set<String> inkeys = InputImages.keySet();
                                String[] InkeyNames = inkeys.toArray(new String[inkeys.size()]);

                                for (int fileCount = 0; fileCount < InkeyNames.length; fileCount++) {
                                    sendInParamImagesToServer(InkeyNames[fileCount], InputImages.get(InkeyNames[fileCount]), fileCount, filesCount);
                                }
                            } else {
                                TM2.start();
                                try {
                                    TM2.join();
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    });
                }
            });

            TM1.start();
            TM1.join();

            TM2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            callServices(APIActionObject, getAPIDetails, InputMap, InputImages, null);
                        }
                    });
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "UploadInputImagesandContinue", e);
        }
    }

    public void callServices(ActionWithoutCondition_Bean APIActionObject,
                             GetAPIDetails_Bean getAPIDetails, Map<String, String> InputMap, Map<String, String> ImagePathMap, Map<String, String> OnlyInparamsMap) {
        try {
            ImproveHelper.improveLog(TAG, "callServices ", new Gson().toJson(InputMap));

            GetAPIDetails_Bean.APIDetails APIDetails = getAPIDetails.getServiceData();
            showProgressDialog("Please Wait...  Loading " + APIDetails.getServiceName() + "...");
//            Sk_serviceDialog = new ProgressDialog(MainActivity.this);
//            Sk_serviceDialog = new ProgressDialog(MainActivity.this);
//            Sk_serviceDialog.setMessage("Please Wait...  Loading " + APIDetails.getServiceName() + "...");
            dialog.setCancelable(false);

            api_result = new API_RESULT(false, APIDetails,
                    APIDetails.getServiceType().trim(),
                    APIActionObject.getResult_NoOfRecords().trim(), APIActionObject, true,
                    APIDetails.getServiceSource());

       /*     Sk_serviceDialog.setOnDismissListener(new API_DilogDismiss(false, APIDetails,
                    APIDetails.getServiceType().trim(),
                    APIActionObject.getResult_NoOfRecords().trim(), APIActionObject, true,
                    APIDetails.getServiceSource()));*/
//            Sk_serviceDialog.show();

            String ServiceURl = "";
            boolean FileData = false;
            FileData = getTypeofService(APIDetails.getSuccessCaseDetails());

            if (APIDetails.getServiceSource().equalsIgnoreCase("Service Based")) {
                if (APIDetails.getServiceCallsAt().equalsIgnoreCase("Server")) {

                    try {

                        ServiceURl = APIDetails.getServiceURl_Mask();
//                        ServiceURl="http://182.18.157.124/ImproveApplications_V3.2/api/APIBuilderServices/APIServiceExecutionMethodForFormData";
                        if (FileData) {
                            JSONObject objectMapper = getinputParamsFormate(APIDetails.getSuccessCaseDetails(), InputMap);

                            JSONObject ServerMap = new JSONObject();
                            ServerMap.put("serviceSource", "1");
//                            ServerMap.put("loginID", GlobalObjects.getUser_ID());
                            ServerMap.put("orgID", AppConstants.GlobalObjects.getOrg_Name());
                            ServerMap.put("stringURL", APIDetails.getServiceURl());
                            ServerMap.put("outputType", APIDetails.getOutputType());
                            ServerMap.put("serviceMethod", APIDetails.getMethodName());
                            ServerMap.put("serviceType", APIDetails.getServiceType());
                            ServerMap.put("methodType", APIDetails.getMethodType());
                            ServerMap.put("inputParameters", objectMapper.toString());

                            sk_filedata = new SK_FileDataService();
                            sk_filedata.setApiResultListener(api_result);
                            sk_filedata.CallFileData_Service(ServiceURl, InputMap,
                                    Sk_serviceDialog, ImagePathMap, ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()),
                                    ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                                    ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()),
                                    ServerMap, sessionManager.getAuthorizationTokenId());
                        } else {


                            JSONObject objectMapper = getinputParamsFormate(APIDetails.getSuccessCaseDetails(), InputMap);

                            System.out.println("objectMapper==" + objectMapper);

                            Map<String, String> ServerMap = new HashMap<>();
                            ServerMap.put("serviceSource", "1");
                            ServerMap.put("queryName", "QB");
//                            ServerMap.put("loginID", GlobalObjects.getUser_ID());
                            ServerMap.put("stringURL", APIDetails.getServiceURl());
                            ServerMap.put("outputType", APIDetails.getOutputType());
                            ServerMap.put("serviceMethod", APIDetails.getMethodName());
                            ServerMap.put("serviceType", APIDetails.getServiceType());
                            ServerMap.put("methodType", APIDetails.getMethodType());
                            ServerMap.put("inputParameters", objectMapper.toString());

                            System.out.println("ServerMap===" + ServerMap);


                            sk_Rest_interpreter = new SK_WebAPI_interpreter();
                            sk_Rest_interpreter.setApiResultListener(api_result);
                            sk_Rest_interpreter.CallSoap_Service(false, APIDetails.getNameSpace(), ServerMap,
                                    ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()),
                                    APIDetails.getOutputType(), APIDetails.getServiceResult(), Sk_serviceDialog,
                                    ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                                    ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()),
                                    APIDetails.getServiceSource(), APIDetails.getQueryType(), sessionManager.getAuthorizationTokenId());
                        }
                    } catch (Exception e) {
                        dismissProgressDialog();
                        e.printStackTrace();
                    }
                } else {
                    ServiceURl = APIDetails.getServiceURl();
                    if (FileData) {
                        sk_filedata = new SK_FileDataService();
                        sk_filedata.setApiResultListener(api_result);
                        sk_filedata.CallFileData_Service(ServiceURl, InputMap,
                                Sk_serviceDialog, ImagePathMap, ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()),
                                ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                                ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()), null, sessionManager.getAuthorizationTokenId());
                    } else {

                        if (APIDetails.getServiceType().trim().equalsIgnoreCase("Soap Web Service")) {
                            sk_soapobj = new SK_ServiceCall();
                            sk_soapobj.setApiResultListener(api_result);
                            sk_soapobj.CallSoap_Service(ServiceURl, APIDetails.getMethodName(), APIDetails.getNameSpace(), InputMap,
                                    ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()), APIDetails.getOutputType(), APIDetails.getServiceResult(),
                                    Sk_serviceDialog,
                                    ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                                    ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()),
                                    APIDetails.getServiceSource(), APIDetails.getQueryType());
                        } else if (APIDetails.getServiceType().trim().equalsIgnoreCase("WCF Service")) {
                            sk_Restobj_WCF = new SK_RestCall_WCF();
                            sk_Restobj_WCF.setApiResultListener(api_result);
                            sk_Restobj_WCF.CallSoap_Service(ServiceURl, APIDetails.getNameSpace(), InputMap,
                                    ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()), APIDetails.getOutputType(),
                                    APIDetails.getServiceResult(), Sk_serviceDialog, APIDetails.getMethodType(),
                                    ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                                    ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()),
                                    APIDetails.getServiceSource(), APIDetails.getQueryType(), sessionManager.getAuthorizationTokenId());
                        } else {
                            sk_Restobj = new SK_RestCall_WebAPI();
                            sk_Restobj.setApiResultListener(api_result);
                            sk_Restobj.CallSoap_Service(ServiceURl, APIDetails.getNameSpace(), InputMap, OnlyInparamsMap,
                                    ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()), APIDetails.getOutputType(),
                                    APIDetails.getServiceResult(), Sk_serviceDialog, APIDetails.getMethodType(),
                                    ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                                    ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()),
                                    APIDetails.getServiceSource(), APIDetails.getQueryType(), ImproveHelper.getHeaders(APIDetails.getSuccessCaseDetails()));
                        }
                    }
                }
            } else if (APIDetails.getServiceSource().equalsIgnoreCase("Query Based")) {
                try {

                    JSONArray Jarr = new JSONArray();

                    JSONObject objectMapper = getinputParamsFormate(APIDetails.getSuccessCaseDetails(), InputMap);


                    Map<String, String> ServerMap = new HashMap<>();
                    ServerMap.put("serviceSource", "2");
                    ServerMap.put("queryName", "QB");
                    ServerMap.put("orgID", AppConstants.GlobalObjects.getOrg_Name());
//                    ServerMap.put("loginID", GlobalObjects.getUser_ID());
                    ServerMap.put("stringURL", APIDetails.getServiceURl());
                    ServerMap.put("outputType", APIDetails.getOutputType());
                    ServerMap.put("serviceMethod", APIDetails.getMethodName());
                    ServerMap.put("serviceType", APIDetails.getServiceType());
                    ServerMap.put("methodType", APIDetails.getMethodType());
                    ServerMap.put("inputParameters", objectMapper.toString());

                    if (APIDetails.getQueryType().equalsIgnoreCase("DML")) {
                        ServerMap.put("queryType", APIDetails.getQueryType());
                    } else {
                        ServerMap.put("queryType", "Select");
                    }

                    sk_Rest_interpreterQuery = new SK_WebAPI_interpreter();
                    sk_Rest_interpreterQuery.CallSoap_Service(false, APIDetails.getNameSpace(), ServerMap,
                            ImproveHelper.getOutputParams(APIDetails.getSuccessCaseDetails()),
                            APIDetails.getOutputType(), APIDetails.getServiceResult(), Sk_serviceDialog,
                            ImproveHelper.getOutputParamswithPaths(APIDetails.getSuccessCaseDetails()),
                            ImproveHelper.gethdOutputSaveFlow(APIDetails.getSuccessCaseDetails()),
                            APIDetails.getServiceSource(), APIDetails.getQueryType(), sessionManager.getAuthorizationTokenId());

                } catch (Exception e) {
                    dismissProgressDialog();
                    e.printStackTrace();
                }
            }
            dismissProgressDialog();
        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "callServices", e);
        }
    }


    public Map<String, String> checkandImageandGetImages(List<API_InputParam_Bean> list_Inparams) {
        Map<String, String> InparamImages = new HashMap<>();
        boolean returnflag = false;
        try {
            if (list_Inparams.size() > 0) {

                for (int i = 0; i < list_Inparams.size(); i++) {
                    if (list_Inparams.get(i).getInParam_ExpressionValue()!=null && list_Inparams.get(i).getInParam_ExpressionValue().trim().startsWith("(im:")) {
                        String ValueStr = list_Inparams.get(i).getInParam_ExpressionValue().trim().toLowerCase();
                        String ValueType = ValueStr.substring(4, ValueStr.indexOf("."));
                        ValueStr = ValueStr.substring(4, ValueStr.lastIndexOf(")"));
                        if (ValueType.equalsIgnoreCase(AppConstants.Global_ControlsOnForm)) {
                            String ConditionValue = ValueStr.split("\\.")[1];

                            List<ControlObject> list_Controls = ((MainActivity) context).dataCollectionObject.getControls_list();
                            LinkedHashMap<String, Object> List_ControlClassObjects = ((MainActivity) context).List_ControlClassObjects;
                            LinearLayout linearLayout = ((MainActivity) context).linearLayout;

                            for (int x = 0; x < list_Controls.size(); x++) {
                                ControlObject temp_controlObj = list_Controls.get(x);

                                if (temp_controlObj.getControlName().equalsIgnoreCase(ConditionValue) &&
                                        temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_CAMERA)) {
                                    returnflag = true;
                                    InparamImages.put(list_Inparams.get(i).getInParam_Name().split("\\^")[0], InputMap.get(list_Inparams.get(i).getInParam_Name().split("\\^")[0]));
                                }
                            }

                        }

                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "checkandImageandGetImages", e);
        }
        return InparamImages;
    }

    public Uri getImageUri(Context inContext, Bitmap inImage) {
        Uri uri = null;
        try {
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
            String path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, "IMG_" + System.currentTimeMillis(), null);
            uri = Uri.parse(path);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getImageUri", e);
        }
        return uri;
    }

    public String getRealPathFromURI(Uri uri) {
        String path = "";
        try {
            if (getContentResolver() != null) {
                Cursor cursor = getContentResolver().query(uri, null, null, null, null);
                if (cursor != null) {
                    cursor.moveToFirst();
                    int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
                    path = cursor.getString(idx);
                    cursor.close();
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getRealPathFromURI", e);
        }
        return path;
    }

    public void sendFilesToServer(final HashMap<String, String> path, final int fileCount, final int filesCount) {
        try {
            String controlName = null;

            for (String key : path.keySet()) {
                System.out.println(key);
                controlName = key;
            }

            String filePath = path.get(controlName);
            System.out.println("Path:" + path);
            String fileName = filePath.substring(filePath.lastIndexOf("/") + 1);
            for (String key : path.keySet()) {
                System.out.println(key);
                controlName = key;
            }

            final String finalControlName = controlName;
            String pageName = strAppName.replace(" ", "_");
            if (filePath != null && (!filePath.isEmpty() && filePath.trim().startsWith("http"))) {
                stringListSubmit.add(finalControlName + "|" + filePath);

                if (fileIndex + 1 == filesCount) {
                    t3.start();
                    try {
                        t3.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                } else {
                    fileIndex++;
                    sendFilesToServer(stringListFiles.get(fileIndex), fileIndex, filesCount);
                }

                // For map existing
                if (List_ControlClassObjects.get(finalControlName) instanceof Camera) {
                    Camera camera = (Camera) List_ControlClassObjects.get(finalControlName);
                    camera.getControlRealPath().setTag(filePath);
                    camera.setPath(filePath);
                } else if (List_ControlClassObjects.get(finalControlName) instanceof FileBrowsing) {
                    FileBrowsing fileBrowsing = (FileBrowsing) List_ControlClassObjects.get(finalControlName);
                    fileBrowsing.getControlRealPath().setTag(filePath);
                    fileBrowsing.setPath(filePath);
                } else if (List_ControlClassObjects.get(finalControlName) instanceof VoiceRecording) {
                    VoiceRecording voiceRecording = (VoiceRecording) List_ControlClassObjects.get(finalControlName);
                    voiceRecording.getControlRealPath().setTag(filePath);
                    voiceRecording.setPath(filePath);
                } else if (List_ControlClassObjects.get(finalControlName) instanceof VideoRecording) {
                    VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(finalControlName);
                    videoRecording.getControlRealPath().setTag(filePath);
                    videoRecording.setPath(filePath);
                }

            } else {
                new FileUploader(this, fileName, strUserId, pageName, false, "BHARGO", new FileUploader.OnImageUploaded() {
                    @Override
                    public void response(String url) {

                        if (url != null && url.startsWith("http")) {
                            stringListSubmit.add(finalControlName + "|" + url);

                            if (fileIndex + 1 == filesCount) {
                                t3.start();
                                try {
                                    t3.join();
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            } else {
                                fileIndex++;
                                sendFilesToServer(stringListFiles.get(fileIndex), fileIndex, filesCount);
                            }

                            // For map existing
                            if (List_ControlClassObjects.get(finalControlName) instanceof Camera) {
                                Camera camera = (Camera) List_ControlClassObjects.get(finalControlName);
                                camera.getControlRealPath().setTag(url);
                                camera.setPath(url);
                            } else if (List_ControlClassObjects.get(finalControlName) instanceof FileBrowsing) {
                                FileBrowsing fileBrowsing = (FileBrowsing) List_ControlClassObjects.get(finalControlName);
                                fileBrowsing.getControlRealPath().setTag(url);
                                fileBrowsing.setPath(url);
                            } else if (List_ControlClassObjects.get(finalControlName) instanceof VoiceRecording) {
                                VoiceRecording voiceRecording = (VoiceRecording) List_ControlClassObjects.get(finalControlName);
                                voiceRecording.getControlRealPath().setTag(url);
                                voiceRecording.setPath(url);
                            } else if (List_ControlClassObjects.get(finalControlName) instanceof VideoRecording) {
                                VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(finalControlName);
                                videoRecording.getControlRealPath().setTag(url);
                                videoRecording.setPath(url);
                            } else if (List_ControlClassObjects.get(finalControlName) instanceof SignatureView) {
                                SignatureView signatureView = (SignatureView) List_ControlClassObjects.get(finalControlName);
                                signatureView.getControlRealPath().setTag(url);
                                signatureView.setPath(url);
                            }
                        } else {
                            dismissProgressDialog();
                            if (url == null) {
                                showToast(context, "File upload Failed");
                            } else {
                                showToast(context, "File upload Failed\n" + url);
                            }

                        }

                    }
                }).execute(filePath);
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "sendFilesToServer", e);
        }
    }

    public void sendSubFormFilesToServer(final HashMap<String, String> path, final int fileCount, final int filesCount) {
        try {
            String controlName = null;

            for (String key : path.keySet()) {
                System.out.println(key);
                controlName = key;
            }
            String filePath = path.get(controlName);
            final String fileName = filePath.substring(filePath.lastIndexOf("/") + 1);

            final String finalControlName = controlName;
            String pageName = strAppName.replace(" ", "_");
//                if (filePath != null && (!filePath.isEmpty() || filePath.trim().startsWith("http"))) {
                if (filePath != null && !filePath.isEmpty() && filePath.trim().startsWith("http")) {

                String subcontrolName = finalControlName.split("\\$")[0];

                int subFormId = Integer.parseInt(finalControlName.split("\\$")[1]);

                int subFormRowId = Integer.parseInt(finalControlName.split("\\$")[2]);

                int controlPos = Integer.parseInt(finalControlName.split("\\$")[3]);

                HashMap<String, String> map = new HashMap<>();

                map.put(subcontrolName, filePath);

                subFormStringList.get(subFormId).get(subFormRowId).add(subcontrolName + "|" + filePath);

                int index = fileCount;

                if (fileCount + 1 == filesCount) {

                    t2.start();
                    try {
                        t2.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                } else {
                    index++;
                    sendSubFormFilesToServer(tempList.get(index), index, filesCount);
                }

                // For map existing
                Log.d(TAG, "subFormNames: " + subFormNames.get(subFormId));
                Log.d(TAG, "subFormNames0: " + finalControlName);
                SubformView subformView = (SubformView) List_ControlClassObjects.get(subFormNames.get(subFormId));
                List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subformView.getList_ControlClassObjects();
                if (subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName) instanceof Camera) {
                    Camera camera = (Camera) subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName);
                    camera.getControlRealPath().setTag(filePath);
                    camera.setPath(filePath);
                    Log.d(TAG, "subFormNames1: " + filePath);
                } else if (subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName) instanceof FileBrowsing) {
                    FileBrowsing fileBrowsing = (FileBrowsing) subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName);
                    fileBrowsing.getControlRealPath().setTag(filePath);
                    fileBrowsing.setPath(filePath);
                } else if (subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName) instanceof VoiceRecording) {
                    VoiceRecording voiceRecording = (VoiceRecording) subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName);
                    voiceRecording.getControlRealPath().setTag(filePath);
                    voiceRecording.setPath(filePath);
                } else if (subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName) instanceof VideoRecording) {
                    VideoRecording videoRecording = (VideoRecording) subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName);
                    videoRecording.getControlRealPath().setTag(filePath);
                    videoRecording.setPath(filePath);
                } else if (subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName) instanceof SignatureView) {
                    SignatureView signatureView = (SignatureView) subform_List_ControlClassObjects.get(subFormRowId).get(subcontrolName);
                    signatureView.getControlRealPath().setTag(filePath);
                    signatureView.setPath(filePath);
                }
            } else {
                new FileUploader(this, fileName, strUserId, pageName, false, "BHARGO", new FileUploader.OnImageUploaded() {
                    @Override
                    public void response(String url) {
                        if (url != null && url.startsWith("http")) {

                            String controlName = finalControlName.split("\\$")[0];

                            int subFormId = Integer.parseInt(finalControlName.split("\\$")[1]);

                            int subFormRowId = Integer.parseInt(finalControlName.split("\\$")[2]);

                            int controlPos = Integer.parseInt(finalControlName.split("\\$")[3]);

                            HashMap<String, String> map = new HashMap<>();

                            map.put(controlName, url);


//                            subFormStringList.get(subFormId).get(subFormRowId).add(controlName + "|" + url);
                            subFormStringList.get(subFormId).get(subFormRowId).set(controlPos + 1, controlName + "|" + url);


                            int index = fileCount;

                            if (fileCount + 1 == filesCount) {

                                t2.start();
                                try {
                                    t2.join();
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            } else {
                                index++;
                                sendSubFormFilesToServer(tempList.get(index), index, filesCount);
                            }

                            // For map existing
                            Log.d(TAG, "subFormNames: " + subFormNames.get(subFormId));
                            Log.d(TAG, "subFormNames0: " + finalControlName);
                            List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                            if (List_ControlClassObjects.get(subFormNames.get(subFormId)) instanceof SubformView) {
                                SubformView subformView = (SubformView) List_ControlClassObjects.get(subFormNames.get(subFormId));
                                subform_List_ControlClassObjects = subformView.getList_ControlClassObjects();
                            } else {
                                GridControl gridControl = (GridControl) List_ControlClassObjects.get(subFormNames.get(subFormId));
                                subform_List_ControlClassObjects = gridControl.getList_ControlClassObjects();
                            }
                            if (subform_List_ControlClassObjects.get(subFormRowId).get(controlName) instanceof Camera) {
                                Camera camera = (Camera) subform_List_ControlClassObjects.get(subFormRowId).get(controlName);
                                camera.getControlRealPath().setTag(url);
                                camera.setPath(url);
                                Log.d(TAG, "subFormNames1: " + url);
                            } else if (subform_List_ControlClassObjects.get(subFormRowId).get(controlName) instanceof FileBrowsing) {
                                FileBrowsing fileBrowsing = (FileBrowsing) subform_List_ControlClassObjects.get(subFormRowId).get(controlName);
                                fileBrowsing.getControlRealPath().setTag(url);
                                fileBrowsing.setPath(url);
                            } else if (subform_List_ControlClassObjects.get(subFormRowId).get(controlName) instanceof VoiceRecording) {
                                VoiceRecording voiceRecording = (VoiceRecording) subform_List_ControlClassObjects.get(subFormRowId).get(controlName);
                                voiceRecording.getControlRealPath().setTag(url);
                                voiceRecording.setPath(url);
                            } else if (subform_List_ControlClassObjects.get(subFormRowId).get(controlName) instanceof VideoRecording) {
                                VideoRecording videoRecording = (VideoRecording) subform_List_ControlClassObjects.get(subFormRowId).get(controlName);
                                videoRecording.getControlRealPath().setTag(url);
                                videoRecording.setPath(url);
                            }

                        } else {
                            dismissProgressDialog();
                            if (url == null) {
                                showToast(context, "File upload Failed");
                            } else {
                                showToast(context, "File upload Failed\n" + url);
                            }

                        }

                    }

                }).execute(filePath);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "sendSubFormFilesToServer", e);
        }

    }

    public void SetValuetoMultiControlInCallAPIFormUsedbyControlObject(int pos, LinkedHashMap<String, List<String>> OutputData,
                                                                       List<API_OutputParam_Bean> List_API_OutParams,
                                                                       List<ControlObject> ControlObj, LinkedHashMap<String, Object> List_ControlClassObjects) {
        try {

            for (int a = 0; a < List_API_OutParams.size(); a++) {
                if (!List_API_OutParams.get(a).isOutParam_Delete()) {

                    API_OutputParam_Bean API_OutputParam_Bean = List_API_OutParams.get(a);

                    String Value = "", ControlID = "";
                    String MappedControlID = API_OutputParam_Bean.getOutParam_Mapped_ID().trim();
                    ControlID = API_OutputParam_Bean.getOutParam_Name();

                    if (MappedControlID.trim().length() > 0) {
                        List<String> MappedValues = OutputData.get(MappedControlID.toLowerCase());
                        if (MappedValues.size() > pos) {
                            Value = MappedValues.get(pos);
                        }
                    } else if (API_OutputParam_Bean.getOutParam_Mapped_Expression() != null && API_OutputParam_Bean.getOutParam_Mapped_Expression().trim().length() > 0) {
                        AppConstants.SF_Container_position = pos;
                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                        Value = ehelper.ExpressionHelper(this, API_OutputParam_Bean.getOutParam_Mapped_Expression().trim());
                    }


                    for (int i = 0; i < ControlObj.size(); i++) {
                        ControlObject temp_controlObj = ControlObj.get(i);
                        boolean checkflag = false;
                        if (temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_DROP_DOWN) ||
                                temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_RADIO_BUTTON) ||
                                temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_CHECK_LIST)) {
                            if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                                checkflag = true;
                            }
//                        else  if ((temp_controlObj.getControlName().trim()+"_ID").equalsIgnoreCase(ControlID.trim())) {
//                            checkflag=true;
//                        }

                        } else if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                            checkflag = true;
                        }

                        if (checkflag) {
                            switch (temp_controlObj.getControlType()) {
                                case CONTROL_TYPE_TEXT_INPUT:
                                    TextInput clearTextView = (TextInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Value = Value.split("\\,")[0];
                                    clearTextView.getCustomEditText().setText(Value);
                                    CustomTextView tv_tapTextType = clearTextView.gettap_text();
                                    tv_tapTextType.setVisibility(View.GONE);
                                    clearTextView.getCustomEditText().setVisibility(View.VISIBLE);
                                    break;
                                case CONTROL_TYPE_NUMERIC_INPUT:
                                    NumericInput numverTextView = (NumericInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Value = Value.split("\\,")[0];
                                    numverTextView.getNumericTextView().setText(Value);
                                    CustomTextView tv_numtapTextType = numverTextView.gettap_text();
                                    tv_numtapTextType.setVisibility(View.GONE);
                                    numverTextView.getNumericTextView().setVisibility(View.VISIBLE);
                                    numverTextView.gettap_text().setVisibility(View.GONE);
                                    break;
                                case CONTROL_TYPE_PHONE:
                                    Phone PhoneView = (Phone) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Value = Value.split("\\,")[0];
                                    PhoneView.getCustomEditText().setText(Value);
                                    CustomTextView tv_phonetapTextType = PhoneView.gettap_text();
                                    tv_phonetapTextType.setVisibility(View.GONE);
                                    PhoneView.getCustomEditText().setVisibility(View.VISIBLE);
                                    break;
                                case CONTROL_TYPE_EMAIL:
                                    Email EmailView = (Email) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Value = Value.split("\\,")[0];
                                    EmailView.getCustomEditText().setText(Value);
                                    CustomTextView tv_emailtapTextType = EmailView.gettap_text();
                                    tv_emailtapTextType.setVisibility(View.GONE);
                                    EmailView.getCustomEditText().setVisibility(View.VISIBLE);
                                    break;
                                case CONTROL_TYPE_CAMERA:

                                    break;
                                case CONTROL_TYPE_IMAGE:
                                    Image ImageView = (Image) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    String Advance_ImageSource = "", Advance_ConditionColumn = "";
                                    if (API_OutputParam_Bean.getOutParam_Mapped_ID() != null && API_OutputParam_Bean.getOutParam_Mapped_ID().length() > 0) {
                                        Value = OutputData.get(API_OutputParam_Bean.getOutParam_Mapped_ID().toLowerCase()).get(pos);
                                        ImproveHelper.loadImage_new(context, Value, ImageView.mainImageView, false, temp_controlObj.getImageData());
                                    } else if (API_OutputParam_Bean.getList_OutParam_ImageAdvanced_Items() != null && API_OutputParam_Bean.getList_OutParam_ImageAdvanced_Items().size() > 0) {
                                        if (API_OutputParam_Bean.getOutParam_ImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                            Advance_ImageSource = OutputData.get(API_OutputParam_Bean.getOutParam_ImageAdvanced_ImageSource().toLowerCase()).get(pos);
                                        }
                                        Advance_ConditionColumn = OutputData.get(API_OutputParam_Bean.getOutParam_ImageAdvanced_ConditionColumn().toLowerCase()).get(pos);

                                        if (Advance_ImageSource != null && Advance_ImageSource.length() != 0) {
                                            List<ImageAdvanced_Mapped_Item> list_IA_Map_Item = API_OutputParam_Bean.getList_OutParam_ImageAdvanced_Items();
                                            for (int x = 0; x < list_IA_Map_Item.size(); x++) {
                                                if (list_IA_Map_Item.get(x).getImageAdvanced_Value().equalsIgnoreCase(Advance_ConditionColumn)) {
                                                    if (ImageView.controlObject.getImageDataType().equalsIgnoreCase("Base64")) {
                                                        ImageView.mainImageView.setImageBitmap(ImproveHelper.Base64StringToBitmap(Advance_ImageSource));
                                                    } else {
                                                        ImproveHelper.loadImage_new(context, Advance_ImageSource, ImageView.mainImageView, false, list_IA_Map_Item.get(x).getImageAdvanced_ImagePath());
                                                    }
                                                    break;
                                                } else {
                                                    if (ImageView.controlObject.getImageDataType().equalsIgnoreCase("Base64")) {
                                                        ImageView.mainImageView.setImageBitmap(ImproveHelper.Base64StringToBitmap(Advance_ImageSource));
                                                    } else {
                                                        ImproveHelper.loadImage_new(context, Advance_ImageSource, ImageView.mainImageView, false, "null");
                                                    }
                                                    break;
                                                }
                                            }
                                        } else {
                                            List<ImageAdvanced_Mapped_Item> list_IA_Map_Item = API_OutputParam_Bean.getList_OutParam_ImageAdvanced_Items();
                                            for (int x = 0; x < list_IA_Map_Item.size(); x++) {
                                                if (list_IA_Map_Item.get(x).getImageAdvanced_Value().equalsIgnoreCase(Advance_ConditionColumn)) {
                                                    if (ImageView.controlObject.getImageDataType().equalsIgnoreCase("Base64")) {
                                                        ImageView.mainImageView.setImageBitmap(ImproveHelper.Base64StringToBitmap(list_IA_Map_Item.get(x).getImageAdvanced_Value()));
                                                    } else {
                                                        ImproveHelper.loadImage_new(context, list_IA_Map_Item.get(x).getImageAdvanced_Value(), ImageView.mainImageView, false, temp_controlObj.getImageData());
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                case CONTROL_TYPE_LARGE_INPUT:
                                    LargeInput LargeInputView = (LargeInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Value = Value.split("\\,")[0];
                                    final String liValue = Value;

                                    LargeInputView.setDefaultValue(Value);
                                    /*CustomTextView tv_largetapTextType = LargeInputView.gettap_text();
                                    tv_largetapTextType.setVisibility(View.GONE);
                                    if(LargeInputView.isEditorModeEnabled()){
                                        LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                        LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                        LargeInputView.getEditorToolBar().setVisibility(View.VISIBLE);
                                        RichTextEditor editor = LargeInputView.getTextEditor();
                                        editor.addLoadedListener(() -> {
                                            editor.setHtml(liValue.trim());
                                            return null;
                                        });
                                      *//*  LargeInputView.getTextEditor().setHtml(Value);*//*
                                    }else if(LargeInputView.isHTMLViewerEnabled()){
                                        LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                        LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                        LargeInputView.getEditorToolBar().setVisibility(View.GONE);
                                        RichTextEditor editor = LargeInputView.getTextEditor();
                                        editor.addLoadedListener(() -> {
                                            editor.setHtml(liValue.trim());
                                            return null;
                                        });
//                                        LargeInputView.getTextEditor().setHtml(Value);
                                   }else {
                                        LargeInputView.getEditorLayout().setVisibility(View.GONE);
                                        LargeInputView.getCustomEditText().setVisibility(View.VISIBLE);
                                        LargeInputView.getCustomEditText().setText(Value);
                                    }*/
                                    break;
                                case CONTROL_TYPE_CHECKBOX:
                                    Checkbox CheckBoxView = (Checkbox) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    CheckBoxView.setValueToCheckBoxItem(Value);
                                    break;
                                case CONTROL_TYPE_FILE_BROWSING:
                                    FileBrowsing fileBrowsing = (FileBrowsing) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    fileBrowsing.setFileBrowsing(Value);
                                    break;
                                case CONTROL_TYPE_CALENDER:

                                    break;
                                case CONTROL_TYPE_AUDIO_PLAYER:

                                    break;
                                case CONTROL_TYPE_VIDEO_PLAYER:

                                    break;
                                case CONTROL_TYPE_PERCENTAGE:
                                    Percentage PercentageView = (Percentage) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    PercentageView.getCustomEditText().setText(Value);
                                    CustomTextView tv_pertapTextType = PercentageView.gettap_text();
                                    tv_pertapTextType.setVisibility(View.GONE);
                                    PercentageView.getCustomEditText().setVisibility(View.VISIBLE);
                                    break;
                                case CONTROL_TYPE_RADIO_BUTTON:
                                    RadioGroupView RGroup = (RadioGroupView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    boolean foundflag = true;

                                    List<Item> AppendValues_list0 = new ArrayList<>();

                                    List<String> rg_MappedValues = OutputData.get(MappedControlID.toLowerCase());


                                    if (OutputData.containsKey(ControlID + "_id")) {
                                        List<String> MappedValueIDs = OutputData.get((MappedControlID + "_id").toLowerCase());
                                        for (int j = 0; j < rg_MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(rg_MappedValues.get(j).trim());
                                            item.setId(MappedValueIDs.get(j).trim());
                                            AppendValues_list0.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < rg_MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(rg_MappedValues.get(j).trim());
                                            item.setId(rg_MappedValues.get(j).trim());
                                            AppendValues_list0.add(item);
                                        }

                                    }


                                    RGroup.setnewItemsListDynamically(AppendValues_list0);
                                    break;
                                case CONTROL_TYPE_DROP_DOWN:
                                    DropDown dropDown = (DropDown) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    boolean dropfoundflag = true;
                                    List<Item> AppendValues_list = new ArrayList<>();
                                    List<String> MappedValuesIds = new ArrayList<>();

                                    List<String> MappedValues = OutputData.get(MappedControlID.toLowerCase());

                                    for (int j = 0; j < List_API_OutParams.size(); j++) {
                                        API_OutputParam_Bean outputParam_bean = List_API_OutParams.get(j);
                                        if (!outputParam_bean.isOutParam_Delete()) {
                                            if (outputParam_bean.getOutParam_Name().toLowerCase().contentEquals((ControlID + "_ID").toLowerCase()) || outputParam_bean.getOutParam_Name().toLowerCase().contentEquals((ControlID + "ID").toLowerCase())) {
                                                MappedValuesIds = OutputData.get(outputParam_bean.getOutParam_Mapped_ID().toLowerCase());
                                                break;
                                            }
                                        }

                                    }

                                    /*if (OutputData.containsKey(ControlID + "_id")) {
                                        List<String> MappedValueIDs = OutputData.get((MappedControlID + "_id").toLowerCase());
                                        for (int j = 0; j < MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(MappedValues.get(j).trim());
                                            item.setId(MappedValueIDs.get(j).trim());
                                            AppendValues_list.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(MappedValues.get(j).trim());
                                            item.setId(MappedValues.get(j).trim());
                                            AppendValues_list.add(item);
                                        }

                                    } */
                                    if (MappedValuesIds != null && MappedValuesIds.size() > 0) {
                                        /*List<String> MappedValueIDs = OutputData.get((MappedControlID + "_id").toLowerCase());*/
                                        for (int j = 0; j < MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(MappedValues.get(j).trim());
                                            item.setId(MappedValuesIds.get(j).trim());
                                            AppendValues_list.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(MappedValues.get(j).trim());
                                            item.setId(MappedValues.get(j).trim());
                                            AppendValues_list.add(item);
                                        }

                                    }


                                    if (dropfoundflag) {
                                        dropDown.setnewItemsListDynamically(AppendValues_list);
                                    }
                                    break;

                                case CONTROL_TYPE_CHECK_LIST:
                                    CheckList checklist = (CheckList) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    boolean CheckListflag = true;
                                    List<Item> AppendValues_list2 = new ArrayList<>();

                                    List<String> chk_MappedValues = OutputData.get(MappedControlID.toLowerCase());

                                    if (OutputData.containsKey(ControlID + "_id")) {
                                        List<String> MappedValueIDs = OutputData.get((MappedControlID + "_id").toLowerCase());
                                        for (int j = 0; j < chk_MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(chk_MappedValues.get(j).trim());
                                            item.setId(MappedValueIDs.get(j).trim());
                                            AppendValues_list2.add(item);
                                        }
                                    } else {
                                        for (int j = 0; j < chk_MappedValues.size(); j++) {
                                            Item item = new Item();
                                            item.setValue(chk_MappedValues.get(j).trim());
                                            item.setId(chk_MappedValues.get(j).trim());
                                            AppendValues_list2.add(item);
                                        }

                                    }

                                    if (CheckListflag) {
                                        checklist.setnewItemsListDynamically(AppendValues_list2);
                                    }

                                    break;
                                case CONTROL_TYPE_SIGNATURE:

                                    break;
                                case CONTROL_TYPE_URL_LINK:
                                    break;
                                case CONTROL_TYPE_DECIMAL:
                                    DecimalView Decimalview = (DecimalView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Decimalview.getCustomEditText().setText(Value);
                                    CustomTextView tv_DectapTextType = Decimalview.gettap_text();
                                    tv_DectapTextType.setVisibility(View.GONE);
                                    Decimalview.getCustomEditText().setVisibility(View.VISIBLE);
                                    break;
                                case CONTROL_TYPE_PASSWORD:
                                    Password Passwordview = (Password) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Passwordview.getCustomEditText().setText(Value);
                                    LinearLayout ll_tap_text = Passwordview.gettap_text();
                                    ll_tap_text.setVisibility(View.GONE);
                                    Passwordview.getCustomEditText().setVisibility(View.VISIBLE);

                                    break;
                                case CONTROL_TYPE_CURRENCY:
                                    Currency Currencyview = (Currency) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    Currencyview.getCustomEditText().setText(Value);
                                    CustomTextView tv_CurtapTextType = Currencyview.gettap_text();
                                    tv_CurtapTextType.setVisibility(View.GONE);
                                    Currencyview.getCustomEditText().setVisibility(View.VISIBLE);
                                    break;
                                case CONTROL_TYPE_RATING:
                                    Rating ratingControl = (Rating) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    ratingControl.setRating(Value);
                                    break;
                                case CONTROL_TYPE_DYNAMIC_LABEL:
                                    DynamicLabel DynamicLabeliew = (DynamicLabel) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    CustomTextView tv_dynamicLabel = DynamicLabeliew.getValueView();
//                                    tv_dynamicLabel.setText(Value);
                                    DynamicLabeliew.setValue(Value);
                                    break;
                                case CONTROL_TYPE_MAP:
                                    MapControl mapControl = (MapControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    if (List_API_OutParams.get(0).getOutParam_Mapped_ID() != null && List_API_OutParams.get(0).getOutParam_Mapped_ID().length() > 0) {
                                        String MappedValue = List_API_OutParams.get(0).getOutParam_Mapped_ID();
                                        List<String> MappedValues1 = OutputData.get(MappedValue.toLowerCase());
                                        List<String> finalMapValues = new ArrayList<>();
                                        finalMapValues.add(MappedValues1.get(pos));
                                        subFormMapControls.add(mapControl);
                                        subFormMappedValues.add(finalMapValues);
                                        String DefultMarker = List_API_OutParams.get(0).getOutParam_Marker_defultImage();

//                                        MapControl.setMapPonitsDynamically(AppConstants.map_Multiple_Marker, MappedValues);
                                        if (mapControl.getMapViewType() != null) {
//                                            mapControl.setMapPonitsDynamically(mapControl.getMapViewType(), MappedValues1);
                                            mapControl.setMapPonitsDynamically(mapControl.getMapViewType(), finalMapValues, DefultMarker);
                                        } else {
//                                            mapControl.setMapPonitsDynamically(AppConstants.map_Multiple_Marker, MappedValues1);
                                            mapControl.setMapPonitsDynamically(AppConstants.map_Multiple_Marker, finalMapValues, DefultMarker);
                                        }
                                    } else {

                                    }
                                    break;
                                case CONTROL_TYPE_QR_CODE:
                                    QRCode qrCode = (QRCode) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    qrCode.createQrCodeDynamically(Value);
                                    break;
                                case CONTROL_TYPE_BAR_CODE:
                                    BarCode barCode = (BarCode) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    barCode.createBarCodeDynamically(Value);
                                    break;
                                case CONTROL_TYPE_VIEWFILE:
                                    ViewFileControl viewFileControl = (ViewFileControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    viewFileControl.setFileLink(Value);

                                    break;
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetValuetoMultiControlInCallAPIFormUsedbyControlObject", e);
        }
    }

    public void SetValuetoControlUsedbyControlObject(String ControlID, String Value, List<ControlObject> ControlObj, Object object) {
        try {
            for (int i = 0; i < ControlObj.size(); i++) {
                if (ControlObj.get(i).getControlName().equalsIgnoreCase(ControlID)) {

                    ControlObject temp_controlObj = ControlObj.get(i);
                    switch (temp_controlObj.getControlType()) {
                        case CONTROL_TYPE_TEXT_INPUT:
                            TextInput clearTextView = (TextInput) object;
                            clearTextView.getCustomEditText().setText(Value);
                            CustomTextView tv_tapTextType = clearTextView.gettap_text();
                            tv_tapTextType.setVisibility(View.GONE);
                            clearTextView.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(clearTextView.getCustomEditText());
                            break;
                        case CONTROL_TYPE_NUMERIC_INPUT:
                            NumericInput numverTextView = (NumericInput) object;
                            numverTextView.getNumericTextView().setText(Value);
                            CustomTextView tv_numtapTextType = numverTextView.gettap_text();
                            tv_numtapTextType.setVisibility(View.GONE);
                            numverTextView.getNumericTextView().setVisibility(View.VISIBLE);
                            numverTextView.gettap_text().setVisibility(View.GONE);
//                            ImproveHelper.setFocus(numverTextView.getNumericTextView());
                            break;
                        case CONTROL_TYPE_PHONE:
                            Phone PhoneView = (Phone) object;
                            PhoneView.getCustomEditText().setText(Value);
                            CustomTextView tv_phonetapTextType = PhoneView.gettap_text();
                            tv_phonetapTextType.setVisibility(View.GONE);
                            PhoneView.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(PhoneView.getCustomEditText());
                            break;
                        case CONTROL_TYPE_EMAIL:
                            Email EmailView = (Email) object;
                            EmailView.getCustomEditText().setText(Value);
                            CustomTextView tv_emailtapTextType = EmailView.gettap_text();
                            tv_emailtapTextType.setVisibility(View.GONE);
                            EmailView.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(EmailView.getCustomEditText());
                            break;
                        case CONTROL_TYPE_CAMERA:

                            break;
                        case CONTROL_TYPE_IMAGE:
                            Image ImageView = (Image) object;
                            if (Value.startsWith("http")) {
                                Value = Value.split("\\,")[0];
                                temp_controlObj.setImageData(Value);
                                if (isNetworkStatusAvialable(context)) {
                                    Glide.with(context).load(Value).into(ImageView.mainImageView);
                                }
                            }
                            break;
                        case CONTROL_TYPE_LARGE_INPUT:
                            LargeInput LargeInputView = (LargeInput) object;
                            CustomTextView tv_largetapTextType = LargeInputView.gettap_text();
                            tv_largetapTextType.setVisibility(View.GONE);
                            LargeInputView.getCustomEditText().setVisibility(View.VISIBLE);
                            if (LargeInputView.isEditorModeEnabled()) {
                                LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                LargeInputView.getEditorToolBar().setVisibility(View.VISIBLE);
                                LargeInputView.getTextEditor().setHtml(Value);
                            } else if (LargeInputView.isHTMLViewerEnabled()) {
                                LargeInputView.getCustomEditText().setVisibility(View.GONE);
                                LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                                LargeInputView.getEditorToolBar().setVisibility(View.GONE);
                                LargeInputView.getTextEditor().setHtml(Value);
                            } else {
                                LargeInputView.getCustomEditText().setVisibility(View.VISIBLE);
                                LargeInputView.getCustomEditText().setText(Value);
                            }
//                            ImproveHelper.setFocus(LargeInputView.getCustomEditText());
                            break;
                        case CONTROL_TYPE_CHECKBOX:
                            Checkbox CheckBoxView = (Checkbox) object;
                            CheckBoxView.setCheckBoxBoolean(Value);
                            break;
                        case CONTROL_TYPE_FILE_BROWSING:

                            break;
                        case CONTROL_TYPE_CALENDER:

                            break;
                        case CONTROL_TYPE_AUDIO_PLAYER:

                            break;
                        case CONTROL_TYPE_VIDEO_PLAYER:

                            break;
                        case CONTROL_TYPE_PERCENTAGE:
                            Percentage PercentageView = (Percentage) object;
                            PercentageView.getCustomEditText().setText(Value);
                            CustomTextView tv_pertapTextType = PercentageView.gettap_text();
                            tv_pertapTextType.setVisibility(View.GONE);
                            PercentageView.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(PercentageView.getCustomEditText());
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView RGroup = (RadioGroupView) object;
                            boolean foundflag = true;
                            int childs = RGroup.getRadioGroup().getChildCount();
                            for (int j = 0; j < childs; j++) {
                                RadioButton rb = (RadioButton) RGroup.getRadioGroup().getChildAt(j);
                                if (rb.getText().toString().trim().equalsIgnoreCase(Value.trim())) {
                                    foundflag = false;
                                    RGroup.getRadioGroup().check(rb.getId());
                                }
                            }
                            if (foundflag) {
                                RadioButton rb = (RadioButton) RGroup.getRadioGroup().getChildAt(RGroup.getRadioGroup().getChildCount() - 1);
                                if (rb.getText().toString().equalsIgnoreCase(context.getString(R.string.other))) {
                                    RGroup.getRadioGroup().check(rb.getId());
                                    View v = RGroup.getRadioGroupView();
                                    CustomEditText ce_rg_other = v.findViewById(R.id.ce_otherchoice);
                                    ce_rg_other.setText(Value);
                                }
                            }
//                            ImproveHelper.setFocus(RGroup.getRadioGroupView());
                            break;
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) object;
                            boolean dropfoundflag = true;
                            List<String> data = new ArrayList<String>();
                            data.add(Value);
                            dropDown.setnewItemsDynamically(data);

                            break;
                       /* case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) object;
                            boolean dropfoundflag = true;
                            List<SpinnerData> data = dropDown.loadSpinnerData(temp_controlObj.getItems());
                            for (int j = 0; j < data.size(); j++) {

                                if (data.get(i).getId().trim().equalsIgnoreCase(Value.trim())) {
                                    foundflag = false;
                                    dropDown.setSelectedDropdownItem(data.get(i).getId());
                                }
                            }
                            if (dropfoundflag) {

                                dropDown.setSelectedDropdownItem(("" + (data.size() - 1)));

                                View v = dropDown.getDropdown();
                                CustomEditText ce_rg_other = v.findViewById(R.id.ce_otherchoice);
                                ce_rg_other.setText(Value);

                            }

                            break;*/
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList checkList = (CheckList) object;
                            List<String> checkdata = new ArrayList<String>();
                            checkdata.add(Value);
                            checkList.setnewItemsDynamically(checkdata);
                            break;
                        case CONTROL_TYPE_SIGNATURE:

                            break;
                        case CONTROL_TYPE_URL_LINK:
                            break;
                        case CONTROL_TYPE_DECIMAL:
                            DecimalView Decimalview = (DecimalView) object;
                            Decimalview.getCustomEditText().setText(Value);
                            CustomTextView tv_DectapTextType = Decimalview.gettap_text();
                            tv_DectapTextType.setVisibility(View.GONE);
                            Decimalview.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(Decimalview.getCustomEditText());
                            break;
                        case CONTROL_TYPE_PASSWORD:
                            Password Passwordview = (Password) object;
                            Passwordview.getCustomEditText().setText(Value);
                            LinearLayout ll_tap_text = Passwordview.gettap_text();
                            ll_tap_text.setVisibility(View.GONE);
                            Passwordview.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(Passwordview.getCustomEditText());
                            break;
                        case CONTROL_TYPE_CURRENCY:
                            Currency Currencyview = (Currency) object;
                            Currencyview.getCustomEditText().setText(Value);
                            CustomTextView tv_CurtapTextType = Currencyview.gettap_text();
                            tv_CurtapTextType.setVisibility(View.GONE);
                            Currencyview.getCustomEditText().setVisibility(View.VISIBLE);
//                            ImproveHelper.setFocus(Currencyview.getCustomEditText());
                            break;
                        case CONTROL_TYPE_RATING:
                            break;
                        case CONTROL_TYPE_DYNAMIC_LABEL:
                            DynamicLabel DynamicLabeliew = (DynamicLabel) object;
                            CustomTextView tv_dynamicLabel = DynamicLabeliew.getValueView();
//                            tv_dynamicLabel.setText(Value);
                            DynamicLabeliew.setValue(Value);
                            break;
                    }

                }
            }
        } catch (Exception e) {
            System.out.println("Error at setvalue==" + e);
        }
    }

    private void setGetDataStatusInGlobal(String response, ActionWithoutCondition_Bean ActionBean) {
        try {
            JSONObject jObj = new JSONObject(response);
            LinkedHashMap<String, LinkedHashMap<String, String>> tempGetData = new LinkedHashMap<>();
            if (AppConstants.GlobalObjects.getGetData_ResponseHashMap() != null) {
                tempGetData = AppConstants.GlobalObjects.getGetData_ResponseHashMap();
            }
            LinkedHashMap<String, String> temp_response = tempGetData.get(ActionBean.getActionId());
            if (temp_response == null) {
                temp_response = new LinkedHashMap<>();
            }
            //Status Code :Status
            temp_response.put("__Status Code".toLowerCase(), jObj.has("Status") ? jObj.getString("Status") : "");
            //Message :Message
            temp_response.put("__Message".toLowerCase(), jObj.has("Message") ? jObj.getString("Message") : "");

            if (jObj.has("Details")) {
                JSONObject detailsObj = jObj.getJSONObject("Details");
                //Detailed Message:Detailedmessage
                temp_response.put("__Detailed Message".toLowerCase(), detailsObj.has("Detailedmessage") ? detailsObj.getString("Detailedmessage") : "");
                //Records Count:Rowcount
                temp_response.put("__Records Count".toLowerCase(), detailsObj.has("Rowcount") ? detailsObj.getString("Rowcount") : "");
            } else {
                //Detailed Message:Detailedmessage
                temp_response.put("__Detailed Message".toLowerCase(), "");
                //Records Count:Rowcount
                temp_response.put("__Records Count".toLowerCase(), "");
            }
            tempGetData.put(ActionBean.getActionId(), temp_response);
            AppConstants.GlobalObjects.setGetData_ResponseHashMap(tempGetData);
            System.out.println("Response:" + AppConstants.GlobalObjects.getGetData_ResponseHashMap());
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setGetDataStatusInGlobal", e);
        }
    }

    public void bothWrapContentAndDp(String strControlType, String strControlName, ScrollView scrollView) {
        try {
            if (dataCollectionObject.isUIFormNeeded() && dataCollectionObject.getUiPrimaryLayoutModelClass() != null
                    && dataCollectionObject.getUiPrimaryLayoutModelClass().getLayoutPropertiesList() != null) {

                List<LayoutProperties> layoutPropertiesList = dataCollectionObject.getUiPrimaryLayoutModelClass().getLayoutPropertiesList();
                if (layoutPropertiesList != null && layoutPropertiesList.size() > 0) {
                    for (int i = 0; i < layoutPropertiesList.size(); i++) {
                        UILayoutProperties uiLayoutProperties = layoutPropertiesList.get(i).getUiLayoutProperties();
                        MappingControlModel mappingControlModel = layoutPropertiesList.get(i).getLayoutControl();
                        if (uiLayoutProperties != null && uiLayoutProperties.getWrap_or_dp() != null && !uiLayoutProperties.getWrap_or_dp().isEmpty()) {
                            if (uiLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.both_wrap_dp))) {
                                if (strControlType.equalsIgnoreCase(CONTROL_TYPE_DATA_VIEWER)) {
                                    DataViewer dataViewer = (DataViewer) List_ControlClassObjects.get(strControlName);
                                    linearLayout.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            linearLayout.getMeasuredHeight();
                                            if (uiLayoutProperties.getHeight() > 0 && pxToDP(scrollView.getMeasuredHeight()) > pxToDP((uiLayoutProperties.getHeight()))) {

                                                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams
                                                        (ViewGroup.LayoutParams.MATCH_PARENT, (uiLayoutProperties.getHeight() * screenHeight) / 100);
                                                scrollView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, pxToDP((uiLayoutProperties.getHeight()))));
                                            } else {
                                                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams
                                                        (ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                                                scrollView.setLayoutParams(layoutParams);
                                            }
                                        }
                                    });
                                } else if (strControlType.equalsIgnoreCase(CONTROL_TYPE_SUBFORM)) {
                                    SubformView subformView = (SubformView) List_ControlClassObjects.get(strControlName);

                                    linearLayout.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            linearLayout.getMeasuredHeight();
                                            if (scrollView != null) {
                                                if (uiLayoutProperties.getHeight() > 0 && pxToDP(scrollView.getMeasuredHeight()) >= pxToDP(uiLayoutProperties.getHeight())) {
                                                    scrollView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, pxToDP((uiLayoutProperties.getHeight()))));
                                                } else {
                                                    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                                                    scrollView.setLayoutParams(layoutParams);
                                                }
                                            }
                                        }
                                    });
                                } else if (strControlType.equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                                    GridControl gridView = (GridControl) List_ControlClassObjects.get(strControlName);

                                    linearLayout.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            if (uiLayoutProperties.getHeight() > 0 && pxToDP(scrollView.getMeasuredHeight()) >= pxToDP(uiLayoutProperties.getHeight())) {
                                                scrollView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, pxToDP((uiLayoutProperties.getHeight()))));
                                            } else {
                                                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams
                                                        (ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                                                scrollView.setLayoutParams(layoutParams);
                                            }
                                        }
                                    });
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "bothWrapAndDp", e);
        }
    }

    private void setMapObject() {
        MapControl mapControl = subFormMapControls.get(subIndex);
        gMap = mapControl.getGoogleMap();
        mapControl.getMapView().getMapAsync(googleMap -> {
            gMap = googleMap;
            if (mapControl.getMapViewType() != null) {
                mapControl.setMapPonitsDynamically(mapControl.getMapViewType(), subFormMappedValues.get(subIndex), null);
            } else {
                mapControl.setMapPonitsDynamically(AppConstants.map_Multiple_Marker, subFormMappedValues.get(subIndex), null);
            }

            subIndex++;


            if (subIndex != subFormMapControls.size()) {
                setMapObject();
            }


        });
    }

    private void loadItemsFromRealm(ControlObject controlObject) {
        try {
            DataControls DataControls = improveDataBase.getDataControls(controlObject.getDataControlName());
            //Get Keys
            DynamicRealm dynamicRealm=RealmDBHelper.getDynamicRealm();
            DynamicRealmObject keysData = dynamicRealm.where(RealmTables.ControlKeys.TABLE_NAME).equalTo(RealmTables.ControlKeys.ControlName, DataControls.getControlName()).findFirst();
            RealmResults<DynamicRealmObject> controlData = dynamicRealm.where(DataControls.getControlName()).findAll();
            if (keysData != null) {
                String ControlName = keysData.getString(RealmTables.ControlKeys.ControlName);
                String KeyID = keysData.getString(RealmTables.ControlKeys.KeyID);
                String KeyName = keysData.getString(RealmTables.ControlKeys.KeyName);
                if (!ImproveHelper.getLocale(MainActivity.this).equalsIgnoreCase("en")) {
                    KeyName = KeyName + "_" + ImproveHelper.getLocale(MainActivity.this);
                }
                List<New_DataControl_Bean> dataControlBeanList = new ArrayList<>();
                for (int i = 0; i < controlData.size(); i++) {
                    DynamicRealmObject dro = controlData.get(i);
                    New_DataControl_Bean dataControl_bean = new New_DataControl_Bean();
                    dataControl_bean.setDc_id(dro.getString(KeyID));
                    dataControl_bean.setDc_value(dro.getString(KeyName));
                    dataControl_bean.setDc_name(ControlName);
                    dataControl_bean.setDc_KeyId(KeyID);
                    dataControl_bean.setDc_KeyName(KeyName);
                    if (!controlObject.getDependentControl().isEmpty()) {
                        dataControl_bean.setDc_dependency(controlObject.getDependentControl());
                    }
                    dataControlBeanList.add(dataControl_bean);
                }

                Gson gson = new Gson();
                String jsonDataControlItemsGet = PrefManger.getSharedPreferencesString(context, controlObject.getControlName(), "");
                Log.d(TAG, "loadItems_in: " + "IN");
                String jsonDataControlItems2 = gson.toJson(dataControlBeanList);
                PrefManger.putSharedPreferencesString(context, controlObject.getControlName(), jsonDataControlItems2);
            }
            dynamicRealm.close();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "loadItems", e);
        }
    }

    private void loadItems_old_realm(ControlObject controlObject) {

//        String textFile = "DC_" + controlObject.getDataControlName() + ".txt";

        try {
            DataControls DataControls = improveDataBase.getDataControls(controlObject.getDataControlName());
            String[] strsplit = DataControls.getTextFilePath().split("/");
            String strFileName = strsplit[strsplit.length - 1];
            String line = ImproveHelper.readTextFileFromSD(context, strFileName, sessionManager.getOrgIdFromSession());


            if (!line.equals("")) {

                try {
                    JSONObject jobj_textfile = new JSONObject(line);
                    String ControlName = jobj_textfile.getString("ControlName");
                    String KeyID = jobj_textfile.getString("KeyID");
                    String KeyName = jobj_textfile.getString("KeyName");
                    String keyName1 = jobj_textfile.getString("KeyName");
                    JSONArray jarr_Data = jobj_textfile.getJSONArray("Data");
                    List<New_DataControl_Bean> dataControlBeanList = new ArrayList<>();
                    if (!ImproveHelper.getLocale(MainActivity.this).equalsIgnoreCase("en")) {
                        KeyName = KeyName + "_" + ImproveHelper.getLocale(MainActivity.this);
                    }
                    for (int i = 0; i < jarr_Data.length(); i++) {

                        New_DataControl_Bean dataControl_bean = new New_DataControl_Bean();
                        dataControl_bean.setDc_id(jarr_Data.getJSONObject(i).getString(KeyID));
                        if (KeyName != null) {
                            dataControl_bean.setDc_value(jarr_Data.getJSONObject(i).getString(keyName1));
                        } else {
                            dataControl_bean.setDc_value(jarr_Data.getJSONObject(i).getString(KeyName));
                        }
                        dataControl_bean.setDc_name(ControlName);
                        dataControl_bean.setDc_KeyId(KeyID);
                        dataControl_bean.setDc_KeyName(KeyName);

                        if (!controlObject.getDependentControl().isEmpty()) {
                            LinkedHashMap<String, String> depen_hash = new LinkedHashMap<String, String>();
                            Iterator<String> dataobj_keys = jarr_Data.getJSONObject(i).keys();

                            while (dataobj_keys.hasNext()) {
                                String tempkey = dataobj_keys.next();
                                if (!KeyID.equalsIgnoreCase(tempkey) && !keyName1.equalsIgnoreCase(tempkey)) {
                                    if (!tempkey.startsWith(keyName1 + "_")) {
                                        depen_hash.put(tempkey, jarr_Data.getJSONObject(i).getString(tempkey));
                                    }
                                }
                            }

                            dataControl_bean.setDc_DependencyValues(depen_hash);

                            dataControl_bean.setDc_dependency(controlObject.getDependentControl());

                        }
                        dataControlBeanList.add(dataControl_bean);
                    }


                    Gson gson = new Gson();

                    String jsonDataControlItemsGet = PrefManger.getSharedPreferencesString(context, controlObject.getControlName(), "");

//                Type type = new TypeToken<List<New_DataControl_Bean>>() {
//                }.getType();
//                List<New_DataControl_Bean> dataControl_beans = gson.fromJson(jsonDataControlItemsGet, type);

//                if (dataControl_beans == null) {

                    Log.d(TAG, "loadItems_in: " + "IN");
                    String jsonDataControlItems2 = gson.toJson(dataControlBeanList);
                    PrefManger.putSharedPreferencesString(context, controlObject.getControlName(), jsonDataControlItems2);


//                }


                } catch (JSONException E) {
                    System.out.println("Error==" + E);
                }


            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "loadItems", e);
        }
    }

    private void loadItems_old(ControlObject controlObject) {

        String textFile = "DC_" + controlObject.getDataControlName() + ".txt";

        String line = ImproveHelper.readTextFileFromSD(context, textFile, sessionManager.getOrgIdFromSession());

        if (!line.equals("")) {
            String[] splitPipe = line.split("\\|");
            List<DataControl_Bean> dataControlBeanList = new ArrayList<>();

            for (int i = 0; i < splitPipe.length; i++) {

                String[] splitComma = splitPipe[i].trim().split("\\,");

                String id = splitComma[0];
                String value = splitComma[1];

                DataControl_Bean dataControl_bean = new DataControl_Bean();
                dataControl_bean.setDc_id(id);
                dataControl_bean.setDc_value(value);
                dataControl_bean.setDc_name(controlObject.getControlName());
                if (!controlObject.getDependentControl().isEmpty()) {

                    dataControl_bean.setDc_dependency(controlObject.getDependentControl());

                }
                dataControlBeanList.add(dataControl_bean);
            }

            Gson gson = new Gson();

            String jsonDataControlItemsGet = PrefManger.getSharedPreferencesString(context, controlObject.getControlName(), "");

            Type type = new TypeToken<List<DataControl_Bean>>() {
            }.getType();
            List<DataControl_Bean> dataControl_beans = gson.fromJson(jsonDataControlItemsGet, type);

            if (dataControl_beans == null) {

                Log.d(TAG, "loadItems_in: " + "IN");
                String jsonDataControlItems2 = gson.toJson(dataControlBeanList);
                PrefManger.putSharedPreferencesString(context, controlObject.getControlName(), jsonDataControlItems2);


            }
        }
    }

    public void loadAppIcon(String appIconPath) {

        try {
            if (appIconPath != null) {
                String[] imgUrlSplit = appIconPath.split("/");
                String imgNameInPackage = imgUrlSplit[imgUrlSplit.length - 1].replaceAll(" ", "_");
                String replaceWithUnderscore = strAppName.replaceAll(" ", "_");
                Log.d(TAG, "loadAppIconAppNameM: " + replaceWithUnderscore);
                String strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + replaceWithUnderscore;
                if (ImproveHelper.isFileExistsInExternalPackage(context, strSDCardUrl, imgNameInPackage)) {
//                    Log.d(TAG, "isFileExistsInExternalPackage: "+"Yes");
                    improveHelper.setImageFromPackageFolder(context, strSDCardUrl, imgNameInPackage, iv_circle_appIcon);
                } else {
//                    Log.d(TAG, "isFileExistsInExternalPackage: "+"NO");
                    if (isNetworkStatusAvialable(context)) {
                        Glide.with(context).load(appIconPath).into(iv_circle_appIcon);
                    } else {
                        //improveHelper.snackBarAlertActivities(context, MainLinearLayout);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "loadAppIcon", e);
        }
    }

    public LinkedHashMap<String, List<String>> Convert_JSON(String serviceResponse, String[] OutParam_Names) {
        LinkedHashMap<String, List<String>> OutputData = new LinkedHashMap<String, List<String>>();
        try {
            JSONObject jmainobj = new JSONObject(serviceResponse);
            if (jmainobj.getString("Status").equalsIgnoreCase("200")) {
                JSONArray Jarr = jmainobj.getJSONArray("FormData");
                for (int i = 0; i < Jarr.length(); i++) {
                    JSONObject Jobj = Jarr.getJSONObject(i);
                    for (int j = 0; j < OutParam_Names.length; j++) {

                        String jobjvalue = "";
                        if (!Jobj.isNull(OutParam_Names[j])) {
                            jobjvalue = Jobj.getString(OutParam_Names[j]);
                        }
                        if (OutputData.containsKey(OutParam_Names[j].toLowerCase())) {
                            List<String> value = OutputData.get(OutParam_Names[j].toLowerCase());
                            value.add(jobjvalue);
                            OutputData.put(OutParam_Names[j].toLowerCase(), value);
                        } else {
                            List<String> value = new ArrayList<String>();
                            value.add(jobjvalue);
                            OutputData.put(OutParam_Names[j].toLowerCase(), value);
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "Convert_JSON", e);
        }

        return OutputData;
    }

    /*{"Status":"200","Message":"Success","FormData":[{"fpo_name":"Kotturu Tribal FPO","State":"Andhra Pradesh","State_id":"1","District":"Srikakulam","District_id":"1","Mandal":"Kothuru","Mandal_id":"15","fpo_type":"Agriculture","fpo_typeid":"01","address":"Mahasingi village","fpo_geo-tagging_Coordinates":null,"fpo_geo-tagging_Type":null}]}*/
    public LinkedHashMap<String, List<String>> Convert_JSON1(String serviceResponse, String[] OutParam_Names) {
        LinkedHashMap<String, List<String>> OutputData = new LinkedHashMap<String, List<String>>();
        try {
            try {
                JSONObject jsonObject = new JSONObject(serviceResponse);
                if (jsonObject.getString("Status").contentEquals("200")) {
                    JSONArray jsonArray = jsonObject.getJSONArray("FormData");
                    for (int i = 0; i < jsonArray.length(); i++) {
                        JSONObject object = jsonArray.getJSONObject(i);
                        for (int j = 0; j < object.length(); j++) {


                        }

                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            try {
                JSONObject jmainobj = new JSONObject(serviceResponse);
                if (jmainobj.getString("Status").equalsIgnoreCase("200")) {
                    JSONArray Jarr = jmainobj.getJSONArray("FormData");
                    for (int i = 0; i < Jarr.length(); i++) {
                        JSONObject Jobj = Jarr.getJSONObject(i);
                        for (int j = 0; j < OutParam_Names.length; j++) {

                            String jobjvalue = "";
                            if (!Jobj.isNull(OutParam_Names[j])) {
                                jobjvalue = Jobj.getString(OutParam_Names[j]);
                            }
                            if (OutputData.containsKey(OutParam_Names[j].toLowerCase())) {
                                List<String> value = OutputData.get(OutParam_Names[j].toLowerCase());
                                value.add(jobjvalue);
                                OutputData.put(OutParam_Names[j].toLowerCase(), value);
                            } else {
                                List<String> value = new ArrayList<String>();
                                value.add(jobjvalue);
                                OutputData.put(OutParam_Names[j].toLowerCase(), value);
                            }
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "Convert_JSON1", e);
        }
        return OutputData;
    }

    public LinkedHashMap<String, List<String>> Convert_JSONForSQL(String serviceResponse, String[] OutParam_Names) {
        LinkedHashMap<String, List<String>> OutputData = new LinkedHashMap<String, List<String>>();
        try {
            JSONObject jmainobj = new JSONObject(serviceResponse);
            if (jmainobj.getString("Status").equalsIgnoreCase("200")) {
                JSONArray Jarr = jmainobj.getJSONArray("Data");
                String outParameters = jmainobj.getString("OutParameters");
                OutParam_Names = outParameters.split("\\|");
                for (int i = 0; i < Jarr.length(); i++) {
                    JSONObject Jobj = Jarr.getJSONObject(i);
                    for (int j = 0; j < OutParam_Names.length; j++) {
                        String jobjvalue = Jobj.getString(OutParam_Names[j]);
                        if (OutputData.containsKey(OutParam_Names[j].toLowerCase())) {
                            List<String> value = OutputData.get(OutParam_Names[j].toLowerCase().trim());
                            value.add(jobjvalue);
                            OutputData.put(OutParam_Names[j].toLowerCase().trim(), value);
                        } else {
                            List<String> value = new ArrayList<String>();
                            value.add(jobjvalue);
                            OutputData.put(OutParam_Names[j].toLowerCase().trim(), value);
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "Convert_JSONForSQL", e);
        }

        return OutputData;
    }

    public LinkedHashMap<String, List<String>> Convert_JSONForDML(String serviceResponse, String[] OutParam_Names) {
        LinkedHashMap<String, List<String>> OutputData = new LinkedHashMap<String, List<String>>();
        try {
            JSONObject jmainobj = new JSONObject(serviceResponse);
            if (jmainobj.getString("Status").equalsIgnoreCase("200")) {
                for (int j = 0; j < OutParam_Names.length; j++) {
                    String jobjvalue = jmainobj.getString(OutParam_Names[j]);
                    if (OutputData.containsKey(OutParam_Names[j].toLowerCase())) {
                        List<String> value = OutputData.get(OutParam_Names[j].toLowerCase());
                        value.add(jobjvalue);
                        OutputData.put(OutParam_Names[j].toLowerCase(), value);
                    } else {
                        List<String> value = new ArrayList<String>();
                        value.add(jobjvalue);
                        OutputData.put(OutParam_Names[j].toLowerCase(), value);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "Convert_JSONForDML", e);
        }

        return OutputData;
    }

    public void clearAndSubmitButtons2() {

        if (dataCollectionObject.getApp_Mode().equalsIgnoreCase("offline")) {
            cb_submit_formControls.setText(getString(R.string.save));
        } else if (dataCollectionObject.getApp_Mode().equalsIgnoreCase("hybrid")) {
            cb_submit_formControls.setText(getString(R.string.saveandsubmit));
            // iv_sync.setVisibility(View.VISIBLE);
        }

        if (dataCollectionObject.isEnableClearButton()) {
            cb_clear_formControls.setVisibility(View.VISIBLE);
        } else {
            cb_clear_formControls.setVisibility(View.GONE);
        }
        if (dataCollectionObject.isDefaultActionForSubmit()) {

            cb_submit_formControls.setVisibility(View.GONE);

        } else {
            if (dataCollectionObject.getSubmit_ButtonName() != null
                    && dataCollectionObject.getSubmit_ButtonName().length() > 0) {
                cb_submit_formControls.setText(dataCollectionObject.getSubmit_ButtonName());
                cb_submit_formControls.setBackgroundColor(Color.parseColor("#01294b"));
                cb_submit_formControls.setBackgroundTintList(null);
                if (dataCollectionObject.isSubmit_ButtonColorEnabel()) {
                    cb_submit_formControls.setTextColor(Color.parseColor(dataCollectionObject.getSubmit_ButtonColor()));
                }
                if (dataCollectionObject.isSubmit_ButtonFontSizeEnabel()) {
                    cb_submit_formControls.setTextSize(Float.parseFloat(dataCollectionObject.getSubmit_ButtonFontSize()));
                }
                cb_submit_formControls.setVisibility(View.GONE);
            } else {
                cb_submit_formControls.setVisibility(View.GONE);
            }
        }
    }

    public void clearAndSubmitButtons() {
        try {
            if (dataCollectionObject.getApp_Mode().equalsIgnoreCase("offline")) {
                cb_submit_formControls.setText(getString(R.string.save));
            } else if (dataCollectionObject.getApp_Mode().equalsIgnoreCase("hybrid")) {
                cb_submit_formControls.setText(getString(R.string.saveandsubmit));
                // iv_sync.setVisibility(View.VISIBLE);
            }

            if (dataCollectionObject.isEnableClearButton()) {
                cb_clear_formControls.setVisibility(View.VISIBLE);
            } else {
                cb_clear_formControls.setVisibility(View.GONE);
            }
            if (dataCollectionObject.isDefaultActionForSubmit() && checkForTableColumns()) {
                Log.d(TAG, "clearAndSubmitButtons: " + "true");
                cb_submit_formControls.setVisibility(View.GONE);

            } else if (dataCollectionObject.getSubmit_ButtonName() != null
                    && dataCollectionObject.getSubmit_ButtonName().length() > 0) {
                cb_submit_formControls.setText(dataCollectionObject.getSubmit_ButtonName());
                if (dataCollectionObject.getSubmit_ButtonColor() != null && !dataCollectionObject.getSubmit_ButtonColor().contentEquals("")) {
                    cb_submit_formControls.setBackgroundColor(Color.parseColor(dataCollectionObject.getSubmit_ButtonColor()));
                }
                cb_submit_formControls.setBackgroundTintList(null);
                if (dataCollectionObject.isSubmit_ButtonColorEnabel()) {
                    cb_submit_formControls.setTextColor(Color.parseColor(dataCollectionObject.getSubmit_ButtonColor()));
                }
                if (dataCollectionObject.isSubmit_ButtonFontSizeEnabel()) {
                    cb_submit_formControls.setTextSize(Float.parseFloat(dataCollectionObject.getSubmit_ButtonFontSize()));
                }
                cb_submit_formControls.setVisibility(View.GONE);

            } else {
                Log.d(TAG, "clearAndSubmitButtons: " + "test");
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "clearAndSubmitButtons", e);
        }
    }

    private boolean checkForTableColumns() {

        boolean result = false;
        try {
            if (dataCollectionObject.getTableSettingsType() != null && !dataCollectionObject.getTableSettingsType().equalsIgnoreCase("None")) {
                result = true;
            } else if (dataCollectionObject.getTableSettingsType() == null) {
                result = true;
            }
            if (!result) {
                if (subFormTableSettingsType.size() > 0) {
                    for (String tableSettingsType : subFormTableSettingsType) {
                        if (tableSettingsType != null && !tableSettingsType.equalsIgnoreCase("None")) {
                            result = true;
                            break;
                        } else if (tableSettingsType == null) {
                            result = true;
                            break;
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "checkForTableColumns", e);
        }
        return result;
    }
//    private void startDownloadDataControl_2(DataControls dataControls, String filePath, String appName, int flag, int refreshFlag) {
//
//        boolean resultDelete = false;
//        String[] imgUrlSplit = filePath.split("/");
//        String strSDCardUrl = null;
//
//        if (flag == 1) {
//            strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/" + imgUrlSplit[imgUrlSplit.length - 1];
//        } else {
//            strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + imgUrlSplit[imgUrlSplit.length - 1];
//        }
//
//        DataControls dataControlsFromDB = improveDataBase.getDataControlVersion(strOrgId, dataControls.getControlName(), sessionManager.getUserDataFromSession().getUserID());
//        if (dataControlsFromDB.getVersion() != null) {
//            if (dataControlsFromDB.getVersion().equalsIgnoreCase(dataControls.getVersion())) {
//                if (!ImproveHelper.isFileExitsInSDCard(strSDCardUrl)) {
//
//                    downloadDataControl(filePath, strSDCardUrl);
//
//                }
//
//            } else {
//                improveDataBase.deleteDataControlListData(strOrgId, dataControls.getControlName());
//                if (refreshFlag != 1) {
//                    improveDataBase.insertIntoDataControlTable(dataControls, strOrgId, sessionManager.getUserDataFromSession().getUserID());
//                }
//                if (ImproveHelper.isFileExitsInSDCard(strSDCardUrl)) {
//
//                    resultDelete = ImproveHelper.deleteFileIfExistsInSDCard(strSDCardUrl);
//                } else {
//                    resultDelete = true;
//                }
//                if (resultDelete) {
//
//                    downloadDataControl(filePath, strSDCardUrl);
//                }
//            }
//        } else {
//            if (refreshFlag != 1) {
//                improveDataBase.insertIntoDataControlTable(dataControls, strOrgId, sessionManager.getUserDataFromSession().getUserID());
//            }
//            if (ImproveHelper.isFileExitsInSDCard(strSDCardUrl)) {
//
//                resultDelete = ImproveHelper.deleteFileIfExistsInSDCard(strSDCardUrl);
//            } else {
//                resultDelete = true;
//            }
//            if (resultDelete) {
//
//                downloadDataControl(filePath, strSDCardUrl);
//            }
//        }
//
//    }

    public void CallNotification(ActionWithoutCondition_Bean ActionObj) {
        //nk sms
        /*{"SMSGatewayName":"ENTRO LABS","SMSTemplateID":"1707165944947466118",
        "MessageInputs":[{"KeyName":"mobile","KeyValue":"9885549002","Purpose":"2","Optional":"No","Static":"No"},
        {"KeyName":"{#OTP#}","KeyValue":"6666","Purpose":"0","Optional":"No","Static":"No"}]}
         maindata.put("username","entrolabs");
                    maindata.put("apikey", "13da8d76191878ba498a");
                    maindata.put("senderid", "entrol");
                    maindata.put("templateid", "1707165944947466118");
                    maindata.put("mobile", "7207286369");9
                    maindata.put("message", "Your OTP for user verification is: 9876 ENTRO LABS");*/
        try {
            String Notification_Type = ActionObj.getNotification_Type();
            if (Notification_Type.equalsIgnoreCase(getResources().getString(R.string.sms))) {
                if (ActionObj.getNotification_SMS_GatewayServiceCallsAt() != null && ActionObj.getNotification_SMS_GatewayServiceCallsAt().equalsIgnoreCase("mobile")) {
                    //http://bsms.entrolabs.com/v3/api.php?
                    // username=entrolabs&apikey=13da8d76191878ba498a&senderid=entrol&templateid=1707165944947466118&
                    // mobile=9885549002&message=Your OTP for user verification is: 9876 ENTRO LABS
                    List<SMSGateways_InputDetails_Bean> inGateWayData = ActionObj.getSmsGateways_inputDetails_beans();
                    List<SMS_InputParam_Bean> inTemplateData = ActionObj.getList_SMS_InputParam_Bean();
                    Map<String, String> maindata = new HashMap<>();
                    for (int i = 0; i < inGateWayData.size(); i++) {
                        SMSGateways_InputDetails_Bean gateWayData = inGateWayData.get(i);
                        if (gateWayData.getPurpose().equals("1")) {//1-static key names
                            maindata.put(gateWayData.getKeyName(), gateWayData.getKeyValue());
                        } else if (gateWayData.getPurpose().equals("2")) {//2-Mobile no
                            for (int j = 0; j < inTemplateData.size(); j++) {
                                SMS_InputParam_Bean sms_inputParam_bean = inTemplateData.get(j);
                                if (sms_inputParam_bean.getInParam_Purpose().equals("2")) {
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    String value = ehelper.ExpressionHelper(this, sms_inputParam_bean.getInParam_Mapped_ID());
                                    maindata.put(gateWayData.getKeyName(), value);
                                    break;
                                }
                            }
                        } else if (gateWayData.getPurpose().equals("3")) {//3-template id
                            maindata.put(gateWayData.getKeyName(), ActionObj.getNotification_SMS_TemplateID());
                        } else if (gateWayData.getPurpose().equals("4")) {//4-message content
                            String msg = ActionObj.getNotification_SMS_TemplateMessage();
                            for (int j = 0; j < inTemplateData.size(); j++) {
                                SMS_InputParam_Bean sms_inputParam_bean = inTemplateData.get(j);
                                if (sms_inputParam_bean.getInParam_Purpose().equals("0")) {
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    String value = ehelper.ExpressionHelper(this, sms_inputParam_bean.getInParam_Mapped_ID());
                                    msg = msg.replace(sms_inputParam_bean.getInParam_Name(), value);
                                    maindata.put(gateWayData.getKeyName(), msg);
                                }
                            }

                        }
                    }
                    showProgressDialog("Please Wait! Sending...");
                    String url = ActionObj.getNotification_SMS_GatewayServiceURL();
                    getServices = RetrofitUtils.getUserServiceA(url.substring(0, url.lastIndexOf("/")));
                    Call<String> call = getServices.sendSMSGatewayExecutionPHP(url.substring(url.lastIndexOf("/") + 1), maindata);
                    call.enqueue(new Callback<String>() {
                        @Override
                        public void onResponse(Call<String> call, Response<String> response) {
                            //"{'campid':'72d2b35c5cf1a47f3817'}"
                            dismissProgressDialog();
                            if (response.code() == 200) {
                                showToast(context, response.message());
                                setSMSResponsetoGlobalObjects(ActionObj, response.body());
                            } else {
                                showToast(context, response.message());
                            }
                            if (FromAction == 1) {
                                Executeindex++;
                                EventExecute();
                            } else {
                                Executeindex++;
                                checkandExecute(IfElseBlock_Bean);
                            }
                        }

                        @Override
                        public void onFailure(Call<String> call, Throwable t) {
                            showToast(context, t.getMessage());
                            System.out.println("Response:" + t);
                            dismissProgressDialog();
                            if (FromAction == 1) {
                                Executeindex++;
                                EventExecute();
                            } else {
                                Executeindex++;
                                checkandExecute(IfElseBlock_Bean);
                            }
                        }
                    });
                } else {
                    JSONObject jsonObject = new JSONObject();
//                    jsonObject.put("SMSGatewayName", ActionObj.getNotification_SMS_GatewayName());
                    jsonObject.put("SMSGatewayName", "Entro Labs");
                    //jsonObject.put("SMSTemplateID", ActionObj.getNotification_SMS_TemplateID());
                    jsonObject.put("SMSTemplateID", "1707165944947466118");
                    SMS_InputParam_Bean sms_inputParam_bean1 = ActionObj.getList_SMS_InputParam_Bean().get(0);
                    for (int i = 0; i < ActionObj.getList_SMS_InputParam_Bean().size(); i++) {
                        if (ActionObj.getList_SMS_InputParam_Bean().get(i).getInParam_Name().contentEquals("mobile")) {
                            sms_inputParam_bean1 = ActionObj.getList_SMS_InputParam_Bean().get(i);
                            break;
                        }

                    }
                    ExpressionMainHelper ehelper1 = new ExpressionMainHelper();
                    String value1 = ehelper1.ExpressionHelper(this, sms_inputParam_bean1.getInParam_ExpressionValue());
                    jsonObject.put("MobileNos", value1);
                    JSONArray jsonArray = new JSONArray();
                    for (int i = 0; i < ActionObj.getList_SMS_InputParam_Bean().size(); i++) {
                        if (i != 0) {
                            SMS_InputParam_Bean sms_inputParam_bean = ActionObj.getList_SMS_InputParam_Bean().get(i);
                            if (sms_inputParam_bean.getInParam_Static().equals("No")) {
                                JSONObject sms = new JSONObject();
                                sms.put("KeyName", sms_inputParam_bean.getInParam_Name());
                                ExpressionMainHelper ehelper = new ExpressionMainHelper();
//                            String value = ehelper.ExpressionHelper(this, sms_inputParam_bean.getInParam_Mapped_ID());
                                String value = ehelper.ExpressionHelper(this, sms_inputParam_bean.getInParam_ExpressionValue());
                                sms.put("KeyValue", value);
                                sms.put("Purpose", sms_inputParam_bean.getInParam_Purpose());
                                sms.put("Optional", sms_inputParam_bean.getInParam_Optional());
                                sms.put("Static", sms_inputParam_bean.getInParam_Static());
                                jsonArray.put(sms);
                            }
                        }
                    }
                    jsonObject.put("TemplateInputDetails", jsonArray);
//                    jsonObject.put("MessageInputs", jsonArray);

                    JsonParser jsonParser = new JsonParser();
                    JsonObject jo = (JsonObject) jsonParser.parse(jsonObject.toString());
                    showProgressDialog("Please Wait! Sending...");
                    Call<String> call = getServices.sendSMSGatewayExecution(sessionManager.getAuthorizationTokenId(), jo);
                    call.enqueue(new Callback<String>() {
                        @Override
                        public void onResponse(Call<String> call, Response<String> response) {

                            try {
                                JSONObject Jobj = new JSONObject(response.body());
                                if (response.code() == 200) {
                                    showToast(context, response.message());
                                    setSMSResponsetoGlobalObjects(ActionObj, response.body());
                                } else {
                                    showToast(context, response.message());
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            dismissProgressDialog();
                            if (FromAction == 1) {
                                Executeindex++;
                                EventExecute();
                            } else {
                                Executeindex++;
                                checkandExecute(IfElseBlock_Bean);
                            }

                        }

                        @Override
                        public void onFailure(Call<String> call, Throwable t) {
                            dismissProgressDialog();
                            if (FromAction == 1) {
                                Executeindex++;
                                EventExecute();
                            } else {
                                Executeindex++;
                                checkandExecute(IfElseBlock_Bean);
                            }
                        }
                    });
                }


            }
            else if (Notification_Type.equalsIgnoreCase(getResources().getString(R.string.email))) {
                showProgressDialog(getString(R.string.loading));
                ExpressionMainHelper ehelpera = new ExpressionMainHelper();
                String emailType = ActionObj.getNotification_Email_Type();
                if (emailType.contentEquals("Multiple")) {
                    String Notification_eMail_ToID = ehelpera.ExpressionHelper(this, ActionObj.getNotification_eMail_ToID());
                    String[] emailIdsArray = Notification_eMail_ToID.split(",");
                    sendEmailService(emailIdsArray, ActionObj);
                } else {

                    String Notification_eMail_ToID = ehelpera.ExpressionHelper(this, ActionObj.getNotification_eMail_ToID());

                    String Notification_eMail_Subject = ehelpera.ExpressionHelper(this,ActionObj.getNotification_eMail_Subject());
                    String Notification_eMail_Message = "";
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();

                    Notification_eMail_Message = ehelper.ExpressionHelper(this, ActionObj.getNotification_eMail_Message());


                    Map<String, String> maindata = new HashMap<>();
//                    maindata.put("Subject", Notification_eMail_Subject);
                    maindata.put("Subject", Notification_eMail_Subject);
                    maindata.put("Body", Notification_eMail_Message);
                    maindata.put("ToEMail", Notification_eMail_ToID);
                    maindata.put("HTMLFlag", "true");
                    maindata.put("EmailGatewayName", ActionObj.getNotification_eMail_Gateway());
//                maindata.put("EMailGatewayName", "Bhargo GMail");

//               JSONObject maindata = new JSONObject();
//                maindata.put("Subject", Notification_eMail_Subject);
//                maindata.put("BodyContent", Notification_eMail_Message);
//                maindata.put("ToAddress", Notification_eMail_ToID);
//                maindata.put("HTMLFlag", true);

                    System.out.println("Notification_eMail_Subject at Email ==" + Notification_eMail_Message);
                    Call<String> call = getServices.SendEmail(sessionManager.getAuthorizationTokenId(), maindata);
                    call.enqueue(new Callback<String>() {
                        @Override
                        public void onResponse(Call<String> call, Response<String> response) {
                            Log.e("Result: ", "" + response.body());
//                            dismissProgressDialog();
                            try {
                                JSONObject jobj = new JSONObject(response.body());
                                String Status = jobj.getString("Status");
                                String Message = jobj.getString("Message");

                                if (ActionObj.isSuccessMessageIsEnable()) {
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    String expMessage = ehelper.ExpressionHelper(MainActivity.this, ActionObj.getMessage_Success());
                                    if (ActionObj.getMessage_SuccessDisplayType().equalsIgnoreCase("2")) {
                                        ShowMessageDialogWithOk(context, expMessage, 2);
                                    } else {
                                        Toast.makeText(context, expMessage, Toast.LENGTH_SHORT).show();
                                    }


                                } else {
                                    ImproveHelper.showToast(context, "Email Sent..");
                                }


                                if (FromAction == 1) {
                                    Executeindex++;
                                    EventExecute();
                                } else {
                                    Executeindex++;
                                    checkandExecute(IfElseBlock_Bean);
                                }

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                            dismissProgressDialog();
                        }

                        @Override
                        public void onFailure(Call<String> call, Throwable t) {
                            dismissProgressDialog();
                            if (FromAction == 1) {
                                Executeindex++;
                                EventExecute();
                            } else {
                                Executeindex++;
                                checkandExecute(IfElseBlock_Bean);
                            }
                        }
                    });
                }


            } else {
                String Notification_InApp_Message = "";
//            mGetTokenId(strOrgId);
                ExpressionMainHelper ehelper_Receiver = new ExpressionMainHelper();
                String Receiver = "";
                String ReceiveruserId = "";
                String ReceiverPostId = "";
                if (ActionObj.isNotification_ReceiverId_ExpressionFlag()) {
                    Receiver = ehelper_Receiver.ExpressionHelper(this, ActionObj.getNotification_ReceiverId_Expression());
                } else {
                    Receiver = ehelper_Receiver.ExpressionHelper(this, ActionObj.getNotification_InApp_MessageReceiverID());
                }
                if (Receiver.contains("$")) {
                    ReceiveruserId = Receiver.substring(0, Receiver.indexOf("$"));
                    ReceiverPostId = Receiver.substring(Receiver.indexOf("$") + 1);
                } else {
                    ReceiveruserId = Receiver;
                }

                if (ActionObj.getNotification_Expression() != null && ActionObj.getNotification_Expression().trim().length() != 0) {
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    Notification_InApp_Message = ehelper.ExpressionHelper(this, ActionObj.getNotification_Expression());
//                Notification_InApp_Message = ehelper.ExpressionHelper(this, "2*3\"This is the sum of some values\"summation(5,3)+multiplication(9,5,division(6,4))");
                } else {
                    Notification_InApp_Message = ActionObj.getNotification_InApp_Message();
                }
//            Notification_InApp_Message = ehelper.ExpressionHelper(this, "SUMMATION(5,3)");
                if (ActionObj.getNotification_InApp_TypeOfReceiver() != null &&
                        ActionObj.getNotification_InApp_TypeOfReceiver().equalsIgnoreCase("Groups")) {
                    ReceiveruserId = ActionObj.getNotification_InApp_MessageReceiver();
                }

                System.out.println("Result=====" + Notification_InApp_Message);
                if (ActionObj.getNotification_InApp_TypeOfReceiver() != null && ActionObj.getNotification_InApp_TypeOfReceiver().length() > 0) {
                    sendNotificationInApp(ReceiveruserId, Notification_InApp_Message, ActionObj.getNotification_InApp_TypeOfReceiver(), ActionObj, ReceiverPostId);
                } else {
                    sendNotificationInApp(ReceiveruserId, Notification_InApp_Message, "User", ActionObj, ReceiverPostId);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "CallNotification", e);
        }
    }

    public void sendEmailService(String[] emailIds, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        ExpressionMainHelper eHelper = new ExpressionMainHelper();
        String Notification_eMail_Subject = eHelper.ExpressionHelper(this, actionWithoutConditionBean.getNotification_eMail_Subject());
        String Notification_eMail_Message = eHelper.ExpressionHelper(this, actionWithoutConditionBean.getNotification_eMail_Message());
        Map<String, String> maindata = new HashMap<>();
        maindata.put("Subject", Notification_eMail_Subject);
        maindata.put("Body", Notification_eMail_Message);
        maindata.put("ToEMail", emailIds[emailIndex]);
        maindata.put("HTMLFlag", "true");
        maindata.put("EmailGatewayName", actionWithoutConditionBean.getNotification_eMail_Gateway());
        System.out.println("Notification_eMail_Subject at Email ==" + Notification_eMail_Message);
        Call<String> call = getServices.SendEmail(sessionManager.getAuthorizationTokenId(), maindata);
        call.enqueue(new Callback<String>() {
            @Override
            public void onResponse(Call<String> call, Response<String> response) {
                Log.e("Result: ", "" + response.body());
                try {
                    JSONObject jobj = new JSONObject(response.body());
                    String Status = jobj.getString("Status");
                    String Message = jobj.getString("Message");

                    if (actionWithoutConditionBean.isSuccessMessageIsEnable()) {
                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                        String expMessage = ehelper.ExpressionHelper(MainActivity.this, actionWithoutConditionBean.getMessage_Success());
                        if (actionWithoutConditionBean.getMessage_SuccessDisplayType().equalsIgnoreCase("2")) {
                            ShowMessageDialogWithOk(context, expMessage, 2);
                        } else {
                            Toast.makeText(context, expMessage, Toast.LENGTH_SHORT).show();
                        }


                    } else {
                        ImproveHelper.showToast(context, "Email Sent..");
                    }

                    if (emailIds.length - 1 == emailIndex) {
                        if (FromAction == 1) {
                            Executeindex++;
                            EventExecute();
                        } else {
                            Executeindex++;
                            checkandExecute(IfElseBlock_Bean);
                        }
                    } else {
                        emailIndex += 1;
                        sendEmailService(emailIds, actionWithoutConditionBean);
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }
                dismissProgressDialog();
            }

            @Override
            public void onFailure(Call<String> call, Throwable t) {
                dismissProgressDialog();
                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }
            }
        });

    }

    public void CallMessage(ActionWithoutCondition_Bean ActionObj) {
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(dataCollectionObject.getApp_Name());
        try {
            String MessageType = ActionObj.getMessageType();
            String Message = "";
            if (ActionObj.getMessage_Noraml().trim().length() == 0) {
                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                Message = ehelper.ExpressionHelper(this, ActionObj.getMessage_Advanced());
            } else {
                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                Message = ehelper.ExpressionHelper(this, ActionObj.getMessage_Noraml());
                //Message = ActionObj.getMessage_Noraml();
            }

            if (MessageType.equalsIgnoreCase("Below Control")) {
                List<ControlObject> controlObjectListAll = dataCollectionObject.getControls_list();
                String MessageOn_Below_ControlID = ActionObj.getMessageOn_Below_ControlID();
                String parentControlID = ActionObj.getMessageOn_Below_ParentControlID();

                    for (int s = 0; s < controlObjectListAll.size(); s++) {
                        ControlObject temp_controlObj = controlObjectListAll.get(s);
                        if(parentControlID != null && !parentControlID.isEmpty()) {
                            if (parentControlID.contentEquals(temp_controlObj.getControlName())) {
                                if (temp_controlObj.getControlType().equals(CONTROL_TYPE_SUBFORM)) { // BelowControl Message in SubFormControls
                                    SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    SubformView.showMessageBelowControl(MessageOn_Below_ControlID, Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                                } else if (temp_controlObj.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) { // BelowControl Message in SubFormControls
                                    GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                gridControl.showMessageBelowControl(MessageOn_Below_ControlID, Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                                }
                            } else if (temp_controlObj.isMakeItAsPopup() || temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                    ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                    if(parentControlID != null && !parentControlID.isEmpty()) {
                                        if (parentControlID.contentEquals(temp_controlObjSec.getControlName())) {
                                            if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_SUBFORM)) {
                                            SubformView SubformView = (SubformView) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            SubformView.showMessageBelowControl(MessageOn_Below_ControlID, Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                                            } else if (temp_controlObjSec.getControlType().equals(CONTROL_TYPE_GRID_CONTROL)) {
                                            GridControl gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObjSec.getControlName());
                                            gridControl.showMessageBelowControl(MessageOn_Below_ControlID, Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                                            }
                                        }
                                    }else if(MessageOn_Below_ControlID.contentEquals(temp_controlObj.getControlName())) {
                                        ImproveHelper.setControlUtils(temp_controlObj,List_ControlClassObjects,Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                                        break;

                                    }
                                }
                            }
                        }else if (temp_controlObj.isMakeItAsPopup() ||temp_controlObj.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                            for (int x_sec = 0; x_sec < temp_controlObj.getSubFormControlList().size(); x_sec++) {
                                ControlObject temp_controlObjSec = temp_controlObj.getSubFormControlList().get(x_sec);
                                if(MessageOn_Below_ControlID.contentEquals(temp_controlObjSec.getControlName())) {
                                    ImproveHelper.setControlUtils(temp_controlObjSec,List_ControlClassObjects,Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                                    break;
                                }
                            }
                        }else if(MessageOn_Below_ControlID.contentEquals(temp_controlObj.getControlName())) {
                            ImproveHelper.setControlUtils(temp_controlObj,List_ControlClassObjects,Message, AppConstants.SHOW_MESSAGE_BELOW_CONTROL);
                            break;

                        }
                    }

/*
                for (int j = 0; j < dataCollectionObject.getControls_list().size(); j++) {
                    ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(j);
                    if (temp_controlObj.getControlName().trim().equalsIgnoreCase(MessageOn_Below_ControlID)) {
                        if (dataCollectionObject.isUIFormNeeded) {//If form has custom UI
                            String controlPos = controlPositionInUI.get(temp_controlObj.getControlName());
                            if (controlPos.contains("$")) {//If control is in sublayout
                                Log.d(TAG, "controlPos: " + controlPos + temp_controlObj.getControlName());
                                String[] positions = controlPos.split("\\$");
                                int layoutPosition = Integer.parseInt(positions[0]);
                                int sublayoutPosition = Integer.parseInt(positions[1]);
                                View viewE = ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) linearLayout.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).getChildAt(0);
                                setErrortoView(viewE, temp_controlObj, Message);
                                break;
                            } else {//If control is in layout
                                View viewE = ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos))).getChildAt(0);
                                setErrortoView(viewE, temp_controlObj, Message);
                                break;
                            }
                        } else {
                            setErrortoView(linearLayout.getChildAt(j), temp_controlObj, Message);
                            break;
                        }
                    }
                }
*/

                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }

            }
            else if (MessageType.equalsIgnoreCase("Toast")) {
                String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                ImproveHelper.showToast(this, Message);

                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }

            }
            else if (MessageType.equalsIgnoreCase("Popup")) {
                String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                if(MessageOn_Popup_Type.equalsIgnoreCase("Toast")){
                    ImproveHelper.showToastRunOnUI(this,Message);
                }else {
                    showPopup(this, MessageOn_Popup_Type, Message, MessageOn_Popup_Type);
                }

            } else {
                String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                if (MessageOn_Popup_Type.equalsIgnoreCase("Toast")) {
                    ImproveHelper.showToastRunOnUI(this, Message);
                    ((Activity) context).finish();
                } else {
                    String strMessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                    ImproveHelper.my_showAlertWithExit(this, strMessageOn_Popup_Type, Message, strMessageOn_Popup_Type);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "CallMessage", e);
        }

    }

    public void CallMessageCopy(ActionWithoutCondition_Bean ActionObj) {
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(dataCollectionObject.getApp_Name());
        try {
            String MessageType = ActionObj.getMessageType();
            String Message = "";
            if (ActionObj.getMessage_Noraml().trim().length() == 0) {
                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                Message = ehelper.ExpressionHelper(this, ActionObj.getMessage_Advanced());
            } else {
                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                Message = ehelper.ExpressionHelper(this, ActionObj.getMessage_Noraml());
                //Message = ActionObj.getMessage_Noraml();
            }

            if (MessageType.equalsIgnoreCase("Below Control")) {
                String MessageOn_Below_ControlID = ActionObj.getMessageOn_Below_ControlID();
                for (int j = 0; j < dataCollectionObject.getControls_list().size(); j++) {
                    ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(j);
                    if (temp_controlObj.getControlName().trim().equalsIgnoreCase(MessageOn_Below_ControlID)) {
                        if (dataCollectionObject.isUIFormNeeded) {//If form has custom UI
                            String controlPos = controlPositionInUI.get(temp_controlObj.getControlName());
                            if (controlPos.contains("$")) {//If control is in sublayout
                                Log.d(TAG, "controlPos: " + controlPos + temp_controlObj.getControlName());
                                String[] positions = controlPos.split("\\$");
                                int layoutPosition = Integer.parseInt(positions[0]);
                                int sublayoutPosition = Integer.parseInt(positions[1]);
                                View viewE = ((LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) linearLayout.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition)).getChildAt(0);
                                setErrortoView(viewE, temp_controlObj, Message);
                                break;
                            } else {//If control is in layout
                                View viewE = ((LinearLayout) linearLayout.getChildAt(Integer.parseInt(controlPos))).getChildAt(0);
                                setErrortoView(viewE, temp_controlObj, Message);
                                break;
                            }
                        } else {
                            setErrortoView(linearLayout.getChildAt(j), temp_controlObj, Message);
                            break;
                        }
                    }
                }

                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }

            } else if (MessageType.equalsIgnoreCase("Toast")) {
                String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                ImproveHelper.showToast(this, Message);

                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }

            } else if (MessageType.equalsIgnoreCase("Popup")) {
                String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                if(MessageOn_Popup_Type.equalsIgnoreCase("Toast")){
                    ImproveHelper.showToastRunOnUI(this,Message);
                }else {
                    showPopup(this, MessageOn_Popup_Type, Message, MessageOn_Popup_Type);
                }
            } else {
                String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                if (MessageOn_Popup_Type.equalsIgnoreCase("Toast")) {
                    ImproveHelper.showToastRunOnUI(this, Message);
                    ((Activity) context).finish();
                }else {
//                    String MessageOn_Popup_Type = ActionObj.getMessageOn_Popup_Type();
                    ImproveHelper.my_showAlertWithExit(this, MessageOn_Popup_Type, Message, MessageOn_Popup_Type);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "CallMessage", e);
        }

    }

    public void showPopup(Context context, String title, String message, String IconType) {
        Typeface typeface_satoshi = Typeface.createFromAsset(context.getAssets(), context.getResources().getString(R.string.font_satoshi));
        int textSize = (int) context.getResources().getDimension(R.dimen.control_input_height);
        int iconType = R.drawable.ic_dialog_alert;
        String Head = title;
        if (IconType.equalsIgnoreCase("Info") ||IconType.contentEquals("") || IconType.equalsIgnoreCase("1")) {
            Head = "Info";
            iconType = R.drawable.ic_dialog_info;
        } else if (IconType.equalsIgnoreCase("Error") || IconType.equalsIgnoreCase("2")) {
            iconType = R.drawable.ic_dialog_alert;
            Head = "Alert";
        } else if (IconType.equalsIgnoreCase("Success") || IconType.equalsIgnoreCase("3")) {
            iconType = R.drawable.green_mark;
            Head = "Success";
        } else if (IconType.equalsIgnoreCase("None")){
            Head = "";
            iconType = -1;
        }
        TextView myMessage = new TextView(context);
        myMessage.setTypeface(typeface_satoshi);
        myMessage.setText(message);
        myMessage.setGravity(Gravity.CENTER);
        myMessage.setTextSize(20);
        myMessage.setPadding(40, 40, 40, 40);
        AlertDialog alertDialog = new AlertDialog.Builder(context)
                .setTitle(Head)
                .setView(myMessage)
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        nextEvent();
                    }
                })

                .setIcon(iconType)
                .show();
        alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE).setTextColor(context.getColor(R.color.colorPrimary));
        alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE).setTypeface(typeface_satoshi);
    }

    public void setAPIParamstoGlobalObjects(String APIName, LinkedHashMap<String, List<String>> OutputData) {
        try {
            //nk realm:
            //insert into realm with APIName as TableName
            if (RealmDBHelper.existTable(context, APIName)) {
                RealmDBHelper.deleteTable(context, APIName);
            }
            RealmDBHelper.createTableWithLHM(context, APIName, OutputData);
            RealmDBHelper.insertFromWithLHM(context, APIName, OutputData);
            //nk realm: GlobalObjects
            /*if (AppConstants.GlobalObjects.getAPIs_ListHash() == null) {
                LinkedHashMap<String, LinkedHashMap<String, List<String>>> tempAPI = new LinkedHashMap<String, LinkedHashMap<String, List<String>>>();
                AppConstants.GlobalObjects.setAPIs_ListHash(tempAPI);
            }
            AppConstants.GlobalObjects.getAPIs_ListHash().put(APIName.toLowerCase(), OutputData);
            AppConstants.GlobalObjects.getAllApisList_Hash().put(strAppName.toLowerCase(), AppConstants.GlobalObjects.getAPIs_ListHash());
            */
            if (AppConstants.GlobalObjects.getAPIs_status_ListHash() == null) {
                LinkedHashMap<String, String> tempAPI = new LinkedHashMap<String, String>();
                AppConstants.GlobalObjects.setAPIs_status_ListHash(tempAPI);
            }

            AppConstants.GlobalObjects.getAPIs_status_ListHash().put(APIName.toLowerCase(), "200");
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setAPIParamstoGlobalObjects", e);
        }
    }

    public void setSMSResponsetoGlobalObjects(ActionWithoutCondition_Bean ActionObj, String response) {
        try {
            //nk add sms gateway to global object
            LinkedHashMap<String, LinkedHashMap<String, String>> tempForm = new LinkedHashMap<>();
            if (AppConstants.GlobalObjects.getSMS_ListHash() != null) {
                tempForm = AppConstants.GlobalObjects.getSMS_ListHash();
            }
            LinkedHashMap<String, String> template_response = tempForm.get(ActionObj.getNotification_SMS_GatewayName().toLowerCase());
            if (template_response == null) {
                template_response = new LinkedHashMap<>();
                if(ActionObj.getNotification_SMS_TemplateName() != null && !ActionObj.getNotification_SMS_TemplateName().isEmpty()){
                    template_response.put(ActionObj.getNotification_SMS_TemplateName().toLowerCase(), response);
                }
            } else {
                if(ActionObj.getNotification_SMS_TemplateName() != null && !ActionObj.getNotification_SMS_TemplateName().isEmpty()) {
                    template_response.put(ActionObj.getNotification_SMS_TemplateName().toLowerCase(), response);
                }
            }
            tempForm.put(ActionObj.getNotification_SMS_GatewayName().toLowerCase(), template_response);
            AppConstants.GlobalObjects.setSMS_ListHash(tempForm);
            System.out.println("Response:" + AppConstants.GlobalObjects.getSMS_ListHash());
            //nk add sms gateway to global object
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setSMSResponsetoGlobalObjects", e);
        }
    }

    public void setFormParamstoGlobalObjects(ActionWithoutCondition_Bean ActionBean, LinkedHashMap<String, List<String>> OutputData) {
        try {
            //nk realm:
            //insert into realm with formName as TableName :ActionBean.getSelect_FormName()
            if (RealmDBHelper.existTable(context, ActionBean.getSelect_FormName())) {
                RealmDBHelper.deleteTable(context, ActionBean.getSelect_FormName());
            }
            RealmDBHelper.createTableWithLHM(context, ActionBean.getSelect_FormName(), OutputData);
            RealmDBHelper.insertFromWithLHM(context, ActionBean.getSelect_FormName(), OutputData);
            //RealmDBHelper.createTableWithInsertFromAction(context, ActionBean.getSelect_FormName(), response);
            if (ActionBean.getSaveOfflineType().equalsIgnoreCase("Response")) {
                RealmDBHelper.updateSaveOfflineTable(context, strAppName, ActionBean.getSelect_FormName(), ActionBean.getActionType(), "Offline");
            } else {
                RealmDBHelper.updateSaveOfflineTable(context, strAppName, ActionBean.getSelect_FormName(), ActionBean.getActionType(), "Online");
            }
            //nk realm: old code
            /*if (AppConstants.GlobalObjects != null) {
                if (AppConstants.GlobalObjects.getForms_ListHash() == null) {
                    LinkedHashMap<String, LinkedHashMap<String, List<String>>> tempForm = new LinkedHashMap<String, LinkedHashMap<String, List<String>>>();
                    AppConstants.GlobalObjects.setForms_ListHash(tempForm);
                }
                System.out.println("FormName.toLowerCase()==" + FormName.toLowerCase());
                System.out.println("OutputData==" + OutputData.size());
                //  AppConstants.GlobalObjects.getForms_ListHash().put("Register Project".toLowerCase(), OutputData);
                AppConstants.GlobalObjects.getForms_ListHash().put(FormName.toLowerCase(), OutputData);
                AppConstants.GlobalObjects.getAllFormsList_Hash().put(strAppName.toLowerCase(), AppConstants.GlobalObjects.getForms_ListHash());
            }*/
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setFormParamstoGlobalObjects", e);
        }
    }

    public void mNotificationDirectActivityApi(final String strPageName) {
        try {
            NotificationDirectSendData getAppData = new NotificationDirectSendData();
            getAppData.setDataControlsArr(newDataControlsList());
            getAppData.setOrgId(sessionManager.getOrgIdFromSession());
            getAppData.setUserId(sessionManager.getUserDataFromSession().getUserID());
            getAppData.setPageName(strPageName);

            Call<NotificationDataResponse> notificationDataResponseCall = getServices.getDesignFromNotification(getAppData);

            notificationDataResponseCall.enqueue(new Callback<NotificationDataResponse>() {
                @Override
                public void onResponse(Call<NotificationDataResponse> call, Response<NotificationDataResponse> response) {
                    if (response.body() != null) {

                        // For New DataControls
                        if (response.body().getDatacontrol() != null && response.body().getDatacontrol().size() > 0) {
                            Log.d(TAG, "onResponseDataControls: " + response.body().getDatacontrol().get(0).getControlName());
                            List<DataControls> dataControlsResp = response.body().getDatacontrol();
                            if (dataControlsResp != null && dataControlsResp.size() > 0) {
                                for (int i = 0; i < dataControlsResp.size(); i++) {

//                                if (dataControlsResp.get(i).getZ_Status_flag().equalsIgnoreCase("Update")) {
//                                    String refRespUpdate = dataControlsResp.get(i).getControlName();
//                                    improveDataBase.updateDataControlsList(dataControlsResp.get(i), refRespUpdate, strOrgId, sessionManager.getUserDataFromSession().getUserID());
//                                    String filePath = dataControlsResp.get(i).getTextFilePath().trim();
//                                    createAppFolderAndDownloadDataControls(dataControlsResp);
//                                } else if (dataControlsResp.get(i).getZ_Status_flag().equalsIgnoreCase("Deleted")) {
//                                    String refRespDelete = dataControlsResp.get(i).getControlName();
//                                    improveDataBase.updateDataControlsList(dataControlsResp.get(i), refRespDelete, strOrgId, sessionManager.getUserDataFromSession().getUserID());
//                                } else if (dataControlsResp.get(i).getZ_Status_flag().equalsIgnoreCase("Insert")) {
                                    improveDataBase.insertIntoDataControlTable(dataControlsResp.get(i), strOrgId, sessionManager.getUserDataFromSession().getUserID());
                                    String filePath = dataControlsResp.get(i).getTextFilePath().trim();
//                                    createAppFolderAndDownloadDataControls(dataControlsResp);
                                    File root = new File(Environment.getExternalStorageDirectory(), "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/");

                                    if (!root.exists()) {
                                        root.mkdirs();
                                    }
                                    if (filePath != null && !filePath.isEmpty()) {
// check download
                                        startDownloadDataControl(filePath, "", 0, true, dataControlsResp.get(i));

                                    }


//                                }

                                }
                            }
                        }

                        if (response.body().getAppDetails() != null && response.body().getAppDetails().size() > 0) {
                            Log.d(TAG, "onResponseAppDetails: " + response.body().getAppDetails().get(0).getAppName());
                            List<AppDetails> appDetailsList = response.body().getAppDetails();
                            if (appDetailsList != null && appDetailsList.size() > 0) {

                                if (appDetailsList.get(0).getAppType().equalsIgnoreCase(CHILD_FORM)) {

                                    sessionManager.createChildFormDesignFormat(appDetailsList.get(0).getDesignFormat());
                                    PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_APP_NAME, appDetailsList.get(0).getAppName());
                                    PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_CREATED_BY_ID, appDetailsList.get(0).getCreatedBy());
                                    PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_DISTRIBUTION_ID, appDetailsList.get(0).getDistrubutionID());

                                    prepareChildFormJsonData(appDetailsList.get(0).getDesignFormat());

                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(AppConstants.QUERY_FORM)) {
                                    dismissProgressDialog();
                                    Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
                                    intent.putExtra("s_design_format", appDetailsList.get(0).getDesignFormat());
                                    intent.putExtra("s_app_name", appDetailsList.get(0).getAppName());
//                                intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
                                    intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
                                    startActivity(intent);
                                    finish();

                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(DATA_COLLECTION)) {

                                    strOrgId = sessionManager.getOrgIdFromSession();
                                    strAppName = strPageName;
                                    strCreatedBy = appDetailsList.get(0).getCreatedBy();
                                    strUserId = sessionManager.getUserDataFromSession().getUserID();
                                    strDistributionId = appDetailsList.get(0).getDistrubutionID();
//                                    strDesignFormatNotif = appDetailsList.get(0).getDesignFormat();
                                    strDesignFormat = appDetailsList.get(0).getDesignFormat();

                                    improveDataBase.insertIntoAppsListTable(appDetailsList,
                                            sessionManager.getOrgIdFromSession(),
                                            sessionManager.getUserDataFromSession().getUserID());
                                    if (strWebViewType.equalsIgnoreCase("") || strWebViewType.isEmpty() || strWebViewType == null) {
                                        mAppFromCheck();
                                    }
                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(AppConstants.DASHBOARD)) {
                                    Log.d(TAG, "NotificationOnClickAppType: " + appDetailsList.get(0).getAppType());
//                                strWebUrl = "https://www.google.com/";
                                    dismissProgressDialog();
                                    webView.setVisibility(View.VISIBLE);
                                    WebSettings webSettings = webView.getSettings();
                                    webSettings.setJavaScriptEnabled(true);
                                    strWebUrl = AppConstants.MAIN_WEB_LINK + strPageName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                                    webView.loadUrl(strWebUrl);
                                    improveDataBase.insertIntoAppsListTable(appDetailsList,
                                            sessionManager.getOrgIdFromSession(),
                                            sessionManager.getUserDataFromSession().getUserID());
                                    Log.d(TAG, "onResponseDashBoard: " + strWebUrl);
                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(AppConstants.REPORTS)) {
                                    Log.d(TAG, "NotificationOnClickAppType: " + appDetailsList.get(0).getAppType());
//                                strWebUrl = "https://www.google.com/";
                                    dismissProgressDialog();
                                    webView.setVisibility(View.VISIBLE);
                                    WebSettings webSettings = webView.getSettings();
                                    webSettings.setJavaScriptEnabled(true);
                                    strWebUrl = AppConstants.MAIN_WEB_LINK + strPageName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                                    webView.loadUrl(strWebUrl);
                                    improveDataBase.insertIntoAppsListTable(appDetailsList,
                                            sessionManager.getOrgIdFromSession(),
                                            sessionManager.getUserDataFromSession().getUserID());
                                    Log.d(TAG, "onResponseReports: " + strWebUrl);
                                }
                                String filePath = appDetailsList.get(0).getAppIcon();
                                createAppFolderAndDownloadFiles(appDetailsList.get(0));
                            }
                        } else {
                            Log.d(TAG, "onResponseAppdetails: " + "No AppDetails");
                        }
                    }
                }

                @Override
                public void onFailure(Call<NotificationDataResponse> call, Throwable t) {
                    System.out.println("Fails==" + t);
                    dismissProgressDialog();
                }
            });

//        Call<GetAllAppModel> callDesign = getServices.getDesignFromNotification(getAppData);
//        callDesign.enqueue(new Callback<GetAllAppModel>() {
//            @Override
//            public void onResponse(Call<GetAllAppModel> call, Response<GetAllAppModel> response) {
//
//                if (response.body() != null) {
//
//                    // DataControls
////                    if (response.body().getDatacontrol() != null) {
////                        Log.d(TAG, "onResponsePageName: " + response.body().getDatacontrol());
////                        List<DataControls> dataControlsResp = response.body().getDatacontrol();
////                        if (dataControlsResp != null && dataControlsResp.size() > 0) {
////                            for (int i = 0; i < dataControlsResp.size(); i++) {
////
////                                String refResp = dataControlsResp.get(i).getControlName();
////
////                                DataControls dataControlsRefListDb = improveDataBase.getDataControlsListRefresh(refResp, strOrgId, sessionManager.getUserDataFromSession().getUserID());
////
////                                if (dataControlsRefListDb.getControlName() != null) {
////                                    improveDataBase.updateDataControlsList(dataControlsResp.get(i), refResp, strOrgId, sessionManager.getUserDataFromSession().getUserID());
////                                } else {
////                                    improveDataBase.insertIntoDataControlTable(dataControlsResp.get(i), strOrgId, sessionManager.getUserDataFromSession().getUserID());
////                                }
////                                String filePath = dataControlsResp.get(i).getTextFilePath().trim();
////                                startDownloadDataControl(dataControlsResp.get(i), filePath, "", 0, 1);
////                            }
////                        }
////                    }
//
////                    getAllAppModel = response.body();
////
////                    if (getAllAppModel.getAppDetails() != null && getAllAppModel.getAppDetails().size() != 0) {
////
//////                    improveDataBase.deleteAppsListData(getAllAppNamesData.getOrgId(), sessionManager.getUserDataFromSession().getUserID());
////                        if (getAllAppModel.getAppDetails().get(0).getAppType().equalsIgnoreCase(CHILD_FORM)) {
////
////                            sessionManager.createChildFormDesignFormat(getAllAppModel.getAppDetails().get(0).getDesignFormat());
////
////                            PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_APP_NAME, getAllAppModel.getAppDetails().get(0).getAppName());
////                            PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_CREATED_BY_ID, getAllAppModel.getAppDetails().get(0).getCreatedBy());
////                            PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_DISTRIBUTION_ID, getAllAppModel.getAppDetails().get(0).getDistrubutionID());
////                            PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "nc");
////
////                            prepareChildFormJsonData(getAllAppModel.getAppDetails().get(0).getDesignFormat());
////
//////                            strChildForm = getAllAppModel.getAppDetails().get(0).getAppType();
////                        } else if (getAllAppModel.getAppDetails().get(0).getAppType().equalsIgnoreCase("QueryForm")) {
////                            PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "nq");
////                            Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
////                            intent.putExtra("s_design_format", getAllAppModel.getAppDetails().get(0).getDesignFormat());
////                            intent.putExtra("s_app_name", getAllAppModel.getAppDetails().get(0).getAppName());
////                            intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
////                            intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
////                            startActivity(intent);
////                            finish();
////
////                        } else {
////                            strOrgId = sessionManager.getOrgIdFromSession();
////                            strAppName = strPageName;
////                            strCreatedBy = getAllAppModel.getAppDetails().get(0).getCreatedBy();
////                            strUserId = sessionManager.getUserDataFromSession().getUserID();
////                            strDistributionId = getAllAppModel.getAppDetails().get(0).getDistrubutionID();
////                            strDesignFormatNotif = getAllAppModel.getAppDetails().get(0).getDesignFormat();
////
////                            improveDataBase.insertIntoAppsListTable(getAllAppModel.getAppDetails(),
////                                    sessionManager.getOrgIdFromSession(),
////                                    sessionManager.getUserDataFromSession().getUserID());
////
////                            mAppFromCheck();
////                        }
////                        /* else if (getAllAppModel.getAppDetails().get(0).getAppType().equalsIgnoreCase("Datacollection")) {
////                            PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "ndc");
//////                        mainObject.put("OrgId", strOrgId);
//////                        mainObject.put("PageName", strAppName);
//////                        mainObject.put("CreatedUserID", strCreatedBy);
//////                        mainObject.put("SubmittedUserID", strUserId);
//////                        mainObject.put("DistributionID", strDistributionId);
////
////                            strOrgId = sessionManager.getOrgIdFromSession();
////                            strAppName = strPageName;
////                            strCreatedBy = getAllAppModel.getAppDetails().get(0).getCreatedBy();
////                            strUserId = sessionManager.getUserDataFromSession().getUserID();
////                            strDistributionId = getAllAppModel.getAppDetails().get(0).getDistrubutionID();
////                            strDesignFormatNotif = getAllAppModel.getAppDetails().get(0).getDesignFormat();
////
////                            improveDataBase.insertIntoAppsListTable(getAllAppModel.getAppDetails(),
////                                    sessionManager.getOrgIdFromSession(),
////                                    sessionManager.getUserDataFromSession().getUserID());
////
////                            mAppFromCheck();
////
////                        } else if (getAllAppModel.getAppDetails().get(0).getAppType().equalsIgnoreCase("DashBoard")) {
////                            PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "ndb");
////                            Log.d(TAG, "NotificationOnClickAppType: " + getAllAppModel.getAppDetails().get(0).getAppType());
////                        } else if (getAllAppModel.getAppDetails().get(0).getAppType().equalsIgnoreCase("Reports")) {
////                            PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "nr");
////                            Log.d(TAG, "NotificationOnClickAppType: " + getAllAppModel.getAppDetails().get(0).getAppType());
////                        }*/
////                    }
//
//                    if(response.body().getAppDetails() != null){
//                        List<AppDetails> appDetailsList = response.body().getAppDetails();
//                        if(appDetailsList != null && appDetailsList.size() > 0){
//
//                            if (appDetailsList.get(0).getAppType().equalsIgnoreCase(CHILD_FORM)) {
//                                sessionManager.createChildFormDesignFormat(appDetailsList.get(0).getDesignFormat());
//
//                                PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_APP_NAME, appDetailsList.get(0).getAppName());
//                                PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_CREATED_BY_ID, appDetailsList.get(0).getCreatedBy());
//                                PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_DISTRIBUTION_ID, appDetailsList.get(0).getDistrubutionID());
//                                PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "nc");
//
//                                prepareChildFormJsonData(appDetailsList.get(0).getDesignFormat());
//
//                            }else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(QUERY_FORM)) {
//
//                                PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "nq");
//                                Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
//                                intent.putExtra("s_design_format", appDetailsList.get(0).getDesignFormat());
//                                intent.putExtra("s_app_name", appDetailsList.get(0).getAppName());
//                                intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
//                                intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
//                                startActivity(intent);
//                                finish();
//
//                            }else if(appDetailsList.get(0).getAppType().equalsIgnoreCase(DATA_COLLECTION)) {
//                                PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "ndc");
////                        mainObject.put("OrgId", strOrgId);
////                        mainObject.put("PageName", strAppName);
////                        mainObject.put("CreatedUserID", strCreatedBy);
////                        mainObject.put("SubmittedUserID", strUserId);
////                        mainObject.put("DistributionID", strDistributionId);
//
//                                strOrgId = sessionManager.getOrgIdFromSession();
//                                strAppName = strPageName;
//                                strCreatedBy = getAllAppModel.getAppDetails().get(0).getCreatedBy();
//                                strUserId = sessionManager.getUserDataFromSession().getUserID();
//                                strDistributionId = getAllAppModel.getAppDetails().get(0).getDistrubutionID();
//                                strDesignFormatNotif = getAllAppModel.getAppDetails().get(0).getDesignFormat();
//
//                                improveDataBase.insertIntoAppsListTable(getAllAppModel.getAppDetails(),
//                                        sessionManager.getOrgIdFromSession(),
//                                        sessionManager.getUserDataFromSession().getUserID());
//
//                                mAppFromCheck();
//
//                            }else if (appDetailsList.get(0).getAppType().equalsIgnoreCase("DashBoard")) {
//                                PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "ndb");
//                                Log.d(TAG, "NotificationOnClickAppType: " + appDetailsList.get(0).getAppType());
//                            } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase("Reports")) {
//                                PrefManger.putSharedPreferencesString(context, AppConstants.Notification_Back_Press, "nr");
//                                Log.d(TAG, "NotificationOnClickAppType: " + appDetailsList.get(0).getAppType());
//                            }
//                        }
//
//
//                    }
//                }
//
//            }
//
//            @Override
//            public void onFailure(Call<GetAllAppModel> call, Throwable t) {
//                Log.d(TAG, "onFailureNotificationDesign: " + t.toString());
//            }
//        });
        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "mNotificationDirectActivityApi", e);
        }
    }

    private void prepareChildFormJsonData(String designFormat) {
        try {
            XMLHelper xmlHelper = new XMLHelper();
            DataCollectionObject dataCollectionObject = xmlHelper.XML_To_ChildFormObject(designFormat);

            /*Getting BaseQueryName from the xmlParser*/
            String strParseQueryName = dataCollectionObject.getApp_QueryBase();
            PrefManger.putSharedPreferencesString(MainActivity.this, AppConstants.SP_CHILD_FORM_QUERY_NAME, strParseQueryName);
            Log.d(TAG, "ChildDataQueryName: " + dataCollectionObject.getApp_QueryBase());
            JSONObject jObjChildForm = new JSONObject();
            try {
                jObjChildForm.put("queryname", strParseQueryName);
                jObjChildForm.put("orgid", sessionManager.getOrgIdFromSession());
                jObjChildForm.put("userid", sessionManager.getUserDataFromSession().getUserID());
            } catch (JSONException e) {
                e.printStackTrace();
            }

            Map<String, String> stringStringMap = new HashMap<>();
            stringStringMap.put("Jasonstring", jObjChildForm.toString());
            Log.d(TAG, "prepareChildFormJsonData: " + stringStringMap);
            AppDetails appDetailsDbList = improveDataBase.getAppDetailsRefresh
                    (sessionManager.getOrgIdFromSession(), strParseQueryName, sessionManager.getUserDataFromSession().getUserID());

            if (appDetailsDbList != null && appDetailsDbList.getDesignFormat() != null) {

                String strChildDesignFormat = appDetailsDbList.getDesignFormat();

                childIntentData(strParseQueryName, strChildDesignFormat);
                Log.d(TAG, "PreparedParseQCD: " + strParseQueryName + "\n" + strChildDesignFormat);

            } else {
//        else server senario
                /* Get Child Form Data Api*/
                Log.d(TAG, "PreparedParseQCD: " + "NoQuery In Database");
                mGetChildFormData(stringStringMap, strParseQueryName);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "prepareChildFormJsonData", e);
        }
    }

    private void mGetChildFormData(Map<String, String> stringStringMap, final String QueryName) {
        try {
            Call<GetChildFormDataResponse> appDetailsCallQ = getServices.getChildFormData(stringStringMap);

            appDetailsCallQ.enqueue(new Callback<GetChildFormDataResponse>() {
                @Override
                public void onResponse(Call<GetChildFormDataResponse> call, Response<GetChildFormDataResponse> response) {

                    if (response.body() != null) {
                        Gson gson = new Gson();
                        String strJson = gson.toJson(response.body());
                        Log.d(TAG, "onResponseGetChildFormData: " + strJson);
                        if (response.body().getOutput() != null) {
                            List<AppDetails> getAllAppModelListQ = response.body().getOutput();

                            if (getAllAppModelListQ != null && getAllAppModelListQ.size() > 0) {

                                improveDataBase.insertIntoAppsListTable(getAllAppModelListQ, sessionManager.getOrgIdFromSession(), sessionManager.getUserDataFromSession().getUserID());

                                childIntentData(QueryName, getAllAppModelListQ.get(0).getDesignFormat());

                            }
                        }
                        finish();
                    }
                }

                @Override
                public void onFailure(Call<GetChildFormDataResponse> call, Throwable t) {
                    dismissProgressDialog();
                    Log.d(TAG, "onResponseGetChildFormException: " + t);
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "mGetChildFormData", e);
        }
    }

    public void childIntentData(String QueryName, String strChildDesignFormat) {
        try {
            dismissProgressDialog();
            Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
            intent.putExtra("s_childForm", "ChildForm");
            intent.putExtra("s_app_name", QueryName);
            intent.putExtra("s_design_format", strChildDesignFormat);
//        intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
            intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
            intent.putExtra("s_user_id", sessionManager.getUserDataFromSession().getUserID());
            startActivity(intent);
            finish();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "childIntentData", e);
        }
    }

    public void mAppFromCheck() {
        try {
            if (currentMultiForm != null && currentMultiForm.getNavMenu() != null && currentMultiForm.getNavMenu().getDisplayTypeInMobile().contentEquals("form") && strDesignFormat.contentEquals("")) {
                rv_menu_as_form.setLayoutManager(new LinearLayoutManager(this));
                NavMenuAdapter navMenuAdapter = new NavMenuAdapter(currentMultiForm.getNavMenu().getMenuItemList(), context, new NavMenuAdapter.MenuClickListener() {
                    @Override
                    public void onMenuClick(View view, List<NavMenuItem> menuItemList, int pos) {
                        NavMenuItem menu = menuItemList.get(pos);
                        String tagName = menu.getTagName();

                        view.setTag(tagName);

                        if (menu.getOnClickEventObject() != null) {
                            if (AppConstants.EventCallsFrom == 1) {
                                hash_Onclick_EventObjects.put(tagName, menu.getOnClickEventObject());
                                AppConstants.EventFrom_subformOrNot = false;
                                ClickEvent(view);
                            }
                        }


                    }

                    @Override
                    public void onSubMenuClick(View view, List<NavMenuItem> menuItemList, int subMenuPos, int menuPos) {

                        NavMenuItem subMenu = currentMultiForm.getNavMenu().getMenuItemList().get(menuPos).getSubMenuItems().get(subMenuPos);

                        String tagName = subMenu.getTagName();

                        view.setTag(tagName);

                        if (subMenu.getOnClickEventObject() != null) {
                            if (AppConstants.EventCallsFrom == 1) {
                                hash_Onclick_EventObjects.put(tagName, subMenu.getOnClickEventObject());
                                AppConstants.EventFrom_subformOrNot = false;
                                ClickEvent(view);
                            }
                        }

                    }
                });
                rv_menu_as_form.setAdapter(navMenuAdapter);
                rv_menu_as_form.setHasFixedSize(true);
                rv_menu_as_form.setVisibility(View.VISIBLE);
                uFScrollView.setVisibility(View.GONE);
            } else {
                if (getIntent().hasExtra("s_app_name")) {
                    strAppName = getIntent().getStringExtra("s_app_name");
                }
                if (strChildForm != null && (strChildForm.equalsIgnoreCase(CHILD_FORM) || strChildForm.equalsIgnoreCase("ChildForm"))) {
                    strDesignFormat = sessionManager.getChildDesignFormat().trim();
                }
/*                if (appDetailsList == null) {
                    appDetailsList = improveDataBase.getAppDetailsInTask(sessionManager.getOrgIdFromSession(), strAppName, sessionManager.getUserDataFromSession().getUserID());
                    if (appDetailsList == null) {
                        appDetailsList = improveDataBase.getAppDetails(sessionManager.getOrgIdFromSession(), strAppName, sessionManager.getUserDataFromSession().getUserID());
                    }
                } else {
                    appDetailsList = improveDataBase.getAppDetails(sessionManager.getOrgIdFromSession(), strAppName, sessionManager.getUserDataFromSession().getUserID());
                }
                if (appDetailsList != null && appDetailsList.getAppIcon() != null) {
                    appIconPath = appDetailsList.getAppIcon();
                }
                if (strChildForm != null && strChildForm.equalsIgnoreCase(CHILD_FORM)) {

                    strDesignFormat = sessionManager.getChildDesignFormat().trim();

                } else if (strDesignFormatNotif != null) {

                    strDesignFormat = strDesignFormatNotif;

                } else {

                    if (appDetailsList == null && IS_MULTI_FORM) {
                        strAppName = getIntent().getStringExtra("s_app_name");
                        if(strAppName.contains("_")) {
                            title.setText(strAppName.split("_")[1]);
                        }else{
                            title.setText(strAppName);
                        }
                        strDesignFormat = getIntent().getStringExtra("s_app_design");
                    } else {
                        if (appDetailsList != null && appDetailsList.getDesignFormat() != null) {
                            strDesignFormat = appDetailsList.getDesignFormat().trim();
                        } else {
                            strDesignFormat = getIntent().getStringExtra("s_app_design");
                        }
                    }
//            strDesignFormat = readTxtFromXMl();
//            strDesignFormat = strDesignFormatNotif;

                }

                if (appDetailsList != null && appDetailsList.getAppType()!=null&&appDetailsList.getAppType().contentEquals("MultiForm")&&strDesignFormat!=null) {
                    strDesignFormat = getIntent().getStringExtra("s_app_design");
                }*/


                if (isNetworkStatusAvialable(context)) {
                    /*Design XMl Format API*/
//            mDesignDetailsAPI(getDesignDetailsData);

                    // getting dsesignFormat from db even internet is present
//            loadControlsWithDesign(strDesignFormat);

                    // menu check


                    new LoadControlsFromXML(strDesignFormat).execute("");
//                    loadControlsWithDesign(strDesignFormat);
                } else {

//            dismissProgressDialog();
                    //improveHelper.snackBarAlertActivities(context, MainLinearLayout);

                    // getting dsesignFormat from db even internet is not present
//            loadControlsWithDesign(strDesignFormat);
                    // Menu Check
                    new LoadControlsFromXML(strDesignFormat).execute("");
                }

                if (appIconPath == null && strAppIcon != null) {
                    appIconPath = strAppIcon;
                }
                loadAppIcon(appIconPath);

            }
        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "mAppFromCheck", e);
        }
    }
/*
    public void createAppFolderAndDownloadFiles(List<AppDetails> appDetails) {
        try {
            for (int count = 0; count < appDetails.size(); count++) {

                String appName = appDetails.get(count).getAppName().replaceAll(" ", "_");

                */
    /*Menu Icons folder and icons download*//*


//                if (appDetails.get(count).getDesignFormat() != null) {
//                    String designStringMenu = appDetails.get(count).getDesignFormat();
//                    XMLHelper xmlHelper = new XMLHelper();
////                if (designStringMenu.contains("MenuControl")) {
//                    //nk step
//                    System.out.println("=======Step2===============");
//                    DataCollectionObject dataCollectionObject = xmlHelper.XML_To_DataCollectionObject(designStringMenu);
//                    String strAppMode = dataCollectionObject.getApp_Mode();
//
//
//                    File rootMenu = new File(Environment.getExternalStorageDirectory(),
//                            "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/" + "MenuIcons/");
//                    if (!rootMenu.exists()) {
//                        rootMenu.mkdirs();
//                    }
//
//                    File rootMenu1 = new File(Environment.getExternalStorageDirectory(),
//                            "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/" + "ButtonIcons/");
//                    if (!rootMenu1.exists()) {
//                        rootMenu1.mkdirs();
//                    }
//
//
//                    List<ControlObject> controlObjectList = dataCollectionObject.getControls_list();
//                    for (int i = 0; i < controlObjectList.size(); i++) {
//
//                        if (controlObjectList.get(i).getControlType().equalsIgnoreCase("MenuControl") && controlObjectList.get(i).getTypeOfButton().equalsIgnoreCase("Icon")) {
//
//                            if (controlObjectList.get(i).getMenuControlObjectList() != null && controlObjectList.get(i).getMenuControlObjectList().size() > 0) {
//                                for (int j = 0; j < controlObjectList.get(i).getMenuControlObjectList().size(); j++) {
//
//                                    ControlObject strMenuItem = controlObjectList.get(i).getMenuControlObjectList().get(j);
//                                    String[] imgUrlSplit = strMenuItem.getIconPath().split("/");
//                                    String strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/" + "MenuIcons/";
//                                    Log.d(TAG, "MenuIconsUrls: " + strMenuItem.getIconPath() + " - " + strSDCardUrl + imgUrlSplit[imgUrlSplit.length - 1] + " - " + appName);
//
//                                    downloadDataControl(strMenuItem.getIconPath(), strSDCardUrl + imgUrlSplit[imgUrlSplit.length - 1]);
//
//                                }
//                            }
//                        }
//
//                        if (controlObjectList.get(i).getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_BUTTON) && !controlObjectList.get(i).getTypeOfButton().equalsIgnoreCase("Button")) {
//
//                            if (controlObjectList.get(i).getIconPath() != null) {
//
//                                String[] imgUrlSplit = controlObjectList.get(i).getIconPath().split("/");
//                                String strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/" + "ButtonIcons/";
//
//                                downloadDataControl(controlObjectList.get(i).getIconPath(), strSDCardUrl + imgUrlSplit[imgUrlSplit.length - 1]);
//
//
//                            }
//                        }
//                    }
////                }
//                }
                */
    /*Menu Icons folder and icons download End*//*


                File root = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName);

                if (!root.exists()) {
                    root.mkdirs();
                }
                if (appDetails.get(count).getAppIcon() != null) {

                    String appIcon = appDetails.get(count).getAppIcon().trim();
                    if (appDetails.get(count).getDownloadURls() != null && !appDetails.get(count).getDownloadURls().isEmpty()) {
                        String[] imgUrlSplit = appDetails.get(count).getDownloadURls().split(",");
                        for (int urlcount = 0; urlcount < imgUrlSplit.length; urlcount++) {
                            // check download
                            startDownload(appDetails.get(count), imgUrlSplit[urlcount].trim(), appName, 1);
                        }
                        if (!appIcon.equalsIgnoreCase("NA")) {
// check download
                            startDownload(appDetails.get(count), appIcon, appName, 1);
                        }
                    } else {
                        if (!appIcon.equalsIgnoreCase("NA")) {
// check download
                            startDownload(appDetails.get(count), appIcon, appName,  1);
                        }
//                }
                    }

//            String filePath ="http://182.18.157.124/ImproveUpload/DesignXMLFile/Employee data.xml";

                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "createAppFolderAndDownloadFiles", e);
        }
    }
*/

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.search:
                onSearchCalled();
                return true;
            case android.R.id.home:
                if (currentMultiForm != null && currentMultiForm.getNavMenu() != null
                        && currentMultiForm.getNavMenu().getDisplayTypeInMobile().contentEquals("menu")) {
                    openDrawer(item);
                } else {
                    navigateBack();
                }
                return true;
            default:
                return false;
        }
    }

    public void stopAudioPlayer() {

        for (int i = 0; i < audioPlayerList.size(); i++) {
            AudioPlayer audioPlayer = audioPlayerList.get(i);
            audioPlayer.stopPlaying();
        }

    }

    @Override
    public void onBackPressed() {
        navigateBack();
    }

    private void navigateBack() {
        try {
            AppConstants.IS_FORM_THEME = false;
            if (getIntent().hasExtra("keep_session") && getIntent().getBooleanExtra("keep_session", false)) {
//                AppConstants.KEEP_SESSION_VIEW_MAP.put(strAppName, activityView);
//                frameLayout.removeViewAt(0);
                AppConstants.KEEP_SESSION_VIEW_MAP.put(strAppName, activityView);
                AppConstants.KEEP_SESSION_LAYOUT_MAP.put(strAppName, frameLayout);
/*                SaveActivitySession saveActivitySession = new SaveActivitySession(MainActivity.this, List_ControlClassObjects, dataCollectionObject.getList_Table_Columns());

                List<ControlObject> controls = dataCollectionObject.getControls_list();
                for (int i = 0; i < controls.size(); i++) {
                    saveActivitySession.save(controls.get(i), false, null, null, null, -1, -1);
                }
                stringListSubmit = new ArrayList<>();
                stringListFiles = new ArrayList<>();
                stringListSubmit = saveActivitySession.getDataCollectionString();
                stringListFiles = saveActivitySession.getStringListFiles();

                for (int i = 0; i < stringListFiles.size(); i++) {

                    HashMap<String, String> map = stringListFiles.get(i);

                    for (String key : map.keySet()) {
                        System.out.println(key);
                        String controlName = key;
                        stringListSubmit.add(controlName + "|" + map.get(controlName));
                        break;
                    }

                }

                try {
                    JSONObject jsonObject = new JSONObject();
                    for (int i = 0; i < stringListSubmit.size(); i++) {
                        jsonObject.put(stringListSubmit.get(i).split("\\|")[0], (stringListSubmit.get(i) + " ").split("\\|")[1].trim());
                    }
                    AppConstants.KEEP_SESSION_OBJECT.put(strAppName, jsonObject);
                } catch (JSONException e) {
                    e.printStackTrace();
                }*/


            }
            if (getIntent().hasExtra("from") && getIntent().getStringExtra("from").contentEquals(AppConstants.TYPE_CALL_FORM)) {
                if (getIntent().hasExtra("exit_to_menu") && getIntent().getBooleanExtra("exit_to_menu", false)) {
                    mainActivityOnBackPressAlertDialog();
                } else if (getIntent().hasExtra("go_to_home") && getIntent().getBooleanExtra("go_to_home", false)) {
                    if (currentMultiForm != null) {
                        LinkedHashMap<String, String> innerFormsDesignMap = currentMultiForm.getInnerFormsDesignMap();
                        if (currentMultiForm.getHome() != null) {
                            for (LinkedHashMap.Entry<String, String> entry : innerFormsDesignMap.entrySet()) {

                                if (entry.getKey().contentEquals(currentMultiForm.getHome())) {
                                    /*currentMultiForm.getNavigationList().add(new FormNavigation(currentMultiForm.getHome(), true), currentMultiForm.getHome());*/
                                    Intent intent = new Intent(context, MainActivity.class);
                                    intent.putExtra("s_app_design", entry.getValue());
                                    intent.putExtra("s_app_version", currentMultiForm.getAppVersion());
                                    intent.putExtra("s_app_type", "Datacollection");
                                    intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
                                    intent.putExtra("s_app_name", currentMultiForm.getHome());
                                    intent.putExtra("s_created_by", currentMultiForm.getCreateBy());
                                    intent.putExtra("s_user_id", sessionManager.getUserDataFromSession().getUserID());
                                    intent.putExtra("s_distribution_id", currentMultiForm.getDistributionId());
                                    intent.putExtra("s_user_post_id", currentMultiForm.getPostId());

                                    context.startActivity(intent);

                                    break;
                                }

                            }

                        }
                    }
                    finish();
                } else {
                    finish();
                }
            } else if (getIntent().hasExtra("from") && getIntent().getStringExtra("from").contentEquals("Workspace")) {
                finish();
            } else if (uiPrimaryLayoutModelClass != null && !AppConstants.DefultAPK) {
                finish();
            } else if (sheetBehaviorSection != null && sheetBehaviorSection.getState() == BottomSheetBehavior.STATE_EXPANDED) {
                saveDataInControlsAndClosePopUp();
            } else {
                mainActivityOnBackPressAlertDialog();
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "navigateBack", e);
        }
    }

    public void loadGlobalObject(String orgID) {
        try {
//            Log.d("BAuthokey",sessionManager.getAuthorizationTokenId());
            GlobalObjects Gobj = AppConstants.GlobalObjects;
            Gson gson = new Gson();

            String jsonUserDeatils = PrefManger.getSharedPreferencesString(context, SP_USER_DETAILS, "");
            UserData userDetailsObj = gson.fromJson(jsonUserDeatils, UserData.class);

            String jsonUserPostDetails = PrefManger.getSharedPreferencesString(context, SP_USER_POST_DETAILS, "");
//        List<PostsMasterModel> userPostDetailsObj = gson.fromJson(jsonUserPostDetails, PostsMasterModel.class);
            if (jsonUserPostDetails != null && !jsonUserPostDetails.isEmpty()) {
                Type collectionType = new TypeToken<Collection<PostsMasterModel>>() {
                }.getType();
                List<PostsMasterModel> upd = gson.fromJson(jsonUserPostDetails, collectionType);
                if (upd != null && upd.size() > 0) {
                    Log.d(TAG, "loadGlobalObjectPostName: " + upd.get(0).getName());
                }
            }

            String jsonReportingUserDeatils = PrefManger.getSharedPreferencesString(context, SP_REPORTING_USER_DETAILS, "");
            UserDetailsModel.ReportingUserDeatils reportingUserDetailsObj = gson.fromJson(jsonReportingUserDeatils, UserDetailsModel.ReportingUserDeatils.class);
//            Gobj.setAppLanguage(ImproveHelper.getLocale(context));
            if (Gobj != null) {
                if (ImproveHelper.getLocale(this) != null) {
                    Gobj.setAppLanguage(ImproveHelper.getLocale(this));
                }
                if (userDetailsObj != null) {
//                Gobj.setUser_Role(userDetailsObj.getRole());
                    sessionManager.createloginstatusSession("200");
                    GlobalObjects.setLogin_status("200");
                    Gobj.setUser_ID(userDetailsObj.getUserID());
                    Gobj.setUser_Name(userDetailsObj.getUserName());
                    Gobj.setUser_MobileNo(userDetailsObj.getPhoneNo());
                    Gobj.setUser_Email(userDetailsObj.getEmail());
                    Gobj.setUser_type(sessionManager.getUserTypeFromSession());
                    Gobj.setUser_type_id(sessionManager.getUserTypeIdsFromSession());
//                Gobj.setUser_Desigination(userDetailsObj.getDesignation());
//                Gobj.setUser_Department(userDetailsObj.getDepartment());
//                Gobj.setUser_location(userDetailsObj.getLocationCode());
//                Gobj.setUser_location_name(userDetailsObj.getLocationCodeName());
//                Gobj.setLocatonLevel(userDetailsObj.getLocatonLevel());
//                Gobj.setSublocations(userDetailsObj.getSublocations());
                    Gobj.setUser_PostID(sessionManager.getPostsFromSession());
                    Gobj.setUser_PostName(sessionManager.getPostsFromSessionPostName());
                    if (jsonUserPostDetails != null && !jsonUserPostDetails.contentEquals("")) {
                        JSONArray postArray = new JSONArray(jsonUserPostDetails);
                        for (int i = 0; i < postArray.length(); i++) {
//                        String postId = postArray.getJSONObject(i).getString("PostID");
                            String postId = postArray.getJSONObject(i).getString("ID");
                            String strPostLocationLevel = postArray.getJSONObject(i).getString("PostLocatonLevel");
                            String strPostLocationLevelName = postArray.getJSONObject(i).getString("PostLocationLevelName");
                            String strReportingPostID = postArray.getJSONObject(i).getString("ReportingPostID");
                            String strReportingDepartmentID = postArray.getJSONObject(i).getString("ReportingDepartmentID");
                            String strManualReportingPostID = postArray.getJSONObject(i).getString("ManualReportingPostID");
                            String strManualReportingPersonID = postArray.getJSONObject(i).getString("ManualReportingPersonID");
                            if (postId.equalsIgnoreCase(sessionManager.getPostsFromSession())) {
                                Gobj.setLocatonLevel(strPostLocationLevel);
                                Gobj.setUser_Post_Location_Name(strPostLocationLevelName);
                                Gobj.setReporter_ID(strReportingPostID);
                                Gobj.setUser_Department(strReportingDepartmentID);
                                Gobj.setManualReportingPostID(strManualReportingPostID);
                                Gobj.setStrManualReportingPersonID(strManualReportingPersonID);
                            }
                            if (postId.contentEquals(sessionManager.getPostsFromSession())) {
                                JSONArray subLocations = postArray.getJSONObject(i).getJSONArray("PostSubLocations");
                                for (int j = 0; j < subLocations.length(); j++) {
                                    if (j == subLocations.length() - 1) {
                                        Gobj.setUser_Post_Location_Name(subLocations.getJSONObject(j).getString("Text"));
                                        Gobj.setUser_Post_Location(subLocations.getJSONObject(j).getString("Value"));
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    Gobj.setReporting_PostID(sessionManager.getPostsSessionReportingPostID());
                    Gobj.setReporting_PostDepartmentID(sessionManager.getPostsSessionReportingPostDepartmentID());
                } else {
                    if (AppConstants.DefultAPK) {
                        sessionManager.createloginstatusSession("100");
                        GlobalObjects.setLogin_status("100");
                    }
                }
                if (reportingUserDetailsObj != null) {
                    Gobj.setReporter_Role(reportingUserDetailsObj.getRole());
                    Gobj.setReporter_ID(reportingUserDetailsObj.getUserId());
                    Gobj.setReporter_Name(reportingUserDetailsObj.getName());
                    Gobj.setReporter_MobileNo(reportingUserDetailsObj.getPhoneNo());
                    Gobj.setReporter_Email(reportingUserDetailsObj.getEmail());
                    Gobj.setReporter_Desigination(reportingUserDetailsObj.getDesignation());
                    Gobj.setReporter_Department(reportingUserDetailsObj.getDepartment());
                    Gobj.setReporter_Level(reportingUserDetailsObj.getLocationLevel());
                }
                AppConstants.GlobalObjects = Gobj;
                AppConstants.GlobalObjects.setOrg_Name(orgID);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(context, TAG, "loadGlobalObject", e);
        }
    }

    public void loadGlobalObjectCopy(String orgID) {
        try {
            GlobalObjects Gobj = AppConstants.GlobalObjects;
            Gson gson = new Gson();

            String jsonUserDeatils = PrefManger.getSharedPreferencesString(this, SP_USER_DETAILS, "");
            UserDetails userDetailsObj = gson.fromJson(jsonUserDeatils, UserDetails.class);

            String jsonReportingUserDeatils = PrefManger.getSharedPreferencesString(this, SP_REPORTING_USER_DETAILS, "");
            UserDetails reportingUserDetailsObj = gson.fromJson(jsonReportingUserDeatils, UserDetails.class);

            /*userPostDetails*/
//        String jsonUserPostDetails = PrefManger.getSharedPreferencesString(this, SP_USER_POST_DETAILS, "");
//        UserPostDetails userPostDetailsObj = gson.fromJson(jsonUserPostDetails, UserPostDetails.class);
            if (Gobj != null) {
                if (ImproveHelper.getLocale(this) != null) {
                    Gobj.setAppLanguage(ImproveHelper.getLocale(this));
                }
                if (userDetailsObj != null) {
                    sessionManager.createloginstatusSession("200");
                    GlobalObjects.setLogin_status("200");
                    Gobj.setUser_Role(userDetailsObj.getRole());
                    Gobj.setUser_ID(userDetailsObj.getUserId());
                    Gobj.setUser_Name(userDetailsObj.getName());
                    Gobj.setUser_MobileNo(userDetailsObj.getPhoneNo());
                    Gobj.setUser_Email(userDetailsObj.getEmail());
                    Gobj.setUser_Desigination(userDetailsObj.getDesignation());
                    Gobj.setUser_Department(userDetailsObj.getDepartment());
                    Gobj.setUser_location(userDetailsObj.getLocatonLevel());
                    if (!PrefManger.getSharedPreferencesString(context, "User location Name", "").contentEquals("")) {
                        Gobj.setUser_location_name(PrefManger.getSharedPreferencesString(context, "User location Name", ""));
                    }
                    if (!PrefManger.getSharedPreferencesString(context, AppConstants.User_Name, "").contentEquals("")) {
                        Gobj.setUser_Name(PrefManger.getSharedPreferencesString(context, AppConstants.User_Name, ""));
                    }

                } else {
                    if (AppConstants.DefultAPK) {
                        sessionManager.createloginstatusSession("100");
                        GlobalObjects.setLogin_status("100");
                    }
                }

                if (reportingUserDetailsObj != null) {
                    Gobj.setReporter_Role(reportingUserDetailsObj.getRole());
                    Gobj.setReporter_ID(reportingUserDetailsObj.getUserId());
                    Gobj.setReporter_Name(reportingUserDetailsObj.getName());
                    Gobj.setReporter_MobileNo(reportingUserDetailsObj.getPhoneNo());
                    Gobj.setReporter_Email(reportingUserDetailsObj.getEmail());
                    Gobj.setReporter_Desigination(reportingUserDetailsObj.getDesignation());
                    Gobj.setReporter_Department(reportingUserDetailsObj.getDepartment());
                    Gobj.setReporter_Level(reportingUserDetailsObj.getLocationLevel());
                }

                AppConstants.GlobalObjects = Gobj;
                AppConstants.GlobalObjects.setOrg_Name(orgID);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "loadGlobalObject", e);
        }
    }

    private List<DataControlsMArr> newDataControlsList() {
        List<DataControls> appDataControlsList = improveDataBase.getDataControlsList(sessionManager.getOrgIdFromSession(), sessionManager.getUserDataFromSession().getUserID());
        List<DataControlsMArr> dataControlsMArrArrayList = new ArrayList<>();
        try {
            for (int i = 0; i < appDataControlsList.size(); i++) {
                DataControlsMArr dataControlsMArr = new DataControlsMArr();
                dataControlsMArr.setControl_name(appDataControlsList.get(i).getControlName());
                dataControlsMArr.setVersion(appDataControlsList.get(i).getVersion());
                dataControlsMArrArrayList.add(dataControlsMArr);
                Log.d(TAG, "MyDataControlsList: " + dataControlsMArrArrayList.get(i).getControl_name());
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "newDataControlsList", e);
        }

        return dataControlsMArrArrayList;
    }

    private void startDownload(String filePath, String appName, int flag) {
        try {
            boolean resultDelete = false;
            String[] imgUrlSplit = filePath.split("/");
            String itemNameInPackage = imgUrlSplit[imgUrlSplit.length - 1].replaceAll(" ", "_");
            String strSDCardUrl = null;
            if (flag == 1) {
                strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/";
            } else {
                strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/";
            }


            if (!isFileExistsInExternalPackage(context, strSDCardUrl, itemNameInPackage)) {
                downloadFile(filePath, strSDCardUrl);

            } /*else {
            resultDelete = deleteFileifExists(strSDCardUrl);

            if (resultDelete) {

                downloadFile(filePath, strSDCardUrl);

            }
        }*/
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "startDownload", e);
        }
    }

    public void createAppFolderAndDownloadFiles(AppDetails appDetails) {
        try {

            String appName = appDetails.getAppName().replaceAll(" ", "_");

//                File root = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName);
//
//                if (!root.exists()) {
//                    root.mkdirs();
//                }
            if (appDetails.getAppIcon() != null) {
                String appIcon = null;
                if (appDetails.getDisplayIcon() != null) {
                    appIcon = appDetails.getDisplayIcon();
                } else {
                    appIcon = appDetails.getAppIcon();
                }
                if (appDetails.getDownloadURls() != null && !appDetails.getDownloadURls().isEmpty()) {
                    String[] imgUrlSplit = appDetails.getDownloadURls().split(",");
                    for (int urlcount = 0; urlcount < imgUrlSplit.length; urlcount++) {
                        // check download
                        startDownload(imgUrlSplit[urlcount].trim(), appName, 1);
                    }
                    if (!appIcon.equalsIgnoreCase("NA")) {
// check download
                        startDownload(appIcon, appName, 1);
                    }
                } else {
                    if (!appIcon.equalsIgnoreCase("NA")) {
// check download
                        startDownload(appIcon, appName, 1);
                    }
//                }
                }

//            String filePath ="http://182.18.157.124/ImproveUpload/DesignXMLFile/Employee data.xml";

            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "createAppFolderAndDownloadFiles", e);
        }
    }

    public void downloadFile(String filePath, String strSDCardUrl) {
        try {
            if (!filePath.contains(" ") && filePath.contains("http")) {
                DownloadManager.Request request = new DownloadManager.Request(Uri.parse(filePath));
                if (request != null) {
                    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN);
//                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE);
//                request.setTitle(getResources().getString(R.string.app_name));
//                request.setDescription("Downloading Files...");
//                request.allowScanningByMediaScanner();
//                request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
//            request.setDestinationInExternalFilesDir(getContext(), Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
//            request.setDestinationInExternalPublicDir("", strSDCardUrl);
//        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,""+System.currentTimeMillis());
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                        request.setDestinationInExternalFilesDir(this, Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
                    } else {
                        request.setDestinationInExternalPublicDir("", strSDCardUrl);
                    }
                    downloadManagerFiles = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);
                    downloaId = downloadManagerFiles.enqueue(request);

                    Log.d(TAG, "startDownload: " + downloadManagerFiles);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "downloadFile", e);
        }
    }

    private void startDownloadDataControl(String filePath, String appName, int flag, boolean realmFlag, DataControls dataControlDetails) {
        try {
            boolean resultDelete = false;
            String[] imgUrlSplit = filePath.split("/");
            String itemNameInPackage = imgUrlSplit[imgUrlSplit.length - 1].replaceAll(" ", "_");
            String strSDCardUrl = null;

            if (flag == 1) {
                strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + appName + "/" + itemNameInPackage;
            } else if (flag == 2) {
                strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + itemNameInPackage;
            } else {
                strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + itemNameInPackage;
            }

            if (!isFileExists(strSDCardUrl)) {
                if (realmFlag) {
                    DownloadFileFromURLTask fromURLTask = new DownloadFileFromURLTask(this, appName, strSDCardUrl, flag, new DownloadFileListener() {
                        @Override
                        public void onSuccess(File file) {
                            String line = ImproveHelper.readTextFileFromSD(context, file.getAbsolutePath());
                            System.out.println("===realm: String===" + line);
                            System.out.println("===realm: status===" + dataControlDetails.getControlName());
                            System.out.println("===realm: status===" + dataControlDetails.getControlStatus());
                            if (dataControlDetails.getControlStatus().equalsIgnoreCase("Update")) {
                                String refRespDCUpdate = dataControlDetails.getControlName();
                                RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                            } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("Deleted")) {
                                String refRespDCDelete = dataControlDetails.getControlName();
                                RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                            } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("New")) { // newly added files
                                if (RealmDBHelper.existTable(context, dataControlDetails.getControlName())) {
                                    RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                }
                                RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                            }
                        }

                        @Override
                        public void onFailed(String errorMessage) {

                        }
                    });
                    fromURLTask.execute(filePath);
                } else {
                    downloadDataControl(filePath, strSDCardUrl);
                }

            } else {
                resultDelete = deleteFileifExists(strSDCardUrl);

                if (resultDelete) {
                    if (flag != 2) {
                        if (realmFlag) {
                            DownloadFileFromURLTask fromURLTask = new DownloadFileFromURLTask(this, appName, strSDCardUrl, flag, new DownloadFileListener() {
                                @Override
                                public void onSuccess(File file) {
                                    String line = ImproveHelper.readTextFileFromSD(context, file.getAbsolutePath());
                                    System.out.println("===realm: String===" + line);
                                    System.out.println("===realm: status===" + dataControlDetails.getControlName());
                                    System.out.println("===realm: status===" + dataControlDetails.getControlStatus());
                                    if (dataControlDetails.getControlStatus().equalsIgnoreCase("Update")) {
                                        String refRespDCUpdate = dataControlDetails.getControlName();
                                        RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                        RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                                    } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("Deleted")) {
                                        String refRespDCDelete = dataControlDetails.getControlName();
                                        RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                    } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("New")) { // newly added files
                                        if (RealmDBHelper.existTable(context, dataControlDetails.getControlName())) {
                                            RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                        }
                                        RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                                    }
                                }

                                @Override
                                public void onFailed(String errorMessage) {

                                }
                            });
                            fromURLTask.execute(filePath);
                        } else {
                            downloadDataControl(filePath, strSDCardUrl);
                        }

                    } else {
                        if (realmFlag) {
                            DownloadFileFromURLTask fromURLTask = new DownloadFileFromURLTask(this, appName, strSDCardUrl, flag, new DownloadFileListener() {
                                @Override
                                public void onSuccess(File file) {
                                    String line = ImproveHelper.readTextFileFromSD(context, file.getAbsolutePath());
                                    System.out.println("===realm: String===" + line);
                                    System.out.println("===realm: status===" + dataControlDetails.getControlName());
                                    System.out.println("===realm: status===" + dataControlDetails.getControlStatus());
                                    if (dataControlDetails.getControlStatus().equalsIgnoreCase("Update")) {
                                        String refRespDCUpdate = dataControlDetails.getControlName();
                                        RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                        RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                                    } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("Deleted")) {
                                        String refRespDCDelete = dataControlDetails.getControlName();
                                        RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                    } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("New")) { // newly added files
                                        if (RealmDBHelper.existTable(context, dataControlDetails.getControlName())) {
                                            RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                        }
                                        RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                                    }
                                }

                                @Override
                                public void onFailed(String errorMessage) {

                                }
                            });
                            fromURLTask.execute(filePath);
                        } else {
                            DownloadFileFromURLTask fromURLTask = new DownloadFileFromURLTask(this, appName, "Improve_User/" + sessionManager.getOrgIdFromSession() + "/", flag, new DownloadFileListener() {
                                @Override
                                public void onSuccess(File file) {

                                }

                                @Override
                                public void onFailed(String errorMessage) {

                                }
                            });
                            fromURLTask.execute(filePath);
                        }

                    }
                } else {
                    if (realmFlag) {
                        DownloadFileFromURLTask fromURLTask = new DownloadFileFromURLTask(this, appName, strSDCardUrl, flag, new DownloadFileListener() {
                            @Override
                            public void onSuccess(File file) {
                                String line = ImproveHelper.readTextFileFromSD(context, file.getAbsolutePath());
                                System.out.println("===realm: String===" + line);
                                System.out.println("===realm: status===" + dataControlDetails.getControlName());
                                System.out.println("===realm: status===" + dataControlDetails.getControlStatus());
                                if (dataControlDetails.getControlStatus().equalsIgnoreCase("Update")) {
                                    String refRespDCUpdate = dataControlDetails.getControlName();
                                    RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                    RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                                } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("Deleted")) {
                                    String refRespDCDelete = dataControlDetails.getControlName();
                                    RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                } else if (dataControlDetails.getControlStatus().equalsIgnoreCase("New")) { // newly added files
                                    if (RealmDBHelper.existTable(context, dataControlDetails.getControlName())) {
                                        RealmDBHelper.deleteTable(context, dataControlDetails.getControlName());
                                    }
                                    RealmDBHelper.createTableAndInsertDataFromDataControl(context, line);
                                }
                            }

                            @Override
                            public void onFailed(String errorMessage) {

                            }
                        });
                        fromURLTask.execute(filePath);
                    } else {
                        downloadDataControl(filePath, strSDCardUrl);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "startDownloadDataControl", e);
        }
    }

    public void downloadDataControl(String filePath, String strSDCardUrl) {
        try {
            if (!filePath.contains(" ")) {
                Log.d(TAG, "sess_or: " + strSDCardUrl);

                DownloadManager.Request request = new DownloadManager.Request(Uri.parse(filePath));
                if (request != null) {
//                request.setVisibleInDownloadsUi(false);
                    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN);
//                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE);
//                request.setTitle("Bhargo");
//                request.setDescription("Downloading Files....");
//                request.allowScanningByMediaScanner();
//                request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                        request.setDestinationInExternalFilesDir(this, Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
                    } else {
                        request.setDestinationInExternalPublicDir("", strSDCardUrl);
                    }

                    DownloadManager downloadManagerDataControl = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);
                    downloadManagerDataControl.enqueue(request);
//                downloaId = downloadManagerDataControl.enqueue(request);

//                Log.d(TAG, "startDownload: " + downloadManagerDataControl);
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "downloadDataControl", e);
        }
    }


//    //=======Set_ShowMap=====
//    public void setShowMap(String SelectedControl,String MappedValue,String PointView){
//
//        List<String> Points= ImproveHelper.getListValueFromGlobalObject(this,MappedValue);
//
//        MapControl map_Control = (MapControl) List_ControlClassObjects.get(SelectedControl);
//        map_Control.setMapPonitsDynamically(PointView,Points);
//
//
//    }
//    //=======Set_CalenderEvent=====
//    public void setCalenderEvents(String SelectedControl,ActionWithoutCondition_Bean ActionObj){
//        List<String> Points= ImproveHelper.getListValueFromGlobalObject(this,SelectedControl);
//
//        CalendarEventControl calendarEvent_Control = (CalendarEventControl) List_ControlClassObjects.get(SelectedControl);
//        if(ActionObj.getCalenderevent_Type().equalsIgnoreCase("Single")) {
//            calendarEvent_Control.AddDateDynamically(ActionObj.getCalenderevent_Type(),ActionObj.getCalenderevent_Single_Date(),ActionObj.getCalenderevent_Message());
//        }else{
//            calendarEvent_Control.AddDateDynamically(ActionObj.getCalenderevent_Type(),ActionObj.getCalenderevent_Multi_StartDate()+"$"+ActionObj.getCalenderevent_Multi_EndDate(),ActionObj.getCalenderevent_Message());
//        }
//
//    }
//    private boolean isFileExists(String filename) {
//        File folder1 = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + filename);
//        return folder1.exists();
//    }
//
//    public void downloadMenuIcons(String filePath, String strSDCardUrl) {
//
//        if (!filePath.contains(" ")) {
//            DownloadManager.Request request = new DownloadManager.Request(Uri.parse(filePath));
//            if (request != null) {
//                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE);
//                request.setTitle(context.getResources().getString(R.string.app_name));
//                request.setDescription("Downloading menu icons...");
//                request.allowScanningByMediaScanner();
////                request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
////            request.setDestinationInExternalFilesDir(getContext(), Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
////            request.setDestinationInExternalPublicDir("", strSDCardUrl);
////        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,""+System.currentTimeMillis());
//                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                    request.setDestinationInExternalFilesDir(context, Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
//                } else {
//                    request.setDestinationInExternalPublicDir("", strSDCardUrl);
//                }
//                DownloadManager downloadManagerFiles = (DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
//                long downloaId = downloadManagerFiles.enqueue(request);
//
//                Log.d(TAG, "startDownload: " + downloadManagerFiles);
//            }
//        }
//
//    }
//

    public void getformDesigndetails(String formName) {
        Map<String, String> data = new HashMap<>();
        try {
            data.put("PageName", formName);
            data.put("OrgId", sessionManager.getOrgIdFromSession());
        } catch (Exception e) {
            e.printStackTrace();
        }

        Call<CallFormDataResponse> notificationDataResponseCall = getServices.getDesignfromCallform(sessionManager.getAuthorizationTokenId(), data);

        notificationDataResponseCall.enqueue(new Callback<CallFormDataResponse>() {
            @Override
            public void onResponse(Call<CallFormDataResponse> call, Response<CallFormDataResponse> response) {
                if (response.body() != null) {

                    if (response.body().getAppDetails() != null && response.body().getAppDetails().size() > 0) {
                        Log.d(TAG, "onResponseAppDetails: " + response.body().getAppDetails().get(0).getAppName());
                        AppDetails otherFormDetailsList = response.body().getAppDetails().get(0);
                        List<AppDetails> appsList = new ArrayList<AppDetails>();
                        appsList.add(otherFormDetailsList);
                        improveDataBase.insertIntoAppsListTable(appsList,
                                sessionManager.getOrgIdFromSession(),
                                sessionManager.getUserDataFromSession().getUserID());

                        if (otherFormDetailsList.getAppType().equalsIgnoreCase(CHILD_FORM)) {

                            Intent intent = new Intent(context, MainActivity.class);
                            intent.putExtra("app_edit", "New");
                            intent.putExtra("s_app_version", otherFormDetailsList.getAppVersion());
                            intent.putExtra("s_app_type", otherFormDetailsList.getAppType());
                            intent.putExtra("s_org_id", strOrgId);
                            intent.putExtra("s_app_name", formName);
                            intent.putExtra("s_created_by", otherFormDetailsList.getCreatedBy());
                            intent.putExtra("s_user_id", strUserId);
                            intent.putExtra("s_distribution_id", otherFormDetailsList.getDistrubutionID());
                            intent.putExtra("s_user_location_Structure", strUserLocationStructure);
                            startActivity(intent);

                        } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(AppConstants.QUERY_FORM)) {

                            Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
                            intent.putExtra("s_design_format", otherFormDetailsList.getDesignFormat());
                            intent.putExtra("s_app_name", otherFormDetailsList.getAppName());
//                            intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
                            intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
                            startActivity(intent);

                        } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(DATA_COLLECTION)) {

                            Intent intent = new Intent(context, MainActivity.class);
                            intent.putExtra("app_edit", "New");
                            intent.putExtra("s_app_version", otherFormDetailsList.getAppVersion());
                            intent.putExtra("s_app_type", otherFormDetailsList.getAppType());
                            intent.putExtra("s_org_id", strOrgId);
                            intent.putExtra("s_app_name", formName);
                            intent.putExtra("s_created_by", otherFormDetailsList.getCreatedBy());
                            intent.putExtra("s_user_id", strUserId);
                            intent.putExtra("s_distribution_id", strDistributionId);
                            intent.putExtra("s_user_location_Structure", strUserLocationStructure);
                            intent.putExtra("s_user_post_id", strPostId);
                            startActivity(intent);

                        } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(AppConstants.DASHBOARD)) {
                            Log.d(TAG, "NotificationOnClickAppType: " + otherFormDetailsList.getAppType());
//                                strWebUrl = "https://www.google.com/";

                            webView.setVisibility(View.VISIBLE);
                            WebSettings webSettings = webView.getSettings();
                            webSettings.setJavaScriptEnabled(true);
                            strWebUrl = AppConstants.MAIN_WEB_LINK + formName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                            webView.loadUrl(strWebUrl);

                            Log.d(TAG, "onResponseDashBoard: " + strWebUrl);
                        } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(AppConstants.REPORTS)) {
                            Log.d(TAG, "NotificationOnClickAppType: " + otherFormDetailsList.getAppType());
//                                strWebUrl = "https://www.google.com/";

                            webView.setVisibility(View.VISIBLE);
                            WebSettings webSettings = webView.getSettings();
                            webSettings.setJavaScriptEnabled(true);
                            strWebUrl = AppConstants.MAIN_WEB_LINK + formName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                            webView.loadUrl(strWebUrl);

                            Log.d(TAG, "onResponseReports: " + strWebUrl);
                        }
                    }
                }
            }

            @Override
            public void onFailure(Call<CallFormDataResponse> call, Throwable t) {
                Log.d(TAG, "Callform faild responce: " + t);
            }
        });
    }

    public void callform(ActionWithoutCondition_Bean ActionObj) {
        try {
            setTheme(R.style.AppTheme);
            if (ActionObj.getList_Varibles() != null && ActionObj.getList_Varibles().size() > 0) {
                for (int i = 0; i < ActionObj.getList_Varibles().size(); i++) {
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String value = ehelper.ExpressionHelper(this, ActionObj.getList_Varibles().get(i).getVariable_Mapped_ID());
//                                    ImproveHelper.showToast(context, value);
                    if (AppConstants.dw_position != -1) {
                        String[] valueArray = value.split("\\,");
                        value = valueArray[0];
                    }
                    if (ActionObj.getList_Varibles().get(i).getVariable_Type().equalsIgnoreCase("Single") || ActionObj.getList_Varibles().get(i).getVariable_Type().equalsIgnoreCase("FilterParam")) {
                        ActionObj.getList_Varibles().get(i).setVariable_singleValue(value);
                    } else {
                        List<String> values = new ArrayList<String>();
                        values.addAll(Arrays.asList(value.split("\\,")));
                        ActionObj.getList_Varibles().get(i).setVariable_multiValue(values);
                    }
                }
            }

            FormNavigation formNavigation = new FormNavigation();
            if (currentMultiForm != null) {
                formNavigation = currentMultiForm.getNavigationList().get(strAppName);
                if (formNavigation != null) {
                    formNavigation.setRestoreForm(!ActionObj.isCloseParentEnabled());
                }
            }


            if (ActionObj.getFormType().contentEquals("")) {
                ActionObj.setFormType(CALL_FORM_SINGLE_FORM);
            }
            if (!ActionObj.isCloseParentEnabled()) {
                Global_Controls_Variables.put(strAppName.toLowerCase(), List_ControlClassObjects);
                Global_Single_Forms.put(strAppName.toLowerCase(), dataCollectionObject);
                AppConstants.Global_Layouts.put(strAppName.toLowerCase(), linearLayout);
            }
            if (ActionObj.isCloseAllFormsEnabled()) {
                AppConstants.LAYOUT_KEEP_SESSION.clear();
            }
            AppConstants.Global_Variable_Beans.put(strAppName.toLowerCase(), ActionObj.getList_Varibles());

            String formName = ActionObj.getSelect_FormName();
            List<Variable_Bean> list_variables = ActionObj.getList_Varibles();
            String formType = ActionObj.getFormType();
            boolean isCloseParentEnabled = ActionObj.isCloseParentEnabled();
            boolean isKeepSessionEnabled = ActionObj.isKeepSessionEnabled();
            boolean goToHomeEnabled = ActionObj.isGoToHomeEnabled();
            boolean isCloseAllFormsEnabled = ActionObj.isCloseAllFormsEnabled();
            strOrgId = getIntent().getStringExtra("s_org_id");
//s_app_mode=Hybrid
            NavigationModel navigationModel = new NavigationModel();


            if (IS_MULTI_FORM && formType.contentEquals(AppConstants.CALL_FORM_SINGLE_FORM)) {

                navigationModel = new NavigationModel(formName, "",
                        sessionManager.getOrgIdFromSession(), "", sessionManager.getUserDataFromSession().getUserID(),
                        "", sessionManager.getPostsFromSession(), "", "", !isCloseParentEnabled, "", list_variables, strAppName, formType, goToHomeEnabled);


            } else if (IS_MULTI_FORM && formType.contentEquals(AppConstants.CALL_FORM_CURRENT_MULTI_FORM_INNER)) {
                String designFormat = AppConstants.currentMultiForm.getInnerFormsDesignMap().get(formName);

                navigationModel = new NavigationModel(formName, AppConstants.currentMultiForm.getAppVersion(),
                        sessionManager.getOrgIdFromSession(), AppConstants.currentMultiForm.getCreateBy(), sessionManager.getUserDataFromSession().getUserID(),
                        AppConstants.currentMultiForm.getDistributionId(), AppConstants.currentMultiForm.getPostId(), designFormat,
                        AppConstants.CALL_FORM_DATA_COLLECTION, !isCloseParentEnabled, "",
                        list_variables, strAppName, formType, goToHomeEnabled);


            } else if (IS_MULTI_FORM && formType.contentEquals(AppConstants.CALL_FORM_MULTI_FORM_INNER)) {
                String designFormat = AppConstants.currentMultiForm.getInnerFormsDesignMap().get(formName);

                navigationModel = new NavigationModel(formName, AppConstants.currentMultiForm.getAppVersion(),
                        sessionManager.getOrgIdFromSession(), AppConstants.currentMultiForm.getCreateBy(), sessionManager.getUserDataFromSession().getUserID(),
                        AppConstants.currentMultiForm.getDistributionId(), AppConstants.currentMultiForm.getPostId(), designFormat,
                        AppConstants.CALL_FORM_DATA_COLLECTION, !isCloseParentEnabled, "",
                        list_variables, strAppName, formType, goToHomeEnabled);


            } else if (formType.contentEquals(AppConstants.CALL_FORM_SINGLE_FORM)) {
                navigationModel = new NavigationModel(formName, "",
                        sessionManager.getOrgIdFromSession(), "", sessionManager.getUserDataFromSession().getUserID(),
                        "", sessionManager.getPostsFromSession(), "", "", !isCloseParentEnabled, "", list_variables, strAppName, formType, goToHomeEnabled);

            } else if (formType.contentEquals("REPORT_FORMP")) {
                navigationModel = new NavigationModel(formName, "",
                        sessionManager.getOrgIdFromSession(), "", sessionManager.getUserDataFromSession().getUserID(),
                        "", sessionManager.getPostsFromSession(), "", "", !isCloseParentEnabled, "", list_variables, strAppName, "REPORT_FORMP", goToHomeEnabled);
                if (currentMultiForm != null) {
                    navigationModel.setAppInMultiForm(true);
                }
            } else if (formType.contentEquals("WORK_FLOW_FORM")) {
                navigationModel = new NavigationModel(formName, "",
                        sessionManager.getOrgIdFromSession(), "", sessionManager.getUserDataFromSession().getUserID(),
                        "", sessionManager.getPostsFromSession(), "", "", !isCloseParentEnabled, "", list_variables, strAppName, "WORK_FLOW_FORM", goToHomeEnabled);
                if (currentMultiForm != null) {
                    navigationModel.setAppInMultiForm(true);
                }
            } else if (formType.contentEquals(AppConstants.CALL_FORM_MULTI_FORM)) {
                navigationModel = new NavigationModel(formName, "",
                        sessionManager.getOrgIdFromSession(), "", sessionManager.getUserDataFromSession().getUserID(),
                        "", sessionManager.getPostsFromSession(), "", "", !isCloseParentEnabled, "", list_variables, strAppName, AppConstants.CALL_FORM_MULTI_FORM, goToHomeEnabled);
//            } else if (IS_MULTI_FORM && formType.contentEquals(AppConstants.CALL_FORM_SINGLE_DATA_MANAGEMENT)) {
            } else if (formType.contentEquals(AppConstants.CALL_FORM_SINGLE_DATA_MANAGEMENT)) {

                navigationModel = new NavigationModel(formName, "",
                        sessionManager.getOrgIdFromSession(), "", sessionManager.getUserDataFromSession().getUserID(),
                        "", sessionManager.getPostsFromSession(), "", "", !isCloseParentEnabled, "", new ArrayList<>(), strAppName, formType, goToHomeEnabled);

            }


            // }
            navigationModel.setCloseParentEnabled(isCloseParentEnabled);
            navigationModel.setCloseAllFormsEnabled(isCloseAllFormsEnabled);
            navigationModel.setKeepSessionEnabled(isKeepSessionEnabled);
            navigationModel.setGoToHomeEnabled(goToHomeEnabled);
            CallFormAction callFormAction = new CallFormAction(context);
            if (getIntent().hasExtra("keep_session") && getIntent().getBooleanExtra("keep_session", false)) {
                callFormAction.setSaveThisActivitySession(true);
                callFormAction.setActivityView(activityView);
                callFormAction.setCurrentAppName(strAppName);
                callFormAction.setFrameLayout(frameLayout);
            }
//            if (ActionObj.getDataManagementOptions() != null && (ActionObj.getDataManagementOptions().isEnableDeleteData() || ActionObj.getDataManagementOptions().isEnableEditData() || ActionObj.getDataManagementOptions().isEnableViewData()) && formType.contentEquals(CALL_FORM_SINGLE_FORM)) {
            if (ActionObj.getDataManagementOptions() != null && (ActionObj.getDataManagementOptions().isEnableDeleteData() || ActionObj.getDataManagementOptions().isEnableEditData() || ActionObj.getDataManagementOptions().isEnableViewData())) {
                navigationModel.setDataManagementOptions(ActionObj.getDataManagementOptions());
                navigationModel.setFormType(AppConstants.CALL_FORM_SINGLE_DATA_MANAGEMENT);
            }
            if (ActionObj.getVisibilityManagementOptions() != null ) {
                navigationModel.setVisibilityManagementOptions(ActionObj.getVisibilityManagementOptions());
            }
            if (!inparam_current_location_cf.contentEquals("")) {
                callFormAction.setInparam_current_location(inparam_current_location_cf);
            }
            callFormAction.navigateToNext(navigationModel);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "callform", e);
        }
    }

    public void getformDesigndetails(String formName, List<Variable_Bean> list_variables) {
        try {
            Map<String, String> data = new HashMap<>();
            try {
                data.put("PageName", formName);
                data.put("OrgId", sessionManager.getOrgIdFromSession());
            } catch (Exception e) {
                e.printStackTrace();
            }

            Call<CallFormDataResponse> notificationDataResponseCall = getServices.getDesignfromCallform(sessionManager.getAuthorizationTokenId(), data);

            notificationDataResponseCall.enqueue(new Callback<CallFormDataResponse>() {
                @Override
                public void onResponse(Call<CallFormDataResponse> call, Response<CallFormDataResponse> response) {
                    if (response.body() != null) {

                        if (response.body().getAppDetails() != null && response.body().getAppDetails().size() > 0) {
                            Log.d(TAG, "onResponseAppDetails: " + response.body().getAppDetails().get(0).getAppName());
                            AppDetails otherFormDetailsList = response.body().getAppDetails().get(0);
                            List<AppDetails> appsList = new ArrayList<AppDetails>();
                            appsList.add(otherFormDetailsList);
                            improveDataBase.insertIntoAppsListTable(appsList,
                                    sessionManager.getOrgIdFromSession(),
                                    sessionManager.getUserDataFromSession().getUserID());

                            if (otherFormDetailsList.getAppType().equalsIgnoreCase(CHILD_FORM)) {

                                Intent intent = new Intent(context, MainActivity.class);
                                intent.putExtra("app_edit", "New");
                                intent.putExtra("s_app_version", otherFormDetailsList.getAppVersion());
                                intent.putExtra("s_app_type", otherFormDetailsList.getAppType());
                                intent.putExtra("s_org_id", strOrgId);
                                intent.putExtra("s_app_name", formName);
                                intent.putExtra("s_created_by", otherFormDetailsList.getCreatedBy());
                                intent.putExtra("s_user_id", strUserId);
                                intent.putExtra("s_distribution_id", otherFormDetailsList.getDistrubutionID());
                                intent.putExtra("s_user_location_Structure", strUserLocationStructure);
                                if (list_variables != null && list_variables.size() > 0) {
                                    Bundle Variables = new Bundle();
                                    Variables.putSerializable("Variables", (Serializable) list_variables);
                                    intent.putExtra("VariablesData", Variables);
                                }
                                startActivity(intent);

                            } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(AppConstants.QUERY_FORM)) {

                                Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
                                intent.putExtra("s_design_format", otherFormDetailsList.getDesignFormat());
                                intent.putExtra("s_app_name", otherFormDetailsList.getAppName());
//                            intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
                                intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
                                if (list_variables != null && list_variables.size() > 0) {
                                    Bundle Variables = new Bundle();
                                    Variables.putSerializable("Variables", (Serializable) list_variables);
                                    intent.putExtra("VariablesData", Variables);
                                }
                                startActivity(intent);

                            } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(DATA_COLLECTION)) {

                                Intent intent = new Intent(context, MainActivity.class);
                                intent.putExtra("app_edit", "New");
                                intent.putExtra("s_app_version", otherFormDetailsList.getAppVersion());
                                intent.putExtra("s_app_type", otherFormDetailsList.getAppType());
                                intent.putExtra("s_org_id", strOrgId);
                                intent.putExtra("s_app_name", formName);
                                intent.putExtra("s_created_by", otherFormDetailsList.getCreatedBy());
                                intent.putExtra("s_user_id", strUserId);
                                intent.putExtra("s_distribution_id", strDistributionId);
                                intent.putExtra("s_user_location_Structure", strUserLocationStructure);
                                if (list_variables != null && list_variables.size() > 0) {
                                    Bundle Variables = new Bundle();
                                    Variables.putSerializable("Variables", (Serializable) list_variables);
                                    intent.putExtra("VariablesData", Variables);
                                }
                                startActivity(intent);

                            } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(AppConstants.DASHBOARD)) {
                                Log.d(TAG, "NotificationOnClickAppType: " + otherFormDetailsList.getAppType());
//                                strWebUrl = "https://www.google.com/";

                                webView.setVisibility(View.VISIBLE);
                                WebSettings webSettings = webView.getSettings();
                                webSettings.setJavaScriptEnabled(true);
                                strWebUrl = AppConstants.MAIN_WEB_LINK + formName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                                webView.loadUrl(strWebUrl);

                                Log.d(TAG, "onResponseDashBoard: " + strWebUrl);
                            } else if (otherFormDetailsList.getAppType().equalsIgnoreCase(AppConstants.REPORTS)) {
                                Log.d(TAG, "NotificationOnClickAppType: " + otherFormDetailsList.getAppType());
//                                strWebUrl = "https://www.google.com/";

                                webView.setVisibility(View.VISIBLE);
                                WebSettings webSettings = webView.getSettings();
                                webSettings.setJavaScriptEnabled(true);
                                strWebUrl = AppConstants.MAIN_WEB_LINK + formName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                                webView.loadUrl(strWebUrl);

                                Log.d(TAG, "onResponseReports: " + strWebUrl);
                            }
                        }
                    }
                }

                @Override
                public void onFailure(Call<CallFormDataResponse> call, Throwable t) {
                    Log.d(TAG, "Callform faild responce: " + t);
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getformDesigndetails", e);
        }
    }

    //=======Set_ShowMap=====
    public void setShowMap(ActionWithoutCondition_Bean ActionObj) {
        try {
            String showmap_control = ActionObj.getShowmap_Control();
            String Showmap_MappedValueID = ActionObj.getShowmap_MappedValueID();
            String Showmap_PointViewType = ActionObj.getShowmap_PointViewType();
            String activity = ActionObj.getShowmap_Activity();
            String mapMarker = null;
            if (ActionObj.getShowmap_Marker().startsWith("http") || ActionObj.getShowmap_Marker().startsWith("https")) {
                mapMarker = ActionObj.getShowmap_Marker();
            }
            ExpressionMainHelper expressionMainHelper = new ExpressionMainHelper();
            String value = expressionMainHelper.ExpressionHelper(this, Showmap_MappedValueID);
            List<String> Points = new ArrayList<>();
            String[] valueArray = value.split(",");
            for (int i = 0; i < valueArray.length; i++) {
                Points.add(valueArray[i]);

            }
//            List<String> Points = ImproveHelper.getListValueFromGlobalObject(this, Showmap_MappedValueID);

            MapControl map_Control = (MapControl) List_ControlClassObjects.get(showmap_control);
            if (activity.contentEquals("Replace")) {
                map_Control.clear();
            }
            map_Control.setMapPonitsDynamically(Showmap_PointViewType, Points, mapMarker);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setShowMap", e);
        }
    }

    //=======Set_CalenderEvent=====
    public void setCalenderEvents(String SelectedControl, ActionWithoutCondition_Bean ActionObj) {
        try {
            List<String> Points = ImproveHelper.getListValueFromGlobalObject(this, SelectedControl);
            ExpressionMainHelper ehelper = new ExpressionMainHelper();

            CalendarEventControl calendarEvent_Control = (CalendarEventControl) List_ControlClassObjects.get(SelectedControl);
            if (ActionObj.getCalenderevent_Type().equalsIgnoreCase("Single")) {
                String date  = ehelper.ExpressionHelper(context,ActionObj.getCalenderevent_Single_Date());
                String message  = ehelper.ExpressionHelper(context,ActionObj.getCalenderevent_Message());
                calendarEvent_Control.AddDateDynamically(ActionObj.getCalenderevent_Type(), date, message);
            } else {
                String startDate  = ehelper.ExpressionHelper(context,ActionObj.getCalenderevent_Multi_StartDate());
                String endDate  = ehelper.ExpressionHelper(context,ActionObj.getCalenderevent_Multi_EndDate());
                String message  = ehelper.ExpressionHelper(context,ActionObj.getCalenderevent_Message());
                calendarEvent_Control.AddDateDynamically(ActionObj.getCalenderevent_Type(), startDate + "$" + endDate, message);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setCalenderEvents", e);
        }
    }

    //=======Dial Number Action=====
    public void setDialNumber(String dialNumberValue, ActionWithoutCondition_Bean ActionObj) {
        try {
            String value = ImproveHelper.getValueFromGlobalObject(this, dialNumberValue);

            if (value.matches("[0-9]+")) {
                Intent dial = new Intent();
                dial.setAction("android.intent.action.DIAL");
                dial.setData(Uri.parse("tel:" + value));
                startActivity(dial);
            } else {
                showToast(this, "Invalid Number");
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setDialNumber", e);
        }
    }

    public void setTextToVoice(String textToVoiceValue, ActionWithoutCondition_Bean ActionObj) {

        try {
            String value = ImproveHelper.getValueFromGlobalObject(this, textToVoiceValue);

            tts = new TextToSpeech(this, new TextToSpeech.OnInitListener() {
                @Override
                public void onInit(int status) {

                    if (status == TextToSpeech.SUCCESS) {
//                    tts.setSpeechRate(0.5f);
                        int result = tts.setLanguage(Locale.ENGLISH);
                        if (result == TextToSpeech.LANG_MISSING_DATA ||
                                result == TextToSpeech.LANG_NOT_SUPPORTED) {
                            showToast(context, "This Language is not supported");
                        } else {
                            if (value == null || value.contentEquals("")) {

                                tts.speak("Content not available", TextToSpeech.QUEUE_FLUSH, null);
                            }

                            tts.speak(value, TextToSpeech.QUEUE_FLUSH, null);
                        }
                    } else {
                        showToast(context, "Initilization Failed!");
                    }

                }
            });

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setTextToVoice", e);
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (tts != null) {
            tts.stop();
        }
    }

    public void setStartTracking(String SelectedControl, ActionWithoutCondition_Bean ActionObj) {
        try {
            LiveTracking liveTracking = (LiveTracking) List_ControlClassObjects.get(SelectedControl);

            liveTracking.startTracking();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setStartTracking", e);
        }
    }

    public void setStopTracking(String SelectedControl, ActionWithoutCondition_Bean ActionObj) {
        try {
            LiveTracking liveTracking = (LiveTracking) List_ControlClassObjects.get(SelectedControl);

            liveTracking.stopTracking();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setStopTracking", e);
        }
    }

    private boolean isFileExists(String filename) {
        boolean isFileExist = false;
        try {

//            File folder1 = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/" + filename);
            File folder1 = context.getExternalFilesDir(filename);


            isFileExist = folder1.exists();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "isFileExists", e);
        }
        return isFileExist;
    }

    private boolean deleteFileifExists(String filename) {
        boolean isDelete = false;
        try {
//            File folder1 = new File(Environment.getExternalStorageDirectory().getAbsolutePath() +"/"+ filename);
            File folder1 = context.getExternalFilesDir(filename);
            isDelete = folder1.delete();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "deleteFileifExists", e);
        }
        return isDelete;
    }

    public void downloadMenuIcons(String filePath, String strSDCardUrl) {

        if (!filePath.contains(" ")) {
            DownloadManager.Request request = new DownloadManager.Request(Uri.parse(filePath));
            if (request != null) {
                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE);
                request.setTitle(context.getResources().getString(R.string.app_name));
                request.setDescription("Downloading menu icons...");
                request.allowScanningByMediaScanner();
//                request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
//            request.setDestinationInExternalFilesDir(getContext(), Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
//            request.setDestinationInExternalPublicDir("", strSDCardUrl);
//        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,""+System.currentTimeMillis());
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                    request.setDestinationInExternalFilesDir(context, Environment.getExternalStorageDirectory().getAbsolutePath(), strSDCardUrl);
                } else {
                    request.setDestinationInExternalPublicDir("", strSDCardUrl);
                }
                DownloadManager downloadManagerFiles = (DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
                long downloaId = downloadManagerFiles.enqueue(request);

                Log.d(TAG, "startDownload: " + downloadManagerFiles);
            }
        }

    }

    public void SetLiveTrackDefultGPS() {
        try {
            for (int i = 0; i < list_Control.size(); i++) {
                if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_LiveTracking)) {
                    LiveTracking LiveTracking = (LiveTracking) List_ControlClassObjects.get(list_Control.get(i).getControlName());
                    LiveTracking.setMapView(GlobalObjects.getCurrent_GPS());
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetLiveTrackDefultGPS", e);
        }
    }

    public JSONObject getinputParamsFormate(String SuccessCaseDetails, Map<String, String> InputMap) {
        JSONObject InputJobj = new JSONObject();
        try {
            //   From_SuccessCaseDetails_JSONObjects
            JSONObject Details_jobj = new JSONObject(SuccessCaseDetails);
            JSONObject Details_inputObject = Details_jobj.getJSONObject("InputParameters");

            JSONArray Details_inputParamJArr = Details_inputObject.getJSONArray("Input Parameters");
            JSONObject Details_AuthorizationObject = Details_inputObject.getJSONObject("Authorization");
            JSONArray Details_HeaderJArr = Details_inputObject.getJSONArray("Header");
            JSONObject Details_BodyObject = Details_inputObject.getJSONObject("Body");

            // Check_With_InputParamsArr
            JSONArray inputParamArr = new JSONArray();
            for (int i = 0; i < Details_inputParamJArr.length(); i++) {
                if (Details_inputParamJArr.getJSONObject(i).getString("Static").equalsIgnoreCase("Yes")) {
                    JSONObject create_input_Jobj = new JSONObject();
                    create_input_Jobj.put("KeyName", Details_inputParamJArr.getJSONObject(i).getString("KeyName"));
                    create_input_Jobj.put("KeyValue", Details_inputParamJArr.getJSONObject(i).getString("KeyValue"));
                    inputParamArr.put(create_input_Jobj);
                } else {
                    if (InputMap.containsKey(Details_inputParamJArr.getJSONObject(i).getString("KeyName"))) {
                        JSONObject create_input_Jobj = new JSONObject();
                        create_input_Jobj.put("KeyName", Details_inputParamJArr.getJSONObject(i).getString("KeyName"));
                        create_input_Jobj.put("KeyValue", InputMap.get(Details_inputParamJArr.getJSONObject(i).getString("KeyName")));
                        inputParamArr.put(create_input_Jobj);
                    }
                }
            }
            // Check_With_HeaderArr
            JSONArray HeaderArr = new JSONArray();
            for (int i = 0; i < Details_HeaderJArr.length(); i++) {
                if (Details_HeaderJArr.getJSONObject(i).getString("Static").equalsIgnoreCase("Yes")) {
                    JSONObject create_Header_Jobj = new JSONObject();
                    create_Header_Jobj.put("KeyName", Details_HeaderJArr.getJSONObject(i).getString("KeyName"));
                    create_Header_Jobj.put("KeyValue", Details_HeaderJArr.getJSONObject(i).getString("KeyValue"));
                    HeaderArr.put(create_Header_Jobj);
                } else {
                    if (InputMap.containsKey(Details_HeaderJArr.getJSONObject(i).getString("KeyName"))) {
                        JSONObject create_Header_Jobj = new JSONObject();
                        create_Header_Jobj.put("KeyName", Details_HeaderJArr.getJSONObject(i).getString("KeyName"));
                        create_Header_Jobj.put("KeyValue", InputMap.get(Details_HeaderJArr.getJSONObject(i).getString("KeyName")));
                        HeaderArr.put(create_Header_Jobj);
                    }
                }
            }

            JSONObject body = new JSONObject();
            if (Details_BodyObject.has("postInputRawTypeContent")) {
                JSONObject bodyposttype = Details_BodyObject.getJSONObject("postInputRawTypeContent");
                Iterator<String> obj_keys = bodyposttype.keys();
                JSONObject create_input_Jobj = new JSONObject();
                while (obj_keys.hasNext()) {
                    String tempkey = obj_keys.next();
                    if (InputMap.containsKey(tempkey)) {
                        create_input_Jobj.put(tempkey, InputMap.get(tempkey));
                    }
                }
                Details_BodyObject.put("postInputRawTypeContent", create_input_Jobj);
            }


            if (Details_BodyObject.has("postInputTypeParameters")) {
                JSONArray postType2Body = Details_inputObject.getJSONArray("postInputTypeParameters");
                for (int i = 0; i < postType2Body.length(); i++) {

                    if (postType2Body.getJSONObject(i).getString("Static").equalsIgnoreCase("Yes")) {
                        JSONObject create_body_Jobj = new JSONObject();
                        create_body_Jobj.put("KeyName", postType2Body.getJSONObject(i).getString("KeyName"));
                        create_body_Jobj.put("KeyValue", postType2Body.getJSONObject(i).getString("KeyValue"));
                        postType2Body.put(create_body_Jobj);
                    } else {
                        if (InputMap.containsKey(postType2Body.getJSONObject(i).getString("KeyName"))) {
                            JSONObject create_body_Jobj = new JSONObject();
                            create_body_Jobj.put("KeyName", postType2Body.getJSONObject(i).getString("KeyName"));
                            create_body_Jobj.put("KeyValue", new JSONObject(InputMap.get(postType2Body.getJSONObject(i).getString("KeyName"))));
                            postType2Body.put(create_body_Jobj);
                        }
                    }
                }

                Details_BodyObject.put("postInputTypeParameters", postType2Body);
            }

            InputJobj.put("Input Parameters", inputParamArr);
            InputJobj.put("Authorization", Details_AuthorizationObject);
            InputJobj.put("Header", HeaderArr);
            InputJobj.put("Body", Details_BodyObject);


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getinputParamsFormate", e);
        }
        return InputJobj;
    }

//    private String getOperatorSymbol(String field_operator) {
//
//        String operator = field_operator;
//        switch (field_operator) {
//            case AppConstants.OPERATOR_LESS_THAN:
//                operator = "<";
//                break;
//            case AppConstants.OPERATOR_GREATER_THAN:
//                operator = ">";
//                break;
//            case AppConstants.OPERATOR_LESS_THAN_EQUALS:
//                operator = "<=";
//                break;
//            case AppConstants.OPERATOR_GREATER_THAN_EQUALS:
//                operator = ">=";
//                break;
//            case AppConstants.OPERATOR_EQUALS:
//                operator = "=";
//                break;
//            case AppConstants.OPERATOR_NOT_EQUALS:
//                operator = "!=";
//                break;
//        }
//        return operator;
//    }

    private void sendNotificationInApp(String receivers, String message, String Type, ActionWithoutCondition_Bean ActionObj, String ReceiverPostId) {
        try {
            System.out.println("message======" + message);
            if (receivers.contains(",")) {
                String[] receiverIds = receivers.split(",");
                for (String receiver : receiverIds) {

                    getFirebaseId(receiver, message, Type, ActionObj, ReceiverPostId);
                }
            } else {
                getFirebaseId(receivers, message, Type, ActionObj, ReceiverPostId);
            }

            if (FromAction == 1) {
                Executeindex++;
                EventExecute();
            } else {
                Executeindex++;
                checkandExecute(IfElseBlock_Bean);
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "sendNotification", e);
        }
    }

    private void getFirebaseId(String receiver, String message, String Type, ActionWithoutCondition_Bean ActionObj, String ReceiverPostId) {
        try {
            Map<String, String> data = new HashMap<>();
            data.put("orgID", AppConstants.GlobalObjects.getOrg_Name());
            if (Type.equalsIgnoreCase("User") || Type.equalsIgnoreCase("Single User")) {//Single User
                data.put("UserID", receiver);
                data.put("GroupIDs", "");
            } else {
                data.put("UserID", "");
                data.put("GroupIDs", receiver);
            }

            data.put("Body", message);
            data.put("PostID", ReceiverPostId);

            Call<String> call = getServices.sendNotification(data, sessionManager.getAuthorizationTokenId());
            call.enqueue(new Callback<String>() {
                @Override
                public void onResponse(Call<String> call, Response<String> response) {
                    String resMessage = response.body();
                    System.out.println("resMessage==" + resMessage);
                    JSONObject jsonObject = null;
                    try {
                        jsonObject = new JSONObject(resMessage);
                        String strMsg = jsonObject.getString("Message");
                        String strStatus = jsonObject.getString("Status");
                        if (strStatus != null && !strStatus.isEmpty() && strStatus.equalsIgnoreCase("200") && ActionObj.isSuccessMessageIsEnable()) {
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            String expMessage = ehelper.ExpressionHelper(MainActivity.this, ActionObj.getMessage_Success());
                            if (ActionObj.getMessage_SuccessDisplayType().equalsIgnoreCase("Message Dialog") || ActionObj.getMessage_SuccessDisplayType().equalsIgnoreCase("2")) {
                                ShowMessageDialogWithOk(context, expMessage, 2);
                            } else {
                                ImproveHelper.showToastRunOnUI((Activity) context,expMessage);
//                                Toast.makeText(context, expMessage, Toast.LENGTH_SHORT).show();
                            }
                        } else if (!ActionObj.isSuccessMessageIsEnable()) {
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            String expMessage = ehelper.ExpressionHelper(MainActivity.this, ActionObj.getMessage_Fail());
                            if (ActionObj.getMessage_SuccessDisplayType().equalsIgnoreCase("Message Dialog") || ActionObj.getMessage_SuccessDisplayType().equalsIgnoreCase("2")) {
                                ShowMessageDialogWithOk(context, expMessage, 2);
                            } else {
                                ImproveHelper.showToastRunOnUI((Activity) context,expMessage);
//                                Toast.makeText(context, expMessage, Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            ImproveHelper.showToast(context, "Notification Sent");
                        }
                    } catch (JSONException e) {
                        throw new RuntimeException(e);
                    }
                }

                @Override
                public void onFailure(Call<String> call, Throwable t) {
                    System.out.println("Failure==" + t.getMessage());
                }
            });

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getFirebaseId", e);
        }

        /*firebaseDatabase.child("Users").orderByChild("userid").equalTo(receiver).addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NotNull DataSnapshot dataSnapshot) {

                if (dataSnapshot.exists()) {

                    for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                        com.bhargo.user.pojos.firebase.UserDetails userDetails = snapshot.getValue(com.bhargo.user.pojos.firebase.UserDetails.class);

                        insertIntoChats(userDetails, message);
                    }


                }

            }

            @Override
            public void onCancelled(@NotNull DatabaseError databaseError) {
                dismissProgressDialog();
            }
        });*/
    }

    private String insertIntoChats(com.bhargo.user.pojos.firebase.UserDetails userDetails, String msgText) {

        String MESSAGES_CHILD;
        String receiverMobileNo = userDetails.getMobile();
        String senderMobileNo = sessionManager.getUserDetailsFromSession().getPhoneNo();

        BigDecimal bigDecimalReceiver = new BigDecimal(receiverMobileNo);
        BigDecimal bigDecimalSender = new BigDecimal(senderMobileNo);
        if (bigDecimalReceiver.compareTo(bigDecimalSender) == 1) {
            MESSAGES_CHILD = receiverMobileNo + senderMobileNo;
        } else {
            MESSAGES_CHILD = senderMobileNo + receiverMobileNo;
        }

        String newId = firebaseDatabase.push().getKey();

        ChatDetails chatDetails = new ChatDetails();
        chatDetails.setReceiverID(userDetails.getID());
        chatDetails.setReceiverMobile(receiverMobileNo);
        chatDetails.setSenderName(sessionManager.getUserDetailsFromSession().getName());
        chatDetails.setCreatedDate(ServerValue.TIMESTAMP);
        chatDetails.setMsgSeen(false);
        chatDetails.setText(msgText);
        chatDetails.setISTestRimage("1");
        chatDetails.setSenderID(sessionManager.getUserChatID());
        chatDetails.setReceiverName(userDetails.getName());
        chatDetails.setUserType("S");
        chatDetails.setSenderMobile(senderMobileNo);
        chatDetails.setMessageID(newId);
        chatDetails.setFilePath("");
        chatDetails.setFileName("");
        chatDetails.setMsgType("Text");
        firebaseDatabase.child("Chats").child(MESSAGES_CHILD).child(newId).setValue(chatDetails).addOnSuccessListener(new OnSuccessListener<Void>() {
            @Override
            public void onSuccess(Void aVoid) {

                insertIntoUserChatList(chatDetails, userDetails, MESSAGES_CHILD);

            }
        });


        return newId;


    }

    private void insertIntoUserChatList(ChatDetails chatDetails, com.bhargo.user.pojos.firebase.UserDetails userDetails, String MESSAGES_CHILD) {
        try {
            UserChatList userChatListSend = new UserChatList();

            userChatListSend.setCreatedDate(chatDetails.getCreatedDate());
            userChatListSend.setLastMessageID(chatDetails.getMessageID());
            userChatListSend.setMessageType("Send");
            userChatListSend.setName(chatDetails.getReceiverName());
            userChatListSend.setReceiverID(chatDetails.getReceiverID());
            userChatListSend.setReceiverMobile(chatDetails.getReceiverMobile());
            userChatListSend.setImage(userDetails.getImagePath());
            userChatListSend.setSenderID(chatDetails.getSenderID());
            userChatListSend.setSenderMobile(chatDetails.getSenderMobile());
            userChatListSend.setText(chatDetails.getText());
            userChatListSend.setUserType(chatDetails.getUserType());
            userChatListSend.setFilePath(chatDetails.getFilePath());
            userChatListSend.setFileName(chatDetails.getFileName());
            userChatListSend.setMsgType(chatDetails.getMsgType());
            userChatListSend.setUserID(userDetails.getUserid());
            userChatListSend.setUnreadcount(0);

            firebaseDatabase.child("UserChatList").child(sessionManager.getUserChatID()).child(MESSAGES_CHILD).setValue(userChatListSend);


            firebaseDatabase.child("UserChatList").child(chatDetails.getReceiverID()).child(MESSAGES_CHILD).addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NotNull DataSnapshot dataSnapshot) {
                    if (dataSnapshot.exists()) {

                        UserChatList userChatList = dataSnapshot.getValue(UserChatList.class);
                        long count = userChatList.getUnreadcount();

                        UserChatList userChatListReceive = new UserChatList();

                        userChatListReceive.setCreatedDate(chatDetails.getCreatedDate());
                        userChatListReceive.setLastMessageID(chatDetails.getMessageID());
                        userChatListReceive.setMessageType("Receive");
                        userChatListReceive.setName(chatDetails.getSenderName());
                        userChatListReceive.setImage(sessionManager.getUserDetailsFromSession().getProfilePIc());
                        userChatListReceive.setReceiverID(chatDetails.getReceiverID());
                        userChatListReceive.setReceiverMobile(chatDetails.getReceiverMobile());
                        userChatListReceive.setSenderID(chatDetails.getSenderID());
                        userChatListReceive.setSenderMobile(chatDetails.getSenderMobile());
                        userChatListReceive.setText(chatDetails.getText());
                        userChatListReceive.setUserType(chatDetails.getUserType());
                        userChatListReceive.setFilePath(chatDetails.getFilePath());
                        userChatListReceive.setFileName(chatDetails.getFileName());
                        userChatListReceive.setMsgType(chatDetails.getMsgType());
                        userChatListReceive.setUserID(sessionManager.getUserDataFromSession().getUserID());
                        userChatListReceive.setUnreadcount(++count);
                        firebaseDatabase.child("UserChatList").child(chatDetails.getReceiverID()).child(MESSAGES_CHILD).setValue(userChatListReceive);


                    } else {
                        UserChatList userChatListReceive = new UserChatList();

                        userChatListReceive.setCreatedDate(chatDetails.getCreatedDate());
                        userChatListReceive.setLastMessageID(chatDetails.getMessageID());
                        userChatListReceive.setMessageType("Receive");
                        userChatListReceive.setName(chatDetails.getSenderName());
                        userChatListReceive.setImage(sessionManager.getUserDetailsFromSession().getProfilePIc());
                        userChatListReceive.setReceiverID(chatDetails.getReceiverID());
                        userChatListReceive.setReceiverMobile(chatDetails.getReceiverMobile());
                        userChatListReceive.setSenderID(chatDetails.getSenderID());
                        userChatListReceive.setSenderMobile(chatDetails.getSenderMobile());
                        userChatListReceive.setText(chatDetails.getText());
                        userChatListReceive.setUserType(chatDetails.getUserType());
                        userChatListReceive.setFilePath(chatDetails.getFilePath());
                        userChatListReceive.setFileName(chatDetails.getFileName());
                        userChatListReceive.setMsgType(chatDetails.getMsgType());
                        userChatListReceive.setUserID(sessionManager.getUserDataFromSession().getUserID());
                        userChatListReceive.setUnreadcount(1);
                        firebaseDatabase.child("UserChatList").child(chatDetails.getReceiverID()).child(MESSAGES_CHILD).setValue(userChatListReceive);

                    }
                }

                @Override
                public void onCancelled(@NotNull DatabaseError databaseError) {

                }
            });

            if (chatDetails.getMsgType().equalsIgnoreCase("Text") || (chatDetails.getMsgType().equalsIgnoreCase("Apps"))) {
                sendNotification(chatDetails.getReceiverID(), chatDetails.getSenderName(), chatDetails.getText());
            } else {
                sendNotification(chatDetails.getReceiverID(), chatDetails.getSenderName(), chatDetails.getFileName());
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "insertIntoUserChatList", e);
        }

    }

/*
    public List<String> getMandatoryColumnsList() {
        List<String> mandatoryColumns = new ArrayList<>();
        if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert")) {
            for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableInsertFields()) {
                if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                    mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                }
            }
        } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Update")) {
            for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableUpdateFields()) {
                if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                    mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                }
            }
        } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert or Update")) {
            for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableUpdateFields()) {
                if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                    mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                }
            }
            for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableInsertFields()) {
                if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                    mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                }
            }
        }

        return mandatoryColumns;

    }
*/

    private void sendNotification(String receiver, final String username, final String msg) {
        try {
            Query query = firebaseDatabase.child("Tokens").orderByKey().equalTo(receiver);
            query.addValueEventListener(new ValueEventListener() {
                @Override
                public void onDataChange(@NotNull DataSnapshot dataSnapshot) {
                    for (DataSnapshot snapshot : dataSnapshot.getChildren()) {

                        Token token = snapshot.getValue(Token.class);
                        Data data = new Data(sessionManager.getUserChatID(), R.mipmap.ic_launcher, msg, username, receiver, "I");

                        Sender sender = new Sender(data, token.getToken());
                        apiService.sendNotification(sender)
                                .enqueue(new Callback<MyResponse>() {
                                    @Override
                                    public void onResponse(Call<MyResponse> call, Response<MyResponse> response) {
                                        if (response.code() == 200) {
                                            if (response.body().success != 1) {
                                            }
                                        }
                                    }

                                    @Override
                                    public void onFailure(Call<MyResponse> call, Throwable t) {
                                        Log.d(TAG, "onCancelled: " + "Failed");
                                    }
                                });
                    }
                }

                @Override
                public void onCancelled(@NotNull DatabaseError databaseError) {

                    Log.d(TAG, "onCancelled: " + databaseError.toString());
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "sendNotification", e);
        }
    }

    public void mainActivityOnBackPressAlertDialog() {
        try {
            hideKeyboard(MainActivity.this, view);
            ImproveHelper.alertDialogWithRoundShapeMaterialTheme(MainActivity.this, getString(R.string.are_you_sure),
                    getString(R.string.yes), getString(R.string.d_no), new ImproveHelper.IL() {
                        @Override
                        public void onSuccess() {

      /*Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                                if (PrefManger.getSharedPreferencesString(MainActivity.this, AppConstants.Notification_Back_Press, "") != null) {
                                    String onBackFrom = PrefManger.getSharedPreferencesString(MainActivity.this, AppConstants.Notification_Back_Press, "");
                                    Log.d("NotificationBPM", onBackFrom);
                                    if (onBackFrom.equalsIgnoreCase("1")) {
                                        intent.putExtra("NotifRefreshAppsList", "1");
                                    } else if (onBackFrom.equalsIgnoreCase("0")) {
                                        intent.putExtra("NotifRefreshAppsList", "0");
                                    } else {
                                        intent.putExtra("NotifRefreshAppsList", "0");
                                    }
                                }
                                startActivity(intent);
                                dialogInterface.dismiss();
                                finish();*/
                            DC_DEPENDENT_LIST.clear();
                            DEPENDENT_DC_NAME.clear();
                            clearStaticVariables();
                            if (strFrom_InTaskDetails != null && !strFrom_InTaskDetails.isEmpty() && strFrom_InTaskDetails.equalsIgnoreCase("From_InTaskDetails")) {
                                DC_DEPENDENT_LIST.clear();
                                DEPENDENT_DC_NAME.clear();
                                Intent returnIntent = new Intent();
                                setResult(BACK_TO_LIST_FLAG, returnIntent);
                                finish();
//                            Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
//                            intent.putExtra("FromNormalTask", "FromNormalTask");
//                            startActivity(intent);
//                            finish();
                            } else if (notificationPageName != null && !notificationPageName.isEmpty() && !notificationPageName.equalsIgnoreCase("")) {
                                Intent intent = new Intent(MainActivity.this, BottomNavigationActivity.class);
                                if (strAppType.equalsIgnoreCase("Auto Reports")) {
                                    intent.putExtra("NotifRefreshAppsList", "3");
                                } else {
                                    intent.putExtra("NotifRefreshAppsList", "1");
                                }
                                startActivity(intent);
                                finish();
                            }
                            if (getIntent().hasExtra("FromFlashScreen") &&
                                    getIntent().getStringExtra("FromFlashScreen").equalsIgnoreCase(FromFlashScreen)) {
                                finish();
                            } else {
                                clearFormEdit();
                            }
                        }

                        @Override
                        public void onCancel() {

                        }
                    });

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "mainActivityOnBackPressAlertDialog", e);
        }
    }

    private void clearStaticVariables() {
        try {
            AppConstants.LAYOUT_KEEP_SESSION.clear();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "clearStaticVariables", e);
        }
    }

    private View getSingleFormView(String appName) {
        if (IS_MULTI_FORM && currentMultiForm.getNavigationViewsMap().containsKey(appName)) {
            singleFormView = currentMultiForm.getNavigationViewsMap().get(appName);
        } else {

            LayoutInflater linflater = (LayoutInflater) this
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            singleFormView = linflater.inflate(R.layout.activity_main, null);

        }

        webView = singleFormView.findViewById(R.id.webView);
        btn_FileCreate = singleFormView.findViewById(R.id.btn_FileCreate);
        cb_submit_formControls = singleFormView.findViewById(R.id.cb_submit_formControls);
        cb_clear_formControls = singleFormView.findViewById(R.id.cb_clear_formControls);
        MainLinearLayout = singleFormView.findViewById(R.id.MainLinearLayout);
        linearLayout = activityView.findViewById(R.id.ll_main);

        return singleFormView;
    }

    //=======SetFocus===========
    public void SetFocus(ActionWithoutCondition_Bean ActionObj) {
        try {
            for (int x = 0; x < dataCollectionObject.getControls_list().size(); x++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(x);
                if (ActionObj.isSetfocus_subform()) {
                    boolean isGrid= false;
                    if (ActionObj.getSetfocus_SubformName().equalsIgnoreCase(temp_controlObj.getControlName())) {
                        List<ControlObject> subform_controls = temp_controlObj.getSubFormControlList();
                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                        String Expvalue = ehelper.ExpressionHelper(this, ActionObj.getSetfocus_Expression());
                        String[] postions = Expvalue.split("\\,");
                        for (int i = 0; i < subform_controls.size(); i++) {
                            if (ActionObj.getSetfocus_controlId().equalsIgnoreCase(subform_controls.get(i).getControlName())) {
                                List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = null;
                                GridControl gridControl=null;
                                if (List_ControlClassObjects.get(temp_controlObj.getControlName()) instanceof SubformView) {
                                    SubformView subform = (SubformView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    subform_List_ControlClassObjects =subform.subform_List_ControlClassObjects;
                                }else{
                                    isGrid= true;
                                    gridControl = (GridControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                                    subform_List_ControlClassObjects =gridControl.gridControl_List_ControlClassObjects;
                                }
                                if (subform_List_ControlClassObjects.size() > (int) Double.parseDouble(postions[0])) {
                                    LinkedHashMap<String, Object> New_list_ControlClassObjects = subform_List_ControlClassObjects.get((int) Double.parseDouble(postions[0]));
                                    SetfocusBasedOnType(subform_controls.get(i), New_list_ControlClassObjects.get(ActionObj.getSetfocus_controlId())
                                            ,isGrid,Integer.parseInt(postions[0]),i,gridControl);
                                }

                            }
                        }
                    }
                } else {
                    if (ActionObj.getSetfocus_controlId().equalsIgnoreCase(temp_controlObj.getControlName())) {

                        SetfocusBasedOnType(temp_controlObj, List_ControlClassObjects.get(temp_controlObj.getControlName()),false,0,0,null);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetFocus", e);
        }
    }

    public void SetfocusBasedOnTypeCopy(ControlObject temp_controlObj, Object object) {
        try {
            switch (temp_controlObj.getControlType()) {
                case CONTROL_TYPE_TEXT_INPUT:
                    TextInput sfTextView = (TextInput) object;
                    sfTextView.requestFocus();
                    break;
                case CONTROL_TYPE_NUMERIC_INPUT:
                    NumericInput numverTextView = (NumericInput) object;
                    numverTextView.requestFocus();
                    break;
                case CONTROL_TYPE_PHONE:
                    Phone PhoneView = (Phone) object;
                    PhoneView.requestFocus();
                    break;
                case CONTROL_TYPE_EMAIL:
                    Email EmailView = (Email) object;
                    EmailView.requestFocus();
                    break;
                case CONTROL_TYPE_LARGE_INPUT:
                    LargeInput LargeInputView = (LargeInput) object;
                    LargeInputView.requestFocus();
                    break;
                case CONTROL_TYPE_CAMERA:
                    Camera camera = (Camera) object;
                    ImproveHelper.setFocus(camera.getCameraView());
                    break;
                case CONTROL_TYPE_FILE_BROWSING:
                    FileBrowsing FileBrowsingView = (FileBrowsing) object;
                    ImproveHelper.setFocus(FileBrowsingView.getFileBrowsingView());
                    break;
                case CONTROL_TYPE_CALENDER:
                    Calendar CalendarView = (Calendar) object;
                    ImproveHelper.setFocus(CalendarView.getCalnderView());
                    break;
                case CONTROL_TYPE_CHECKBOX:
                    Checkbox CheckBoxView = (Checkbox) object;
                    ImproveHelper.setFocus(CheckBoxView.getCheckbox());
                    break;
                case CONTROL_TYPE_RADIO_BUTTON:
                    RadioGroupView RadioGroupview = (RadioGroupView) object;
                    ImproveHelper.setFocus(RadioGroupview.getRadioGroupView());
                    break;
                case CONTROL_TYPE_DROP_DOWN:
                    DropDown DropDownview = (DropDown) object;
                    ImproveHelper.setFocus(DropDownview.searchableSpinner);
                    break;
                case CONTROL_TYPE_CHECK_LIST:
                    CheckList CheckListview = (CheckList) object;
                    ImproveHelper.setFocus(CheckListview.getCheckList());
                    break;
                case CONTROL_TYPE_RATING:
                    Rating Ratingview = (Rating) object;
                    ImproveHelper.setFocus(Ratingview.getRatingView());
                    break;
                case CONTROL_TYPE_VOICE_RECORDING:
                    VoiceRecording voiceRecording = (VoiceRecording) object;
                    ImproveHelper.setFocus(voiceRecording.getVoiceRecordingView());
                    break;
                case CONTROL_TYPE_VIDEO_RECORDING:
                    VideoRecording videoRecording = (VideoRecording) object;
                    ImproveHelper.setFocus(videoRecording.getVideoRecorderView());
                    break;
                case CONTROL_TYPE_AUDIO_PLAYER:
                    AudioPlayer audioPlayer_ = (AudioPlayer) object;
                    ImproveHelper.setFocus(audioPlayer_.getAudioPlayerView());
                    break;
                case CONTROL_TYPE_VIDEO_PLAYER:
                    VideoPlayer VideoPlayerView = (VideoPlayer) object;
                    ImproveHelper.setFocus(VideoPlayerView.getVideoPlayerView());
                    break;
                case CONTROL_TYPE_PERCENTAGE:
                    Percentage PercentageView = (Percentage) object;
                    PercentageView.requestFocus();
                    break;
                    case CONTROL_TYPE_SIGNATURE:
                    SignatureView Signatureview = (SignatureView) object;
                    ImproveHelper.setFocus(Signatureview.getSignature());
                    break;
                case CONTROL_TYPE_DECIMAL:
                    DecimalView Decimalview = (DecimalView) object;
                    Decimalview.requestFocus();
                    break;
                case CONTROL_TYPE_PASSWORD:
                    Password Passwordview = (Password) object;
                    Passwordview.requestFocus();
                    break;
                case CONTROL_TYPE_CURRENCY:
                    Currency Currencyview = (Currency) object;
                    Currencyview.requestFocus();
                    break;
                case CONTROL_TYPE_TIME:
                    Time time = (Time) object;
//                    time.requestFocus();
                    ImproveHelper.setFocus(time.getTimeControlLayout());
                    break;
                case CONTROL_TYPE_USER:
                    UserControl userControl = (UserControl) object;
                    ImproveHelper.setFocus(userControl.getUserControlView());
                    break;
                case CONTROL_TYPE_POST:
                    PostControl postControl = (PostControl) object;
                    ImproveHelper.setFocus(postControl.getPostControlView());
                    break;
                case CONTROL_TYPE_AUTO_COMPLETION:
                    AutoCompletionControl autoCompletionControl = (AutoCompletionControl) object;
                    ImproveHelper.setFocus(autoCompletionControl.getAutoCompletionControlView());
                    break;
                case CONTROL_TYPE_GPS:
                    Gps_Control gps_control = (Gps_Control) object;
                    ImproveHelper.setFocus(gps_control.getControlGPSView());
                    break;
                case CONTROL_TYPE_DATA_CONTROL:
                    DataControl dataControl = (DataControl) object;
                    ImproveHelper.setFocus(dataControl.searchableSpinner);
                    break;

            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetfocusBasedOnType", e);
        }
    }
    public void SetfocusBasedOnType(ControlObject temp_controlObj, Object object,boolean isGrid,int rowPosition,int controlPosition,GridControl gridControl) {
        try {
            if (isGrid && (temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_CAMERA)
                    || temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_FILE_BROWSING)
                    || temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_VOICE_RECORDING)
                    ||temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_VIDEO_RECORDING)
                    ||temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_SIGNATURE)
                    || temp_controlObj.getControlType().equalsIgnoreCase(CONTROL_TYPE_GPS)) ){
                ImproveHelper.setFocus(gridControl.getControlViewForFocus(rowPosition,controlPosition));

            }else{
            switch (temp_controlObj.getControlType()) {
                case CONTROL_TYPE_TEXT_INPUT:
                    TextInput sfTextView = (TextInput) object;
                    sfTextView.requestFocus();
                    break;
                case CONTROL_TYPE_NUMERIC_INPUT:
                    NumericInput numverTextView = (NumericInput) object;
                    numverTextView.requestFocus();
                    break;
                case CONTROL_TYPE_PHONE:
                    Phone PhoneView = (Phone) object;
                    PhoneView.requestFocus();
                    break;
                case CONTROL_TYPE_EMAIL:
                    Email EmailView = (Email) object;
                    EmailView.requestFocus();
                    break;
                case CONTROL_TYPE_LARGE_INPUT:
                    LargeInput LargeInputView = (LargeInput) object;
                    LargeInputView.requestFocus();
                    break;
                case CONTROL_TYPE_CAMERA:
                    Camera camera = (Camera) object;
                    ImproveHelper.setFocus(camera.getCameraView());
                    break;
                case CONTROL_TYPE_FILE_BROWSING:
                    FileBrowsing FileBrowsingView = (FileBrowsing) object;
                    ImproveHelper.setFocus(FileBrowsingView.getFileBrowsingView());
                    break;
                case CONTROL_TYPE_CALENDER:
                    Calendar CalendarView = (Calendar) object;
                    ImproveHelper.setFocus(CalendarView.getCalnderView());
                    break;
                case CONTROL_TYPE_CHECKBOX:
                    Checkbox CheckBoxView = (Checkbox) object;
                    ImproveHelper.setFocus(CheckBoxView.getCheckbox());
                    break;
                case CONTROL_TYPE_RADIO_BUTTON:
                    RadioGroupView RadioGroupview = (RadioGroupView) object;
                    ImproveHelper.setFocus(RadioGroupview.getRadioGroupView());
                    break;
                case CONTROL_TYPE_DROP_DOWN:
                    DropDown DropDownview = (DropDown) object;
                    ImproveHelper.setFocus(DropDownview.searchableSpinner);
                    break;
                case CONTROL_TYPE_CHECK_LIST:
                    CheckList CheckListview = (CheckList) object;
                    ImproveHelper.setFocus(CheckListview.getCheckList());
                    break;
                case CONTROL_TYPE_RATING:
                    Rating Ratingview = (Rating) object;
                    ImproveHelper.setFocus(Ratingview.getRatingView());
                    break;
                case CONTROL_TYPE_VOICE_RECORDING:
                    VoiceRecording voiceRecording = (VoiceRecording) object;
                    ImproveHelper.setFocus(voiceRecording.getVoiceRecordingView());
                    break;
                case CONTROL_TYPE_VIDEO_RECORDING:
                    VideoRecording videoRecording = (VideoRecording) object;
                    ImproveHelper.setFocus(videoRecording.getVideoRecorderView());
                    break;
                case CONTROL_TYPE_AUDIO_PLAYER:
                    AudioPlayer audioPlayer_ = (AudioPlayer) object;
                    ImproveHelper.setFocus(audioPlayer_.getAudioPlayerView());
                    break;
                case CONTROL_TYPE_VIDEO_PLAYER:
                    VideoPlayer VideoPlayerView = (VideoPlayer) object;
                    ImproveHelper.setFocus(VideoPlayerView.getVideoPlayerView());
                    break;
                case CONTROL_TYPE_PERCENTAGE:
                    Percentage PercentageView = (Percentage) object;
                    PercentageView.requestFocus();
                    break;
                    case CONTROL_TYPE_SIGNATURE:
                    SignatureView Signatureview = (SignatureView) object;
                    ImproveHelper.setFocus(Signatureview.getSignature());
                    break;
                case CONTROL_TYPE_DECIMAL:
                    DecimalView Decimalview = (DecimalView) object;
                    Decimalview.requestFocus();
                    break;
                case CONTROL_TYPE_PASSWORD:
                    Password Passwordview = (Password) object;
                    Passwordview.requestFocus();
                    break;
                case CONTROL_TYPE_CURRENCY:
                    Currency Currencyview = (Currency) object;
                    Currencyview.requestFocus();
                    break;
                case CONTROL_TYPE_TIME:
                    Time time = (Time) object;
//                    time.requestFocus();
                    ImproveHelper.setFocus(time.getTimeControlLayout());
                    break;
                case CONTROL_TYPE_USER:
                    UserControl userControl = (UserControl) object;
                    ImproveHelper.setFocus(userControl.getUserControlView());
                    break;
                case CONTROL_TYPE_POST:
                    PostControl postControl = (PostControl) object;
                    ImproveHelper.setFocus(postControl.getPostControlView());
                    break;
                case CONTROL_TYPE_AUTO_COMPLETION:
                    AutoCompletionControl autoCompletionControl = (AutoCompletionControl) object;
                    ImproveHelper.setFocus(autoCompletionControl.getAutoCompletionControlView());
                    break;
                case CONTROL_TYPE_GPS:
                    Gps_Control gps_control = (Gps_Control) object;
                    ImproveHelper.setFocus(gps_control.getControlGPSView());
                    break;
                case CONTROL_TYPE_DATA_CONTROL:
                    DataControl dataControl = (DataControl) object;
                    ImproveHelper.setFocus(dataControl.searchableSpinner);
                    break;

            }}
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetfocusBasedOnType", e);
        }
    }

    private List<API_OutputParam_Bean> filterOutParams(List<API_OutputParam_Bean> api_outputParam_beans) {
        List<API_OutputParam_Bean> updated_beans = new ArrayList<>();

        for (int i = 0; i < api_outputParam_beans.size(); i++) {
            API_OutputParam_Bean ebean = api_outputParam_beans.get(i);
            boolean flag = false;
            for (int j = 0; j < updated_beans.size(); j++) {
                API_OutputParam_Bean pbean = updated_beans.get(j);
                if (ebean.getOutParam_Name().equals(pbean.getOutParam_Name())) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                updated_beans.add(ebean);
            }
        }
        return updated_beans;
    }

    public void setParamsMatchParent(View rView) {
        try {
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams
                    (ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
            rView.setLayoutParams(layoutParams);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setParamsMatchParent", e);
        }
    }

    public int pxToDP(int i) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, i, getResources().getDisplayMetrics());
    }

    public List<String> getMandatoryColumnsList() {
        List<String> mandatoryColumns = new ArrayList<>();
        try {
            if (dataCollectionObject.getTableSettingsType() != null && dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert")) {
                    for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableInsertFields()) {
                        if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                            mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                        }
                    }
                } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Update")) {
                    for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableUpdateFields()) {
                        if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                            mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                        }
                    }
                } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert or Update")) {
                    for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableUpdateFields()) {
                        if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                            mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                        }
                    }
                    for (QueryFilterField_Bean queryFilterField_bean : dataCollectionObject.getMainTableInsertFields()) {
                        if (!queryFilterField_bean.isField_IsDeleted() && queryFilterField_bean.getIsNullAllowed().equalsIgnoreCase("NO")) {
                            mandatoryColumns.add(ImproveHelper.getControlName(queryFilterField_bean.getField_Global_Value()));
                        }
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getMandatoryColumnsList", e);
        }
        return mandatoryColumns;

    }

    public void subFormNames() {
        try {
            List<ControlObject> list_Control = dataCollectionObject.getControls_list();
            for (ControlObject controlObject : list_Control) {
                controlNames.add(controlObject.getControlName());
                if (controlObject.getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM) || controlObject.getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                    subFormNames.add(controlObject.getControlName());
                    subFormTableSettingsType.add(controlObject.getTableSettingsType());
                    subFormTableMapExistingType.add(controlObject.getMapExistingType());
                    subFormControlObjects.add(controlObject);
                } else if (controlObject.getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                    if(controlObject.getSubFormControlList() != null && controlObject.getSubFormControlList().size() > 0){
                    List<ControlObject> sectionControlList = controlObject.getSubFormControlList();
                    for (int j = 0; j < sectionControlList.size(); j++) {
                        if (sectionControlList.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM)
                                || sectionControlList.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                            subFormNames.add(sectionControlList.get(j).getControlName());
                            subFormTableSettingsType.add(sectionControlList.get(j).getTableSettingsType());
                            subFormTableMapExistingType.add(sectionControlList.get(j).getMapExistingType());
                            subFormControlObjects.add(sectionControlList.get(j));

                        }
                    }
                }
            }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "subFormNames", e);
        }
    }

    public void gaddAutoNumberToSubmitJson(JSONObject mainObject) {
        try {
            mainObject.put("IfautoincrementControls", String.valueOf(isAutoNumbersAvaliable));

            JSONArray jsonArrayAuto = new JSONArray();
            if (isAutoNumbersAvaliable) {
//                                        mainObject.put("AutoIncementControls",jArrayAutoIncementControls);
                for (int ai = 0; ai < jArrayAutoIncementControls.length(); ai++) {
                    JSONObject jsonObject = jArrayAutoIncementControls.getJSONObject(ai);
//                                            String prefixValue = improveHelper.getValueFromGlobalObject(context,jsonObject.getString("prefix"));
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String prefixValue = ehelper.ExpressionHelper(context, jsonObject.getString("Prefix"));
                    JSONObject autojJsonObject1 = new JSONObject();
                    autojJsonObject1.put("ControlName", jsonObject.getString("ControlName"));
                    autojJsonObject1.put("Prefix", prefixValue);
                    autojJsonObject1.put("Suffix", jsonObject.getString("Suffix"));
                    jsonArrayAuto.put(autojJsonObject1);
                }
                mainObject.put("AutoIncrementControl", jsonArrayAuto);
            } else {
                mainObject.put("AutoIncrementControl", jsonArrayAuto);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    public boolean checkAnyMapExisting() {
        boolean mapExisting = false;
        try {
            if (dataCollectionObject.getTableSettingsType() != null) {
                if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                    mapExisting = true;
                }
            }
            if (!mapExisting) {
                List<ControlObject> list_Control = dataCollectionObject.getControls_list();
                for (ControlObject controlObject : list_Control) {
                    if (controlObject.getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM) || controlObject.getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                        if (controlObject.getTableSettingsType() != null) {
                            if (controlObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                                mapExisting = true;
                                break;
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "checkAnyMapExisting", e);
        }
        return mapExisting;
    }

    private String getOperatorSymbol(String field_operator) {

        String operator = field_operator;
        try {
            switch (field_operator) {
                case AppConstants.OPERATOR_LESS_THAN:
                    operator = "<";
                    break;
                case AppConstants.OPERATOR_GREATER_THAN:
                    operator = ">";
                    break;
                case AppConstants.OPERATOR_LESS_THAN_EQUALS:
                    operator = "<=";
                    break;
                case AppConstants.OPERATOR_GREATER_THAN_EQUALS:
                    operator = ">=";
                    break;
                case AppConstants.OPERATOR_EQUALS:
                    operator = "=";
                    break;
                case AppConstants.OPERATOR_NOT_EQUALS:
                    operator = "!=";
                    break;
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getOperatorSymbol", e);
        }
        return operator;
    }

    public void addAutoNumberToSubmitJson(JSONObject jsonObject) {
        try {
            mainObject.put("IfautoincrementControls", String.valueOf(isAutoNumbersAvaliable));
            JSONObject autojJsonObject1 = new JSONObject();
            if (isAutoNumbersAvaliable) {
                for (int ai = 0; ai < jArrayAutoIncementControls.length(); ai++) {
                    JSONObject jsonObjectAutoNumber = jArrayAutoIncementControls.getJSONObject(ai);
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String prefixValue = ehelper.ExpressionHelper(context, jsonObjectAutoNumber.getString("Prefix"));

                    autojJsonObject1.put("ControlName", jsonObjectAutoNumber.getString("ControlName"));
                    autojJsonObject1.put("Prefix", prefixValue);
                    autojJsonObject1.put("Suffix", jsonObjectAutoNumber.getString("Suffix"));
                    String suffix1Value = "", strSuffix1 = "";
                    if (jsonObjectAutoNumber.has("Suffix1")) {
                        suffix1Value = ehelper.ExpressionHelper(context, jsonObjectAutoNumber.getString("Suffix1") + "Z");
                    }
                    if (!suffix1Value.contentEquals("") && suffix1Value.length() > 1) {
                        strSuffix1 = suffix1Value.substring(0, suffix1Value.length() - 1);
                        autojJsonObject1.put("Suffix1", strSuffix1);
                    } else {
                        autojJsonObject1.put("Suffix1", suffix1Value);
                    }
                }
                jsonObject.put("AutoIncrementControl", autojJsonObject1);
            } else {
                jsonObject.put("AutoIncrementControl", autojJsonObject1);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "addAutoNumberToSubmitJson", e);
        }
    }

    public void  addAutoNumberToSubmitJsonMapExisting(String controlName, String autoNumberControlName, JSONObject jsonObjectMapExistingInsert) {
        try {
            if (autoNumberControlName.startsWith("(im:")) {
                autoNumberControlName = ImproveHelper.getControlName(autoNumberControlName);
            }
            if (autoNumberControlName.contains(".")) {
                autoNumberControlName = autoNumberControlName.split("\\.")[1];
            }
            mainObject.put("IfautoincrementControls", String.valueOf(isAutoNumbersAvaliable));
            JSONObject autojJsonObject1 = new JSONObject();
            if (isAutoNumbersAvaliable) {
                for (int ai = 0; ai < jArrayAutoIncementControls.length(); ai++) {
                    JSONObject jsonObject = jArrayAutoIncementControls.getJSONObject(ai);
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String prefixValue = ehelper.ExpressionHelper(context, jsonObject.getString("Prefix"));
                    if (jsonObject.getString("ControlName").equalsIgnoreCase(autoNumberControlName)) {

                        autojJsonObject1.put("ControlName", controlName);
                        autojJsonObject1.put("Prefix", prefixValue);
                        autojJsonObject1.put("Suffix", jsonObject.getString("Suffix"));
                        String suffix1Value = "", strSuffix1 = "";
                        if (jsonObject.has("Suffix1")) {
                            suffix1Value = ehelper.ExpressionHelper(context, jsonObject.getString("Suffix1") + "Z");
                        }
                        if (!suffix1Value.contentEquals("") && suffix1Value.length() > 1) {
                            strSuffix1 = suffix1Value.substring(0, suffix1Value.length() - 1);
                            autojJsonObject1.put("Suffix1", strSuffix1);
                        } else {
                            autojJsonObject1.put("Suffix1", suffix1Value);
                        }
                        break;
                    }
                }
                jsonObjectMapExistingInsert.put("AutoIncrementControl", autojJsonObject1);

            } else {
                jsonObjectMapExistingInsert.put("AutoIncrementControl", autojJsonObject1);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "addAutoNumberToSubmitJson", e);
        }


    }

    public void addAutoNumberToSubformSubmitJsonMapExisting(String subformName, String controlName, String autoNumberControlName, JSONObject jsonObjectMapExistingInsertsf) {
        try {
            if (autoNumberControlName.startsWith("(im:")) {
                autoNumberControlName = ImproveHelper.getControlName(autoNumberControlName);
                if (autoNumberControlName.toLowerCase().endsWith("_processrow")) {
                    autoNumberControlName = autoNumberControlName.substring(0, autoNumberControlName.lastIndexOf("_"));
                }
            }
            JSONArray jsonArrayAutoSubForm = new JSONArray();
            if (subFormsAutoNumberArraysMap.get(subformName).length() > 0) {
                JSONArray jArrayAutoIncementControls = new JSONArray();
                jArrayAutoIncementControls = subFormsAutoNumberArraysMap.get(subformName);
                for (int ai = 0; ai < jArrayAutoIncementControls.length(); ai++) {
                    JSONObject jsonObjectSubForm = jArrayAutoIncementControls.getJSONObject(ai);
                    if (jsonObjectSubForm.getString("ControlName").equalsIgnoreCase(autoNumberControlName)) {
                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                        String prefixValue = ehelper.ExpressionHelper(context, jsonObjectSubForm.getString("Prefix") + "Z");
                        JSONObject autojJsonObject1 = new JSONObject();
                        autojJsonObject1.put("ControlName", controlName);
                        String strPrefix = prefixValue.substring(0, prefixValue.length() - 1);
                        autojJsonObject1.put("Prefix", strPrefix);
                        autojJsonObject1.put("Suffix", jsonObjectSubForm.getString("Suffix"));
                        String suffix1Value = "", strSuffix1 = "";
                        if (jsonObjectSubForm.has("Suffix1")) {
                            suffix1Value = ehelper.ExpressionHelper(context, jsonObjectSubForm.getString("Suffix1") + "Z");
                        }
                        if (!suffix1Value.contentEquals("") && suffix1Value.length() > 1) {
                            strSuffix1 = suffix1Value.substring(0, suffix1Value.length() - 1);
                            autojJsonObject1.put("Suffix1", strSuffix1);
                        } else {
                            autojJsonObject1.put("Suffix1", suffix1Value);
                        }


                        jsonArrayAutoSubForm.put(autojJsonObject1);
                    }
                    jsonObjectMapExistingInsertsf.put("AutoIncrementControl", jsonArrayAutoSubForm);
                    break;
                }
            } else {
                jsonObjectMapExistingInsertsf.put("AutoIncrementControl", jsonArrayAutoSubForm);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "addAutoNumberToSubmitJson", e);
        }


    }

    private synchronized void disableControls() {
        try {
            List<String> disbleControlsList = new ArrayList<>();
            for (int j = 0; j < list_Control.size(); j++) {
                if (!AppConstants.EDIT_COLUMNS.contains(list_Control.get(j).getControlName()) &&
                        !list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM) &&
                        !list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                    disbleControlsList.add(list_Control.get(j).getControlName());
                }
            }
//            SetDisable(disbleControlsList);
            new ControlManagement(context, dataCollectionObject.getControls_list(), List_ControlClassObjects, disbleControlsList, 1);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "disableControls", e);
        }
    }

    public void SetNoDatatoControlForCallAPIorForm(API_OutputParam_Bean API_OutputParam_Bean) {
        try {
            String Value = "", ControlID = "";
            ControlID = API_OutputParam_Bean.getOutParam_Name();

            boolean checkflag = false;
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                checkflag = false;
                if (temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_DROP_DOWN) ||
                        temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_RADIO_BUTTON) ||
                        temp_controlObj.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_CHECK_LIST)) {
                    if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                        checkflag = true;
                    } else if ((temp_controlObj.getControlName().trim() + "_ID").equalsIgnoreCase(ControlID.trim())) {
                        checkflag = true;
                    }

                } else if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                    checkflag = true;
                }


                if (checkflag) {
                    switch (temp_controlObj.getControlType()) {
                        case CONTROL_TYPE_TEXT_INPUT:
                            TextInput clearTextView = (TextInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            clearTextView.Clear();
                            break;
                        case CONTROL_TYPE_NUMERIC_INPUT:
                            NumericInput numverTextView = (NumericInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            numverTextView.Clear();
                            break;
                        case CONTROL_TYPE_PHONE:
                            Phone PhoneView = (Phone) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            PhoneView.Clear();
                            break;
                        case CONTROL_TYPE_EMAIL:
                            Email EmailView = (Email) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            EmailView.Clear();
                            break;
                        case CONTROL_TYPE_CAMERA:

                            break;
                        case CONTROL_TYPE_MAP:
                            MapControl mapControl = (MapControl) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            mapControl.getGoogleMap().clear();

                            break;
                        case CONTROL_TYPE_IMAGE:
                            Image ImageView = (Image) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            ImproveHelper.loadImage_new(context, null, ImageView.mainImageView, false, "null");

                            break;
                        case CONTROL_TYPE_LARGE_INPUT:
                            LargeInput LargeInputView = (LargeInput) List_ControlClassObjects.get(temp_controlObj.getControlName());
//
                            LargeInputView.Clear();
                            break;
                        case CONTROL_TYPE_CHECKBOX:
                            Checkbox CheckBoxView = (Checkbox) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            LinearLayout cbview = CheckBoxView.getCheckbox();
                            cbview.removeAllViews();

                            break;
                        case CONTROL_TYPE_FILE_BROWSING:

                            break;
                      /*  case CONTROL_TYPE_CALENDER:

                            break;*/
                        case CONTROL_TYPE_AUDIO_PLAYER:

                            break;
                        case CONTROL_TYPE_VIDEO_PLAYER:

                            break;
                        case CONTROL_TYPE_PERCENTAGE:
                            Percentage PercentageView = (Percentage) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            PercentageView.Clear();
                            break;
                        case CONTROL_TYPE_RADIO_BUTTON:
                            RadioGroupView RGroup = (RadioGroupView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            RGroup.Clear();

                            break;
                        case CONTROL_TYPE_DROP_DOWN:
                            DropDown dropDown = (DropDown) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            dropDown.Clear();
                            break;
                        case CONTROL_TYPE_CHECK_LIST:
                            CheckList checklist = (CheckList) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            checklist.Clear();
                            break;
                        case CONTROL_TYPE_SIGNATURE:

                            break;
                        case CONTROL_TYPE_URL_LINK:
                            break;
                        case CONTROL_TYPE_DECIMAL:
                            DecimalView Decimalview = (DecimalView) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Decimalview.Clear();
                            break;
                        case CONTROL_TYPE_PASSWORD:
                            Password Passwordview = (Password) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Passwordview.Clear();
                            break;
                        case CONTROL_TYPE_CURRENCY:
                            Currency Currencyview = (Currency) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            Currencyview.Clear();
                            break;
                        case CONTROL_TYPE_RATING:
                            break;
                        case CONTROL_TYPE_DYNAMIC_LABEL:
                            DynamicLabel DynamicLabeliew = (DynamicLabel) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            CustomTextView tv_dynamicLabel = DynamicLabeliew.getValueView();
                            DynamicLabeliew.setValue("");
                            break;
                        case CONTROL_TYPE_QR_CODE:
                            QRCode qrCode = (QRCode) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            qrCode.createQrCodeDynamically("");
                            break;
                        case CONTROL_TYPE_BAR_CODE:
                            BarCode barCode = (BarCode) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            barCode.createBarCodeDynamically("");
                            break;
                        case CONTROL_TYPE_CALENDER:
                            Calendar calendar = (Calendar) List_ControlClassObjects.get(temp_controlObj.getControlName());
                            calendar.Clear();
                            break;

                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetNoDatatoControlForCallAPIorForm", e);
        }
    }

    public void SetNoDatatoMultipleControlForCallAPIorForm(API_OutputParam_Bean API_OutputParam_Bean) {
    }


    private void setWidthDisplayPreview(View view, int width, boolean isFixWidth) {
        try {
            ViewGroup.MarginLayoutParams params =
                    (ViewGroup.MarginLayoutParams) view.getLayoutParams();
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int mWidth = displayMetrics.widthPixels;
            if (isFixWidth) {
                params.width = width * mWidth / 100;
            } else {
                params.width = pxToDP(width);
            }
            if (width == -1) {
                params.width = -1;
            }

            view.setLayoutParams(params);
            view.requestLayout();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setWidthDisplayPreview", e);
        }
    }

    public String getQueryString(List<CallForm_ParamMapping_Bean> List_CallformParams) {
        String Data = "";
        try {
            if (List_CallformParams != null && List_CallformParams.size() > 0) {
                for (int i = 0; i < List_CallformParams.size(); i++) {
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, List_CallformParams.get(i).getParam_GlobalObj_MappedID());
                    Data = Data + "&" + List_CallformParams.get(i).getParam_Name() + "=" + Expvalue;
                }

            }
            if (Data.startsWith("&")) {
                Data = Data.substring(1);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getQueryString", e);
        }
        return Data;
    }

    public String getdelimiterString(List<CallForm_ParamMapping_Bean> List_CallformParams) {
        String Data = "";
        try {
            if (List_CallformParams != null && List_CallformParams.size() > 0) {
                for (int i = 0; i < List_CallformParams.size(); i++) {
                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                    String Expvalue = ehelper.ExpressionHelper(this, List_CallformParams.get(i).getParam_GlobalObj_MappedID());
                    Data = Data + "/" + Expvalue;
                }

            }
            if (Data.startsWith("/")) {
                Data = Data.substring(1);
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getdelimiterString", e);
        }
        return Data;
    }

    private void setSubFormValuesForEdit(ControlObject loadControlObject, JSONArray subformJsonArray, SubformView subformView) {
        try {
            for (int i = 0; i < subformJsonArray.length(); i++) {

                JSONObject subformJson = subformJsonArray.getJSONObject(i);

                List<ControlObject> list_Control = new ArrayList<>();
                list_Control = loadControlObject.getSubFormControlList();
                for (int j = 0; j < list_Control.size(); j++) {

                    String controlName = list_Control.get(j).getControlName();
                    Log.d(TAG, "loadControlsWithDesignControlNames: " + list_Control.get(j).getControlName());
                    String controlValue = "";
                    String controlValue_id = "";
                    if ((subformJson.has(controlName) && !subformJson.getString(controlName).equalsIgnoreCase("") && subformJson.getString(controlName) != null) || (subformJson.has(controlName + "_id") || subformJson.has(controlName + "_Coordinates"))) {
                        if (list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_GPS)) {
                            controlValue = subformJson.getString(controlName + "_Coordinates");
                        } else if (list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_DATA_CONTROL)) {
                            controlValue = subformJson.getString(controlName);
                            controlValue_id = subformJson.getString(controlName + "_id");
                        } else if (list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_CHECKBOX) || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_CHECK_LIST) || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_RADIO_BUTTON) || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_DROP_DOWN)) {
                            controlValue = subformJson.getString(controlName);
                            controlValue_id = subformJson.getString(controlName + "id");
                        } else {
                            controlValue = subformJson.getString(controlName);
                        }
                    }
                    if (controlValue != null && !controlValue.isEmpty() && !controlValue.equalsIgnoreCase("")) {
                        SetSubFormValuestoControls(controlName, controlValue, controlValue_id, i, subformView);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setSubFormValuesForEdit", e);
        }
    }

    private void SetSubFormValuestoControls(String ControlID, String Value, String valueID, int position, SubformView subview) {
        try {
//        SubformView subview = (SubformView) List_ControlClassObjects.get(AppConstants.Current_ClickorChangeTagName);
            LinkedHashMap<String, Object> ObjectsView = subview.subform_List_ControlClassObjects.get(position);
            Object ViewObj = ObjectsView.get(ControlID.trim());

            ControlObject subobj = null;
            for (int i = 0; i < dataCollectionObject.getControls_list().size(); i++) {
                ControlObject temp_controlObj = dataCollectionObject.getControls_list().get(i);
                if (temp_controlObj.getControlName().trim().equalsIgnoreCase(ControlID.trim())) {
                    subobj = temp_controlObj;
                    ViewObj = List_ControlClassObjects.get(temp_controlObj.getControlName());
                }
            }
            if (subobj == null) {

                for (int i = 0; i < subview.controlObject.getSubFormControlList().size(); i++) {

                    if (subview.controlObject.getSubFormControlList().get(i).getControlName().equalsIgnoreCase(ControlID.trim())) {
                        subobj = subview.controlObject.getSubFormControlList().get(i);

                    }
                }


            }

            if (subobj != null) {
                switch (subobj.getControlType()) {
                    case CONTROL_TYPE_TEXT_INPUT:
                        TextInput clearTextView = (TextInput) ViewObj;
                        clearTextView.getCustomEditText().setText(Value);
                        CustomTextView tv_tapTextType = clearTextView.gettap_text();
                        tv_tapTextType.setVisibility(View.GONE);
                        clearTextView.getCustomEditText().setVisibility(View.VISIBLE);
                        break;
                    case CONTROL_TYPE_NUMERIC_INPUT:
                        NumericInput numverTextView = (NumericInput) ViewObj;
                        numverTextView.getNumericTextView().setText(Value);
                        CustomTextView tv_numtapTextType = numverTextView.gettap_text();
                        tv_numtapTextType.setVisibility(View.GONE);
                        numverTextView.getNumericTextView().setVisibility(View.VISIBLE);
                        numverTextView.gettap_text().setVisibility(View.GONE);
                        break;
                    case CONTROL_TYPE_PHONE:
                        Phone PhoneView = (Phone) ViewObj;
                        PhoneView.getCustomEditText().setText(Value);
                        CustomTextView tv_phonetapTextType = PhoneView.gettap_text();
                        tv_phonetapTextType.setVisibility(View.GONE);
                        PhoneView.getCustomEditText().setVisibility(View.VISIBLE);
                        break;
                    case CONTROL_TYPE_EMAIL:
                        Email EmailView = (Email) ViewObj;
                        EmailView.getCustomEditText().setText(Value);
                        CustomTextView tv_emailtapTextType = EmailView.gettap_text();
                        tv_emailtapTextType.setVisibility(View.GONE);
                        EmailView.getCustomEditText().setVisibility(View.VISIBLE);
                        break;
                    case CONTROL_TYPE_CAMERA:
                        Camera camera = (Camera) ViewObj;
                        if (Value.startsWith("http")) {
                            camera.setImageForEdit(Value);
                        }
                        break;
                    case CONTROL_TYPE_IMAGE:
                        Image ImageView = (Image) ViewObj;
                        if (Value.startsWith("http")) {
                            Value = Value.split("\\,")[0];
                            subobj.setImageData(Value);
                            if (isNetworkStatusAvialable(context)) {
                                Glide.with(context).load(Value).into(ImageView.mainImageView);
                            }
                        }
                        break;
                    case CONTROL_TYPE_LARGE_INPUT:
                        LargeInput LargeInputView = (LargeInput) ViewObj;
                        CustomTextView tv_largetapTextType = LargeInputView.gettap_text();
                        tv_largetapTextType.setVisibility(View.GONE);
                        if (LargeInputView.isEditorModeEnabled()) {
                            LargeInputView.getCustomEditText().setVisibility(View.GONE);
                            LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                            LargeInputView.getEditorToolBar().setVisibility(View.VISIBLE);
                            LargeInputView.getTextEditor().setHtml(Value);
                        } else if (LargeInputView.isHTMLViewerEnabled()) {
                            LargeInputView.getCustomEditText().setVisibility(View.GONE);
                            LargeInputView.getEditorLayout().setVisibility(View.VISIBLE);
                            LargeInputView.getEditorToolBar().setVisibility(View.GONE);
                            LargeInputView.getTextEditor().setHtml(Value);
                        } else {
                            LargeInputView.getCustomEditText().setVisibility(View.VISIBLE);
                            LargeInputView.getCustomEditText().setText(Value);
                        }
                        break;
                    case CONTROL_TYPE_CHECKBOX:
                        Checkbox CheckBoxView = (Checkbox) ViewObj;
                        View cbview = CheckBoxView.getCheckboxContainer().getChildAt(0);
                        CheckBox cb_main = cbview.findViewById(R.id.checkbox);
                        cb_main.setChecked(cb_main.getText().toString().equalsIgnoreCase(Value));
                        break;
                    case CONTROL_TYPE_FILE_BROWSING:

                        FileBrowsing fileBrowsing = (FileBrowsing) ViewObj;
                        fileBrowsing.setFileBrowsing(Value);
                        fileBrowsing.setPath(Value);
                        break;
                    case CONTROL_TYPE_CALENDER:
                        Calendar calendar = (Calendar) ViewObj;
//                        String[] defaultValue = Value.split("T");
//                        calendar.setCalendarDate(defaultValue[0]);
                        String strCalendarValue = Value;
                        if (strCalendarValue != null && !strCalendarValue.isEmpty()) {
//                            if(strCalendarValue.length()>9 && strCalendarValue.charAt(10) == 'T'){
//                                String[] defaultValue = strCalendarValue.split("T");
//                                calendar.setCalendarDate(defaultValue[0]);
//                            }else{
                            calendar.setSelectedDate(strCalendarValue);
//                            }
                        }
                        break;
                    case CONTROL_TYPE_AUDIO_PLAYER:

                        break;
                    case CONTROL_TYPE_VIDEO_PLAYER:

                        break;
                    case CONTROL_TYPE_PERCENTAGE:
                        Percentage PercentageView = (Percentage) ViewObj;
                        PercentageView.getCustomEditText().setText(Value);
                        CustomTextView tv_pertapTextType = PercentageView.gettap_text();
                        tv_pertapTextType.setVisibility(View.GONE);
                        PercentageView.getCustomEditText().setVisibility(View.VISIBLE);
                        break;
                    case CONTROL_TYPE_RADIO_BUTTON:
                        RadioGroupView radioGroupView = (RadioGroupView) ViewObj;
                        if (radioGroupView != null) {
                            radioGroupView.check(valueID);
                        }
                        break;
                    case CONTROL_TYPE_DROP_DOWN:
                        DropDown dropDown = (DropDown) ViewObj;
                        if (dropDown != null) {
                            dropDown.setItemId(valueID, Value);
                        }
                        break;
                    case CONTROL_TYPE_CHECK_LIST:
                        CheckList checklist = (CheckList) ViewObj;
                        boolean CheckListflag = true;
                        List<Item> itemListC = new ArrayList<>();
                        if (!Value.contentEquals("")) {
                            String[] valuesC = Value.split("\\,");
                            if (!valueID.contentEquals("")) {
                                String[] ids = valueID.split("\\,");

                                for (int j = 0; j < valuesC.length; j++) {
                                    Item item = new Item();
                                    item.setId(ids[j]);
                                    item.setValue(valuesC[j]);
                                    itemListC.add(item);
                                }
                            } else {
                                for (int j = 0; j < valuesC.length; j++) {
                                    Item item = new Item();
                                    item.setId(valuesC[j]);
                                    item.setValue(valuesC[j]);
                                    itemListC.add(item);
                                }
                            }
                        }
                        checklist.setnewItemsListDynamically(itemListC);
                        break;
                    case CONTROL_TYPE_SIGNATURE:
                        SignatureView signatureView = (SignatureView) ViewObj;
                        signatureView.setSignatureForEdit(Value);

                        break;
                    case CONTROL_TYPE_URL_LINK:
                        break;
                    case CONTROL_TYPE_DECIMAL:
                        DecimalView Decimalview = (DecimalView) ViewObj;
                        Decimalview.getCustomEditText().setText(Value);
                        CustomTextView tv_DectapTextType = Decimalview.gettap_text();
                        tv_DectapTextType.setVisibility(View.GONE);
                        Decimalview.getCustomEditText().setVisibility(View.VISIBLE);

                        break;
                    case CONTROL_TYPE_PASSWORD:
                        Password Passwordview = (Password) ViewObj;
                        Passwordview.getCustomEditText().setText(Value);
//                        LinearLayout ll_tap_text = Passwordview.gettap_text();
//                        ll_tap_text.setVisibility(View.GONE);
                        Passwordview.getCustomEditText().setVisibility(View.VISIBLE);

                        break;
                    case CONTROL_TYPE_CURRENCY:
                        Currency Currencyview = (Currency) ViewObj;
                        Currencyview.getCustomEditText().setText(Value);
                        CustomTextView tv_CurtapTextType = Currencyview.gettap_text();
                        tv_CurtapTextType.setVisibility(View.GONE);
                        Currencyview.getCustomEditText().setVisibility(View.VISIBLE);

                        break;
                    case CONTROL_TYPE_RATING:
                        Rating rating = (Rating) ViewObj;
                        rating.setRating(Value);

                        break;
                    case CONTROL_TYPE_DYNAMIC_LABEL:
                        DynamicLabel DynamicLabeliew = (DynamicLabel) ViewObj;
                        CustomTextView tv_dynamicLabel = DynamicLabeliew.getValueView();
//                            tv_dynamicLabel.setText(Value);
                        DynamicLabeliew.setValue(Value);

                        break;
                    case CONTROL_TYPE_QR_CODE:
                        QRCode qrCode = (QRCode) ViewObj;
                        if (!Value.contentEquals("")) {
                            qrCode.createQrCodeDynamically(Value);
                        }

                        break;
                    case CONTROL_TYPE_BAR_CODE:
                        BarCode barCode = (BarCode) ViewObj;
                        if (!Value.contentEquals("")) {
                            barCode.createBarCodeDynamically(Value);
                        }
                        break;
                    case CONTROL_TYPE_DATA_CONTROL:
                        DataControl dataControl = (DataControl) ViewObj;
                        if (!valueID.contentEquals("")) {
                            SearchableSpinner searchableSpinner = dataControl.getSpinner();
                            searchableSpinner.setItemID(valueID);
                        }
                        break;
                }

            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "SetSubFormValuestoControls", e);
        }
    }

    public void sendInParamImagesToServer(String inputkey, String path, final int fileCount, final int filesCount) {
        try {
            String pageName = strAppName.replace(" ", "_");
            String filePath = path;
            final String fileName = path.substring(filePath.lastIndexOf("/") + 1);

            new FileUploader(this, fileName, strUserId, pageName, false, "BHARGO", new FileUploader.OnImageUploaded() {
                @Override
                public void response(String url) {
                    if (url != null && url.startsWith("http")) {

                        InputMap.put(inputkey, url);
                        if (fileCount + 1 == filesCount) {
                            TM2.start();
                            try {
                                TM2.join();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    } else {
                        dismissProgressDialog();
                        if (url == null) {
                            showToast(context, "File upload Failed");
                        } else {
                            showToast(context, "File upload Failed\n" + url);
                        }

                    }
                }
            }).execute(filePath);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "sendInParamImagesToServer", e);
        }
    }

    public LinkedHashMap<String, String> getPostObject(List<API_InputParam_Bean> list_input, String SuccessCaseDetails) {

        LinkedHashMap<String, String> inputobj = new LinkedHashMap<>();
        try {
            JSONObject jobj = new JSONObject(SuccessCaseDetails);
            JSONObject inputObject = jobj.getJSONObject("InputParameters");

            JSONArray inputParamJArr = inputObject.getJSONArray("Input Parameters");
            JSONObject AuthorizationObject = inputObject.getJSONObject("Authorization");
            JSONArray HeaderJArr = inputObject.getJSONArray("Header");
            JSONObject BodyObject = inputObject.getJSONObject("Body");


            if (inputParamJArr.length() > 0) {
                for (int i = 0; i < inputParamJArr.length(); i++) {
                    JSONObject inObje = inputParamJArr.getJSONObject(i);
                    if (inObje.getString("Static").equalsIgnoreCase("No")) {
                        String inValue = "";
                        for (int j = 0; j < list_input.size(); j++) {
                            if (list_input.get(j).getInParam_Name().equalsIgnoreCase(inObje.getString("KeyName"))) {
                                inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(j).getInParam_ExpressionValue().trim());
                                break;
                            }
                        }
                        inputobj.put(inObje.getString("KeyName"), inValue);
                    } else {
                        inputobj.put(inObje.getString("KeyName"), inObje.getString("KeyValue"));
                    }

                }
            }

            if (BodyObject.has("postInputRawTypeContent")) {
                JSONObject RawInput_obj = BodyObject.getJSONObject("postInputRawTypeContent");
                JSONObject jsonSchema = JsonBuilder.generateJsonSchema(RawInput_obj);
                HashMap<String, Object> hashMapObj = JsonBuilder.ConvertJSONToHashMap(RawInput_obj.toString());
                Iterator<String> obj_keys = RawInput_obj.keys();
                while (obj_keys.hasNext()) {
                    String tempkey = obj_keys.next();
                    if (RawInput_obj.get(tempkey) instanceof String) {
                        String inValue = "";
                        for (int i = 0; i < list_input.size(); i++) {
                            if (list_input.get(i).getInParam_Name().equalsIgnoreCase(tempkey)) {
                                inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_ExpressionValue().trim());
                                break;
                            }
                        }
                        inputobj.put(tempkey, inValue);
                    } else if (RawInput_obj.get(tempkey) instanceof JSONObject) {
                        JSONObject innerObject = getPostInputJsonobjValue(list_input, RawInput_obj.getJSONObject(tempkey), tempkey);
                        inputobj.put(tempkey, innerObject.toString());
                    } else if (RawInput_obj.get(tempkey) instanceof JSONArray) {
                        String DataSource = "";
                        boolean isExression = false;
                        String inValue = "";
                        for (int i = 0; i < list_input.size(); i++) {
                            API_InputParam_Bean inputParam_bean = list_input.get(i);

                            if (!inputParam_bean.is_inParam_isParentAvailable()&&
                                    list_input.get(i).getInParam_Name().equalsIgnoreCase(tempkey)) {
                                DataSource = list_input.get(i).get_inParam_DataSourceName();
                                break;
                            }
                           /* if (*//*list_input.get(i).isInParam_isUnderArrayObject() &&*//*
                                    list_input.get(i).getInParam_Name().equalsIgnoreCase(tempkey)) {
                                if (list_input.get(i).isInParam_SelectedDataExpressionExists()) {
                                    isExression = true;
                                    DataSource = list_input.get(i).getInParam_SelectedDataExpressionValue();
                                } else {
                                    DataSource = list_input.get(i).getInParam_SelectedDataSource();
                                }

                                break;
                            } else if (list_input.get(i).getInParam_Name().equalsIgnoreCase(tempkey)) {
                                inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_ExpressionValue().trim());

                            }*/
                        }

                        if (!DataSource.trim().equalsIgnoreCase("")) {
                            JSONArray innerArray = getPostInputJsonArrayValue(list_input, RawInput_obj.getJSONArray(tempkey), tempkey, isExression, DataSource);

                            inputobj.put(tempkey, innerArray.toString());
                        } else {
                            String inarr = "";
                            String[] inarr_values = inValue.split("\\,");
                            for (int i = 0; i < inarr_values.length; i++) {
                                inarr = inarr + "\"" + inarr_values[i] + "\",";
                            }
                            inarr = inarr.substring(0, inarr.lastIndexOf(","));
                            inputobj.put(tempkey, inValue);
                        }
                    }else if (RawInput_obj.get(tempkey) instanceof String []) {

                    }
                }
            }

            if (BodyObject.has("postInputTypeParameters")) {
                JSONArray PostType2_Input = BodyObject.getJSONArray("postInputTypeParameters");
                String inValue = "";
                for (int i = 0; i < PostType2_Input.length(); i++) {
                    JSONObject innerObject = PostType2_Input.getJSONObject(i);
                    if (innerObject.getString("Static").equalsIgnoreCase("Yes")) {
                        inValue = PostType2_Input.getJSONObject(i).getString("KeyValue");
                    } else {
                        for (int x = 0; x < list_input.size(); x++) {
                            if (list_input.get(x).getInParam_Name().equalsIgnoreCase(innerObject.getString("KeyName"))) {
                                inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(x).getInParam_ExpressionValue().trim());
                                break;
                            }
                        }
                    }
                    inputobj.put(PostType2_Input.getJSONObject(i).getString("KeyName"), inValue);
                }

            }


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getPostObject", e);
        }

        return inputobj;
    }



    public LinkedHashMap<String, String> getOnlyInparamsPostObject(List<API_InputParam_Bean> list_input, String SuccessCaseDetails) {

        LinkedHashMap<String, String> inputobj = new LinkedHashMap<>();
        try {
            JSONObject jobj = new JSONObject(SuccessCaseDetails);
            JSONObject inputObject = jobj.getJSONObject("InputParameters");

            JSONArray inputParamJArr = inputObject.getJSONArray("Input Parameters");
            JSONObject AuthorizationObject = inputObject.getJSONObject("Authorization");
            JSONArray HeaderJArr = inputObject.getJSONArray("Header");
            JSONObject BodyObject = inputObject.getJSONObject("Body");


            if (inputParamJArr.length() > 0) {
                for (int i = 0; i < inputParamJArr.length(); i++) {
                    JSONObject inObje = inputParamJArr.getJSONObject(i);
                    if (inObje.getString("Static").equalsIgnoreCase("No")) {
                        String inValue = "";
                        for (int j = 0; j < list_input.size(); j++) {
                            if (list_input.get(j).getInParam_Name().equalsIgnoreCase(inObje.getString("KeyName"))) {
                                inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(j).getInParam_Mapped_ID().trim());
                                break;
                            }
                        }
                        inputobj.put(inObje.getString("KeyName"), inValue);
                    } else {
                        inputobj.put(inObje.getString("KeyName"), inObje.getString("KeyValue"));
                    }

                }
            }


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getPostObject", e);
        }

        return inputobj;
    }

    public JSONObject getPostInputJsonobjValue(List<API_InputParam_Bean> list_input, JSONObject RawInput_obj, String ParentPath) {

        JSONObject returnObject = new JSONObject();
        try {
            Iterator<String> obj_keys = RawInput_obj.keys();
            while (obj_keys.hasNext()) {
                String tempkey = obj_keys.next();
                if (RawInput_obj.get(tempkey) instanceof String) {
                    String inValue = "";
                    for (int i = 0; i < list_input.size(); i++) {
                        if (list_input.get(i).getInParam_Name().equalsIgnoreCase(ParentPath + "/" + tempkey)) {
                            inValue = ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_Mapped_ID().trim());
                            break;
                        }
                    }
                    returnObject.put(tempkey, inValue);
                } else if (RawInput_obj.get(tempkey) instanceof JSONObject) {
                    JSONObject innerObject = getPostInputJsonobjValue(list_input, RawInput_obj.getJSONObject(tempkey), ParentPath + "/" + tempkey);
                    returnObject.put(tempkey, innerObject);

                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getPostInputJsonobjValue", e);
        }
        return returnObject;
    }

    public JSONArray getPostInputJsonArrayValue(List<API_InputParam_Bean> list_input, JSONArray RawInput_array, String ParentPath,
                                                boolean isExression, String DataSource) {
        JSONArray returnArrayObject = new JSONArray();
        LinkedHashMap<String, List<String>> map_Data = new LinkedHashMap<String, List<String>>();
        try {
            int sizeofarray = 0;
            if (isExression) {

                ExpressionMainHelper ehelper = new ExpressionMainHelper();
                String finalValue = ehelper.ExpressionHelper(this, DataSource);
                map_Data = ActionUitls.ConvertGetvaluestoHashMap(context, finalValue, 1, DataSource);

            } else {

                String ValueType = DataSource.substring(4, DataSource.indexOf("."));
                String sourceName = DataSource.substring(4, DataSource.indexOf(")"));
                sourceName = sourceName.split("\\.")[1].toLowerCase();

                if (ValueType.equalsIgnoreCase(AppConstants.Global_SubControls)) {
                    List<Integer> noOfRowsList = new ArrayList<>();
                    SubformView subview = (SubformView) ((MainActivity) context).List_ControlClassObjects.get(sourceName);
                    List<ControlObject> list_Controls = subview.controlObject.getSubFormControlList();
                    for (int i = 0; i < list_Controls.size(); i++) {
                        ControlObject temp_controlObj = list_Controls.get(i);
                        List<String> Valuestr = ImproveHelper.getListOfValuesFromGlobalObject(this, DataSource.substring(0, DataSource.indexOf(")")) + "." + temp_controlObj.getControlName() + "_allrows)");
                        noOfRowsList.add(Valuestr.size());
                        map_Data.put(temp_controlObj.getControlName(), Valuestr);
                    }
                    sizeofarray = ImproveHelper.getMax(noOfRowsList);

                } else if (ValueType.equalsIgnoreCase(AppConstants.Global_API)) {

                    //map_Data = AppConstants.GlobalObjects.getAPIs_ListHash().get(sourceName);
                    //nk realm
                    map_Data = RealmDBHelper.getTableDataInLHM(context, sourceName);
                    sizeofarray = RealmDBHelper.getCount(context, sourceName);
                } else if (ValueType.equalsIgnoreCase(AppConstants.Global_FormFields)) {
                    // map_Data = AppConstants.GlobalObjects.getForms_ListHash().get(sourceName);
                    //nk realm
                    map_Data = RealmDBHelper.getTableDataInLHM(context, sourceName);
                    sizeofarray = RealmDBHelper.getCount(context, sourceName);

                } else if (ValueType.equalsIgnoreCase(AppConstants.Global_Query)) {
                    // map_Data = AppConstants.GlobalObjects.getForms_ListHash().get(sourceName);
                    //nk realm
                    map_Data = RealmDBHelper.getTableDataInLHM(context, sourceName);
                    sizeofarray = RealmDBHelper.getCount(context, sourceName);
                }
            }


            JSONObject Jobjinner = RawInput_array.getJSONObject(0);
//            int sizeofarray = 0;

            Iterator<String> obj_keys = Jobjinner.keys();
         /*   while (obj_keys.hasNext()) {
                String tempkey = obj_keys.next();
                for (int i = 0; i < list_input.size(); i++) {
                    if (list_input.get(i).getInParam_Name().equalsIgnoreCase(*//*ParentPath + "/" +*//* tempkey)) {
                        if (Jobjinner.get(tempkey) instanceof String) {
                            String columName = ImproveHelper.spilitandgetcolumnname(list_input.get(i).getInParam_Mapped_ID().trim());
                            if (map_Data.containsKey(columName)) {
                                sizeofarray = map_Data.get(columName).size();
                                break;
                            }
                        }
                    }
                }
                if (sizeofarray != 0) {
                    break;
                }
            }*/


            for (int x = 0; x < sizeofarray; x++) {
                JSONObject inner_Json = new JSONObject();
                Iterator<String> obj_keyNames = Jobjinner.keys();
                while (obj_keyNames.hasNext()) {
                    String tempkey = obj_keyNames.next();
                    for (int i = 0; i < list_input.size(); i++) {
                        if (list_input.get(i).getInParam_Name().equalsIgnoreCase(/*ParentPath + "/" +*/ tempkey)) {
                            if (Jobjinner.get(tempkey) instanceof String) {
                                String columName = ImproveHelper.spilitandgetcolumnname(list_input.get(i).getInParam_Mapped_ID().trim());
                                if (map_Data.containsKey(columName)) {
                                    inner_Json.put(tempkey, map_Data.get(columName).get(x));
                                } else {
//                                inner_Json.put(tempkey, ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_Mapped_ID().trim()));
                                    inner_Json.put(tempkey, new ExpressionMainHelper().ExpressionHelper(this,list_input.get(i).getInParam_Mapped_ID().trim()));
                                }
                            }else if (Jobjinner.get(tempkey) instanceof JSONObject) {

                            }else if (Jobjinner.get(tempkey) instanceof JSONArray) {
                                DataSource = list_input.get(i).get_inParam_DataSourceName();
                                JSONArray innerArray = getPostInputJsonArrayValue(list_input, Jobjinner.getJSONArray(tempkey), tempkey, isExression, DataSource);

                                inner_Json.put(tempkey, innerArray.toString());
                            }
/*                            String columName = ImproveHelper.spilitandgetcolumnname(list_input.get(i).getInParam_Mapped_ID().trim());
                            if (map_Data.containsKey(columName)) {
                                inner_Json.put(tempkey, map_Data.get(columName).get(x));
                            } else {
//                                inner_Json.put(tempkey, ImproveHelper.getValueFromGlobalObject(MainActivity.this, list_input.get(i).getInParam_Mapped_ID().trim()));
                                inner_Json.put(tempkey, new ExpressionMainHelper().ExpressionHelper(this,list_input.get(i).getInParam_Mapped_ID().trim()));
                            }*/
                        }
                    }
                }
                returnArrayObject.put(inner_Json);
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getPostInputJsonArrayValue", e);
        }
        Log.d("array",returnArrayObject.toString());
        return returnArrayObject;
    }

    private boolean checkForEmptyRows(JSONObject row) {
        boolean emptyRow = true;
        try {
            Iterator<String> iter = row.keys();
            while (iter.hasNext()) {
                String key = iter.next();
                String value = row.getString(key);
                if (value.trim().length() >= 1) {
                    emptyRow = false;
                    break;
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "checkForEmptyRows", e);
        }
        return emptyRow;
    }

    public void LoadDatacontrolstoGlobalObject() {
        try {
            List<DataControls> appDataControlsList = improveDataBase.getDataControlsListByOrgID(sessionManager.getOrgIdFromSession());

            LinkedHashMap<String, List<String>> datacontrolColumNames = new LinkedHashMap<>();

            for (int i = 0; i < appDataControlsList.size(); i++) {
                datacontrolColumNames = loadDataControlItems(appDataControlsList.get(i).getControlName());
                //nk realm:
                if (RealmDBHelper.existTable(context, appDataControlsList.get(i).getControlName())) {
                    RealmDBHelper.deleteTable(context, appDataControlsList.get(i).getControlName());
                }
                RealmDBHelper.createTableWithLHM(context, appDataControlsList.get(i).getControlName(), datacontrolColumNames);
                RealmDBHelper.insertFromWithLHM(context, appDataControlsList.get(i).getControlName(), datacontrolColumNames);
                //nk realm
                /*LinkedHashMap<String, LinkedHashMap<String, List<String>>> DataControl_List = new LinkedHashMap<String, LinkedHashMap<String, List<String>>>();
                DataControl_List.put(appDataControlsList.get(i).getControlName().toLowerCase(), datacontrolColumNames);
                if (AppConstants.GlobalObjects != null) {
                    if (AppConstants.GlobalObjects.getDataControls_ListHash() == null) {
                        AppConstants.GlobalObjects.setDataControls_ListHash(DataControl_List);
                    } else {
                        AppConstants.GlobalObjects.getDataControls_ListHash().put(appDataControlsList.get(i).getControlName().toLowerCase(), datacontrolColumNames);
                    }
                }*/

            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "LoadDatacontrolstoGlobalObject", e);
        }

    }

    private LinkedHashMap<String, List<String>> loadDataControlItems(String DataControlName) {
        LinkedHashMap<String, List<String>> datacontrolColumNames = new LinkedHashMap<>();
        try {
            String textFile = "DC_" + DataControlName + ".txt";

            String line = ImproveHelper.readTextFileFromSD(context, textFile, sessionManager.getOrgIdFromSession());

            if (!line.equals("")) {

                try {
                    JSONObject jobj_textfile = new JSONObject(line);
                    String ControlName = jobj_textfile.getString("ControlName");
                    String KeyID = jobj_textfile.getString("KeyID");
                    String KeyName = jobj_textfile.getString("KeyName");
                    String keyName1 = jobj_textfile.getString("KeyName");
                    JSONArray jarr_Data = jobj_textfile.getJSONArray("Data");
                    List<New_DataControl_Bean> dataControlBeanList = new ArrayList<>();
                    if (!ImproveHelper.getLocale(MainActivity.this).equalsIgnoreCase("en")) {
                        KeyName = KeyName + "_" + ImproveHelper.getLocale(MainActivity.this);
                    }

                    for (int i = 0; i < jarr_Data.length(); i++) {
                        List<String> Keyvalues = new ArrayList<>();
                        List<String> Keyvalues_ID = new ArrayList<>();
                        if (datacontrolColumNames.containsKey(DataControlName.toLowerCase())) {
                            Keyvalues = datacontrolColumNames.get(DataControlName.toLowerCase());
                            Keyvalues.add(jarr_Data.getJSONObject(i).getString(KeyName));
                        } else {

                            Keyvalues.add(jarr_Data.getJSONObject(i).getString(KeyName));
                        }

                        if (datacontrolColumNames.containsKey(DataControlName.toLowerCase() + "id")) {
                            Keyvalues_ID = datacontrolColumNames.get(DataControlName.toLowerCase() + "id");
                            Keyvalues_ID.add(jarr_Data.getJSONObject(i).getString(KeyID));
                        } else {

                            Keyvalues_ID.add(jarr_Data.getJSONObject(i).getString(KeyID));
                        }

                        datacontrolColumNames.put(DataControlName.toLowerCase(), Keyvalues);
                        datacontrolColumNames.put(DataControlName.toLowerCase() + "id", Keyvalues_ID);


                        LinkedHashMap<String, String> depen_hash = new LinkedHashMap<String, String>();
                        Iterator<String> dataobj_keys = jarr_Data.getJSONObject(i).keys();

                        while (dataobj_keys.hasNext()) {
                            String tempkey = dataobj_keys.next();
                            if (!KeyID.equalsIgnoreCase(tempkey) && !keyName1.equalsIgnoreCase(tempkey)) {
                                if (!tempkey.startsWith(keyName1 + "_")) {
                                    List<String> Dep_Keyvalues = new ArrayList<>();

                                    if (datacontrolColumNames.containsKey(tempkey.toLowerCase())) {
                                        Dep_Keyvalues = datacontrolColumNames.get(tempkey.toLowerCase());
                                        Dep_Keyvalues.add(jarr_Data.getJSONObject(i).getString(tempkey));
                                    } else {

                                        Dep_Keyvalues.add(jarr_Data.getJSONObject(i).getString(tempkey));
                                    }
                                    datacontrolColumNames.put(tempkey.toLowerCase(), Dep_Keyvalues);

                                }
                            }


                        }
                    }


                } catch (JSONException E) {
                    System.out.println("Error==" + E);
                }


            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "loadDataControlItems", e);
        }
        return datacontrolColumNames;
    }

    public void initDrawerLayout(List<NavMenuItem> menuItemList, Context context) {
        try {
            mDrawerLayout = findViewById(R.id.drawer_layout);
            mDrawerList = findViewById(R.id.left_drawer);
            mDrawerMainLayout = findViewById(R.id.llNavigation);
            mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);

            mDrawerList.setLayoutManager(new LinearLayoutManager(context));

            NavMenuAdapter navMenuAdapter = new NavMenuAdapter(menuItemList, context, new NavMenuAdapter.MenuClickListener() {
                @Override
                public void onMenuClick(View view, List<NavMenuItem> menuItemList, int pos) {

                    NavMenuItem menu = menuItemList.get(pos);
                    String tagName = menu.getTagName();

                    view.setTag(tagName);

                    if (menu.getOnClickEventObject() != null) {
                        if (AppConstants.EventCallsFrom == 1) {
                            hash_Onclick_EventObjects.put(tagName, menu.getOnClickEventObject());
                            AppConstants.EventFrom_subformOrNot = false;
                            ClickEvent(view);
                        }
                    }
                    mDrawerLayout.closeDrawer(mDrawerMainLayout);
                }

                @Override
                public void onSubMenuClick(View view, List<NavMenuItem> menuItemList, int subMenuPos, int menuPos) {

                    NavMenuItem subMenu = currentMultiForm.getNavMenu().getMenuItemList().get(menuPos).getSubMenuItems().get(subMenuPos);

                    String tagName = subMenu.getTagName();

                    view.setTag(tagName);

                    if (subMenu.getOnClickEventObject() != null) {
                        if (AppConstants.EventCallsFrom == 1) {
                            hash_Onclick_EventObjects.put(tagName, subMenu.getOnClickEventObject());
                            AppConstants.EventFrom_subformOrNot = false;
                            ClickEvent(view);
                        }
                    }
                    mDrawerLayout.closeDrawer(mDrawerMainLayout);

                }
            });

            mDrawerList.setAdapter(navMenuAdapter);

            mDrawerList.setHasFixedSize(true);

            mDrawerToggle = new ActionBarDrawerToggle(this,
                    mDrawerLayout,
                    R.string.open, R.string.close) {
                public void onDrawerOpened(View view) {
                    invalidateOptionsMenu();
                }

                public void onDrawerClosed(View view) {
                    invalidateOptionsMenu();
                }
            };
            mDrawerLayout.setDrawerListener(mDrawerToggle);
            mDrawerToggle.getDrawerArrowDrawable().setColor(getResources().getColor(R.color.white));
//        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "initDrawerLayout", e);
        }
    }


    public void ScanQRCode(ActionWithoutCondition_Bean actionObj) {
        try {
            qr_bar_Scanner = new IntentIntegrator(MainActivity.this);
            IntentIntegrator.REQUEST_CODE = ScanQR_REQUEST_CODE;
            AppConstants.Current_ScanName = actionObj.getScan_Name();
            qr_bar_Scanner.initiateScan();


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "ScanQRCode", e);
        }
    }

    public void setMarginToLinearLayout(LinearLayout linearLayout, int marginLeft, int marginTop, int marginRight, int marginBottom, int viewH, int viewW) {
        try {
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(-1, viewH);
            layoutParams.setMargins(marginLeft, marginTop, marginRight, marginBottom);
            linearLayout.setLayoutParams(layoutParams);
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setMarginToLinearLayout", e);
        }
    }

    //    public void addLayoutToPrimary(LinearLayout llMainContainer, LayoutProperties layoutProperties, UILayoutProperties uiLayoutProperties, com.bhargo.user.uisettings.pojos.MappingControlModel mappingControlModel, ControlUIProperties controlUIProperties) {
    public void addLayoutToPrimary(LinearLayout llMainContainer, LayoutProperties layoutProperties, UILayoutProperties uiLayoutProperties, com.bhargo.user.uisettings.pojos.MappingControlModel mappingControlModel) {
        try {
            final LayoutInflater lInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final View rView = lInflater.inflate(R.layout.add_layout, null);
            LinearLayout layout_addMain = rView.findViewById(R.id.layout_addMain);
            HorizontalScrollView hsOverFlow = rView.findViewById(R.id.hsOverFlow);

            layout_addMain.setTag(layoutProperties.getPosition());
            llMainContainer.addView(rView);
            int viewW = LinearLayout.LayoutParams.MATCH_PARENT;
            if (uiLayoutProperties.getWidthFixedVariable() != null && uiLayoutProperties.getWidthFixedVariable().equalsIgnoreCase(getString(R.string.fixed_Width))) {
                viewW = screenWidth;
            }
//        int viewW = screenWidth;
            int viewH = 0;

            if (isScreenFit) {
                if (layoutProperties.isLayoutToolBar()) {
                    viewH = improveHelper.dpToPx(56);
                } else {
                    viewH = (uiLayoutProperties.getHeight() * screenHeight) / 100;
                }
//            viewH = (uiLayoutProperties.getHeight() * screenHeight) / 100;
                Log.d(TAG, "addLayoutToPrimaryViewWSF " + viewW);
                Log.d(TAG, "addLayoutToPrimaryViewHSF " + viewH);

            } else {

                if (uiLayoutProperties.getWrap_or_dp() != null && !uiLayoutProperties.getWrap_or_dp().isEmpty()) {
                    Log.d(TAG, "LayoutWrapOrDp: " + uiLayoutProperties.getWrap_or_dp());
                    if (uiLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.both_wrap_dp))) {
//                    viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
//                    MappingControlModel mappingControlModelLayout = layoutProperties.getLayoutControl();
//                    bothWrapContentAndDp(mappingControlModel.getControlType(), mappingControlModel.getControlName());
                    } else if (uiLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.only_wrap))) {
                        viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
                    } else if (uiLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.only_dp))) {
                        viewH = pxToDP(uiLayoutProperties.getHeight());
                    } else {
                        viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
                    }
                } else {
                    viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
                }
//            viewH = pxToDP(uiLayoutProperties.getHeight());
                Log.d(TAG, "addLayoutToPrimaryViewWSc" + viewW);
                Log.d(TAG, "addLayoutToPrimaryViewHSc" + viewH);

            }
            uiLayoutProperties.setLayoutWidthInPixel(viewW);
            uiLayoutProperties.setLayoutHeightInPixel(viewH);

            viewW = viewW - (pxToDP(uiLayoutProperties.getMarginLeft()) + pxToDP(uiLayoutProperties.getMarginRight()));
            viewH = viewH - (pxToDP(uiLayoutProperties.getMarginTop()) + pxToDP(uiLayoutProperties.getMarginBottom()));
            if (isScreenFit && mappingControlModel != null && mappingControlModel.getControlType().equalsIgnoreCase(CONTROL_TYPE_MAP)) {
                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(-1, viewH);
                layout_addMain.setLayoutParams(layoutParams);
            }
            LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(viewW, viewH);
            layoutParams.setMargins(pxToDP(uiLayoutProperties.getMarginLeft()), pxToDP(uiLayoutProperties.getMarginTop()),
                    pxToDP(uiLayoutProperties.getMarginRight()), pxToDP(uiLayoutProperties.getMarginBottom()));
            layout_addMain.setLayoutParams(layoutParams);
            if (mappingControlModel == null) {
                layout_addMain.setLayoutParams(layoutParams);
            } else if (isScreenFit) {
                layout_addMain.setLayoutParams(layoutParams);
            } else if (mappingControlModel != null && !mappingControlModel.getControlType().equalsIgnoreCase(CONTROL_TYPE_MAP)) {
//            layout_addMain.setLayoutParams(layoutParams);
            } else {
                layout_addMain.setLayoutParams(layoutParams);
            }
            overFlowHorizontal(uiLayoutProperties, hsOverFlow);

//        applyUiProperties(layout_addMain, uiLayoutProperties, mappingControlModel, rView, false,controlUIProperties, viewH);
            applyUiProperties(layout_addMain, uiLayoutProperties, mappingControlModel, rView, false, viewH);

            LinearLayout ll_addSubLayoutContainer = rView.findViewById(R.id.ll_addSubLayoutContainer);

            if (layoutProperties != null && layoutProperties.getSubLayoutPropertiesList() != null && layoutProperties.getSubLayoutPropertiesList().size() > 0) {
                if (layoutProperties.getUiLayoutProperties().getOrientation().equalsIgnoreCase(context.getString(R.string.horizontal))) {
                    ll_addSubLayoutContainer.setOrientation(LinearLayout.HORIZONTAL);
                }

                List<LayoutProperties> subLayoutPropertiesList = layoutProperties.getSubLayoutPropertiesList();
                int subLayoutsTotalWidth = screenWidth - (pxToDP(layoutProperties.getUiLayoutProperties().getPaddingLeft()) + pxToDP(layoutProperties.getUiLayoutProperties().getPaddingRight()));
                int subLayoutsTotalHeight = viewH - (pxToDP(layoutProperties.getUiLayoutProperties().getPaddingTop()) + pxToDP(layoutProperties.getUiLayoutProperties().getPaddingBottom()));

                if (uiLayoutProperties.getInsideAlignment() != null && !uiLayoutProperties.getInsideAlignment().isEmpty()) {
                    if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.top))) {
                        ll_addSubLayoutContainer.setLayoutParams(new FrameLayout.LayoutParams(subLayoutsTotalWidth,
                                subLayoutsTotalHeight, Gravity.TOP));
                    } else if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.middle))) {
                        ll_addSubLayoutContainer.setLayoutParams(new FrameLayout.LayoutParams(subLayoutsTotalWidth,
                                subLayoutsTotalHeight, Gravity.CENTER));
                    } else if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.bottom))) {
                        ll_addSubLayoutContainer.setLayoutParams(new FrameLayout.LayoutParams(subLayoutsTotalWidth,
                                subLayoutsTotalHeight, Gravity.BOTTOM));
                    } else if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.left))) {
                        ll_addSubLayoutContainer.setLayoutParams(new FrameLayout.LayoutParams(subLayoutsTotalWidth,
                                subLayoutsTotalHeight, Gravity.LEFT));
                    } else if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.right))) {
                        ll_addSubLayoutContainer.setLayoutParams(new FrameLayout.LayoutParams(subLayoutsTotalWidth,
                                subLayoutsTotalHeight, Gravity.RIGHT));
                    }
                }


//            ll_addSubLayoutContainer.setLayoutParams(new FrameLayout.LayoutParams(subLayoutsTotalWidth,
//                    subLayoutsTotalHeight, Gravity.CENTER));
                for (int j = 0; j < subLayoutPropertiesList.size(); j++) {
                    // Inflate SubLayout Views

                    UILayoutProperties uiSubLayoutProperties = subLayoutPropertiesList.get(j).getUiLayoutProperties();
                    MappingControlModel mappingControlModelSub = subLayoutPropertiesList.get(j).getLayoutControl();
//                ControlUIProperties controlUIProperties1 = mappingControlModelSub.getControlUIProperties();

                    addSubLayoutToLayout(ll_addSubLayoutContainer, layoutProperties, uiSubLayoutProperties,
                            mappingControlModelSub, subLayoutsTotalHeight, subLayoutsTotalWidth);
//                addSubLayoutToLayout(ll_addSubLayoutContainer, layoutProperties, uiSubLayoutProperties,
//                        mappingControlModelSub, subLayoutsTotalHeight, subLayoutsTotalWidth, controlUIProperties1);

                }
            }
        } catch (Exception e) {
            Log.getStackTraceString(e);
        }

    }

    public void setScreenType(UIPrimaryLayoutModelClass primaryLayoutModelClass) {
        try {
            if (primaryLayoutModelClass != null && primaryLayoutModelClass.getScreenType() != null && !primaryLayoutModelClass.getScreenType().isEmpty()) {
                if (primaryLayoutModelClass.getScreenType().equalsIgnoreCase(AppConstants.COMPARE_SCREEN_FIT)) {
                    uFScrollView.setFillViewport(true);
                    isScreenFit = true;

                } else if (primaryLayoutModelClass.getScreenType().equalsIgnoreCase(AppConstants.COMPARE_SCROLLABLE)) {
                    uFScrollView.setFillViewport(false);
                    isScreenFit = false;
                }
            }

            uFScrollView.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    return isScreenFit;
                }
            });
            Log.d(TAG, "primaryLayoutDataScreenFit: " + isScreenFit);
        } catch (Exception e) {
            Log.d(TAG, "primaryLayoutDataScreenFitEx: " + e);
            ImproveHelper.improveException(this, TAG, "setScreenType", e);
        }

    }

    public int getActionBarheight() {
        int actionBarHeight = 0;
        TypedValue tv = new TypedValue();
        if (getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true)) {
            actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, getResources().getDisplayMetrics());
        }
        return actionBarHeight;
    }

    public int getStatusBarHeight() {
        int result = 0;
        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
        if (resourceId > 0) {
            result = getResources().getDimensionPixelSize(resourceId);
        }
        return result;
    }

    public void getRealContentSize2() {
        WindowManager windowManager =
                (WindowManager) getApplication().getSystemService(Context.
                        WINDOW_SERVICE);


        final Display display = windowManager.getDefaultDisplay();
        Point outPoint = new Point();
        if (Build.VERSION.SDK_INT >= 19) {
            // There may be virtual keys
            display.getRealSize(outPoint);
        } else {
            // No virtual key
            display.getSize(outPoint);
        }
        int mRealSizeWidth;//Real width of mobile screen
        int mRealSizeHeight;//Real height of mobile screen
        int height = outPoint.y;
        screenWidth = outPoint.x;
        toolBarheight = improveHelper.dpToPx(56);

        if (currentMultiForm != null && currentMultiForm.getBottomNavigation() != null) {
            screenHeight = height - (toolBarheight);
        } else {
            screenHeight = height;
        }
        AppConstants.VIDEO_STRETCH_SCREEN_HEIGHT = screenHeight - toolBarheight;
    }

    public int navigationBarHeight() {
        Resources resources = context.getResources();
        int resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android");
        if (resourceId > 0) {
            return resources.getDimensionPixelSize(resourceId);
        }
        return 0;
    }

    private int getNavigationBarHeight() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            DisplayMetrics metrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(metrics);
            int usableHeight = metrics.heightPixels;
            getWindowManager().getDefaultDisplay().getRealMetrics(metrics);
            int realHeight = metrics.heightPixels;
            if (realHeight > usableHeight)
                return realHeight - usableHeight;
            else
                return 0;
        }
        return 0;
    }

    private int getRealContentSize() {
        int statusBarHeight = getStatusBarHeight(this);
        int actionBarHeight = getActionBarHeight(this);
        int navigationBarHeight = getNavigationBarHeight(this);
//        toolBarheight =Math.round(pxToDPHeight(56));
//        toolBarheight =Math.round(pxToDPHeight(toolbar.getHeight()));
//        toolBarheight = toolbar.getLayoutParams().height;
        Log.d(TAG, "toolbar: " + toolbar.getHeight());
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
//        int totalHeight = statusBarHeight + toolBarheight + navigationBarHeight;
        int totalHeight = statusBarHeight + navigationBarHeight;
        Log.i("BAR", "status + " + statusBarHeight +
                "; action bar + " + actionBarHeight +
                "; navigation " + navigationBarHeight);
        int thisHeight = metrics.heightPixels - totalHeight;
        screenHeight = thisHeight;


        width = metrics.widthPixels;
        screenWidth = width;

        Log.d(TAG, "screenheight: " + thisHeight);
        return thisHeight;
    }

    public float pxToDPHeight(int i) {
        Resources r = getResources();
        float px = TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP,
                i,
                r.getDisplayMetrics());
        return px;
    }

    //    public void applyUiProperties(LinearLayout ll_container, UILayoutProperties uiLayoutProperties, MappingControlModel mappingControlModel, View rView, boolean isSubLayout, ControlUIProperties controlUIProperties, int layoutHeight) {
    public void applyUiProperties(LinearLayout ll_container, UILayoutProperties uiLayoutProperties, MappingControlModel mappingControlModel, View rView, boolean isSubLayout, int layoutHeight) {
        try {
            if (uiLayoutProperties != null) {
                AppConstants.uiLayoutPropertiesStatic = uiLayoutProperties;
                if (!isSubLayout) {
//                    Log.d(TAG, "applyUiPropertiesMappingControlModel: "+mappingControlModel.getControlName() +" - "+uiLayoutProperties.getInsideAlignment());
                    if (uiLayoutProperties.getInsideAlignment() != null) {
                        if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(getString(R.string.top))) {
                            ll_container.setGravity(Gravity.TOP);
                        } else if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(getString(R.string.middle))) {
                            ll_container.setGravity(Gravity.CENTER);
                        } else if (uiLayoutProperties.getInsideAlignment().equalsIgnoreCase(getString(R.string.bottom))) {
                            ll_container.setGravity(Gravity.BOTTOM);
                        }
                    }
                } else if (isSubLayout) {
                    controlAlignments(uiLayoutProperties, ll_container);
                }

                ll_container.setPadding(pxToDP(uiLayoutProperties.getPaddingLeft()), pxToDP(uiLayoutProperties.getPaddingTop()), pxToDP(uiLayoutProperties.getPaddingRight()), pxToDP(uiLayoutProperties.getPaddingBottom()));

                GradientDrawable.Orientation gradientAlignment = null;

                if (uiLayoutProperties.getBackgroundType() != null && !uiLayoutProperties.getBackgroundType().isEmpty()) {

                    if (uiLayoutProperties.getBackgroundType().equalsIgnoreCase(AppConstants.COMPARE_IMAGE)) {
                        if (uiLayoutProperties.getBackGroundImage().contains("http")) {
                            imageLoader = com.nostra13.universalimageloader.core.ImageLoader.getInstance();
                            imageLoader.loadImage(uiLayoutProperties.getBackGroundImage(), new SimpleImageLoadingListener() {
                                public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                                    super.onLoadingComplete(imageUri, view, loadedImage);
                                    ll_container.setBackground(new BitmapDrawable(getResources(), loadedImage));
                                }
                            });
                        } else {
                            File imgFile = new File(uiLayoutProperties.getBackGroundImage());
                            Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                            ll_container.setBackground(new BitmapDrawable(getResources(), myBitmap));
                        }
                    } else if (uiLayoutProperties.getBackgroundType() != null && uiLayoutProperties.getBackgroundType().equalsIgnoreCase(AppConstants.COMPARE_COLOR)) {
                        if (uiLayoutProperties.getColorType() != null && uiLayoutProperties.getColorType().equalsIgnoreCase(getString(R.string.transparent))) {

                            ll_container.setBackgroundColor(getResources().getColor(R.color.transparent_color));
                        } else if (uiLayoutProperties.getColorType() != null && uiLayoutProperties.getColorType().equalsIgnoreCase(getString(R.string.plain))) {
                            if (uiLayoutProperties.getBackGroundColorHex() != null) {
                                ll_container.setBackgroundColor(Color.parseColor(uiLayoutProperties.getBackGroundColorHex()));
                            }
                        } else if (uiLayoutProperties.getColorType() != null && uiLayoutProperties.getColorType().equalsIgnoreCase(getString(R.string.gradient))) {
                            if (uiLayoutProperties.getGradientType() != null && !uiLayoutProperties.getGradientType().isEmpty()) {
                                if (uiLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.top_to_bottom))) {
                                    gradientAlignment = GradientDrawable.Orientation.TOP_BOTTOM;
                                } else if (uiLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.bottom_to_top))) {
                                    gradientAlignment = GradientDrawable.Orientation.BOTTOM_TOP;
                                } else if (uiLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.left_to_right))) {
                                    gradientAlignment = GradientDrawable.Orientation.LEFT_RIGHT;
                                } else if (uiLayoutProperties.getGradientType().equalsIgnoreCase(getString(R.string.right_to_left))) {
                                    gradientAlignment = GradientDrawable.Orientation.RIGHT_LEFT;
                                }
                            }
                            String gradientOneColorHex = "#FFFFFF";
                            if (uiLayoutProperties.getGradientOneColorHex() != null
                                    && !uiLayoutProperties.getGradientOneColorHex().isEmpty()) {
                                gradientOneColorHex = uiLayoutProperties.getGradientOneColorHex();
                            }
                            String gradientTwoColorHex = "#FFFFFF";
                            if (uiLayoutProperties.getGradientTwoColorHex() != null
                                    && !uiLayoutProperties.getGradientTwoColorHex().isEmpty()) {
                                gradientTwoColorHex = uiLayoutProperties.getGradientTwoColorHex();

                            }

                            String borderColorHex = "#FFFFFF";
                            if (uiLayoutProperties.getBorderColorHex() != null && !uiLayoutProperties.getBorderColorHex().isEmpty()) {
                                borderColorHex = uiLayoutProperties.getBorderColorHex();
                                Log.d(TAG, "applyUiPropertiesborderColorHex: " + uiLayoutProperties.getBorderColorHex());
                            }

                            int borderRadiusValue = 0;
                            if (uiLayoutProperties.getBorderRadius() != null && !uiLayoutProperties.getBorderRadius().isEmpty()) {
                                String borderRadius = uiLayoutProperties.getBorderRadius();
                                borderRadiusValue = pxToDP(Integer.valueOf(borderRadius));

                            }
                            int borderStrokeValue = 0;
                            if (uiLayoutProperties.getBorderStroke() != null && !uiLayoutProperties.getBorderStroke().isEmpty()) {
                                String borderStroke = uiLayoutProperties.getBorderStroke();
                                borderStrokeValue = pxToDP(Integer.valueOf(borderStroke));
                            }

                            GradientDrawable gd = new GradientDrawable(
                                    gradientAlignment,
                                    new int[]{Color.parseColor(gradientOneColorHex), Color.parseColor(gradientTwoColorHex)});
                            gd.setCornerRadius(borderRadiusValue);
                            gd.setStroke(borderStrokeValue, Color.parseColor(borderColorHex));
                            ll_container.setBackground(gd);

                        }
                    }
                }
            }

            if (mappingControlModel != null && !mappingControlModel.getControlName().isEmpty()) {
                Log.d(TAG, "MappingCtrlNames: " + mappingControlModel.getControlName());
                ControlUIProperties controlUIProperties = mappingControlModel.getControlUIProperties();
                List<ControlObject> controlObjectList = dataCollectionObject.getControls_list();
                if (mappingControlModel.getControlName().equalsIgnoreCase("bhargo_icon_back")) {
                    ControlObject controlObject = new ControlObject();
                    controlObject.setControlType(CONTROL_TYPE_IMAGE);
                    controlObject.setControlName("bhargo_icon_back");
                    controlObject.setDisplayName("BackIconBack");
                    if (controlUIProperties.getTintColorHex() != null && !controlUIProperties.getTintColorHex().isEmpty()) {
                        controlObject.setTextHexColor(controlUIProperties.getTintColorHex());
                        Log.d(TAG, "setControlValuesColorFilterM: " + controlUIProperties.getTintColorHex());
                    } else {
                        controlUIProperties.setTintColorHex("#000000");
                    }
                    controlObject.setHideDisplayName(true);
                    controlObject.setDisplayNameAlignment("9");
                    controlObjectList.add(controlObject);
                    dataCollectionObject.setControls_list(controlObjectList);
                    globalControlObjects.put(controlObject.getControlName(), controlObject);
                } else if (mappingControlModel.getControlName().equalsIgnoreCase("bhargo_icon")) {
                    ControlObject controlObject = new ControlObject();
                    controlObject.setControlType(CONTROL_TYPE_IMAGE);
                    controlObject.setControlName("bhargo_icon");
                    controlObject.setDisplayName("BackIcon");
                    controlObject.setDisplayNameAlignment("10");
                    controlObject.setHideDisplayName(true);
                    controlObjectList.add(controlObject);
                    dataCollectionObject.setControls_list(controlObjectList);
                    globalControlObjects.put(controlObject.getControlName(), controlObject);
                } else if (mappingControlModel.getControlName().equalsIgnoreCase("bhargo_title")) {
                    ControlObject controlObject = new ControlObject();
                    controlObject.setControlType(CONTROL_TYPE_DYNAMIC_LABEL);
                    controlObject.setControlName(getString(R.string.bhargo_title));
                    controlObject.setDisplayName(getString(R.string.toolbar_title));
//                controlObject.setDisplayName(getString(R.string.toolbar_title));
                    controlObject.setControlValue(getString(R.string.toolbar_title));
                    controlObject.setValue(getString(R.string.toolbar_title));
                    controlObject.setMakeAsSection(true);
                    controlObject.setDisplayNameAlignment("7");

                    if (controlUIProperties.getFontSize() != null && !controlUIProperties.getFontSize().isEmpty()) {
                        controlObject.setTextSize(controlUIProperties.getFontSize());
                    } else {
                        controlObject.setTextSize("18");
                    }
                    if (controlUIProperties.getFontStyle() != null && !controlUIProperties.getFontStyle().isEmpty()) {
                        controlObject.setTextStyle(controlUIProperties.getFontStyle());
                    } else {
                        controlObject.setTextStyle("Bold");
                    }
                    if (controlUIProperties.getFontColorHex() != null && !controlUIProperties.getFontColorHex().isEmpty()) {
                        controlObject.setTextHexColor(controlUIProperties.getFontColorHex());
                    }

                    controlObjectList.add(controlObject);
                    dataCollectionObject.setControls_list(controlObjectList);
                    globalControlObjects.put(controlObject.getControlName(), controlObject);

                } else if (mappingControlModel.getControlType().equalsIgnoreCase(CONTROL_TYPE_CUSTOM_HEADER)) {
                    ControlObject controlObject = new ControlObject();
                    controlObject.setControlType(CONTROL_TYPE_CUSTOM_HEADER);
                    controlObject.setControlName(mappingControlModel.getControlName());
                    controlObject.setDisplayName(mappingControlModel.getDisplayName());
                    controlObject.setControlValue(mappingControlModel.getDisplayName());
                    controlObject.setValue(mappingControlModel.getDisplayName());

                    if (controlUIProperties.getCustomImageFit() != null && !controlUIProperties.getCustomImageFit().isEmpty()) {
                        if (controlUIProperties.getCustomImageFit().equalsIgnoreCase(AppConstants.DEFAULT)) {
                            controlObject.setCustomImageFit(AppConstants.FILL);
                        } else {
                            controlObject.setCustomImageFit(controlUIProperties.getCustomImageFit());
                        }
                    } else {
                        controlObject.setCustomImageFit(AppConstants.FILL);
                    }
                    if (controlUIProperties.getCustomImageRadius() != null && !controlUIProperties.getCustomImageRadius().isEmpty()) {
                        controlObject.setCustomImageRadius(controlUIProperties.getCustomImageRadius());
                    }
                    if (controlUIProperties.getCustomImageURL() != null && !controlUIProperties.getCustomImageURL().isEmpty()) {
                        controlObject.setCustomImageURL(controlUIProperties.getCustomImageURL());
                    }

                    controlObjectList.add(controlObject);
                    dataCollectionObject.setControls_list(controlObjectList);
                    globalControlObjects.put(controlObject.getControlName(), controlObject);

                } else if (mappingControlModel.getControlType().equalsIgnoreCase(CONTROL_TYPE_CUSTOM_IMAGE)) {
                    Log.d(TAG, "applyUiPropertiesCUSTOM_IMAGE: " + mappingControlModel.getControlType() + " - " + mappingControlModel.getControlName());
                    ControlObject controlObject = new ControlObject();
                    controlObject.setControlType(CONTROL_TYPE_CUSTOM_IMAGE);
                    controlObject.setControlName(mappingControlModel.getControlName());
                    controlObject.setDisplayName(mappingControlModel.getDisplayName());
                    controlObject.setControlValue(mappingControlModel.getDisplayName());
                    controlObject.setValue(String.valueOf(layoutHeight));

                    if (controlUIProperties.getFontSize() != null && !controlUIProperties.getFontSize().isEmpty()) {
                        controlObject.setTextSize(controlUIProperties.getFontSize());
                    } else {
                        controlObject.setTextSize("14");
                    }
                    if (controlUIProperties.getFontStyle() != null && !controlUIProperties.getFontStyle().isEmpty()) {
                        controlObject.setTextStyle(controlUIProperties.getFontStyle());
                    } else {
                        controlObject.setTextStyle("Normal");
                    }
                    if (controlUIProperties.getFontColorHex() != null && !controlUIProperties.getFontColorHex().isEmpty()) {
                        controlObject.setTextHexColor(controlUIProperties.getFontColorHex());
                    }

                    controlObjectList.add(controlObject);
                    dataCollectionObject.setControls_list(controlObjectList);
                    globalControlObjects.put(controlObject.getControlName(), controlObject);

                }
                ControlObject controlObject = globalControlObjects.get(mappingControlModel.getControlName());
                if (controlObject != null) {
//                    Log.d(TAG, "MappingCtrlNamesMain: " + mappingControlModel.getControlName());
                    loadControl(controlObject, controlObject.getControlType(), ll_container,
                            uiLayoutProperties, controlUIProperties, layoutHeight, null,false);
                } else if (isSubLayout) {
                }

            }
        } catch (Exception e) {
            Log.d("UiPropertiesException", e.toString());
        }
    }

    //    public void addSubLayoutToLayout(LinearLayout ll_addSubLayoutContainer, LayoutProperties parentLayoutProperties,
//                                     UILayoutProperties uiSubLayoutProperties, MappingControlModel mappingControlModelSub,
//                                     int layoutHeight, int subLayoutsTotalWidth, ControlUIProperties controlUIProperties) {
    public void addSubLayoutToLayout(LinearLayout ll_addSubLayoutContainer, LayoutProperties parentLayoutProperties,
                                     UILayoutProperties uiSubLayoutProperties, MappingControlModel mappingControlModelSub,
                                     int layoutHeight, int subLayoutsTotalWidth) {
        try {
            final LayoutInflater lInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            final View rView = lInflater.inflate(R.layout.add_sub_layout, null);
            final LinearLayout ll_subLayoutMain = rView.findViewById(R.id.ll_subLayoutMain);

            ll_addSubLayoutContainer.addView(rView);
            ViewTreeObserver vto = ll_subLayoutMain.getViewTreeObserver();
            vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
                @Override
                public void onGlobalLayout() {

                    ll_subLayoutMain.getViewTreeObserver().removeOnGlobalLayoutListener(this);
                    int viewW = 0;
                    int viewH = 0;
                    int w = 0;
                    int h = 0;
                    if (isScreenFit) {
                        h = layoutHeight;
                        w = subLayoutsTotalWidth;
                        viewW = (uiSubLayoutProperties.getWidth() * w) / 100;
                        viewH = (uiSubLayoutProperties.getHeight() * h) / 100;
                        Log.d(TAG, "onGlobalLayoutVWVH: " + viewW + "-" + viewH);
                        Log.d(TAG, "onGlobalLayoutVWVH: " + subLayoutsTotalWidth);
                        Log.d(TAG, "onGlobalLayoutVWVH: " + screenWidth);
                    } else {
                        UILayoutProperties uiLayoutProperties = parentLayoutProperties.getUiLayoutProperties();
                        if (uiLayoutProperties != null && uiLayoutProperties.getWidthFixedVariable() != null
                                && !uiLayoutProperties.getWidthFixedVariable().isEmpty()
                                && uiLayoutProperties.getWidthFixedVariable().equalsIgnoreCase(context.getString(R.string.fixed_Width))) {
                            h = layoutHeight;
                            w = screenWidth;
                            viewW = (uiSubLayoutProperties.getWidth() * w) / 100;
                            viewH = (uiSubLayoutProperties.getHeight() * h) / 100;
//                        Log.d(TAG, "onGlobalLayout1: "+h);
//                        Log.d(TAG, "onGlobalLayout2: "+w);
//                        Log.d(TAG, "onGlobalLayout3: "+viewW+"-"+uiSubLayoutProperties.getWidth());
//                        Log.d(TAG, "onGlobalLayout4: "+viewH+"-"+uiSubLayoutProperties.getHeight());

                        } else {
                            if (uiSubLayoutProperties.getWidth() != 0) {
                                viewW = pxToDP(uiSubLayoutProperties.getWidth());
                            } else {
                                if (uiSubLayoutProperties.getWidth() == 0) {
                                    viewW = screenWidth;
                                } else {
                                    viewW = LinearLayout.LayoutParams.WRAP_CONTENT;
                                }
//                                viewW = LinearLayout.LayoutParams.WRAP_CONTENT;
                            }
                            if (uiSubLayoutProperties.getWrap_or_dp() != null && !uiSubLayoutProperties.getWrap_or_dp().isEmpty()) {
                                Log.d(TAG, "LayoutWrapOrDp: " + uiSubLayoutProperties.getWrap_or_dp());
                                if (uiSubLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.both_wrap_dp))) {
//                            viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
//                            bothWrapContentAndDp(mappingControlModelSub.getControlType(), mappingControlModelSub.getControlName());
                                } else if (uiSubLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.only_wrap))) {
                                    viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
                                } else if (uiSubLayoutProperties.getWrap_or_dp().equalsIgnoreCase(context.getString(R.string.only_dp))) {
                                    viewH = pxToDP(uiSubLayoutProperties.getHeight());
                                } else {
                                    viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
                                }
                            } else {
                                viewH = LinearLayout.LayoutParams.WRAP_CONTENT;
                            }

                        }
                    }
                    uiSubLayoutProperties.setLayoutWidthInPixel(viewW);
                    uiSubLayoutProperties.setLayoutHeightInPixel(viewH);

                    Log.d(TAG, "test1width: " + viewW);
                    Log.d(TAG, "test1Height: " + viewH);
                    viewW = viewW - (pxToDP(uiSubLayoutProperties.getMarginLeft()) + pxToDP(uiSubLayoutProperties.getMarginRight()));
                    viewH = viewH - (pxToDP(uiSubLayoutProperties.getMarginTop()) + pxToDP(uiSubLayoutProperties.getMarginBottom()));
                    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(viewW, viewH);
                    layoutParams.setMargins(pxToDP(uiSubLayoutProperties.getMarginLeft()), pxToDP(uiSubLayoutProperties.getMarginTop()),
                            pxToDP(uiSubLayoutProperties.getMarginRight()), pxToDP(uiSubLayoutProperties.getMarginBottom()));
                    ll_subLayoutMain.setLayoutParams(layoutParams);
                    if (uiSubLayoutProperties.getInsideAlignment() != null && !uiSubLayoutProperties.getInsideAlignment().isEmpty()) {

                        if (uiSubLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.top))) {
                            ll_subLayoutMain.setGravity(Gravity.TOP);
                        } else if (uiSubLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.middle))) {
//                        ll_subLayoutMain.setWeightSum(1);
                            ll_subLayoutMain.setGravity(Gravity.CENTER);
                        } else if (uiSubLayoutProperties.getInsideAlignment().equalsIgnoreCase(context.getString(R.string.bottom))) {
                            ll_subLayoutMain.setGravity(Gravity.BOTTOM);
                        }
                    }


                    controlAlignments(uiSubLayoutProperties, ll_subLayoutMain);
                }
            });
            applyUiProperties(ll_subLayoutMain, uiSubLayoutProperties, mappingControlModelSub, null, true, layoutHeight);
//        applyUiProperties(ll_subLayoutMain, uiSubLayoutProperties, mappingControlModelSub, null, true, controlUIProperties, layoutHeight);
        } catch (Exception e) {
            Log.getStackTraceString(e);
        }
    }

    private void controlAlignments(UILayoutProperties uiLayoutProperties, LinearLayout linearLayout) {
        try {
            if (uiLayoutProperties != null && linearLayout != null) {
                if (uiLayoutProperties.getControlVerticalAlignment() != null && !uiLayoutProperties.getControlVerticalAlignment().isEmpty()
                        && uiLayoutProperties.getControlHorizontalAlignment() != null && !uiLayoutProperties.getControlHorizontalAlignment().isEmpty()) {
                    Log.d(TAG, "controlAlignments: VerticalAlignment- " + uiLayoutProperties.getControlVerticalAlignment() + " HorizontalAlignment - " + uiLayoutProperties.getControlHorizontalAlignment());
                    if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.top))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.left))) {
                        linearLayout.setGravity(Gravity.TOP | Gravity.LEFT);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.top))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.right))) {
                        linearLayout.setGravity(Gravity.TOP | Gravity.RIGHT);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.top))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.align_center))) {
                        linearLayout.setGravity(Gravity.TOP | Gravity.CENTER);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.bottom))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.left))) {
                        linearLayout.setGravity(Gravity.BOTTOM | Gravity.LEFT);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.bottom))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.right))) {
                        linearLayout.setGravity(Gravity.BOTTOM | Gravity.RIGHT);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.bottom))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.align_center))) {
                        linearLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.middle))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.left))) {
                        linearLayout.setGravity(Gravity.CENTER | Gravity.LEFT);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.middle))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.right))) {
                        linearLayout.setGravity(Gravity.CENTER | Gravity.RIGHT);
                    } else if (uiLayoutProperties.getControlVerticalAlignment().equalsIgnoreCase(getString(R.string.middle))
                            && uiLayoutProperties.getControlHorizontalAlignment().equalsIgnoreCase(getString(R.string.align_center))) {
                        linearLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
                    }
                }

            }
        } catch (Exception e) {
            Log.getStackTraceString(e);
        }
    }

    public void customToolBar() {
        Toolbar customToolBar = new Toolbar(this);
        LinearLayout.LayoutParams toolBarParams = new LinearLayout.LayoutParams(Toolbar.LayoutParams.MATCH_PARENT, pxToDP(50));
        customToolBar.setLayoutParams(toolBarParams);
        customToolBar.setBackgroundColor(context.getResources().getColor(R.color.fbutton_color_belize_hole));
//        customToolBar.setPopupTheme(R.style.AppTheme_PopupOverlay);
        customToolBar.setVisibility(View.VISIBLE);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(-1, -1);
        ControlObject loadControlObject = new ControlObject();
        loadControlObject.setControlType(CONTROL_TYPE_BUTTON);
        loadControlObject.setControlName("Sync");
        loadControlObject.setDisplayName("Sync");
        Button button = new Button(context, loadControlObject, false, 0, "", "strAppName");
        customToolBar.addView(button.getButton());
        MainLinearLayout.addView(customToolBar, 0);
    }

    public void ShowMessageDialogWithOk(Context context, String Message, int Runindex) {
        int iconType = R.drawable.ic_dialog_info;
        Typeface typeface_satoshi = Typeface.createFromAsset(context.getAssets(), context.getResources().getString(R.string.font_satoshi));
        TextView myMessage = new TextView(context);
        myMessage.setTypeface(typeface_satoshi);
        myMessage.setText(Message);
        myMessage.setGravity(Gravity.CENTER);
        myMessage.setTextSize(20);
        myMessage.setPadding(40, 40, 40, 40);
        AlertDialog  alertDialog = new AlertDialog.Builder(context)
                .setTitle("Info")
                .setView(myMessage)
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (Runindex == 1) {
                            afterSync();
                        }
                    }
                })

                .setIcon(iconType)
                .show();
        alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE).setTextColor(context.getColor(R.color.colorPrimary));
        alertDialog.getButton(android.app.AlertDialog.BUTTON_POSITIVE).setTypeface(typeface_satoshi);

    }

    public void overFlowHorizontal(UILayoutProperties uiLayoutProperties, HorizontalScrollView hsOverFlow) {
        try {
            boolean isOverFlowCheck = true;
            if (uiLayoutProperties != null && uiLayoutProperties.isOverflow()
                    && uiLayoutProperties.getWidthFixedVariable() != null
                    && !uiLayoutProperties.getWidthFixedVariable().isEmpty()
                    && uiLayoutProperties.getWidthFixedVariable().equalsIgnoreCase(context.getString(R.string.variable))) {

                isOverFlowCheck = !uiLayoutProperties.isOverflow();
            }
            boolean finalIsOverFlow = isOverFlowCheck;
            hsOverFlow.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View view, MotionEvent motionEvent) {
                    return finalIsOverFlow;
                }
            });
        } catch (Exception e) {
            Log.d(TAG, "overFlowHorizontal: " + e);
        }

    }

    public boolean getTypeofService(String SuccessCaseDetails) {
        boolean returnflag = false;
        try {
            JSONObject jobj = new JSONObject(SuccessCaseDetails);
            JSONObject inputObject = jobj.getJSONObject("InputParameters");
            JSONObject BodyObject = inputObject.getJSONObject("Body");
            Map<String, String> InputImages = new HashMap<>();
            if (BodyObject.has("postInputTypeParameters")) {
                returnflag = true;
            }

        } catch (Exception e) {
            ImproveHelper.improveException(MainActivity.this, TAG, "getPostObject", e);
        }
        return returnflag;
    }

    public void FromSplashScreenDirectActivity(final String strPageName) {
        try {
            Map<String, String> data = new HashMap<>();
            try {
                data.put("PageName", strPageName);
                data.put("OrgId", sessionManager.getOrgIdFromSession());
            } catch (Exception e) {
                e.printStackTrace();
            }

            System.out.println("sessionManager.getOrgIdFromSession()===" + sessionManager.getOrgIdFromSession());
            Call<CallFormDataResponse> notificationDataResponseCall = getServices.getDesignfromCallform(sessionManager.getAuthorizationTokenId(), data);

            notificationDataResponseCall.enqueue(new Callback<CallFormDataResponse>() {
                @Override
                public void onResponse(Call<CallFormDataResponse> call, Response<CallFormDataResponse> response) {


                    if (response.body() != null) {
                        System.out.println("response.body() ===" + response.body().getMessage());

                        if (response.body().getAppDetails() != null && response.body().getAppDetails().size() > 0) {
                            AppDetails otherFormDetailsList = response.body().getAppDetails().get(0);
                            System.out.println("strPageName" + response.body().getAppDetails().get(0).getAppName());

                            Log.d(TAG, "onResponseAppDetails: " + response.body().getAppDetails().get(0).getAppName());
                            List<AppDetails> appDetailsList = response.body().getAppDetails();
                            if (appDetailsList != null && appDetailsList.size() > 0) {

                                if (appDetailsList.get(0).getAppType().equalsIgnoreCase(CHILD_FORM)) {

                                    sessionManager.createChildFormDesignFormat(appDetailsList.get(0).getDesignFormat());
                                    PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_APP_NAME, appDetailsList.get(0).getAppName());
                                    PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_CREATED_BY_ID, appDetailsList.get(0).getCreatedBy());
                                    PrefManger.putSharedPreferencesString(context, AppConstants.SP_CHILD_FORM_DISTRIBUTION_ID, appDetailsList.get(0).getDistrubutionID());

                                    prepareChildFormJsonData(appDetailsList.get(0).getDesignFormat());

                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(AppConstants.QUERY_FORM)) {

                                    dismissProgressDialog();
                                    Intent intent = new Intent(MainActivity.this, QueryGetDataActivity.class);
                                    intent.putExtra("s_design_format", appDetailsList.get(0).getDesignFormat());
                                    intent.putExtra("s_app_name", appDetailsList.get(0).getAppName());
//                                intent.putExtra("s_user_location_Structure", AppConstants.GlobalObjects.getUser_Location_structure());
                                    intent.putExtra("s_org_id", sessionManager.getOrgIdFromSession());
                                    startActivity(intent);
                                    finish();

                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(DATA_COLLECTION)) {

                                    strOrgId = sessionManager.getOrgIdFromSession();
                                    strAppName = strPageName;
                                    strCreatedBy = appDetailsList.get(0).getCreatedBy();
                                    strUserId = sessionManager.getUserDataFromSession().getUserID();
                                    strDistributionId = appDetailsList.get(0).getDistrubutionID();
//                                    strDesignFormatNotif = appDetailsList.get(0).getDesignFormat();
                                    strDesignFormat = appDetailsList.get(0).getDesignFormat();


                                    improveDataBase.insertIntoAppsListTable(appDetailsList,
                                            sessionManager.getOrgIdFromSession(),
                                            sessionManager.getUserDataFromSession().getUserID());
                                    if (strWebViewType.equalsIgnoreCase("") || strWebViewType.isEmpty() || strWebViewType == null) {
                                        mAppFromCheck();
                                    }
                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(AppConstants.DASHBOARD)) {
                                    Log.d(TAG, "NotificationOnClickAppType: " + appDetailsList.get(0).getAppType());
//                                strWebUrl = "https://www.google.com/";
                                    dismissProgressDialog();
                                    webView.setVisibility(View.VISIBLE);
                                    WebSettings webSettings = webView.getSettings();
                                    webSettings.setJavaScriptEnabled(true);
                                    strWebUrl = AppConstants.MAIN_WEB_LINK + strPageName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                                    webView.loadUrl(strWebUrl);
                                    improveDataBase.insertIntoAppsListTable(appDetailsList,
                                            sessionManager.getOrgIdFromSession(),
                                            sessionManager.getUserDataFromSession().getUserID());
                                    Log.d(TAG, "onResponseDashBoard: " + strWebUrl);
                                } else if (appDetailsList.get(0).getAppType().equalsIgnoreCase(AppConstants.REPORTS)) {
                                    Log.d(TAG, "NotificationOnClickAppType: " + appDetailsList.get(0).getAppType());
//                                strWebUrl = "https://www.google.com/";
                                    dismissProgressDialog();
                                    webView.setVisibility(View.VISIBLE);
                                    WebSettings webSettings = webView.getSettings();
                                    webSettings.setJavaScriptEnabled(true);
                                    strWebUrl = AppConstants.MAIN_WEB_LINK + strPageName + "&OrgID=" + sessionManager.getOrgIdFromSession() + "&UserID=" + sessionManager.getUserDataFromSession().getUserID();
                                    webView.loadUrl(strWebUrl);
                                    improveDataBase.insertIntoAppsListTable(appDetailsList,
                                            sessionManager.getOrgIdFromSession(),
                                            sessionManager.getUserDataFromSession().getUserID());
                                    Log.d(TAG, "onResponseReports: " + strWebUrl);
                                }
                                String filePath = appDetailsList.get(0).getAppIcon();
                                createAppFolderAndDownloadFiles(appDetailsList.get(0));
                            }
                        }
                    } else {
                        dismissProgressDialog();
                    }
                }

                @Override
                public void onFailure(Call<CallFormDataResponse> call, Throwable t) {
                    System.out.println("Fails==" + t);
                    dismissProgressDialog();
                }
            });

        } catch (Exception e) {
            dismissProgressDialog();
            ImproveHelper.improveException(this, TAG, "mNotificationDirectActivityApi", e);
        }
    }

    public boolean hasNavBar(Resources resources) {
        int id = resources.getIdentifier("config_showNavigationBar", "bool", "android");
        return id > 0 && resources.getBoolean(id);
    }

    public void CallLogout() {
        android.app.AlertDialog alertDialog = new android.app.AlertDialog.Builder(context)
//set icon
//set title
                .setTitle(R.string.want_to_logout)
                .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        SessionManager sessionManager_logout = new SessionManager(context);
                        //set what would happen when positive button is clicked
                        AppConstants.DefultAPK_afterLoginPage_loaded = true;
                        improveDataBase.deleteDatabaseTables(sessionManager_logout.getUserDetailsFromSession().getUserId());
                        sessionManager_logout.clearUserDetails();
                        if (FromAction == 1) {
                            Executeindex++;
                            EventExecute();
                        } else {
                            Executeindex++;
                            checkandExecute(IfElseBlock_Bean);
                        }
                        Global_ActionObj = new ActionWithoutCondition_Bean();
                    }
                })
//set negative button
                .setNegativeButton(R.string.d_no, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        //set what should happen when negative button is clicked

                    }
                })
                .show();
    }

    public void CallLogin(final ActionWithoutCondition_Bean ActionObject) {
        try {
//            dismissProgressDialog();

            if (isNetworkStatusAvialable(context)) {
                ExpressionMainHelper ehelpera = new ExpressionMainHelper();
                String Mobilenumber = ehelpera.ExpressionHelper(this, ActionObject.getBhargoLogin_mobilenumber_MapValue());
                String OTP = ehelpera.ExpressionHelper(this, ActionObject.getBhargoLogin_OTP_MapValue());

//                OTPData otpData = new OTPData();
//                otpData.setMobileNo(Mobilenumber);
//                otpData.setOTP(OTP);

                Map<String, String> data = new HashMap<>();
                data.put("MobileNo", Mobilenumber);
                data.put("OTP", OTP);
//                mOtpAPI(data);
                OTPUtils otpUtils = new OTPUtils(context, sessionManager, data, TAG, improveDataBase, FromAction, Executeindex, IfElseBlock_Bean);
                otpUtils.mOtpAPI();

//                mOtpAPI(otpData);

            } else {
//                improveHelper.snackBarAlertActivities(context, v);
                Toast.makeText(context, getString(R.string.no_internet), Toast.LENGTH_SHORT).show();
            }


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "CallLogin", e);
        }
    }


    public void setLanguage(final ActionWithoutCondition_Bean ActionObject) {
        try {
            ExpressionMainHelper ehelpera = new ExpressionMainHelper();
            String Language = ehelpera.ExpressionHelper(this, ActionObject.getChangeLanguage_MapValue());
            ImproveHelper.saveTempLocale(context,appLanguage);
            ImproveHelper.changeLanguage(context, Language);
            ImproveHelper.saveLocale(context, Language);
            //sessionManager.languageChanged(true);

            Intent intent = getIntent();
            overridePendingTransition(0, 0);
            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
            finish();
            overridePendingTransition(0, 0);
            startActivity(intent);


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setLanguage", e);
        }
    }

    /*private void mOtpAPI(OTPData otpData) {
//        try {
//            showProgressDialog("Verifying Data");
//            PrefManger.putSharedPreferencesString(MainActivity.this, SP_MOBILE_NO, otpData.getMobileNo());
//
//            Call<OTPModel> otpModelCall = getServices.iOTPVerification(otpData);
//
//            otpModelCall.enqueue(new Callback<OTPModel>() {
//                @Override
//                public void onResponse(Call<OTPModel> call, Response<OTPModel> response) {
////                    dismissProgressDialog();
//                    if (response.body() != null) {
//                        organisationList = new ArrayList<>();
//                        OTPModel otpModel = response.body();
//                        System.out.println("OTPOnResponseSuccess: " + otpModel.getMessage());
//                        GlobalObjects.setBhargoLoginMessage(otpModel.getMessage());
//                        GlobalObjects.setBhargoLoginStatus(otpModel.getStatus());
//                        if (otpModel.getMessage().equalsIgnoreCase("Success")) {
//                            improveDataBase.deleteOrganisationData();
//                            if (otpModel.getOrgList() != null && otpModel.getOrgList().size() > 0) {
//                                for (OrgList orgList : otpModel.getOrgList()) {
////                                    if (orgList.getStatus().equalsIgnoreCase("Y")) {
//                                    organisationList.add(orgList);
////                                    }
//                                }
//                                for (int i = 0; i < organisationList.size(); i++) {
//                                    if (organisationList.get(i).getOrgID().equalsIgnoreCase(AppConstants.DefultAPK_OrgID)) {
//                                        orgCount = i;
//                                        saveDefaultOrg(organisationList.get(i));
//                                        break;
//                                    }
//                                }
//                            }
//                            mUserDetails(organisationList);
//
//                        } else {
//                            sessionManager.createloginstatusSession("100");
//                            AppConstants.GlobalObjects.setLogin_status("100");
//                            dismissProgressDialog();
//                            ImproveHelper.showToast(context, otpModel.getMessage());
//                            if (FromAction == 1) {
//                                Executeindex++;
//                                EventExecute();
//                            } else {
//                                Executeindex++;
//                                checkandExecute(IfElseBlock_Bean);
//                            }
//                        }
//                    } else {
//                        sessionManager.createloginstatusSession("100");
//                        AppConstants.GlobalObjects.setLogin_status("100");
////                        dismissProgressDialog();
//                        if (FromAction == 1) {
//                            Executeindex++;
//                            EventExecute();
//                        } else {
//                            Executeindex++;
//                            checkandExecute(IfElseBlock_Bean);
//                        }
//                    }
//
//                }
//
//                @Override
//                public void onFailure(Call<OTPModel> call, Throwable t) {
//                    System.out.println("OTPOnResponseFailure: " + t);
//                    sessionManager.createloginstatusSession("100");
//                    AppConstants.GlobalObjects.setLogin_status("100");
//                    dismissProgressDialog();
//                }
//            });
//        } catch (Exception e) {
//            ImproveHelper.improveException(this, TAG, "mOtpAPI", e);
//        }
//
//    }

    private void saveDefaultOrg(OrgList orgList) {
        try {
            PrefManger.putSharedPreferencesString(context, AppConstants.SP_ORGANISATION_ID, AppConstants.DefultAPK_OrgID);
            sessionManager.createOrgSession(orgList.getOrgID());
            System.out.println("orgList.getOrgID()==" + orgList.getOrgID());
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "saveDefaultOrg", e);
        }

    }


    private void mUserDetails(final List<OrgList> orgList) {
        try {
            showProgressDialog("Please wait..!");
            UserDetailsData userDetailsData = new UserDetailsData();
            userDetailsData.setMobileNo(PrefManger.getSharedPreferencesString(this, SP_MOBILE_NO, ""));
//        userDetailsData.setMobileNo(Default_MobileNo);
            userDetailsData.setOrgId(sessionManager.getOrgIdFromSession());

            final Call<UserDetailsModel> userDetailsCall = getServices.iUserDetails(userDetailsData);

            userDetailsCall.enqueue(new Callback<UserDetailsModel>() {
                @Override
                public void onResponse(Call<UserDetailsModel> call, Response<UserDetailsModel> response) {
//                    dismissProgressDialog();
                    if (response.body() != null) {

                        UserDetailsModel userDetailsModel = response.body();
                        System.out.println("userDetailsModel.getStatus()==" + userDetailsModel.getStatus());
                        if (userDetailsModel.getStatus().equalsIgnoreCase("200")) {
                            sessionManager.createloginstatusSession("200");
                            AppConstants.GlobalObjects.setLogin_status("200");
                            UserDetails userDetails = userDetailsModel.getUserDeatils();
                            List<UserPostDetails> userPostDetails = userDetailsModel.getUserPostDetails();
                            UserDetailsModel.ReportingUserDeatils reportingUserDetails = userDetailsModel.getReportingUserDeatils();
//                    String strUserId = userDetails.getUserId();
//                    Log.d("OTP_UserId", strUserId);
                            *//*Setting User Details Object into SharedPreferences*//*
                            Gson gson = new Gson();
                            if (userDetails != null) {
                                String jsonUserDeatils = gson.toJson(userDetails);
                                PrefManger.putSharedPreferencesString(context, SP_USER_DETAILS, jsonUserDeatils);
                            }
                            if (userPostDetails != null) {
                                String jsonUserPostDeatils = gson.toJson(userPostDetails);
                                PrefManger.putSharedPreferencesString(context, SP_USER_POST_DETAILS, jsonUserPostDeatils);
                            }
                            if (reportingUserDetails != null) {
                                String jsonReportingUserDetails = gson.toJson(reportingUserDetails);
                                PrefManger.putSharedPreferencesString(context, SP_REPORTING_USER_DETAILS, jsonReportingUserDetails);
                            }

                            if (userDetails != null) {
                                createLoginSession(userDetails, userPostDetails, orgList);
                            }
                        } else {
//                            dismissProgressDialog();
//                        ImproveHelper.showToast(context, response.body().getMessage());
                            orgCount++;
                            if (orgCount < organisationList.size()) {
                                saveDefaultOrg(organisationList.get(orgCount));
                                mUserDetails(organisationList);

                            } else {
                                sessionManager.createloginstatusSession("100");
                                AppConstants.GlobalObjects.setLogin_status("100");
                                ImproveHelper.showToast(context, "No user details found");
                                if (FromAction == 1) {
                                    Executeindex++;
                                    EventExecute();
                                } else {
                                    Executeindex++;
                                    checkandExecute(IfElseBlock_Bean);
                                }
                            }
                        }

                    } else {
//                        dismissProgressDialog();
                        if (FromAction == 1) {
                            Executeindex++;
                            EventExecute();
                        } else {
                            Executeindex++;
                            checkandExecute(IfElseBlock_Bean);
                        }
                    }

                }

                @Override
                public void onFailure(Call<UserDetailsModel> call, Throwable t) {
                    Log.d(TAG, "onFailureOTPUserDetails: " + t);
                    dismissProgressDialog();
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "mUserDetails", e);
        }
    }

    private void createLoginSession(UserDetails userDetails, List<UserPostDetails> userPostDetailsList, List<OrgList> orgList) {
        try {
            improveHelper.createImproveUserFolder("Improve_User");
            sessionManager.createLoginSession(userDetails);
            sessionManager.createUserPostDetailsSession(userPostDetailsList);
            improveDataBase.insertIntOrganisationsTable(orgList, sessionManager.getUserDetailsFromSession().getPhoneNo());

            if (userPostDetailsList != null) {
                System.out.println("userPostDetailsList.get(0).getPostID()" + userPostDetailsList.get(0).getPostID());
                System.out.println("userPostDetailsList.get(0).getName()==" + userPostDetailsList.get(0).getName());
                sessionManager.createPostsSession(userPostDetailsList.get(0).getPostID());
                sessionManager.setPostName(userPostDetailsList.get(0).getName());
            }

            loadGlobalObject(sessionManager.getOrgIdFromSession());

            *//*Get Token Id*//*

            getGroupsList();
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "createLoginSession", e);
        }

    }

    private void getGroupsList() {
        try {
            Map<String, String> data = new HashMap<>();
            String userId = ImproveHelper.getUserDetails(context).getUserId();
            data.put("UserID", ImproveHelper.getUserDetails(context).getUserId());
            data.put("OrgId", sessionManager.getOrgIdFromSession());

            Call<GroupsListResponse> getAllAppNamesDataCall = getServices.iGetAllGroupsList(data);
            getAllAppNamesDataCall.enqueue(new Callback<GroupsListResponse>() {
                @Override
                public void onResponse(Call<GroupsListResponse> call, Response<GroupsListResponse> response) {

                    if (response.body().getStatus().equalsIgnoreCase("200") && response.body().getMessage().equalsIgnoreCase("Success")) {
                        List<Group> groupList = response.body().getGroupsData();
                        if (groupList.size() > 0) {
                            improveDataBase.deleteGroupTable();
                            long result = improveDataBase.insertListIntoGroupTable(groupList, userId, sessionManager.getOrgIdFromSession());
                            if (result > 0) {
                                *//*Get Token Id*//*
                                mGetTokenId();
                            }
                        } else {
                            *//*Get Token Id*//*
                            mGetTokenId();
                        }
                    } else {
//                        dismissProgressDialog();
                        if (FromAction == 1) {
                            Executeindex++;
                            EventExecute();
                        } else {
                            Executeindex++;
                            checkandExecute(IfElseBlock_Bean);
                        }
                    }

                }

                @Override
                public void onFailure(Call<GroupsListResponse> call, Throwable t) {
//                    dismissProgressDialog();
                    *//*Get Token Id*//*
                    mGetTokenId();
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "getGroupsList", e);
        }

    }

    public void mGetTokenId() {
        try {

            FirebaseMessaging.getInstance().getToken()
                    .addOnCompleteListener(new OnCompleteListener<String>() {
                        @Override
                        public void onComplete(@NonNull Task<String> task) {
                            if (!task.isSuccessful()) {
                                Log.w(TAG, "Fetching FCM registration token failed", task.getException());
                                return;
                            }  // Get new FCM registration token

                            String newToken = task.getResult();
                            Log.d(TAG, "GetTokenId: " + newToken);


                            DeviceIdSendData deviceIdSendData = new DeviceIdSendData();
                            deviceIdSendData.setUserId(sessionManager.getUserDataFromSession().getUserID());
                            deviceIdSendData.setOrgId(sessionManager.getOrgIdFromSession());
                            deviceIdSendData.setDevcieID(newToken);
                            sessionManager.createDeviceIdSession(deviceIdSendData.getDevcieID());
                            *//*Send device id to server*//*
                            if (newToken != null && !newToken.isEmpty()) {
                                mDeviceIdSendToServerApi(deviceIdSendData);
                            } else {
//                                dismissProgressDialog();
                                if (FromAction == 1) {
                                    Executeindex++;
                                    EventExecute();
                                } else {
                                    Executeindex++;
                                    checkandExecute(IfElseBlock_Bean);
                                }
                            }
                        }
                    });

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "mGetTokenId", e);
        }

    }


    public void mDeviceIdSendToServerApi(DeviceIdSendData deviceIdSendData) {

        Call<DeviceIdResponse> deviceIdResponseCall = getServices.sendDeviceIdToServer(deviceIdSendData);

        deviceIdResponseCall.enqueue(new Callback<DeviceIdResponse>() {
            @Override
            public void onResponse(Call<DeviceIdResponse> call, Response<DeviceIdResponse> response) {
                improveHelper.dismissProgressDialog();
                if (response.body() != null) {
                    Log.d(TAG, "onResponseSuccess: " + response.body().getMessage());

                    updateTokenInFirebase();
                }

            }

            @Override
            public void onFailure(Call<DeviceIdResponse> call, Throwable t) {

                Log.d(TAG, "onResponseFail: " + t.getStackTrace());
                improveHelper.dismissProgressDialog();
                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }
            }
        });
    }

    */
    public void updateTokenInFirebase() {
        try {
            firebaseDatabase = FirebaseDatabase.getInstance(firebaseURL).getReference(sessionManager.getOrgIdFromSession());
            firebaseDatabase.child("Users").orderByChild("Mobile").equalTo(sessionManager.getUserDetailsFromSession().getPhoneNo()).addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {

                    if (!dataSnapshot.exists()) {

//                        dismissProgressDialog();
                        if (FromAction == 1) {
                            Executeindex++;
                            EventExecute();
                        } else {
                            Executeindex++;
                            checkandExecute(IfElseBlock_Bean);
                        }
                    } else {
                        for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                            com.bhargo.user.pojos.firebase.UserDetails userDetails = snapshot.getValue(com.bhargo.user.pojos.firebase.UserDetails.class);
                            sessionManager.createUserChatID(userDetails.getID());
                            Log.d(TAG, "userchatid: " + userDetails.getID());
                        }

                        updateToken();
                    }

                }

                @Override
                public void onCancelled(@NonNull DatabaseError databaseError) {
                    dismissProgressDialog();
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "updateTokenInFirebase", e);
        }

    }

    public void updateToken() {
        try {
            if (sessionManager.isDeviceIDUpdated() != null && sessionManager.isDeviceIDUpdated().equalsIgnoreCase("no")) {

                sessionManager.createDeviceUpdated("yes");

                Token token = new Token(sessionManager.getDeviceIdFromSession());
                firebaseDatabase.child("Tokens").child(sessionManager.getUserChatID()).setValue(token).addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        Log.d(TAG, "response: " + "Sucess");

//                        dismissProgressDialog();
                        if (FromAction == 1) {
                            Executeindex++;
                            EventExecute();
                        } else {
                            Executeindex++;
                            checkandExecute(IfElseBlock_Bean);
                        }

                    }
                }).addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // Write failed
                        // ...
                        dismissProgressDialog();
                        Log.d(TAG, "response: " + e);
                    }
                });
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "updateToken", e);
        }
    }

    public void callafterFormPreLoad() {
        list_Control = dataCollectionObject.getControls_list();

        for (int i = 0; i < list_Control.size(); i++) {
            if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_DATA_CONTROL)) {
                DataControls DataControls = improveDataBase.getDataControls(list_Control.get(i).getDataControlName());
                if (DataControls != null && DataControls.getDataControlType() != null && DataControls.getDataControlType().equalsIgnoreCase("Dynamic")) {

                    String filePath = DataControls.getTextFilePath().trim();
                    startDownloadDataControl(filePath, "", 0, true, DataControls);
                }
            } else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_SECTION)
            || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM)
            || list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)
            ){
                ControlObject sectionCtrlObj = list_Control.get(i);
                List<ControlObject> sectionControlsList = sectionCtrlObj.getSubFormControlList();
                if(sectionControlsList != null && sectionControlsList.size() > 0){
                    for (int j = 0; j < sectionControlsList.size(); j++) {
                        if(sectionControlsList.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_BUTTON)){
                            ControlObject sectionBtnCtrlObj = sectionControlsList.get(j);
                            if(sectionBtnCtrlObj.getTypeOfButton().equalsIgnoreCase("Button with Icon") || sectionBtnCtrlObj.getTypeOfButton().equalsIgnoreCase("Icon")){

//                    String[] imgUrlSplit = btnCtrlObj.getIconPath().trim().split("/");
                                String strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName;
                                DownloadFileFromURLTask dBtnIcons = new DownloadFileFromURLTask(MainActivity.this, strAppName.replaceAll(" ", "_"), strSDCardUrl, 1, new DownloadFileListener() {
                                    @Override
                                    public void onSuccess(File file) {

                                    }

                                    @Override
                                    public void onFailed(String errorMessage) {
                                        Log.d("ButtonIconsInForm",""+errorMessage);
                                    }
                                });

                                dBtnIcons.execute(sectionBtnCtrlObj.getIconPath().trim());
                            }
                        }
                    }
                }
            } else if(list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_BUTTON)){
                ControlObject btnCtrlObj = list_Control.get(i);
                if(btnCtrlObj.getTypeOfButton().equalsIgnoreCase("Button with Icon") || btnCtrlObj.getTypeOfButton().equalsIgnoreCase("Icon")){
//                    String[] imgUrlSplit = btnCtrlObj.getIconPath().trim().split("/");
                    String strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName;
                    DownloadFileFromURLTask dBtnIcons = new DownloadFileFromURLTask(MainActivity.this, strAppName.replaceAll(" ", "_"), strSDCardUrl, 1, new DownloadFileListener() {
                        @Override
                        public void onSuccess(File file) {

                        }

                        @Override
                        public void onFailed(String errorMessage) {
                            Log.d("ButtonIconsInForm",""+errorMessage);
                        }
                    });

                    dBtnIcons.execute(btnCtrlObj.getIconPath().trim());

                }
            }
        }

        if (dataCollectionObject.getApp_Title() != null && !dataCollectionObject.getApp_Title().contentEquals("")) {
            title.setText(dataCollectionObject.getApp_Title());
            LinkedHashMap<String, String> headerMap = dataCollectionObject.getTranslatedAppTitleMap();
            if (headerMap != null && !appLanguage.contentEquals("en")) {
                title.setText(headerMap.get(appLanguage));
            }
            if (title.getText().toString().trim().contentEquals("")) {
                title.setText(dataCollectionObject.getApp_Name());
                LinkedHashMap<String, String> headerMap1 = dataCollectionObject.getTranslatedAppNames();
                if (headerMap1 != null && !appLanguage.contentEquals("en")) {
                    title.setText(headerMap1.get(appLanguage));
                }
            }
        } else {
            title.setText(dataCollectionObject.getApp_Name());
            LinkedHashMap<String, String> headerMap = dataCollectionObject.getTranslatedAppNames();
            if (headerMap != null && !appLanguage.contentEquals("en")) {
                title.setText(headerMap.get(appLanguage));
            }
        }
        title.setSelected(true);
        if (strDisplayAppName != null) {
            title.setText(strDisplayAppName);
        } else if (strAppName != null) {
            title.setText(strAppName);
        } else {
            title.setText(getString(R.string.improve_user));
        }
        list_Variables = dataCollectionObject.getList_Varibles();
        //set Variable to SharePref


        if (list_VariablesDataFromIntent.size() > 0) {
            for (int i = 0; i < list_VariablesDataFromIntent.size(); i++) {
                for (int j = 0; j < list_Variables.size(); j++) {
                    if (list_Variables.get(j).getVariable_Name().equalsIgnoreCase(list_VariablesDataFromIntent.get(i).getVariable_Name())) {
                        list_Variables.set(j, list_VariablesDataFromIntent.get(i));
                    }
                }
            }
        } else {
            for (int i = 0; i < list_Variables.size(); i++) {
                Variable_Bean variable_bean = list_Variables.get(i);
                if (variable_bean.isOffline_Variable() && variable_bean.getVariable_Type().equalsIgnoreCase("Single")) {
                    variable_bean.setVariable_singleValue(ImproveHelper.getOfflineSingleVariableFromSharedPref(context, variable_bean.getVariable_Name()));
                } else if (variable_bean.isOffline_Variable() && variable_bean.getVariable_Type().equalsIgnoreCase("Multiple")) {
                    variable_bean.setVariable_multiValue(ImproveHelper.getOfflineMultiVariableFromSharedPref(context, variable_bean.getVariable_Name()));
                }

            }
        }
        ImproveHelper.setOfflineVariablesToSharedPref(context, list_Variables);
        subFormNames();
        clearAndSubmitButtons();


        if (strChildForm != null && strChildForm.equalsIgnoreCase("ChildForm")) {
            iv_loading.setVisibility(View.GONE);
            if (AppConstants.KEEP_SESSION_VIEW_MAP.containsKey(strAppName)) {
                dismissProgressDialog();

            } else {
                toolbar.setVisibility(View.VISIBLE);
                new LoadControlsFromChild().execute("");
            }
//                    new LoadControlsFromNew().execute();
/*                    if (dataCollectionObject.getOnLoadEventObject() != null) {
                        AppConstants.GlobalObjects.setCurrent_GPS("");
                        FormLoad();
                    }*/
        } else if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
//                new LoadControlsFromEdit().execute("");
            globalControlObjects = ImproveHelper.globalControlObjects(dataCollectionObject);
            iv_loading.setVisibility(View.GONE);
            if (AppConstants.KEEP_SESSION_VIEW_MAP.containsKey(strAppName)) {
                dismissProgressDialog();
            } else {
                toolbar.setVisibility(View.VISIBLE);
                new LoadControlsFromNew().execute();
//                loadControlsThread.start();
            }
        } else {
            globalControlObjects = ImproveHelper.globalControlObjects(dataCollectionObject);
            ll_btns.setVisibility(View.GONE);
            if (dataCollectionObject.isUIFormNeeded() && dataCollectionObject.getUiPrimaryLayoutModelClass() != null) {
                uiPrimaryLayoutModelClass = dataCollectionObject.getUiPrimaryLayoutModelClass();
//                        primaryLayoutData(uiPrimaryLayoutModelClass, linearLayout);
//                if(!dataCollectionObject.getUiPrimaryLayoutModelClass().getPrimaryLayoutProperties().isHideDefaultToolbar()){
//                    toolbar.setVisibility(View.VISIBLE);
//                }
                new LoadPrimaryLayoutData().execute();
            } else {
//                iv_loading.setVisibility(View.GONE);
                if (AppConstants.KEEP_SESSION_VIEW_MAP.containsKey(strAppName)) {
                    dismissProgressDialog();

                } else {
                    toolbar.setVisibility(View.VISIBLE);
                    new LoadControlsFromNew().execute();
//                    loadControlsThread.start();
                }
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        System.out.println("onResume app==="+AppConstants.CurrentAppObject.getApp_Name());


    }

    @Override
    protected void onPause() {
        super.onPause();
//        System.out.println("onPause app===" + AppConstants.CurrentAppObject.getApp_Name());
        checkandsaveLivetrackingState();
    }

    @Override
    protected void onDestroy() {
        stopAudioPlayer();
        super.onDestroy();
        if (AppConstants.CurrentAppObject != null && AppConstants.CurrentAppObject.getApp_Name() != null) {
            System.out.println("onDestroy app===" + AppConstants.CurrentAppObject.getApp_Name());
        }

    }

    public void checkandsaveLivetrackingState() {
        try {
            if (list_Control != null) {
                for (int i = 0; i < list_Control.size(); i++) {
                    if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_LiveTracking)) {
                        System.out.println("list_Control.get(i).getControlName()===" + list_Control.get(i).getControlName());
                        LiveTracking LiveTracking = (LiveTracking) List_ControlClassObjects.get(list_Control.get(i).getControlName());
                        sessionManager.SaveLiveTrackingState(AppConstants.CurrentAppObject.App_Name, list_Control.get(i).getControlName(), LiveTracking);
                    }
                }
            }
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "checkandsaveLivetrackingState", e);
        }
    }

    public void CheckLivetrackingandSetSavedState() {
        System.out.println("CheckLivetrackingandSetSavedState==");
        boolean existflag = false;
        String LiveTrackName = "";
        for (int i = 0; i < list_Control.size(); i++) {
            if (list_Control.get(i).getControlType().equalsIgnoreCase(CONTROL_TYPE_LiveTracking)) {
                LiveTrackName = list_Control.get(i).getControlName();
                existflag = true;
                break;
            }
        }
        System.out.println("Control Exist==" + existflag);
        if (existflag) {
            LiveTracking LiveTracking = sessionManager.GetLiveTrackObject(AppConstants.CurrentAppObject.App_Name, LiveTrackName);
            if (LiveTracking != null) {
                System.out.println("LiveTrackName===" + LiveTrackName);
                List_ControlClassObjects.put(LiveTrackName, LiveTracking);
                if (section == 0) {
                    linearLayout.addView(LiveTracking.getMapControlLayout());
                } else {
                    linearLayoutSection.addView(LiveTracking.getMapControlLayout());
                }
                LiveTracking.getMapView().onResume();
            } else {
                System.out.println("LiveTracking Object is Null");
            }
        }
    }

    public void setSetProperties(ActionWithoutCondition_Bean actionObj) {
        try {

            SetProperty setProperties = actionObj.getSetPropertyActionObject();
            expressionMainHelper = new ExpressionMainHelper();
            String parentControlName = setProperties.getParentControlName();
            String controlName = setProperties.getControlName();
            String controlType = setProperties.getControlType();
            List<Param> propertiesList = setProperties.getPropertiesList();
            if (parentControlName != null && !parentControlName.isEmpty()) {
                ControlObject controlObjectParent = globalControlObjects.get(parentControlName);
                if (controlObjectParent.getSubFormControlList() != null && controlObjectParent.getSubFormControlList().size() > 0) {
                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = new ArrayList<>();
                    if (controlObjectParent.getControlType().equalsIgnoreCase(CONTROL_TYPE_SUBFORM)) {
                        SubformView subformView = (SubformView) List_ControlClassObjects.get(parentControlName);
                        subform_List_ControlClassObjects = subformView.subform_List_ControlClassObjects;
                    } else if (controlObjectParent.getControlType().equalsIgnoreCase(CONTROL_TYPE_GRID_CONTROL)) {
                        GridControl subformView = (GridControl) List_ControlClassObjects.get(parentControlName);
                        subformView.gridControlSetPropertiesActionForHeader(propertiesList,controlName,controlType);
                        subform_List_ControlClassObjects = subformView.gridControl_List_ControlClassObjects;
                    } else if (controlObjectParent.getControlType().equalsIgnoreCase(CONTROL_TYPE_SECTION)) {
                        SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(parentControlName);
                        subform_List_ControlClassObjects.add(sectionControl.New_list_ControlClassObjects);
                    }
//                        LinkedHashMap<String, Object> New_list_ControlClassObjects = subform_List_ControlClassObjects.get(i);
                    for (int i = 0; i < subform_List_ControlClassObjects.size(); i++) {
                        LinkedHashMap<String, Object> New_list_ControlClassObjects = subform_List_ControlClassObjects.get(i);
                        setPropertiesSwitchCase(controlType, controlName, propertiesList, New_list_ControlClassObjects, actionObj);
                    }
                }
            } else {
                setPropertiesSwitchCase(controlType, controlName, propertiesList, List_ControlClassObjects, actionObj);
            }

        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "setSet_Properties", e);
        }
    }

    private void setPropertiesSwitchCase(String controlType, String controlName, List<Param> propertiesList, LinkedHashMap<String, Object> List_ControlClassObjects, ActionWithoutCondition_Bean actionBean) {
        switch (controlType) {
            case CONTROL_TYPE_TEXT_INPUT:
                TextInput textInput = (TextInput) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && textInput != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            textInput.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            textInput.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            textInput.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            textInput.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            textInput.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            textInput.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BAR_CODE)) {
                            textInput.setReadFromBarcode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.QR_CODE)) {
                            textInput.setReadFromQRCode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.GEO_LOCATION)) {
                            textInput.setGoogleLocationSearch(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.CURRENT_LOCATION)) {
                            textInput.setCurrentLocation(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.VOICE_INPUT)) {
                            textInput.setVoiceText(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.MASK_CHAR)) {
                            textInput.setEnableMaskCharacters(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            textInput.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            textInput.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            textInput.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_NUMERIC_INPUT:
                NumericInput numericInput = (NumericInput) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && numericInput != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            numericInput.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            numericInput.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            numericInput.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            numericInput.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.MASK_CHAR)) {
                            numericInput.setEnableMaskCharacters(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            numericInput.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            numericInput.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BAR_CODE)) {
                            numericInput.setReadFromBarcode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.QR_CODE)) {
                            numericInput.setReadFromQRCode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            numericInput.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            numericInput.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            numericInput.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_PHONE:
                Phone phone = (Phone) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && phone != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            phone.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            phone.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            phone.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            phone.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            phone.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            phone.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BAR_CODE)) {
                            phone.setReadFromBarcode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.QR_CODE)) {
                            phone.setReadFromQRCode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            phone.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            phone.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            phone.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_EMAIL:
                Email email = (Email) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && email != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            email.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            email.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            email.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            email.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            email.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            email.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BAR_CODE)) {
                            email.setReadFromBarcode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.QR_CODE)) {
                            email.setReadFromQRCode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            email.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            email.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            email.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_LARGE_INPUT:
                LargeInput largeInput = (LargeInput) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && largeInput != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            largeInput.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            largeInput.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            largeInput.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            largeInput.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            largeInput.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            largeInput.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HTML_EDITOR)) {
                            largeInput.enableHTMLEditor(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HTML_VIEWER)) {
                            largeInput.enableHTMLViewer(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            largeInput.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            largeInput.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            largeInput.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_CAMERA:
                Camera camera = (Camera) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && camera != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            camera.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            camera.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            camera.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            camera.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            camera.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.IMAGE_WITH_GPS)) {
                            camera.setEnableImageWithGps(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.CAMERA)) {
                            camera.setCaptureFromCamera(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FILE_BROWSING)) {
                            camera.setCaptureFromFile(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.CAPTURE) || property.getValue().contentEquals(PropertiesNames.ORIENTATION)) {
                            if (propertyText.equalsIgnoreCase(PropertiesNames.LAND_SCAPE) || propertyText.equalsIgnoreCase("0")) {
                                propertyText = context.getString(R.string.only_lanscape);
                            } else if (propertyText.equalsIgnoreCase(PropertiesNames.POTRAIT) || propertyText.equalsIgnoreCase("1")) {
                                propertyText = context.getString(R.string.only_potrait);
                            }
                            camera.setCaptureOrientation(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            camera.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            camera.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            camera.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_FILE_BROWSING:
                FileBrowsing fileBrowsing = (FileBrowsing) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && fileBrowsing != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            fileBrowsing.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            fileBrowsing.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            fileBrowsing.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            fileBrowsing.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ENABLE_SCAN)) {
                            fileBrowsing.setEnableScan(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ENABLE_EXTENSIONS)) {
                            fileBrowsing.setEnableExtensions(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.EXTENSIONS_NAMES_LIST)) {
                            List<String> myList = new ArrayList<String>(Arrays.asList(propertyText.split(",")));
                            fileBrowsing.setEnabledExtensions(myList);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            fileBrowsing.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            fileBrowsing.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            fileBrowsing.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            fileBrowsing.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_CALENDER:
                Calendar calendar = (Calendar) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && calendar != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            calendar.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            calendar.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            calendar.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            calendar.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            calendar.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            calendar.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.GET_YEAR_FROM_SELECTION)) {
                            calendar.setGetYearFromSelection(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.GET_MONTH_FROM_SELECTION)) {
                            calendar.setGetMonthFromSelection(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.GET_DAY_FROM_SELECTION)) {
                            calendar.setGetDayFromSelection(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.GET_DATE_FROM_SELECTION)) {
                            calendar.setGetDateFromSelection(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            calendar.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            calendar.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            calendar.setTextStyle(propertyText);
                        }
                    }

                }
                break;
            case CONTROL_TYPE_CHECKBOX:
                Checkbox checkbox = (Checkbox) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder") || property.getName().contentEquals("expression")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && checkbox != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            checkbox.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.CHECKED_VALUE)) {
                            checkbox.setCheckedValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.UNCHECKED_VALUE)) {
                            checkbox.setUnCheckedValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            checkbox.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            checkbox.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            checkbox.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            checkbox.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_ALPHABETS)) {
                            checkbox.setSortByAlphabetOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ALLOW_OTHER_CHOICES)) {
                            checkbox.setAllowOtherChoices(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            checkbox.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            checkbox.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            checkbox.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_RADIO_BUTTON:
                RadioGroupView radioGroupView = (RadioGroupView) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && radioGroupView != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            radioGroupView.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            radioGroupView.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            radioGroupView.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            radioGroupView.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            radioGroupView.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_ALPHABETS)) {
                            radioGroupView.setSortByAlphabetOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ALLOW_OTHER_CHOICES)) {
                            radioGroupView.setAllowOtherChoices(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HORIZONTAL_ALIGNMENT)) {
                            radioGroupView.setEnableHorizontalAlignment(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            radioGroupView.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            radioGroupView.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            radioGroupView.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_DROP_DOWN:
                DropDown dropDown = (DropDown) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && dropDown != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            dropDown.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            dropDown.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            dropDown.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            dropDown.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            dropDown.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_ALPHABETS)) {
                            dropDown.setSortByAlphabetOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_CHRONOLOGICAL)) {
                            dropDown.setEnableSortByChronologicalOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_CHRONOLOGICAL)) {
                            dropDown.setEnableSortByChronologicalOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_ASCENDING)) {
                            dropDown.setEnableSortByAscendingOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_DESCENDING)) {
                            dropDown.setEnableSortByDescendingOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ALLOW_OTHER_CHOICES)) {
                            dropDown.setAllowOtherChoices(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            dropDown.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            dropDown.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            dropDown.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_CHECK_LIST:
                CheckList checkList = (CheckList) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && checkList != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            checkList.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            checkList.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            checkList.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            checkList.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            checkList.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_ALPHABETS)) {
                            checkList.setSortByAlphabetOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_ASCENDING)) {
                            checkList.setEnableSortByAscendingOrder(Boolean.parseBoolean(propertyText));
                        }  else if (property.getValue().contentEquals(PropertiesNames.SORT_BY_DESCENDING)) {
                            checkList.setEnableSortByDescendingOrder(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ALLOW_OTHER_CHOICES)) {
                            checkList.setAllowOtherChoices(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SEPARATE_ROW)) {
                            checkList.setRowSelectionType(property.getValue());
                        } else if (property.getValue().contentEquals(PropertiesNames.SAME_ROW)) {
                            checkList.setRowSelectionType(property.getValue());
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            checkList.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            checkList.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            checkList.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_RATING:
                Rating rating = (Rating) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && rating != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            rating.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            rating.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            rating.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            rating.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DISABLE_COUNT)) {
                            rating.setDisableRatingCount(Boolean.parseBoolean(propertyText));
                        }  else if (property.getValue().contentEquals(PropertiesNames.RATING_TYPE)) {
                            rating.setRatingType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            rating.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.RATING_ITEM_NAMES)) {
                            rating.setCustomItemNames(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            rating.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            rating.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            rating.setTextStyle(propertyText);
                        }/*else if (property.getValue().contentEquals(PropertiesNames.RATING_TYPE)) {
                                rating.setSelectRatingItemType(Boolean.parseBoolean(propertyText));
                            } */
                    }
                }
                break;
            case CONTROL_TYPE_VOICE_RECORDING:
                VoiceRecording voiceRecording = (VoiceRecording) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && voiceRecording != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            voiceRecording.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            voiceRecording.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            voiceRecording.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.AUDIO_FORMAT)) {
                            voiceRecording.setEnableAudioFormat(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.AUDIO_FORMAT_VALUE)) {
                            voiceRecording.setAudioFormat((propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.UPLOAD_AUDIO_FILE)) {
                            voiceRecording.setEnableUploadAudioFile(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            voiceRecording.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            voiceRecording.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            voiceRecording.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            voiceRecording.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            voiceRecording.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_VIDEO_RECORDING:
                VideoRecording videoRecording = (VideoRecording) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && videoRecording != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            videoRecording.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            videoRecording.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            videoRecording.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.VIDEO_FORMAT)) {
                            videoRecording.setEnableVideoFormat(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.VIDEO_FORMAT_VALUE)) {
                            videoRecording.setVideoFormat((propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.UPLOAD_VIDEO_FILE)) {
                            videoRecording.setEnableUploadVideoFile(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            videoRecording.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            videoRecording.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            videoRecording.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            videoRecording.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            videoRecording.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_AUDIO_PLAYER:
                AudioPlayer audioPlayer_ = (AudioPlayer) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && audioPlayer_ != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            audioPlayer_.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            audioPlayer_.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            audioPlayer_.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.STAY_AWAKE)) {
                            audioPlayer_.setEnableStayAwake(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.PLAY_BACKGROUND)) {
                            audioPlayer_.setEnablePlayBackground(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            audioPlayer_.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            audioPlayer_.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            audioPlayer_.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            audioPlayer_.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_VIDEO_PLAYER:
                VideoPlayer videoPlayer = (VideoPlayer) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && videoPlayer != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            videoPlayer.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            videoPlayer.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            videoPlayer.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.STAY_AWAKE)) {
                            videoPlayer.setEnableStayAwake(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            videoPlayer.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            videoPlayer.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            videoPlayer.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            videoPlayer.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_PERCENTAGE:
                Percentage percentage = (Percentage) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && percentage != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            percentage.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            percentage.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            percentage.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            percentage.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            percentage.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            percentage.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            percentage.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            percentage.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            percentage.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_SIGNATURE:
                SignatureView signatureView = (SignatureView) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && signatureView != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            signatureView.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            signatureView.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            signatureView.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.UPLOAD_IMAGE)) {
                            signatureView.setEnableUploadSignature(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SIGNATURE_ON_SCREEN)) {
                            signatureView.setEnableSignatureOnScreen(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            signatureView.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            signatureView.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            signatureView.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            signatureView.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            signatureView.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_URL_LINK:
                UrlView urlView = (UrlView) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && urlView != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            urlView.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            urlView.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            urlView.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            urlView.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DISABLE_CLICK)) {
                            urlView.setDisableClick(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_URL)) {
                            urlView.setHideURL(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.URL_PLACEHOLDER)) {
                            urlView.setUrlPlaceholderText((propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            urlView.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            urlView.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            urlView.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            urlView.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_DECIMAL:
                DecimalView decimalView = (DecimalView) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && decimalView != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            decimalView.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            decimalView.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            decimalView.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            decimalView.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DECIMAL_CHARACTERS)) {
                            decimalView.setEnableDecimalCharacters(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DECIMAL_CHARACTERS_VALUE)) {
                            decimalView.setCharactersAfterDecimal((propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            decimalView.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            decimalView.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            decimalView.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            decimalView.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            decimalView.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_PASSWORD:
                Password password = (Password) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && password != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            password.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            password.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            password.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            password.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SHOW_HIDE_PASSWORD)) {
                            password.setEnableShowOrHideOption(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ENCRYPT)) {
                                password.setEnableEncryption(Boolean.parseBoolean(propertyText));
                        }  else if (property.getValue().contentEquals(PropertiesNames.ENCRYPTION_TYPE)) {
                                password.setEnableEncryptionType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            password.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            password.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            password.setTextStyle(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            password.setVisibility(Boolean.parseBoolean(propertyText));
                        }
                    }
                }
                break;
            case CONTROL_TYPE_CURRENCY:
                Currency currency = (Currency) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && currency != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            currency.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            currency.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            currency.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            currency.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            currency.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SELECT_CURRENCY)) {
                            currency.setEnableCurrencySelection(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SELECT_CURRENCY_VALUE)) {
                            currency.setCurrencyVal((propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            currency.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.STRIKE_TEXT)) {
                            currency.setStrikeText(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            currency.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            currency.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            currency.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_DYNAMIC_LABEL:
                DynamicLabel dynamicLabel = (DynamicLabel) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && dynamicLabel != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            dynamicLabel.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            dynamicLabel.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            dynamicLabel.setTextValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HTML_VIEWER)) {
                            dynamicLabel.setHtmlViewerEnabled(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.MAKE_IT_AS_SECTION)) {
                            dynamicLabel.setMakeAsSection(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            dynamicLabel.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BAR_CODE)) {
                            dynamicLabel.setEnableDisplayAsBarCode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ENABLE_UNICODE)) {
                            dynamicLabel.setEnableUnicode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.UNICODE_VALUE)) {
                            dynamicLabel.setUnicodeFormatId(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.QR_CODE)) {
                            dynamicLabel.setEnableDisplayAsQRCode(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            dynamicLabel.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.MASK_CHAR)) {
                            dynamicLabel.setEnableMaskCharacters(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.MASK_CHAR_TYPE)) {
                            dynamicLabel.setMaskCharacterType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.MASK_CHAR_COUNT)) {
                            dynamicLabel.setNoOfCharactersToMask(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.PARTIAL_TYPE)) {
                            dynamicLabel.setMaskCharacterDirection(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.STRIKE_TEXT)) {
                            dynamicLabel.setStrikeText(Boolean.parseBoolean(propertyText));
                        }  else if (property.getValue().contentEquals(PropertiesNames.UNDERLINE_TEXT)) {
                            dynamicLabel.setUnderLineText(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BACK_GROUND)) {
                            dynamicLabel.setLayoutBackGroundEnable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.BACK_GROUND_COLOR)) {
                            dynamicLabel.setLayoutBackGroundColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            dynamicLabel.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            dynamicLabel.setTextColor(propertyText);
                            dynamicLabel.setUnderLineTextColor(propertyText);

                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            dynamicLabel.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_IMAGE:
                Image imageCtrl = (Image) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("")) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            imageCtrl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            imageCtrl.setHint(propertyText);
                        }/* else if (property.getValue().contentEquals(PropertiesNames.SINGLE_IMAGE_PATH)) {
                                imageCtrl.setControlValue(propertyText);
                            }*/ else if (property.getValue().contentEquals(PropertiesNames.MULTIPLE_IMAGES)) {
                            imageCtrl.setEnableMultipleImages(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.IMAGES_DISPLAY_TYPE)) {
                            imageCtrl.setImagesArrangementType(propertyText);
                        } /*else if (property.getValue().contentEquals(PropertiesNames.IMAGES_LIST)) {
                            } else if (property.getValue().contentEquals(PropertiesNames.MULTIPLE_IMAGES)) {
                                imageCtrl.setEnableMultipleImages(Boolean.parseBoolean(propertyText));
                            } else if (property.getValue().contentEquals(PropertiesNames.IMAGES_DISPLAY_TYPE)) {
                                imageCtrl.setImagesArrangementType(propertyText);
                            } else if (property.getValue().contentEquals(PropertiesNames.IMAGES_LIST)) {
                                imageCtrl.setImageData(propertyText);
                            } */ else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            imageCtrl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ZOOM_CTRL)) {
                            imageCtrl.setZoomImageEnable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            imageCtrl.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            imageCtrl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            imageCtrl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            imageCtrl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_BUTTON:
                Button button = (Button) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && button != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            button.setDisplayName(propertyText);
                        } /*else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            button.setHint(propertyText);
                        } */else if (property.getValue().contentEquals(PropertiesNames.DISABLE_CLICK)) {
                            button.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            button.setVisibility(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            button.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        }  else if (property.getValue().contentEquals(PropertiesNames.VALIDATE_FORM)) {
                            button.setValidateFormFields(Boolean.parseBoolean(propertyText));
                        } /*else if (property.getValue().equalsIgnoreCase(PropertiesNames.BUTTON_WITH_ICON)) {
*//*
                            if(btnCtrlObj.getTypeOfButton().equalsIgnoreCase("Button with Icon") || btnCtrlObj.getTypeOfButton().equalsIgnoreCase("Icon")){
//                    String[] imgUrlSplit = btnCtrlObj.getIconPath().trim().split("/");
                                String strSDCardUrl = "Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName;
                                DownloadFileFromURLTask dBtnIcons = new DownloadFileFromURLTask(MainActivity.this, strAppName.replaceAll(" ", "_"), strSDCardUrl, 1, new DownloadFileListener() {
                                    @Override
                                    public void onSuccess(File file) {

                                    }

                                    @Override
                                    public void onFailed(String errorMessage) {
                                        Log.d("ButtonIconsInForm",""+errorMessage);
                                    }
                                });

                                dBtnIcons.execute(btnCtrlObj.getIconPath().trim());

                            }
*//*





                            String[] imgUrlSplit = propertyText.split("/");
//                            String strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName + "/" + "ButtonIcons/";
                            String strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName;
                            DownloadFileFromURLTask fromURLTask_sp = new DownloadFileFromURLTask(MainActivity.this, strAppName.replaceAll(" ", "_"), strSDCardUrl, 1, new DownloadFileListener() {
                                @Override
                                public void onSuccess(File file) {}
                                @Override
                                public void onFailed(String errorMessage) {}
                            });
                            fromURLTask_sp.execute(propertyText);
                            button.setIconPath(propertyText);
                        } */else if (property.getValue().contentEquals(PropertiesNames.BUTTON_SHAPE)) {
                            button.setShape(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.BUTTON_TYPE)) {
                            button.setButtonType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.ICON_ALIGNMENT)) {
                            button.setIconAlignment(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.BUTTON_BG_COLOR)) {
                            button.setButtonColor(propertyText);
//                            button.setButtonColor("#ecf0f1");
                        } else if (property.getValue().contentEquals(PropertiesNames.BUTTON_FILE_NAME)) {
                            button.setButtonFileName(propertyText);
                        }   else if (property.getValue().contentEquals(PropertiesNames.BUTTON_IMAGE_PATH)) {
                            String strServerImagePath = propertyText.trim();
//                            String[] imgUrlSplit = propertyText.split("/");
//                            String strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName + "/" + "ButtonIcons/";
                            String strSDCardUrl = "/Improve_User/" + sessionManager.getOrgIdFromSession() + "/" + strAppName;
                            DownloadFileFromURLTask fromURLTask_sp = new DownloadFileFromURLTask(MainActivity.this, strAppName.replaceAll(" ", "_"), strSDCardUrl, 1, new DownloadFileListener() {
                                @Override
                                public void onSuccess(File file) {
                                    button.setIconPath(strServerImagePath);
                                }
                                @Override
                                public void onFailed(String errorMessage) {}
                            });
                            fromURLTask_sp.execute(strServerImagePath);

                        }  else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            button.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            button.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            button.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_TIME:
                Time time = (Time) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && time != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            time.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            time.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            time.setDefaultValue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.CURRENT_TIME)) {
                            time.setCurrentTime(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.TIME_FORMAT)) {
                            time.setTimeFormat(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.TIME_FORMAT_TYPE)) {
                            time.setTimeFormat(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.TIME_OPTION_FORMAT)) {
                            time.setTimeFormatOptions(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.TIME_OPTION_FORMAT_TYPE)) {
                            time.setTimeFormatOptions(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            time.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            time.setEnabled(!Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            time.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            time.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            time.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            time.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_COUNT_DOWN_TIMER:
                CountDownTimerControl countDownTimerControl = (CountDownTimerControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && countDownTimerControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            countDownTimerControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            countDownTimerControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            countDownTimerControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
//                        } else if (property.getValue().contentEquals(PropertiesNames.TIMER_DISPLAY_FORMAT_TYPE)) {
                        } else if (property.getValue().contentEquals(PropertiesNames.TIME_OPTION_FORMAT_TYPE)) {
                            countDownTimerControl.setTimerFormatOptions(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            countDownTimerControl.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.AUTOSTART)) {
                            countDownTimerControl.setTimerAutoStart(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            countDownTimerControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            countDownTimerControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            countDownTimerControl.setTextStyle(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.TIMER_COLOR)) {
                            countDownTimerControl.setTimerColor(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_COUNT_UP_TIMER:
                CountUpTimerControl countUpTimerControl = (CountUpTimerControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && countUpTimerControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            countUpTimerControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            countUpTimerControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            countUpTimerControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.TIME_OPTION_FORMAT_TYPE)) {
                            countUpTimerControl.setTimerFormatOptions(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            countUpTimerControl.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.AUTOSTART)) {
                            countUpTimerControl.setTimerAutoStart(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            countUpTimerControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            countUpTimerControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            countUpTimerControl.setTextStyle(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.TIMER_COLOR)) {
                            countUpTimerControl.setTimerColor(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_VIEWFILE:
                ViewFileControl viewFileControl = (ViewFileControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && viewFileControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            viewFileControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            viewFileControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            viewFileControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_FILE_LINK)) {
                            viewFileControl.setHide_filelink(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.DOWNLOAD_FILE)) {
                            viewFileControl.setDownloadFile(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            viewFileControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            viewFileControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            viewFileControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_GRID_CONTROL:

                GridControl gridControl = (GridControl) List_ControlClassObjects.get(controlName);
                if (propertiesList != null && propertiesList.size() > 0) {
                    gridControl.gridControlSetPropertiesAction(propertiesList);
                }

//                SubformView gridControl = (SubformView) List_ControlClassObjects.get(setProperties.getControlName());
                break;
            case CONTROL_TYPE_SUBFORM:
//                SubformView subformView = (SubformView) List_ControlClassObjects.get(setProperties.getControlName());
//                ControlObject controlObject = globalControlObjects.get(setProperties.getControlName());
                SubformView subformView = (SubformView) List_ControlClassObjects.get(controlName);
                ControlObject controlObject = globalControlObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && subformView != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            subformView.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            subformView.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.MIN_ROW)) {
                            subformView.setMin(propertyText, "");
                        } else if (property.getValue().contentEquals(PropertiesNames.MAX_ROW)) {
                            subformView.setMax(propertyText, "");
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            subformView.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.GRID_WITH_TWO_COLUMNS)) {
                            subformView.setGridWithTwoColumns(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ORIENTATION)) {
                            subformView.setDisplayOrientation(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.LAZY_LOADING)) {
                            subformView.setLazyLoadingEnabled(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.THRESHOLD)) {
                            subformView.setThreshold(propertyText);
                        }else if (property.getValue().contentEquals(PropertiesNames.NAME_OF_BUTTON_VALUE)) {
                            subformView.btn_addSubFormMain().setText(propertyText);
                        }  else if (property.getValue().contentEquals(PropertiesNames.SEARCH_ITEMS)) {
                            subformView.setSearchEnable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            subformView.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            subformView.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            subformView.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_BAR_CODE:
                BarCode barCodeControl = (BarCode) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && barCodeControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            barCodeControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            barCodeControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            barCodeControl.createBarCodeDynamically(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            barCodeControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            barCodeControl.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            barCodeControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            barCodeControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            barCodeControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_QR_CODE:
                QRCode qrCodeControl = (QRCode) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && qrCodeControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            qrCodeControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            qrCodeControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.DEFAULT_VALUE)) {
                            qrCodeControl.createQrCodeDynamically(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            qrCodeControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            qrCodeControl.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            qrCodeControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            qrCodeControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            qrCodeControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_SECTION:
                SectionControl sectionControl = (SectionControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && sectionControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            sectionControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            sectionControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            sectionControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            sectionControl.setInvisible(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.EXPAND_COLLAPSE)) {
                            sectionControl.setEnableCollapseOrExpand(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            sectionControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            sectionControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            sectionControl.setTextStyle(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.MAKE_IT_AS_POPUP)) {
                            //sanjay
                            sectionControl.setMakeItAsPopup(Boolean.parseBoolean(propertyText));
                        }
                    }
                }
                break;
            case CONTROL_TYPE_USER:
                UserControl userControl = (UserControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && userControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            userControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            userControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            userControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            userControl.setInvisible(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            userControl.setDisable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.USER_TYPE)) {
                            userControl.setUserType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.USER_GROUP)) {
//                                List<String> stringList = new ArrayList<String>(Arrays.asList(propertyText.split(",")));
                            if (propertyText != null && !propertyText.isEmpty()) {
//                                String replacedStringid = propertyText.replaceAll("_groupId","id");
//                                String replacedStringName = replacedStringid.replaceAll("_groupName","name");
                                Type collectionType = new TypeToken<Collection<UserGroup>>() {}.getType();
                                List<UserGroup> userGroupsList = gson.fromJson(propertyText, collectionType);
                                if (userGroupsList != null && userGroupsList.size() > 0) {
                                    userControl.setGroups(userGroupsList);
                                    Log.d(TAG, "UserGroupsListCheckUC: " + userGroupsList.get(0).getName());
                                }
                            }
                        } else if (property.getValue().contentEquals(PropertiesNames.USER_WITH_POST_NAME)) {
                            userControl.setShowUsersWithPostName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            userControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            userControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            userControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_POST:
                PostControl postControl = (PostControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && postControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            postControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            postControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            postControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            postControl.setInvisible(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            postControl.setDisable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.USER_TYPE)) {
                            postControl.setUserType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.USER_GROUP)) {
//                                List<String> stringList = new ArrayList<String>(Arrays.asList(propertyText.split(",")));
                            if (propertyText != null && !propertyText.isEmpty()) {
//                                String replacedStringId = propertyText.replaceAll("_groupId","id");
//                                String replacedStringName = replacedStringId.replaceAll("_groupName","name");

                                Type collectionType = new TypeToken<Collection<UserGroup>>() {
                                }.getType();
                                List<UserGroup> userGroupsList = gson.fromJson(propertyText, collectionType);
                                if (userGroupsList != null && userGroupsList.size() > 0) {
                                    postControl.setGroups(userGroupsList);
                                    Log.d(TAG, "UserGroupsListCheckPC: " + userGroupsList.get(0).getName());
                                }
                            }
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            postControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            postControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            postControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_AUTO_COMPLETION:
                AutoCompletionControl autoCompletionControl = (AutoCompletionControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && autoCompletionControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            autoCompletionControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            autoCompletionControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            autoCompletionControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            autoCompletionControl.setInvisible(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            autoCompletionControl.setDisable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.MIN_CHAR)) {
                            autoCompletionControl.setMinChartoSearch(Integer.parseInt(propertyText));
                        }  else if (property.getValue().contentEquals(PropertiesNames.SEARCH_KEY_AT)) {
                            autoCompletionControl.setSearchKeyAt(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            autoCompletionControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            autoCompletionControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            autoCompletionControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_GPS:
                Gps_Control gpsControl = (Gps_Control) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && gpsControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            gpsControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            gpsControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.LOCATION_MODE)) {
                            gpsControl.setLocationMode(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.LOCATION_ACCURACY)) {
                            gpsControl.setAccuracy(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.GPS_TYPE)) {
                            gpsControl.setGpsType(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INTERVAL_TYPE)) {
                            gpsControl.setTypeOfInterval(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INTERVAL_DISTANCE)) {
                            gpsControl.setDistanceInMeters(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.INTERVAL_TIME)) {
                            gpsControl.setTimeInMinutes(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            gpsControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            gpsControl.setInvisible(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            gpsControl.setDisable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.LOCATION_FORMAT)) {
                            gpsControl.setEnableLocationFormatting(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.LOCATION_FORMAT_TYPE)) {
                            gpsControl.setLocationFormat(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.SAVE_LATLONG_SEPARATE_COL)) {
                            gpsControl.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.SHOW_MAP)) {
                            gpsControl.setShowMap(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            gpsControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            gpsControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            gpsControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_CHART:
                ChartControl chartControl = (ChartControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && chartControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            chartControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            chartControl.setHint(propertyText);
                        }else if (property.getValue().contentEquals(PropertiesNames.HIDE_LEGENDS)) {
                            chartControl.hideLegends(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            chartControl.setHideDisplayName(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            chartControl.setVisibility(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            chartControl.setEnabled(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            chartControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            chartControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            chartControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_DATA_VIEWER:
                DataViewer dataViewer = (DataViewer) List_ControlClassObjects.get(controlName);
                if (propertiesList != null && propertiesList.size() > 0) {
                    dataViewer.dataViewerSetPropertiesAction(propertiesList);
                }
                break;
            case CONTROL_TYPE_DATA_TABLE:
                DataTableControl dataTableControl = (DataTableControl) List_ControlClassObjects.get(controlName);
                if (propertiesList != null && propertiesList.size() > 0) {
                    dataTableControl.dataTableSetPropertiesAction(propertiesList);
                }
                break;
            case CONTROL_TYPE_DATA_CONTROL:
                DataControl dataControl = (DataControl) List_ControlClassObjects.get(controlName);
                if (propertiesList != null && propertiesList.size() > 0) {
                    dataControl.dataControlSetPropertiesAction(propertiesList);
                }
                break;
            case CONTROL_TYPE_CALENDAR_EVENT:
                CalendarEventControl calendarEventControl = (CalendarEventControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && calendarEventControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            calendarEventControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            calendarEventControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            calendarEventControl.setHideDisplayName(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            calendarEventControl.setVisibilitySP(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.WEEK_DAYS)) {
                            calendarEventControl.setWeekDays(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            calendarEventControl.setEnabled(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            calendarEventControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            calendarEventControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            calendarEventControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_MAP:
                MapControl mapControl = (MapControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && mapControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            mapControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            mapControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            mapControl.setHideDisplayName(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.MAP_VIEW)) {
                            mapControl.setMapViewSP(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.MAP_VIEW_TYPE)) {
                            mapControl.setMapViewType(propertyText);
                        }  else if (property.getValue().contentEquals(PropertiesNames.MAP_POINTS_LIST)) {
                            List<String> itemValues = new ArrayList<>();
                            itemValues.add(propertyText);
                            RenderingType renderingType = new RenderingType();
                            renderingType.setItem(itemValues);
                            List<RenderingType> renderingTypeList = new ArrayList<RenderingType>();
                            renderingTypeList.add(renderingType);
                            mapControl.setRenderingTypeList(renderingTypeList);
                        } else if (property.getValue().contentEquals(PropertiesNames.MAP_HEIGHT)) {
                            mapControl.setMapHeight(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.BASE_MAP)) {
                            mapControl.setBaseMap(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.MAP_ICON)) {
                            mapControl.setMapIcon(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.CUSTOM_MAP_ICON)) {
                            mapControl.setMapIcon(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.CURRENT_LOCATION)) {
                            mapControl.setShowCurrentLocation(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.ZOOM_CONTROLS)) {
                            mapControl.setZoomControls(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            mapControl.setVisibilitySP(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            mapControl.setEnabled(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            mapControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            mapControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            mapControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_PROGRESS:
                ProgressControl progressControl = (ProgressControl) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && progressControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            progressControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            progressControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            progressControl.setHideDisplayName(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            progressControl.setVisibilitySP(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.PROGRESS_MAX_VALUE)) {
                            progressControl.setProgress_maxvalue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.PROGRESS_ACTUAL_VALUE)) {
                            progressControl.setProgress_actualvalue(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.PROGRESS_HIDE_MAX_VALUE)) {
                            progressControl.setHide_progress_maxvalue(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.PROGRESS_HIDE_ACTUAL_VALUE)) {
                            progressControl.setHide_progress_actualvalue(Boolean.valueOf(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.PROGRESS_HEX_COLOR) || (property.getValue().contentEquals(PropertiesNames.PROGRESS_COLOR))) {
                            progressControl.setProgressColorHex(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            progressControl.setEnabled(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            progressControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            progressControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            progressControl.setTextStyle(propertyText);
                        }
                    }
                }
                break;
            case CONTROL_TYPE_LiveTracking:
                LiveTracking liveTrackingControl = (LiveTracking) List_ControlClassObjects.get(controlName);
                for (int i = 0; i < propertiesList.size(); i++) {
                    Param property = propertiesList.get(i);
                    if (property.getName().contentEquals("ExpressionBuilder")) {
                        propertyText = expressionMainHelper.ExpressionHelper(context, property.getText());
                    } else {
                        propertyText = property.getText();
                    }
                    if (!propertyText.contentEquals("") && liveTrackingControl != null) {
                        if (property.getValue().contentEquals(PropertiesNames.DISPLAY_NAME)) {
                            liveTrackingControl.setDisplayName(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HINT)) {
                            liveTrackingControl.setHint(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.HIDE_DISPLAY_NAME)) {
                            liveTrackingControl.setHideDisplayName(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.INVISIBLE)) {
                            liveTrackingControl.setInvisible(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.READ_ONLY)) {
                            liveTrackingControl.setDisable(Boolean.parseBoolean(propertyText));
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_SIZE)) {
                            liveTrackingControl.setTextSize(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_COLOR)) {
                            liveTrackingControl.setTextColor(propertyText);
                        } else if (property.getValue().contentEquals(PropertiesNames.FONT_STYLE)) {
                            liveTrackingControl.setTextStyle(
                                    propertyText);
                        }
                            /*else if (property.getValue().contentEquals(PropertiesNames.LOCATION_MODE)) {
                                liveTrackingControl.setLocationMode(propertyText);
                            } else if (property.getValue().contentEquals(PropertiesNames.LOCATION_ACCURACY)) {
                                liveTrackingControl.setAccuracy(propertyText);
                            } else if (property.getValue().contentEquals(PropertiesNames.GPS_TYPE)) {
                                liveTrackingControl.setGpsType(propertyText);
                            } else if (property.getValue().contentEquals(PropertiesNames.INTERVAL_TYPE)) {
                                liveTrackingControl.setTypeOfInterval(propertyText);
                            } else if (property.getValue().contentEquals(PropertiesNames.INTERVAL_DISTANCE)) {
                                liveTrackingControl.setDistanceInMeters(propertyText);
                            } else if (property.getValue().contentEquals(PropertiesNames.INTERVAL_TIME)) {
                                liveTrackingControl.setTimeInMinutes(propertyText);
                            }else if (property.getValue().contentEquals(PropertiesNames.LOCATION_FORMAT)) {
                                liveTrackingControl.setEnableLocationFormatting(Boolean.parseBoolean(propertyText));
                            }else if (property.getValue().contentEquals(PropertiesNames.LOCATION_FORMAT_TYPE)) {
                                liveTrackingControl.setLocationFormat(propertyText);
                            }else if (property.getValue().contentEquals(PropertiesNames.SAVE_LATLONG_SEPARATE_COL)) {
                                liveTrackingControl.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(propertyText));
                            }else if (property.getValue().contentEquals(PropertiesNames.SHOW_MAP)) {
                                liveTrackingControl.setShowMap(Boolean.parseBoolean(propertyText));
                            }*/
                    }
                }
                break;

        }
    }

    @Override
    public void onLocationUpdate(String data) {
        showProgressDialog(getString(R.string.loading));
        inparam_current_location = data;
        AppConstants.CURRENT_LOCATION = inparam_current_location;
        AppConstants.GlobalObjects.setCurrent_GPS(inparam_current_location);
//        SetValue(Global_ActionObj);
        loadControl_EventObject(locHelper.getControl_EventObject());
      /*  if(ActionIndex==0){
            EventExecute();
        }*/
    }

    private float spacing(MotionEvent event) {
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
        return (float) Math.sqrt(x * x + y * y);
    }

    private void midPoint(PointF point, MotionEvent event) {
        float x = event.getX(0) + event.getX(1);
        float y = event.getY(0) + event.getY(1);
        point.set(x / 2, y / 2);
    }

    private void dumpEvent(MotionEvent event) {
        String[] names = {"DOWN", "UP", "MOVE", "CANCEL", "OUTSIDE", "POINTER_DOWN", "POINTER_UP", "7?", "8?", "9?"};
        StringBuilder sb = new StringBuilder();
        int action = event.getAction();
        int actionCode = action & MotionEvent.ACTION_MASK;
        sb.append("event ACTION_").append(names[actionCode]);

        if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {
            sb.append("(pid ").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);
            sb.append(")");
        }

        sb.append("[");
        for (int i = 0; i < event.getPointerCount(); i++) {
            sb.append("#").append(i);
            sb.append("(pid ").append(event.getPointerId(i));
            sb.append(")=").append((int) event.getX(i));
            sb.append(",").append((int) event.getY(i));
            if (i + 1 < event.getPointerCount())
                sb.append(";");
        }

        sb.append("]");
        Log.d("Touch Events ---------", sb.toString());
    }



    /*
     * --------------------------------------------------------------------------
     * Method: spacing Parameters: MotionEvent Returns: float Description:
     * checks the spacing between the two fingers on touch
     * ----------------------------------------------------
     */

    public Bitmap cameraOrientations(String filePath) {
        Bitmap cameraBitmap = null;
        Bitmap rotatedBitmap = null;
        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
        bmOptions.inJustDecodeBounds = false;
        bmOptions.inPurgeable = true;
        bmOptions.inBitmap = cameraBitmap;
        bmOptions.inMutable = true;

        cameraBitmap = BitmapFactory.decodeFile(filePath, bmOptions);
        // Your image file path
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        cameraBitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);

        try {
            ExifInterface exif = null;
            try {
                exif = new ExifInterface(filePath);
            } catch (IOException e) {
                e.printStackTrace();
            }
            float rotation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);
            System.out.println(rotation);
            Log.d("CamOrientation", "" + rotation);

            float rotationInDegrees = exifToDegrees(rotation);
            System.out.println(rotationInDegrees);
            Log.d("CamOrientationChanged", "" + rotationInDegrees);
            Matrix matrix = new Matrix();
            matrix.postRotate(rotationInDegrees);

            rotatedBitmap = Bitmap.createBitmap(cameraBitmap, 0, 0, cameraBitmap.getWidth(), cameraBitmap.getHeight(), matrix, true);
            FileOutputStream fos = new FileOutputStream(filePath);
            rotatedBitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
            fos.write(bos.toByteArray());
            cameraBitmap.recycle();
            System.gc();
            fos.flush();
            fos.close();

        } catch (Exception e) {
            Log.d("CameraOrientation", "" + e);
        }
        return rotatedBitmap;
    }

    /*
     * --------------------------------------------------------------------------
     * Method: midPoint Parameters: PointF object, MotionEvent Returns: void
     * Description: calculates the midpoint between the two fingers
     * ------------------------------------------------------------
     */

    private LinearLayout getInnerSubFormContainer(LinearLayout ll_innerSubFormContainer, String controlName) {
        LinearLayout ll_sub_container = new LinearLayout(context);
        HashMap<String, String> controlPositionInUI = new HashMap<>();
        if (context instanceof MainActivity) {
            controlPositionInUI = AppConstants.controlPositionInUIAllApps.get(((MainActivity) context).dataCollectionObject.getApp_Name());
        }
        if (ll_innerSubFormContainer.getChildCount() != 0) {
            String controlPos = controlPositionInUI.get(controlName);
            if (controlPos != null && controlPos.contains("$")) {//If control is in sublayout
                Log.d("controlPos: ", controlPos + controlName);
                String[] positions = controlPos.split("\\$");
                int layoutPosition = Integer.parseInt(positions[0]);
                int sublayoutPosition = Integer.parseInt(positions[1]);
                ll_sub_container = (LinearLayout) ((LinearLayout) ((HorizontalScrollView) ((LinearLayout) ll_innerSubFormContainer.getChildAt(layoutPosition)).getChildAt(1)).getChildAt(0)).getChildAt(sublayoutPosition);
            } else {
                ll_sub_container = (LinearLayout) ((LinearLayout) ll_innerSubFormContainer.getChildAt(Integer.parseInt(controlPos))).getChildAt(2);
            }
        }
        return ll_sub_container;
    }

    public void DefultAction() {
        try {
            t1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (isNetworkStatusAvialable(context) && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Offline")) {
                                if (stringListFiles != null && stringListFiles.size() > 0) {
                                    int filesCount = stringListFiles.size();
                                    sendFilesToServer(stringListFiles.get(fileIndex), fileIndex, filesCount);
                                } else {
                                    t3.start();
                                    try {
                                        t3.join();
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                }
                            } else {
                                t2.start();
                                try {
                                    t2.join();
                                } catch (InterruptedException e) {
                                    Log.d(TAG, "senddataException " + e);
                                }
                            }
                        }
                    });
                }
            });

            t1.start();
            t1.join();

            t2 = new Thread(new Runnable() {
                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            try {
                                JSONArray array = new JSONArray();
                                JSONArray arraySubform = new JSONArray();
                                JSONObject jsonObject = new JSONObject();
                                mainObject = new JSONObject();
                                mainObject.put("OrgId", strOrgId);
                                mainObject.put("PageName", strAppName);
                                mainObject.put("CreatedUserID", strCreatedBy);
                                mainObject.put("PostId", strPostId);
                                mainObject.put("SubmittedUserPostID", strPostId);
                                mainObject.put("SubmittedUserID", strUserId);
                                mainObject.put("DistributionID", strDistributionId);
                                mainObject.put("IMEI", "1234");
//                                    mainObject.put("IfautoincrementControls", isAutoNumbersAvaliable);
                                //--check_list--//
                                mainObject.put("IsCheckList", String.valueOf(AppConstants.hasCheckList));
                                mainObject.put("ChecklistNames", AppConstants.checkListData);
                                //--check_list--//
                                mainObject.put("IfautoincrementControls", String.valueOf(isAutoNumbersAvaliable));
                                JSONObject autojJsonObject = new JSONObject();
                                if (isAutoNumbersAvaliable) {
                                    mainObject.put("IfautoincrementControls", "true");
                                    JSONObject jsonObjectAuto = jArrayAutoIncementControls.getJSONObject(0);
                                    ExpressionMainHelper ehelper = new ExpressionMainHelper();
                                    String prefixValue = ehelper.ExpressionHelper(context, jsonObjectAuto.getString("Prefix") + "Z");

                                    autojJsonObject.put("ControlName", jsonObjectAuto.getString("ControlName"));
                                    String strPrefix = prefixValue.substring(0, prefixValue.length() - 1);
                                    autojJsonObject.put("Prefix", strPrefix);
                                    autojJsonObject.put("Suffix", jsonObjectAuto.getString("Suffix"));
                                    String suffix1Value = "", strSuffix1 = "";
                                    if (jsonObjectAuto.has("Suffix1")) {
                                        suffix1Value = ehelper.ExpressionHelper(context, jsonObjectAuto.getString("Suffix1") + "Z");
                                    }
                                    if (!suffix1Value.contentEquals("") && suffix1Value.length() > 1) {
                                        strSuffix1 = suffix1Value.substring(0, suffix1Value.length() - 1);
                                        autojJsonObject.put("Suffix1", strSuffix1);
                                    } else {
                                        autojJsonObject.put("Suffix1", suffix1Value);
                                    }
                                    if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                    } else {
                                        jsonObject.put("AutoIncrementControl", autojJsonObject);
                                    }
                                } else {
                                    mainObject.put("IfautoincrementControls", "false");
                                    if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                    } else {
                                        jsonObject.put("AutoIncrementControl", autojJsonObject);
                                    }
                                }

                                if (strChildForm != null && strChildForm.equalsIgnoreCase("ChildForm")) {

                                    mainObject.put("OperationType", "NEW TABLE^^");
//                                        mainObject.put("OperationType", "");
                                    mainObject.put("TransID", strTransactionId);
//                                        mainObject.put("TransID", "");
                                    mainObject.put("sno", "");
                                } else if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                    mainObject.put("TransID", strTransactionId);
                                    mainObject.put("Action", "Update");
                                    mainObject.put("UserId", strUserId);
                                    mainObject.put("subFormInMainForm", !dataCollectionObject.getTableSettingsObject().getSubFormInMainForm().equalsIgnoreCase(""));
                                } else {
                                    mainObject.put("OperationType", "");
                                    mainObject.put("TransID", "");
                                }
//Auto Number
//                                mainObject.put("TableName", strCreatedBy + "_" + ImproveHelper.getTableNameWithOutSpace(strAppName));
                                mainObject.put("TableName", tableName);
                                mainObject.put("TypeofSubmission", "");

                                mainObject.put("insertColumns", new JSONArray());

                                mainObject.put("UpdateColumns", new JSONArray());
                                if (dataCollectionObject.getTableSettingsType() == null) {
                                    mainObject.put("tableSettingsType", "Create New Table");
                                } else {
                                    mainObject.put("tableSettingsType", dataCollectionObject.getTableSettingsType());
                                }

//nk gps
                                for (int j = 0; j < stringListSubmit.size(); j++) {
                                    jsonObject.put(stringListSubmit.get(j).split("\\|")[0], (stringListSubmit.get(j) + " ").split("\\|")[1].trim());
                                }
                                boolean mainFormInArray = false;
                                if (subFormStringList.size() > 0) {
                                    for (int i = 0; i < subFormStringList.size(); i++) {
                                        List<List<String>> subFormDataList = subFormStringList.get(i);

                                        if (subFormDataList.get(0).size() > 0) {

                                            String temp = subFormDataList.get(0).get(0).split("\\|")[0];
                                            String subFormName = temp.substring(0, temp.length() - 2);
//
                                            if (dataCollectionObject.getTableSettingsObject() != null && !dataCollectionObject.getTableSettingsObject().getSubFormInMainForm().equalsIgnoreCase("") && dataCollectionObject.getTableSettingsObject().getSubFormInMainForm().equalsIgnoreCase(subFormName)) {
                                                //For Edit
                                                if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm") && jsonObjChildForm.has("SubForm")) {
                                                    JSONArray subformJsonArrayData = jsonObjChildForm.getJSONArray("SubForm").getJSONObject(0).getJSONArray(subFormName);
                                                    String deletedRowdIDs = improveHelper.checkForDeletedRows(subformJsonArrayData, AppConstants.transIdsOfSubforms.get(subFormName));
                                                    if (!deletedRowdIDs.equalsIgnoreCase("")) {
                                                        mainObject.put("DeleteRowStatus", "true");
                                                        mainObject.put("DeleteRowIds", deletedRowdIDs);
                                                    } else {
                                                        mainObject.put("DeleteRowStatus", "false");
                                                        mainObject.put("DeleteRowIds", "");
                                                    }
                                                } else {
                                                    mainObject.put("DeleteRowStatus", "false");
                                                    mainObject.put("DeleteRowIds", "");
                                                }
                                                for (int j1 = 0; j1 < subFormDataList.size(); j1++) {// Rows Loop
                                                    List<String> rowData = subFormDataList.get(j1);
                                                    JSONObject sfRowObject = new JSONObject();

                                                    for (int k = 1; k < rowData.size(); k++) {//controls loop
                                                        String[] splittedString = rowData.get(k).split("\\|");
                                                        if (splittedString.length > 1) {
                                                            String columnName = splittedString[0];
                                                            String columnValue = splittedString[1];
                                                            if (dataCollectionObject.getList_Table_Columns().contains(columnName)) {
                                                                sfRowObject.put(columnName, columnValue);
                                                               /* //--For edit--//
                                                                if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                                    sfRowObject.put("TransID", getTransId(subFormName, j1));
                                                                }*/
                                                            }
                                                        } else {
                                                            String columnName = splittedString[0];
                                                            String columnValue = "";
                                                            sfRowObject.put(columnName, columnValue);
                                                        }
                                                    }

                                                    array.put(sfRowObject);
                                                }

                                                for (int l = 0; l < array.length(); l++) {
                                                    JSONObject rowObject = array.getJSONObject(l);
                                                    if (jsonObject.names() != null) {
                                                        for (int j = 0; j < jsonObject.names().length(); j++) {
                                                            String key = (String) jsonObject.names().get(j);
                                                            if(!key.equalsIgnoreCase("AutoIncrementControl")){
                                                                String value = (String) jsonObject.get(key);
                                                                rowObject.put(key, value);
                                                            }}
                                                    }
                                                    //--For edit--//
                                                    if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                        rowObject.put("TransID", getTransId(subFormName, l));
                                                    }
                                                }
                                                mainFormInArray = true;
                                                break;
                                            } else {
                                                if (dataCollectionObject.getTableSettingsType() == null || (dataCollectionObject.getTableSettingsType() != null && !dataCollectionObject.getTableSettingsType().equalsIgnoreCase("None"))) {
                                                    if (!mainFormInArray)
                                                        array.put(jsonObject);
                                                    mainFormInArray = true;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (dataCollectionObject.getTableSettingsType() == null || (dataCollectionObject.getTableSettingsType() != null && !dataCollectionObject.getTableSettingsType().equalsIgnoreCase("None"))) {
                                        array.put(jsonObject);
                                        mainFormInArray = true;
                                    }
                                }

                                if (dataCollectionObject.getTableSettingsType() == null || (dataCollectionObject.getTableSettingsType() != null && !dataCollectionObject.getTableSettingsType().equalsIgnoreCase("None"))) {
                                    if (!mainFormInArray)
                                        array.put(jsonObject);
                                }

//For edit
                                JSONArray subformJsonArray = new JSONArray();
                                if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm") && jsonObjChildForm.has("SubForm")) {
                                    subformJsonArray = jsonObjChildForm.getJSONArray("SubForm");
                                }
                                int pos = 0;
                                for (int i = 0; i < subFormStringList.size(); i++) {

                                    if (subFormStringList.get(i).get(0).size() > 0) {
                                        String subFormName = subFormStringList.get(i).get(0).get(0).split("\\|")[0];
                                        String subFormName_New = subFormName.substring(0, subFormName.length() - 2);
//                                        //AutoNumber//
                                        JSONObject subformAutoNumberJsonObj = null;
                                        if (List_ControlClassObjects.get(subFormName_New) instanceof GridControl) {
                                            subformAutoNumberJsonObj = ((GridControl) List_ControlClassObjects.get(subFormName_New)).getSubFormAutoNumberJSON();
                                        } else if (List_ControlClassObjects.get(subFormName_New) instanceof SubformView) {
                                            subformAutoNumberJsonObj = ((SubformView) List_ControlClassObjects.get(subFormName_New)).getSubFormAutoNumberJSON();
                                        }
//                                    //AutoNumber//
                                        //--For edit--//
                                        JSONArray subFormdatFieldsArray = new JSONArray();
                                        JSONArray subformJsonArrayData = new JSONArray();
                                        String tableSettingsType = subFormTableSettingsTypeMap.get(subFormName_New);
                                        if (tableSettingsType != null && tableSettingsType.contentEquals("Create New Table")) {
                                            JSONObject subformJson = new JSONObject();
                                            if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                if (subformJsonArray.length() > 0 && subformJsonArray.getJSONObject(pos).has(subFormName_New)) {
                                                    subformJsonArrayData = subformJsonArray.getJSONObject(pos).getJSONArray(subFormName_New);
                                                }
                                                pos++;
                                            }
                                            //--For edit--//
                                            subformJson.put("SubFormName", subFormName_New);
//                                            subformJson.put("TableName", strCreatedBy + "_" + ImproveHelper.getTableNameWithOutSpace(strAppName) + "_" + subFormName_New);
                                            subformJson.put("TableName", getSubformTableName(subFormName_New));
                                            //--check_list--//
                                            if (AppConstants.isSubformHasCheckList.get(subFormName_New) != null) {
                                                subformJson.put("IsCheckList", String.valueOf(AppConstants.isSubformHasCheckList.get(subFormName_New)));
                                                subformJson.put("ChecklistNames", AppConstants.subformCheckListData.get(subFormName_New));
                                            } else {
                                                subformJson.put("IsCheckList", "false");
                                                subformJson.put("ChecklistNames", new JSONArray());
                                            }
                                            //--check_list--//
//                                        JSONArray subFormdatFieldsArray = new JSONArray();

                                            for (int j = 0; j < subFormStringList.get(i).size(); j++) {
                                                JSONObject row = new JSONObject();

                                                for (int k = 1; k < subFormStringList.get(i).get(j).size(); k++) {

                                                    String[] splittedString = subFormStringList.get(i).get(j).get(k).split("\\|");
                                                    if (splittedString.length > 1) {
                                                        String columnName = splittedString[0];
                                                        String columnValue = splittedString[1];
                                                        row.put(columnName, columnValue);
                                                    } else {
                                                        String columnName = splittedString[0];
                                                        String columnValue = "";
                                                        row.put(columnName, columnValue);
                                                    }
                                                }
                                                List<String> subFormColumns = new ArrayList<>();
                                                if (ImproveHelper.checkSubFormHasMainFormColumns(subFormName_New, dataCollectionObject)) {
                                                    subFormColumns = ImproveHelper.getSubFormColumns(subFormName_New, dataCollectionObject);
                                                }
                                                if (subFormColumns.size() > 0) {
                                                    for (int j1 = 0; j1 < stringListSubmit.size(); j1++) {
                                                        if (subFormColumns.contains(stringListSubmit.get(j1).split("\\|")[0])) {
                                                            row.put(stringListSubmit.get(j1).split("\\|")[0], (stringListSubmit.get(j1) + " ").split("\\|")[1].trim());
                                                        }
                                                    }
                                                }
                                                if (subFormColumns.size() > 0 && subFormsAutoNumberArraysMap.get(subFormName_New).length() > 0) {
                                                    //if subform has mainform columns
                                                    if (subFormColumns.contains(jArrayAutoIncementControls.getJSONObject(0).get("ControlName"))) {
                                                        subformJson.put("MainFormAutoControlInSubform", "true");
                                                    } else {
                                                        subformJson.put("MainFormAutoControlInSubform", "false");
                                                    }
                                                } else {
                                                    subformJson.put("MainFormAutoControlInSubform", "false");
                                                }
                                                if (!checkForEmptyRows(row)) {
                                                    //--For edit--//
                                                    if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                        row.put("TransID", getTransId(subFormName_New, j));
                                                    }
                                                    //--For edit--//
                                                }
                                                subFormdatFieldsArray.put(row);
                                                if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                    String deletedRowdIDs = improveHelper.checkForDeletedRows(subformJsonArrayData, AppConstants.transIdsOfSubforms.get(subFormName_New));
                                                    if (!deletedRowdIDs.equalsIgnoreCase("")) {
                                                        subformJson.put("DeleteRowStatus", "true");
                                                        subformJson.put("DeleteRowIds", deletedRowdIDs);
                                                    } else {
                                                        subformJson.put("DeleteRowStatus", "false");
                                                        subformJson.put("DeleteRowIds", "");
                                                    }
                                                } else {
                                                    subformJson.put("DeleteRowStatus", "false");
                                                    subformJson.put("DeleteRowIds", "");
                                                }

                                                subformJson.put("DataFields", subFormdatFieldsArray);
                                                subformJson.put("TypeofSubmission", "");
                                                subformJson.put("insertColumns", new JSONArray());
                                                /*Subform AutoNumber Array*/
                                                if (subFormsAutoNumberArraysMap.get(subFormName_New).length() > 0) {
                                                    if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                    } else {
                                                        if (subformAutoNumberJsonObj != null) {
                                                            row.put("AutoIncrementControl", subformAutoNumberJsonObj.getJSONArray(subFormName_New).get(j));
                                                        } else {
                                                            row.put("AutoIncrementControl", new JSONArray());
                                                        }
                                                    }
                                                    subformJson.put("IfautoincrementControls", "true");
                                                } else {
                                                    subformJson.put("IfautoincrementControls", "false");
                                                    if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                                    } else {
                                                        row.put("AutoIncrementControl", new JSONArray());
                                                    }
                                                }
                                                /*Subform AutoNumber Array*/
                                            }
                                            subformJson.put("UpdateColumns", new JSONArray());
                                            subformJson.put("tableSettingsType", "Create New Table");
                                            //closing
                                            if (subformJson.getJSONArray("DataFields").length() > 0) {
                                                arraySubform.put(subformJson);
                                            }
                                        }
                                    }

                                }

                                mainObject.put("DataFields", array);
                                mainObject.put("SubFormDataFields", arraySubform);

                                if (mainObject != null) {

                                    switch (dataCollectionObject.getApp_Mode()) {
                                        case "Online":
                                            if (isNetworkStatusAvialable(context)) {
                                                sendDataToServer(mainObject);
                                            } else {
                                                Toast.makeText(context, getString(R.string.no_internet), Toast.LENGTH_SHORT).show();
                                            }
                                            break;
                                        case "Hybrid":
                                            if (app_edit.equalsIgnoreCase("New") && isNetworkStatusAvialable(context)) {
                                                sendDataToServer(mainObject);
                                            } else if (app_edit.equalsIgnoreCase("New") && !isNetworkStatusAvialable(context)) {
                                                saveOfflineData();
                                            } else if (app_edit.equalsIgnoreCase("Edit")) {
                                                updateOfflineData();
                                            }
                                            break;
                                        case "Offline":
                                            if (app_edit.equalsIgnoreCase("Edit")) {
                                                updateOfflineData();
                                            } else {
                                                saveOfflineData();
                                            }
                                            break;
                                    }
                                } } catch (Exception e) {
                                Log.d(TAG, "Exception" + e);
//                                Toast.makeText(context, "String Preparation error", Toast.LENGTH_SHORT).show();
                                Toast.makeText(context, "Default Action"+e.toString(), Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                }
            });


            t3 = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            if (tempList != null && tempList.size() > 0 && (isNetworkStatusAvialable(context) && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Offline"))) {

                                int filesCount = tempList.size();
                                int index = 0;

                                /*for (int fileCount = 0; fileCount < tempList.size(); fileCount++) {*/

                                sendSubFormFilesToServer(tempList.get(index), index, filesCount);
                                // }

                            } else {
                                t2.start();

                                try {
                                    t2.join();
                                } catch (InterruptedException e) {
                                    Log.d(TAG, "senddataException " + e);
                                }
                            }
                        }
                    });
                }
            });
        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "DefultAction", e);
        }
    }

    private String getSubformTableName(String subFormName_new) {
        String tableName = null;
        if (subFormDetails != null) {
            for (SubFormTableColumns subFormTableColumns : subFormDetails) {
                if (subFormTableColumns.getSubFormName().equalsIgnoreCase(subFormName_new)) {
                    return subFormTableColumns.getTableName();
                }
            }
        }
        return tableName;
    }

    private String getSubformFormName(String subFormName_new) {
        String formName = null;
        if (subFormDetails != null) {
            for (SubFormTableColumns subFormTableColumns : subFormDetails) {
                if (subFormTableColumns.getSubFormName().equalsIgnoreCase(subFormName_new)) {
                    return subFormTableColumns.getSubFormName();
                }
            }
        }
        return formName;
    }

    public void DefaultActionMapExisting() {
        try {
            t1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (isNetworkStatusAvialable(context) && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Offline")) {
                                if (stringListFiles != null && stringListFiles.size() > 0) {
                                    int filesCount = stringListFiles.size();
                                    sendFilesToServer(stringListFiles.get(fileIndex), fileIndex, filesCount);
                                } else {
                                    t3.start();
                                    try {
                                        t3.join();
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                }
                            } else {
                                t2.start();
                                try {
                                    t2.join();
                                } catch (InterruptedException e) {
                                    Log.d(TAG, "senddataException " + e);
                                }
                            }
                        }
                    });
                }
            });

            t1.start();
            t1.join();

            t2 = new Thread(new Runnable() {
                @Override
                public void run() {

                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            try {

                                mainObject = new JSONObject();
                                JSONArray array = new JSONArray();
                                JSONArray arraySubform = new JSONArray();
                                JSONObject jsonObject = new JSONObject();

                                mainObject.put("OrgId", strOrgId);
                                mainObject.put("PageName", strAppName);
                                mainObject.put("CreatedUserID", strCreatedBy);
                                mainObject.put("PostId", strPostId);
                                mainObject.put("SubmittedUserPostID", strPostId);
                                mainObject.put("SubmittedUserID", strUserId);
                                mainObject.put("DistributionID", strDistributionId);
                                mainObject.put("IMEI", "1234");
                                //--check_list--//
                                mainObject.put("IsCheckList", String.valueOf(AppConstants.hasCheckList));
                                mainObject.put("ChecklistNames", AppConstants.checkListData);
                                //--check_list--//

                                if (dataCollectionObject.getTableSettingsType() != null && !dataCollectionObject.getTableSettingsType().equalsIgnoreCase("None")) {
                                    if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                                        if (!dataCollectionObject.getMapExistingType().equalsIgnoreCase("Update")) {
                                            addAutoNumberToSubmitJson(jsonObject);
                                        } else {
                                            mainObject.put("IfautoincrementControls", "false");
                                            jsonObject.put("AutoIncrementControl", new JSONArray());
                                        }
                                    } else {
                                        addAutoNumberToSubmitJson(jsonObject);
                                    }
                                } else {
                                    addAutoNumberToSubmitJson(jsonObject);
                                }
                                if (strChildForm != null && strChildForm.equalsIgnoreCase("ChildForm")) {

                                    mainObject.put("OperationType", "NEW TABLE^^");
                                    mainObject.put("TransID", strTransactionId);
                                    mainObject.put("sno", "");
                                } else if (strChildForm != null && strChildForm.equalsIgnoreCase("EditForm")) {
                                    mainObject.put("TransID", strTransactionId);
                                    mainObject.put("Action", "Update");
                                    mainObject.put("UserId", strUserId);
                                } else {
                                    mainObject.put("OperationType", "");
                                    mainObject.put("TransID", "");
                                }

                                if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Create New Table")) {
//                                    mainObject.put("TableName", strCreatedBy + "_" + ImproveHelper.getTableNameWithOutSpace(strAppName));
                                    mainObject.put("TableName", tableName);
                                } else if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                                    mainObject.put("TableName", dataCollectionObject.getExistingTableName());
                                }

                                for (int j = 0; j < stringListSubmit.size(); j++) {

                                    jsonObject.put(stringListSubmit.get(j).split("\\|")[0], (stringListSubmit.get(j) + " ").split("\\|")[1].trim());

                                }

                                //map existing
                                JSONObject jsonObjectMapExistingInsert = new JSONObject();
                                JSONObject jsonObjectMapExistingSetColumns = new JSONObject();
                                JSONArray jsonArrayFilters = new JSONArray();
                                if (dataCollectionObject.getTableSettingsType() != null) {
                                    if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                                        ImproveHelper.fromMapExisting = true;
                                        if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert")) {
                                            for (QueryFilterField_Bean insertFields : dataCollectionObject.getMainTableInsertFields()) {
                                                if (isAutoNumbersAvaliable) {
//                                                    String cType = getControlType(dataCollectionObject.getControls_list(), insertFields.getField_Global_Value());
                                                    boolean isAutoNumberControl = isAutoNumberControl(insertFields.getField_Global_Value());
                                                    if (!isAutoNumberControl) {
                                                        String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                        jsonObjectMapExistingInsert.put(insertFields.getField_Name(), fieldValue);
                                                    } else if (isAutoNumberControl && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
                                                        addAutoNumberToSubmitJsonMapExisting(insertFields.getField_Name(), insertFields.getField_Global_Value(), jsonObjectMapExistingInsert);
                                                    } else if (isAutoNumberControl && isNetworkStatusAvialable(context) && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Hybrid")) {
                                                        addAutoNumberToSubmitJsonMapExisting(insertFields.getField_Name(), insertFields.getField_Global_Value(), jsonObjectMapExistingInsert);
                                                    } else if (isAutoNumberControl && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
                                                        String[] autonumberData = getAutoNumberValue(insertFields.getField_Name(), dataCollectionObject.getExistingTableName(), false, null, "");
                                                        jsonObjectMapExistingInsert.put(insertFields.getField_Name(), autonumberData[0]);
                                                        jsonObjectMapExistingInsert.put("AutoIncrementVal", autonumberData[1]);
                                                        jsonObjectMapExistingInsert.put("AutoNumberJson", autonumberData[2]);
                                                    }

                                                } else {
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                    jsonObjectMapExistingInsert.put(insertFields.getField_Name(), fieldValue);
                                                }
                                            }
                                        } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Update")) {
                                            for (QueryFilterField_Bean setColumns : dataCollectionObject.getMainTableUpdateFields()) {
                                                if (!setColumns.isField_IsDeleted()) {
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, setColumns.getField_Global_Value());
                                                    jsonObjectMapExistingSetColumns.put(setColumns.getField_Name(), fieldValue);
                                                }
                                            }
                                            for (QueryFilterField_Bean filterValues : dataCollectionObject.getMainTableWhereConditionFields()) {
                                                if (!filterValues.isField_IsDeleted()) {
                                                    JSONObject jsonObjectMapExistingFilters = new JSONObject();
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, filterValues.getField_Global_Value());
                                                    jsonObjectMapExistingFilters.put("ColumnName", filterValues.getField_Name());
                                                    jsonObjectMapExistingFilters.put("Operator", getOperatorSymbol(filterValues.getField_Operator()));
                                                    jsonObjectMapExistingFilters.put("Value", fieldValue);
                                                    jsonObjectMapExistingFilters.put("Condition", filterValues.getField_and_or());
                                                    jsonObjectMapExistingFilters.put("ColumnType", "Others");
                                                    jsonObjectMapExistingFilters.put("NearBy", "");
                                                    jsonObjectMapExistingFilters.put("NoOfRec", "");
                                                    jsonObjectMapExistingFilters.put("CurrentGPS", "");
                                                    jsonArrayFilters.put(jsonObjectMapExistingFilters);
                                                }
                                            }
                                        } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert or Update")) {
                                            for (QueryFilterField_Bean setColumns : dataCollectionObject.getMainTableUpdateFields()) {
                                                if (!setColumns.isField_IsDeleted()) {
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, setColumns.getField_Global_Value());
                                                    jsonObjectMapExistingSetColumns.put(setColumns.getField_Name(), fieldValue);
                                                }
                                            }
                                            for (QueryFilterField_Bean filterValues : dataCollectionObject.getMainTableWhereConditionFields()) {
                                                if (!filterValues.isField_IsDeleted()) {
                                                    JSONObject jsonObjectMapExistingFilters = new JSONObject();
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, filterValues.getField_Global_Value());
                                                    jsonObjectMapExistingFilters.put("ColumnName", filterValues.getField_Name());
                                                    jsonObjectMapExistingFilters.put("Operator", getOperatorSymbol(filterValues.getField_Operator()));
                                                    jsonObjectMapExistingFilters.put("Value", fieldValue);
                                                    jsonObjectMapExistingFilters.put("Condition", filterValues.getField_and_or());
                                                    jsonObjectMapExistingFilters.put("ColumnType", "Others");
                                                    jsonObjectMapExistingFilters.put("NearBy", "");
                                                    jsonObjectMapExistingFilters.put("NoOfRec", "");
                                                    jsonObjectMapExistingFilters.put("CurrentGPS", "");
                                                    jsonArrayFilters.put(jsonObjectMapExistingFilters);
                                                }
                                            }

                                            for (QueryFilterField_Bean insertFields : dataCollectionObject.getMainTableInsertFields()) {
//                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
//                                                jsonObjectMapExistingInsert.put(insertFields.getField_Name(), fieldValue);
                                                if (isAutoNumbersAvaliable) {
//                                                    String cType = getControlType(dataCollectionObject.getControls_list(), insertFields.getField_Global_Value());
                                                    boolean isAutoNumberControl = isAutoNumberControl(insertFields.getField_Global_Value());
                                                    if (!isAutoNumberControl) {
                                                        String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                        jsonObjectMapExistingInsert.put(insertFields.getField_Name(), fieldValue);
                                                    } else if (isAutoNumberControl && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
                                                        addAutoNumberToSubmitJsonMapExisting(insertFields.getField_Name(), insertFields.getField_Global_Value(), jsonObjectMapExistingInsert);
                                                    } else if (isAutoNumberControl && isNetworkStatusAvialable(context) && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Hybrid")) {
                                                        addAutoNumberToSubmitJsonMapExisting(insertFields.getField_Name(), insertFields.getField_Global_Value(), jsonObjectMapExistingInsert);
                                                    } else if (isAutoNumberControl && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
                                                        String[] autonumberData = getAutoNumberValue(insertFields.getField_Name(), dataCollectionObject.getExistingTableName(), false, null, "");
                                                        jsonObjectMapExistingInsert.put(insertFields.getField_Name(), autonumberData[0]);
                                                        jsonObjectMapExistingInsert.put("AutoIncrementVal", autonumberData[1]);
                                                        jsonObjectMapExistingInsert.put("AutoNumberJson", autonumberData[2]);
                                                    }
                                                } else {
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                    jsonObjectMapExistingInsert.put(insertFields.getField_Name(), fieldValue);
                                                }
                                            }
                                        }
                                    }

                                    mainObject.put("tableSettingsType", dataCollectionObject.getTableSettingsType());

                                    if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Create New Table")) {
                                        array.put(jsonObject);
                                        mainObject.put("TypeofSubmission", "");
                                        mainObject.put("DataFields", array);
                                        mainObject.put("insertColumns", new JSONArray());
                                        mainObject.put("UpdateColumns", new JSONArray());

                                    } else if (dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
                                        mainObject.put("TypeofSubmission", dataCollectionObject.getMapExistingType());
                                        mainObject.put("DataFields", new JSONArray());
                                        if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert")) {
//
                                            JSONArray insertJsonArray = new JSONArray();
                                            insertJsonArray.put(jsonObjectMapExistingInsert);
                                            mainObject.put("insertColumns", insertJsonArray);
                                            mainObject.put("UpdateColumns", new JSONArray());
                                            Log.d(TAG, "run: " + "Insert");
                                        } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Update")) {
                                            mainObject.put("insertColumns", new JSONArray());
//
                                            JSONArray updateJsonArray = new JSONArray();
                                            JSONObject updateColumnsObject = new JSONObject();
                                            updateColumnsObject.put("setColumns", jsonObjectMapExistingSetColumns);
                                            updateColumnsObject.put("filterColumns", jsonArrayFilters);
                                            updateJsonArray.put(updateColumnsObject);
                                            mainObject.put("UpdateColumns", updateJsonArray);
                                            Log.d(TAG, "run: " + "UpdateInsert");
                                        } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert or Update")) {

                                            JSONArray insertJsonArray = new JSONArray();
                                            insertJsonArray.put(jsonObjectMapExistingInsert);
                                            mainObject.put("insertColumns", insertJsonArray);
//
                                            JSONArray updateJsonArray = new JSONArray();
                                            JSONObject updateColumnsObject = new JSONObject();
                                            updateColumnsObject.put("setColumns", jsonObjectMapExistingSetColumns);
                                            updateColumnsObject.put("filterColumns", jsonArrayFilters);
                                            updateJsonArray.put(updateColumnsObject);
                                            mainObject.put("UpdateColumns", updateJsonArray);
                                            Log.d(TAG, "run: " + "UpdateInsert");
                                        }
                                    }
                                } else {
                                    mainObject.put("tableSettingsType", "Create New Table");
                                    array.put(jsonObject);
                                    mainObject.put("TypeofSubmission", "");
                                    mainObject.put("DataFields", array);
                                    mainObject.put("insertColumns", new JSONArray());
                                    mainObject.put("UpdateColumns", new JSONArray());
                                }

                                //Map existing subform
                                if (subFormTableSettingsType != null && subFormTableSettingsType.size() == 0) {
                                    mainObject.put("SubFormDataFields", new JSONArray());
                                } else {
                                    for (int i = 0; i < subFormTableSettingsType.size(); i++) {
                                        JSONObject subformAutoNumberJsonObj = new JSONObject();
                                        if ((i + 1) <= subFormStringList.size()) {

                                            if (subFormTableSettingsType.get(i).equalsIgnoreCase("Create New Table")) {
                                                ImproveHelper.fromMapExisting = false;
                                                JSONObject subformJson = new JSONObject();
                                                String subFormName = subFormStringList.get(i).get(0).get(0).split("\\|")[0];
                                                String subFormName_New = subFormName.substring(0, subFormName.length() - 2);
                                                //AutoNumber//
                                                if (List_ControlClassObjects.get(subFormName_New) instanceof GridControl) {
                                                    subformAutoNumberJsonObj = ((GridControl) List_ControlClassObjects.get(subFormName_New)).getSubFormAutoNumberJSON();
                                                } else if (List_ControlClassObjects.get(subFormName_New) instanceof SubformView) {
                                                    subformAutoNumberJsonObj = ((SubformView) List_ControlClassObjects.get(subFormName_New)).getSubFormAutoNumberJSON();
                                                }
                                                //AutoNumber//
                                                subformJson.put("SubFormName", subFormName_New);
                                                subformJson.put("TableName", getSubformTableName(subFormName_New));
                                                //--check_list--//
                                                if (AppConstants.isSubformHasCheckList.get(subFormName_New) != null) {
                                                    subformJson.put("IsCheckList", String.valueOf(AppConstants.isSubformHasCheckList.get(subFormName_New)));
                                                    subformJson.put("ChecklistNames", AppConstants.subformCheckListData.get(subFormName_New));
                                                } else {
                                                    subformJson.put("IsCheckList", "false");
                                                    subformJson.put("ChecklistNames", new JSONArray());
                                                }
                                                //--check_list--//
                                                JSONArray subFormdataFieldsArray = new JSONArray();
                                                for (int j = 0; j < subFormStringList.get(i).size(); j++) {
                                                    JSONObject row = new JSONObject();
                                                    for (int k = 1; k < subFormStringList.get(i).get(j).size(); k++) {

                                                        String[] splittedString = subFormStringList.get(i).get(j).get(k).split("\\|");
                                                        if (splittedString.length > 1) {
                                                            String columnName = splittedString[0];
                                                            String columnValue = splittedString[1];
                                                            row.put(columnName, columnValue);
                                                        } else {
                                                            String columnName = splittedString[0];
                                                            String columnValue = "";
                                                            row.put(columnName, columnValue);
                                                        }
                                                    }

                                                    //if subform has mainform columns
                                                    if (ImproveHelper.checkSubFormHasMainFormColumns(subFormName_New, dataCollectionObject)) {
                                                        List<String> subFormColumns = ImproveHelper.getSubFormColumns(subFormName_New, dataCollectionObject);
                                                        for (int j1 = 0; j1 < stringListSubmit.size(); j1++) {
                                                            if (subFormColumns.contains(stringListSubmit.get(j1).split("\\|")[0])) {
                                                                row.put(stringListSubmit.get(j1).split("\\|")[0], (stringListSubmit.get(j1) + " ").split("\\|")[1].trim());
                                                            }
                                                        }
                                                        if (subFormColumns.contains(jArrayAutoIncementControls.getJSONObject(0).get("ControlName"))) {
                                                            subformJson.put("MainFormAutoControlInSubform", "true");
                                                        } else {
                                                            subformJson.put("MainFormAutoControlInSubform", "false");
                                                        }
                                                    } else {
                                                        subformJson.put("MainFormAutoControlInSubform", "false");
                                                    }

                                                    subFormdataFieldsArray.put(row);
                                                    subformJson.put("tableSettingsType", subFormControlObjects.get(i).getTableSettingsType());
                                                    subformJson.put("TypeofSubmission", "");
                                                    subformJson.put("DataFields", subFormdataFieldsArray);
                                                    subformJson.put("insertColumns", new JSONArray());
                                                    subformJson.put("UpdateColumns", new JSONArray());
                                                    if (subFormsAutoNumberArraysMap.get(subFormName_New).length() > 0) {
                                                        subformJson.put("IfautoincrementControls", "true");
                                                    } else {
                                                        subformJson.put("IfautoincrementControls", "false");
                                                    }
                                                    /*Subform AutoNumber Array*/
                                                    if (subFormsAutoNumberArraysMap.get(subFormName_New).length() > 0) {
                                                        row.put("AutoIncrementControl", subformAutoNumberJsonObj.getJSONArray(subFormName_New).get(j));
                                                        subformJson.put("IfautoincrementControls", "true");
                                                    } else {
                                                        subformJson.put("IfautoincrementControls", "false");
                                                        row.put("AutoIncrementControl", new JSONArray());
                                                    }
                                                    /*Subform AutoNumber Array*/
                                                }
                                                arraySubform.put(subformJson);

                                                mainObject.put("SubFormDataFields", arraySubform);

                                            } else if (subFormTableSettingsType.get(i).equalsIgnoreCase("Map existing table")) {
                                                ImproveHelper.fromMapExisting = true;
                                                JSONObject subformJson = new JSONObject();
                                                subformJson.put("SubFormName", subFormControlObjects.get(i).getControlName());
                                                subformJson.put("TableName", subFormControlObjects.get(i).getExistingTableName());
                                                subformJson.put("tableSettingsType", subFormControlObjects.get(i).getTableSettingsType());
                                                subformJson.put("TypeofSubmission", subFormControlObjects.get(i).getMapExistingType());
                                                //--check_list--//
                                                if (AppConstants.isSubformHasCheckList.get(subFormControlObjects.get(i).getControlName()) != null) {
                                                    subformJson.put("IsCheckList", String.valueOf(AppConstants.isSubformHasCheckList.get(subFormControlObjects.get(i).getControlName())));
                                                    subformJson.put("ChecklistNames", AppConstants.subformCheckListData.get(subFormControlObjects.get(i).getControlName()));
                                                } else {
                                                    subformJson.put("IsCheckList", "false");
                                                    subformJson.put("ChecklistNames", new JSONArray());
                                                }
//                                                subformJson.put("IsCheckList", String.valueOf(AppConstants.isSubformHasCheckList.get(subFormControlObjects.get(i).getControlName())));
//                                                    subformJson.put("ChecklistNames", AppConstants.subformCheckListData);
//                                                subformJson.put("ChecklistNames", AppConstants.subformCheckListData.get(subFormControlObjects.get(i).getControlName()));
                                                //--check_list--//
                                                subformJson.put("DeleteRowStatus", "false");
                                                subformJson.put("DeleteRowIds", "");
                                                //AutoNumber//

                                                if (subFormsAutoNumberArraysMap.get(subFormControlObjects.get(i).getControlName()).length() > 0) {
                                                    //AutoNumber//
                                                    if (List_ControlClassObjects.get(subFormControlObjects.get(i).getControlName()) instanceof GridControl) {
                                                        subformAutoNumberJsonObj = ((GridControl) List_ControlClassObjects.get(subFormControlObjects.get(i).getControlName())).getSubFormAutoNumberJSON();
                                                    } else if (List_ControlClassObjects.get(subFormControlObjects.get(i).getControlName()) instanceof SubformView) {
                                                        subformAutoNumberJsonObj = ((SubformView) List_ControlClassObjects.get(subFormControlObjects.get(i).getControlName())).getSubFormAutoNumberJSON();
                                                    }
                                                    //AutoNumber//
                                                    subformJson.put("IfautoincrementControls", "true");
                                                } else {
                                                    subformJson.put("IfautoincrementControls", "false");
                                                }
                                                subformJson.put("MainFormAutoControlInSubform", "false");
                                                //AutoNumber//
                                                if (subFormTableMapExistingType.get(i).equalsIgnoreCase("Insert")) {
                                                    JSONArray insertJsonArray = new JSONArray();
                                                    String subformAutoNumber = "";
                                                    for (int j = 0; j < subFormStringList.get(i).size(); j++) {
                                                        JSONObject jsonObjectMapExistingInsertsf = new JSONObject();
                                                        JSONObject jsonObjectMapExistingSetColumnssf = new JSONObject();
                                                        JSONArray jsonArrayFilterssf = new JSONArray();
                                                        AppConstants.SF_Container_position = j;

                                                        for (QueryFilterField_Bean insertFields : subFormControlObjects.get(i).getSubFormInsertFields()) {
                                                            if (subformJson.getBoolean("IfautoincrementControls")) {
                                                                boolean isAutoNumberControl = isAutoNumberControl(subFormControlObjects.get(i).getControlName(), insertFields.getField_Global_Value());
                                                                if (!isAutoNumberControl) {
                                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                                    jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), fieldValue);

                                                                } else if (isAutoNumberControl && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
//                                                                    addAutoNumberToSubformSubmitJsonMapExisting(subFormControlObjects.get(i).getControlName(), insertFields.getField_Name(), insertFields.getField_Global_Value(),jsonObjectMapExistingInsertsf);
                                                                    jsonObjectMapExistingInsertsf.put("AutoIncrementControl", subformAutoNumberJsonObj.getJSONArray(subFormControlObjects.get(i).getControlName()).get(j));
                                                                } else if (isAutoNumberControl && isNetworkStatusAvialable(context) && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Hybrid")) {
                                                                    jsonObjectMapExistingInsertsf.put("AutoIncrementControl", subformAutoNumberJsonObj.getJSONArray(subFormControlObjects.get(i).getControlName()).get(j));
                                                                } else if (isAutoNumberControl && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
                                                                    String[] autonumberData = getAutoNumberValue(insertFields.getField_Name(), subFormControlObjects.get(i).getExistingTableName(), true, subFormControlObjects.get(i).getControlName(), subformAutoNumber);
                                                                    subformAutoNumber = autonumberData[1];
                                                                    jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), autonumberData[0]);
                                                                    jsonObjectMapExistingInsertsf.put("AutoIncrementVal", autonumberData[1]);
                                                                    jsonObjectMapExistingInsertsf.put("AutoNumberJson", autonumberData[2]);

                                                                }
                                                            } else {
                                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                                jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), fieldValue);
                                                            }
                                                        }

                                                        subformJson.put("DataFields", new JSONArray());
                                                        insertJsonArray.put(jsonObjectMapExistingInsertsf);
                                                        subformJson.put("insertColumns", insertJsonArray);
                                                        subformJson.put("UpdateColumns", new JSONArray());

                                                        //Row Insertion

                                                    }

                                                    arraySubform.put(subformJson);
                                                    Log.d(TAG, "testautomap: " + "test");
                                                    mainObject.put("SubFormDataFields", arraySubform);
                                                } else if (subFormTableMapExistingType.get(i).equalsIgnoreCase("Update")) {

                                                    JSONArray updateJsonArray = new JSONArray();

                                                    for (int j = 0; j < subFormStringList.get(i).size(); j++) {

                                                        JSONObject jsonObjectMapExistingSetColumnssf = new JSONObject();
                                                        JSONArray jsonArrayFilterssf = new JSONArray();
                                                        AppConstants.SF_Container_position = j;
                                                        for (QueryFilterField_Bean setColumns : subFormControlObjects.get(i).getSubFormUpdateFields()) {
                                                            if (!setColumns.isField_IsDeleted()) {
                                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, setColumns.getField_Global_Value());
                                                                jsonObjectMapExistingSetColumnssf.put(setColumns.getField_Name(), fieldValue);
                                                            }
                                                        }
                                                        for (QueryFilterField_Bean filterValues : subFormControlObjects.get(i).getSubFormWhereConditionFields()) {
                                                            if (!filterValues.isField_IsDeleted()) {
                                                                JSONObject jsonObjectMapExistingFilters = new JSONObject();
                                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, filterValues.getField_Global_Value());
                                                                jsonObjectMapExistingFilters.put("ColumnName", filterValues.getField_Name());
                                                                jsonObjectMapExistingFilters.put("Operator", getOperatorSymbol(filterValues.getField_Operator()));
                                                                jsonObjectMapExistingFilters.put("Value", fieldValue);
                                                                jsonObjectMapExistingFilters.put("Condition", filterValues.getField_and_or());
                                                                jsonObjectMapExistingFilters.put("ColumnType", "Others");
                                                                jsonObjectMapExistingFilters.put("NearBy", "");
                                                                jsonObjectMapExistingFilters.put("NoOfRec", "");
                                                                jsonObjectMapExistingFilters.put("CurrentGPS", "");
                                                                jsonArrayFilterssf.put(jsonObjectMapExistingFilters);
                                                            }
                                                        }
                                                        subformJson.put("DataFields", new JSONArray());
                                                        subformJson.put("insertColumns", new JSONArray());

                                                        JSONObject updateColumnsObject = new JSONObject();
                                                        updateColumnsObject.put("setColumns", jsonObjectMapExistingSetColumnssf);
                                                        updateColumnsObject.put("filterColumns", jsonArrayFilterssf);
                                                        updateJsonArray.put(updateColumnsObject);
                                                        subformJson.put("UpdateColumns", updateJsonArray);
                                                    }
                                                    arraySubform.put(subformJson);
                                                    mainObject.put("SubFormDataFields", arraySubform);
                                                } else if (subFormTableMapExistingType.get(i).equalsIgnoreCase("Insert or Update")) {
                                                    JSONArray insertJsonArray = new JSONArray();
                                                    JSONArray updateJsonArray = new JSONArray();
                                                    String subformAutoNumber = "";
                                                    for (int j = 0; j < subFormStringList.get(i).size(); j++) {
                                                        JSONObject jsonObjectMapExistingInsertsf = new JSONObject();
                                                        JSONObject jsonObjectMapExistingSetColumnssf = new JSONObject();
                                                        JSONArray jsonArrayFilterssf = new JSONArray();
                                                        AppConstants.SF_Container_position = j;
                                                        for (QueryFilterField_Bean setColumns : subFormControlObjects.get(i).getSubFormUpdateFields()) {
                                                            if (!setColumns.isField_IsDeleted()) {
                                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, setColumns.getField_Global_Value());
                                                                jsonObjectMapExistingSetColumnssf.put(setColumns.getField_Name(), fieldValue);
                                                            }
                                                        }
                                                        for (QueryFilterField_Bean filterValues : subFormControlObjects.get(i).getSubFormWhereConditionFields()) {
                                                            if (!filterValues.isField_IsDeleted()) {
                                                                JSONObject jsonObjectMapExistingFilters = new JSONObject();
                                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, filterValues.getField_Global_Value());
                                                                jsonObjectMapExistingFilters.put("ColumnName", filterValues.getField_Name());
                                                                jsonObjectMapExistingFilters.put("Operator", getOperatorSymbol(filterValues.getField_Operator()));
                                                                jsonObjectMapExistingFilters.put("Value", fieldValue);
                                                                jsonObjectMapExistingFilters.put("Condition", filterValues.getField_and_or());
                                                                jsonObjectMapExistingFilters.put("ColumnType", "Others");
                                                                jsonObjectMapExistingFilters.put("NearBy", "");
                                                                jsonObjectMapExistingFilters.put("NoOfRec", "");
                                                                jsonObjectMapExistingFilters.put("CurrentGPS", "");
                                                                jsonArrayFilterssf.put(jsonObjectMapExistingFilters);
                                                            }
                                                        }

                                                        for (QueryFilterField_Bean insertFields : subFormControlObjects.get(i).getSubFormInsertFields()) {
                                                        /*    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                            jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), fieldValue);*/
                                                            if (subformJson.getBoolean("IfautoincrementControls")) {
                                                                boolean isAutoNumberControl = isAutoNumberControl(subFormControlObjects.get(i).getControlName(), insertFields.getField_Global_Value());
                                                                if (!isAutoNumberControl) {
                                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                                    jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), fieldValue);

                                                                } else if (isAutoNumberControl && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
//                                                                    addAutoNumberToSubformSubmitJsonMapExisting(subFormControlObjects.get(i).getControlName(), subformJson, insertFields.getField_Name(), insertFields.getField_Global_Value());
                                                                    jsonObjectMapExistingInsertsf.put("AutoIncrementControl", subformAutoNumberJsonObj.getJSONArray(subFormControlObjects.get(i).getControlName()).get(j));
                                                                } else if (isAutoNumberControl && isNetworkStatusAvialable(context) && dataCollectionObject.getApp_Mode().equalsIgnoreCase("Hybrid")) {
                                                                    jsonObjectMapExistingInsertsf.put("AutoIncrementControl", subformAutoNumberJsonObj.getJSONArray(subFormControlObjects.get(i).getControlName()).get(j));
                                                                } else if (isAutoNumberControl && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Online")) {
                                                                    String[] autonumberData = getAutoNumberValue(insertFields.getField_Name(), subFormControlObjects.get(i).getExistingTableName(), true, subFormControlObjects.get(i).getControlName(), subformAutoNumber);
                                                                    subformAutoNumber = autonumberData[1];
                                                                    jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), autonumberData[0]);
                                                                    jsonObjectMapExistingInsertsf.put("AutoIncrementVal", autonumberData[1]);
                                                                    jsonObjectMapExistingInsertsf.put("AutoNumberJson", autonumberData[2]);
                                                                }
                                                            } else {
                                                                String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                                jsonObjectMapExistingInsertsf.put(insertFields.getField_Name(), fieldValue);
                                                            }
                                                        }


                                                        subformJson.put("DataFields", new JSONArray());

                                                        insertJsonArray.put(jsonObjectMapExistingInsertsf);
                                                        subformJson.put("insertColumns", insertJsonArray);

                                                        JSONObject updateColumnsObject = new JSONObject();
                                                        updateColumnsObject.put("setColumns", jsonObjectMapExistingSetColumnssf);
                                                        updateColumnsObject.put("filterColumns", jsonArrayFilterssf);
                                                        updateJsonArray.put(updateColumnsObject);
                                                        subformJson.put("UpdateColumns", updateJsonArray);
                                                    }
                                                    arraySubform.put(subformJson);
                                                    mainObject.put("SubFormDataFields", arraySubform);
                                                }
                                            } else {
                                                JSONObject subformJson = new JSONObject();
//                                        String subFormName = subFormStringList.get(i).get(0).get(0).split("\\|")[1];
                                                String subFormName = subFormStringList.get(i).get(0).get(0).split("\\|")[0];
                                                String subFormName_New = subFormName.substring(0, subFormName.length() - 2);
                                                subformJson.put("SubFormName", subFormName_New);

//                                            subformJson.put("TableName", strCreatedBy + "_" + ImproveHelper.getTableNameWithOutSpace(strAppName) + "_" + subFormName_New);
                                                subformJson.put("TableName", getSubformTableName(subFormName_New));
                                                JSONArray subFormdataFieldsArray = new JSONArray();
                                                for (int j = 0; j < subFormStringList.get(i).size(); j++) {
                                                    JSONObject row = new JSONObject();
                                                    for (int k = 1; k < subFormStringList.get(i).get(j).size(); k++) {
                                                        String[] splittedString = subFormStringList.get(i).get(j).get(k).split("\\|");
                                                        if (splittedString.length > 1) {
                                                            String columnName = splittedString[0];
                                                            String columnValue = splittedString[1];
                                                            row.put(columnName, columnValue);
                                                        } else {
                                                            String columnName = splittedString[0];
                                                            String columnValue = "";
                                                            row.put(columnName, columnValue);
                                                        }

                                                    }
                                                    subFormdataFieldsArray.put(row);
                                                    subformJson.put("tableSettingsType", subFormControlObjects.get(i).getTableSettingsType());
                                                    subformJson.put("TypeofSubmission", "");
                                                    subformJson.put("DataFields", subFormdataFieldsArray);
                                                    subformJson.put("insertColumns", new JSONArray());
                                                    subformJson.put("UpdateColumns", new JSONArray());
                                                    arraySubform.put(subformJson);
                                                }
                                                mainObject.put("SubFormDataFields", arraySubform);
                                            }
                                        }
                                    }
                                }
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                            if (mainObject != null) {

                                switch (dataCollectionObject.getApp_Mode()) {
                                    case "Online":
                                        if (isNetworkStatusAvialable(context)) {
                                            sendDataToServer(mainObject);
                                        } else {
                                            Toast.makeText(context, getString(R.string.no_internet), Toast.LENGTH_SHORT).show();
                                        }
                                        break;
                                    case "Hybrid":
                                        if (app_edit.equalsIgnoreCase("New") && isNetworkStatusAvialable(context)) {
                                            sendDataToServer(mainObject);
                                        } else if (app_edit.equalsIgnoreCase("New") && !isNetworkStatusAvialable(context)) {
                                            saveOfflineData();
                                        } else if (app_edit.equalsIgnoreCase("Edit")) {
                                            updateOfflineData();
                                        }
                                        break;
                                    case "Offline":
                                        if (app_edit.equalsIgnoreCase("Edit")) {
                                            updateOfflineData();
                                        } else {
                                            saveOfflineData();
                                        }
                                        break;
                                }
                            }
                        }
                    });
                }
            });


            t3 = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            if (tempList != null && tempList.size() > 0 && (isNetworkStatusAvialable(context) && !dataCollectionObject.getApp_Mode().equalsIgnoreCase("Offline"))) {

                                int filesCount = tempList.size();
                                int index = 0;

                                /*for (int fileCount = 0; fileCount < tempList.size(); fileCount++) {*/

                                sendSubFormFilesToServer(tempList.get(index), index, filesCount);
                                // }

                            } else {
                                t2.start();
                                try {
                                    t2.join();
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                        }
                    });
                }
            });


        } catch (Exception e) {
            ImproveHelper.improveException(this, TAG, "DefaultActionMapExisting", e);
        }
    }

    public boolean isAutoNumberControl(String control) {

        if (control.startsWith("(im:")) {
            control = ImproveHelper.getControlName(control);
        }
        if (control.contains(".")) {
            control = control.split("\\.")[1];
        }
        try {
            for (int i = 0; i < jArrayAutoIncementControls.length(); i++) {
                JSONObject jsonObject = jArrayAutoIncementControls.getJSONObject(i);
                if (control.equalsIgnoreCase(jsonObject.getString("ControlName"))) {
                    return true;
                }
            }
        } catch (Exception e) {
            Log.d(TAG, "isAutoNumberControl: " + e);
        }
        return false;
    }

    private boolean isAutoNumberControl(String subformName, String control) {
        try {

            if (control.startsWith("(im:")) {
                control = ImproveHelper.getControlName(control);
                if (control.toLowerCase().endsWith("_processrow")) {
                    control = control.substring(0, control.lastIndexOf("_"));
                }
            }

            JSONArray jsonArray = subFormsAutoNumberArraysMap.get(subformName);
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                if (control.equalsIgnoreCase(jsonObject.getString("ControlName"))) {
                    return true;
                }
            }
        } catch (Exception e) {
            Log.d(TAG, "isAutoNumberControl: " + e);
        }
        return false;
    }

    private String getFilePath(String mainformColumnName, List<HashMap<String, String>> stringListFiles) {
        String filePath = "";
        for (HashMap<String, String> mainformFilesMap : stringListFiles) {

            Iterator<Map.Entry<String, String>> iterator = mainformFilesMap.entrySet().iterator();
            boolean isKeyPresent = false;
            while (iterator.hasNext()) {
                Map.Entry<String, String> entry = iterator.next();

                if (mainformColumnName.equalsIgnoreCase(entry.getKey())) {
                    isKeyPresent = true;
                    filePath = mainformFilesMap.get(mainformColumnName);
                    break;
                }
            }
            if (isKeyPresent)
                break;
        }
        if (filePath.isEmpty()) {
            filePath = getsubFormFilePath(mainformColumnName, subFormFilesList);
        }
        return filePath;
    }

    private String getsubFormFilePath(String subformColumnName, List<List<List<HashMap<String, String>>>> subformFilesList) {
        String filePath = "";
        for (int i = 0; i < subformFilesList.size(); i++) {
            for (int j = 0; j < subformFilesList.get(i).size(); j++) {
                for (int k = 0; k < subformFilesList.get(i).get(j).size(); k++) {
                    for (HashMap<String, String> subformFilesMap : subformFilesList.get(i).get(j)) {
                        Iterator<Map.Entry<String, String>> iterator = subformFilesMap.entrySet().iterator();
                        boolean isKeyPresent = false;
                        while (iterator.hasNext()) {
                            Map.Entry<String, String> entry = iterator.next();
                            if (subformColumnName.equalsIgnoreCase(entry.getKey().split("\\$")[0])) {
                                isKeyPresent = true;
                                filePath = subformFilesMap.get(entry.getKey());
                                break;
                            }
                        }
                        if (isKeyPresent)
                            break;
                    }
                }
            }
        }
        return filePath;
    }

    private void insertIDColumnsInContentValues(ContentValues subFormContentValues, JSONObject subformControlValuesObject, ControlObject controlObject) {
        try {
            if (controlObject.getControlType().contentEquals(CONTROL_TYPE_RADIO_BUTTON)
                    || controlObject.getControlType().contentEquals(CONTROL_TYPE_DROP_DOWN)
                    || controlObject.getControlType().contentEquals(CONTROL_TYPE_CHECKBOX)
                    || controlObject.getControlType().contentEquals(CONTROL_TYPE_CHECK_LIST)
                    || controlObject.getControlType().contentEquals(CONTROL_TYPE_USER)
                    || controlObject.getControlType().contentEquals(CONTROL_TYPE_POST)) {
                subFormContentValues.put(controlObject.getControlName() + "id", subformControlValuesObject.getString(controlObject.getControlName() + "id"));
            }
            if (controlObject.getControlType().contentEquals(CONTROL_TYPE_GPS)) {
                subFormContentValues.put(controlObject.getControlName() + "_Coordinates", subformControlValuesObject.getString(controlObject.getControlName() + "_Coordinates"));
                subFormContentValues.put(controlObject.getControlName() + "_Type", subformControlValuesObject.getString(controlObject.getControlName() + "_Type"));
            }
            if (controlObject.getControlType().contentEquals(CONTROL_TYPE_DATA)) {
                subFormContentValues.put(controlObject.getControlName() + "_id", subformControlValuesObject.getString(controlObject.getControlName() + "_id"));
            }
            if (controlObject.getControlType().contentEquals(CONTROL_TYPE_CAMERA) && controlObject.isEnableImageWithGps()) {
                subFormContentValues.put(controlObject.getControlName() + "_Coordinates", subformControlValuesObject.getString(controlObject.getControlName() + "_Coordinates"));
                subFormContentValues.put(controlObject.getControlName() + "_Type", subformControlValuesObject.getString(controlObject.getControlName() + "_Type"));
            }
        } catch (Exception e) {
            Log.d(TAG, "insertIDColumnsInContentValues: " + e);
        }
    }

    private void saveOfflineData() {
        try {
            Thread saveThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                boolean saveSuccess = true;
                                subFormHaveMainFormAutoNumber = new ArrayList<>();
                                String tableName = mainObject.getString("TableName");
                                String result = null;
                                if (!improveDataBase.tableExists(tableName)) {
                                    AppDetails appDetails = improveDataBase.getAppDetails(strAppName);
                                    result = improveDataBase.createTableWhileInsertion(appDetails);
                                } else {
                                    result = "";
                                }
                                if (result != null && result.isEmpty()) {
                                    List<OfflineDataTransaction> offlineDataSubFormList = new ArrayList<>();
                                    String transIDOfMainform = null;
                                    String tableSettingsType = dataCollectionObject.getTableSettingsType();
                                    if (tableSettingsType != null && tableSettingsType.contentEquals("Create New Table")) {
                                        ContentValues contentValues = new ContentValues();
                                        JSONArray datafieldsArray = mainObject.getJSONArray("DataFields");

                                        contentValues.put("Bhargo_OrganisationID", strOrgId);
                                        contentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                        contentValues.put("Bhargo_SubmittedUserID", strUserId);
                                        contentValues.put("Bhargo_DistributionID", strDistributionId);
                                        contentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                        contentValues.put("Bhargo_AppVersion", strAppVersion);
                                        contentValues.put("Bhargo_SyncStatus", 0);
                                        contentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                        contentValues.put("Bhargo_PostID", strPostId);
                                        contentValues.put("Bhargo_FormName", strAppName);
                                        contentValues.put("Bhargo_TableSettingsType", tableSettingsType);
                                        String trans_date = "Bhargo_Trans_Date";
                                        String is_active = "Bhargo_Is_Active";
                                        contentValues.put(trans_date, getTransDateandTimeFromDevice());
                                        contentValues.put(is_active, "yes");
                                        if (datafieldsArray.length() == 1) {//If Mainform doesn't has subform columns
                                            JSONObject controlValuesObject = datafieldsArray.getJSONObject(0);
                                            for (String mainformColumnName : dataCollectionObject.getList_Table_Columns()) {
                                                if (isAutoNumbersAvaliable && isAutoNumberControl(mainformColumnName)) {
                                                    String[] autoKeyValues = getAutoNumberKeyValues(mainObject.getJSONArray("DataFields").getJSONObject(0).getJSONObject("AutoIncrementControl"), mainformColumnName, tableName, "");
                                                    contentValues.put(mainformColumnName, autoKeyValues[0]);//Prefix+Suffix+Suffix1
                                                    contentValues.put("AutoIncrementVal", autoKeyValues[1]);//Suffix
                                                    contentValues.put("AutoNumberJson", autoKeyValues[2]);//Json
                                                    subFormHaveMainFormAutoNumber.add(mainformColumnName + "|" + autoKeyValues[0]);
                                                } else if (controlValuesObject.has(mainformColumnName)) {
                                                    contentValues.put(mainformColumnName, getControlValueforOffline(controlValuesObject,mainformColumnName));
                                                } else if (!AppConstants.Trans_id.equalsIgnoreCase(mainformColumnName)) {
                                                    String filePath = getFilePath(mainformColumnName, stringListFiles);
                                                    contentValues.put(mainformColumnName, filePath);
                                                }
                                            }
                                            OfflineDataTransaction offlineDataTransaction = improveDataBase.insertIntoMainFormTable(contentValues, mainObject.getString("TableName"), AppConstants.Trans_id, dataCollectionObject.getTableSettingsObject().isReplaceOnSameRow());
                                            transIDOfMainform = offlineDataTransaction.getMainFormTransID();
                                            if (offlineDataTransaction.getErrorMessage() != null) {
                                                saveSuccess= false;
                                                String message = "";
                                                if (dataCollectionObject.getTableSettingsObject().isRejectWithMessage() && dataCollectionObject.getTableSettingsObject().getErrorMessage() != null) {
                                                    message = dataCollectionObject.getTableSettingsObject().getErrorMessage();
                                                } else {
                                                    message = "Insertion failed \n" + offlineDataTransaction.getErrorMessage();
                                                }
                                                if (AppConstants.GlobalObjects != null) {
                                                    AppConstants.GlobalObjects.setSubmitresponse_Status("100");
                                                }
                                                alertDialogError(message);
                                                return;
                                            }

                                        } else {//If Mainform has subform columns
                                            for (int irows = 0; irows < datafieldsArray.length(); irows++) {
                                                JSONObject controlValuesObject = datafieldsArray.getJSONObject(irows);
                                                for (String mainformColumnName : dataCollectionObject.getList_Table_Columns()) {
                                                    if (controlValuesObject.has(mainformColumnName)) {
                                                        contentValues.put(mainformColumnName, controlValuesObject.getString(mainformColumnName));
                                                    } else if (!AppConstants.Trans_id.equalsIgnoreCase(mainformColumnName)) {
                                                        String filePath = getFilePath(mainformColumnName, stringListFiles);
                                                        contentValues.put(mainformColumnName, filePath);
                                                    }
                                                }

                                                OfflineDataTransaction offlineDataTransaction = improveDataBase.insertIntoMainFormTable(contentValues, mainObject.getString("TableName"), AppConstants.Trans_id, dataCollectionObject.getTableSettingsObject().isReplaceOnSameRow());
                                                transIDOfMainform = offlineDataTransaction.getMainFormTransID();
                                                if (offlineDataTransaction.getErrorMessage() != null) {
                                                    saveSuccess= false;
                                                    String message = "";
                                                    if (dataCollectionObject.getTableSettingsObject().isRejectWithMessage() && dataCollectionObject.getTableSettingsObject().getErrorMessage() != null) {
                                                        message = dataCollectionObject.getTableSettingsObject().getErrorMessage();
                                                    } else {
                                                        message = "Insertion failed \n" + offlineDataTransaction.getErrorMessage();
                                                    }
                                                    if (AppConstants.GlobalObjects != null) {
                                                        AppConstants.GlobalObjects.setSubmitresponse_Status("100");
                                                    }
                                                    alertDialogError(message);
                                                    return;
                                                }
                                            }
                                        }
                                    } else {//Map Existing Table
                                        try {
                                            ContentValues contentValues = new ContentValues();
                                            ContentValues contentValuesInsert = new ContentValues();
                                            contentValues.put("Bhargo_OrganisationID", strOrgId);
                                            contentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                            contentValues.put("Bhargo_SubmittedUserID", strUserId);
                                            contentValues.put("Bhargo_DistributionID", strDistributionId);
                                            contentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                            contentValues.put("Bhargo_AppVersion", strAppVersion);
                                            contentValues.put("Bhargo_SyncStatus", 0);
                                            contentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                            contentValues.put("Bhargo_PostID", strPostId);
                                            contentValues.put("Bhargo_FormName", strAppName);
                                            contentValues.put("Bhargo_TableSettingsType", tableSettingsType);
                                            contentValues.put("Bhargo_TypeofSubmission", dataCollectionObject.getMapExistingType());
                                            String trans_date = "Bhargo_Trans_Date";
                                            String is_active = "Bhargo_Is_Active";
                                            contentValues.put(trans_date, getTransDateandTimeFromDevice());
                                            contentValues.put(is_active, "yes");

                                       /* for (String mainformColumnName : dataCollectionObject.getList_Table_Columns()) {
                                            if (controlValuesObject.has(mainformColumnName)) {
                                                contentValues.put(mainformColumnName, controlValuesObject.getString(mainformColumnName));
                                            } else if (!trans_id.equalsIgnoreCase(mainformColumnName)) {
                                                String filePath = getFilePath(mainformColumnName, stringListFiles);
                                                contentValues.put(mainformColumnName, filePath);
                                            }
                                        }*/
                                            if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert")) {
                                                JSONArray insertColumns = mainObject.getJSONArray("insertColumns");
                                                for (int i = 0; i < insertColumns.length(); i++) {
                                                    JSONObject json = insertColumns.getJSONObject(i);
                                                    Iterator<String> keys = json.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + json.get(key));
                                                        contentValues.put(key, json.getString(key));
                                                    }
                                                }
                                            } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Update")) {
                                                JSONArray updateColumns = mainObject.getJSONArray("UpdateColumns");
                                                for (int i = 0; i < updateColumns.length(); i++) {
                                                    JSONObject jsonUpdate = updateColumns.getJSONObject(i);
                                                    JSONObject setColumns = jsonUpdate.getJSONObject("setColumns");
                                                    Iterator<String> keys = setColumns.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + setColumns.get(key));
                                                        contentValues.put(key, setColumns.getString(key));
                                                    }

                                                    JSONArray filterColumns = jsonUpdate.getJSONArray("filterColumns");
                                                    Gson gson = new Gson();
//                                                    contentValues.put("WhereClause",gson.toJson(filterColumns));
                                                    contentValues.put("WhereClause", filterColumns.toString());
                                                }
                                            } else if (dataCollectionObject.getMapExistingType().equalsIgnoreCase("Insert or Update")) {
                                                //Update
                                                JSONArray updateColumns = mainObject.getJSONArray("UpdateColumns");
                                                for (int i = 0; i < updateColumns.length(); i++) {
                                                    JSONObject jsonUpdate = updateColumns.getJSONObject(i);
                                                    JSONObject setColumns = jsonUpdate.getJSONObject("setColumns");
                                                    Iterator<String> keys = setColumns.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + setColumns.get(key));
                                                        contentValues.put(key, setColumns.getString(key));
                                                    }

                                                    JSONArray filterColumns = jsonUpdate.getJSONArray("filterColumns");
                                                    Gson gson = new Gson();
                                                    contentValues.put("WhereClause", filterColumns.toString());
                                                }

                                                //Insert
                                                contentValuesInsert.put("Bhargo_OrganisationID", strOrgId);
                                                contentValuesInsert.put("Bhargo_CreatedUserID", strCreatedBy);
                                                contentValuesInsert.put("Bhargo_SubmittedUserID", strUserId);
                                                contentValuesInsert.put("Bhargo_DistributionID", strDistributionId);
                                                contentValuesInsert.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                contentValuesInsert.put("Bhargo_AppVersion", strAppVersion);
                                                contentValuesInsert.put("Bhargo_SyncStatus", 0);
                                                contentValuesInsert.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                contentValuesInsert.put("Bhargo_PostID", strPostId);
                                                contentValuesInsert.put("Bhargo_FormName", strAppName);
                                                contentValuesInsert.put(trans_date, getTransDateandTimeFromDevice());
                                                contentValuesInsert.put(is_active, "yes");

                                                JSONArray insertColumns = mainObject.getJSONArray("insertColumns");
                                                for (int i = 0; i < insertColumns.length(); i++) {
                                                    JSONObject json = insertColumns.getJSONObject(i);
                                                    Iterator<String> keys = json.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + json.get(key));
                                                        contentValues.put(key, json.getString(key));
                                                    }
                                                }
                                            }
                                            OfflineDataTransaction offlineDataTransaction = improveDataBase.insertIntoMainFormTableMapExisting(contentValues, contentValuesInsert, mainObject.getString("TableName"), AppConstants.Trans_id, false, dataCollectionObject.getMapExistingType());
                                            transIDOfMainform = offlineDataTransaction.getMainFormTransID();
//                                            transIDOfMainform = "";
                                            if (offlineDataTransaction.getErrorMessage() != null) {
                                                saveSuccess= false;
                                                String message = "";
                                                if (dataCollectionObject.getTableSettingsObject() != null && dataCollectionObject.getTableSettingsObject().isRejectWithMessage() && dataCollectionObject.getTableSettingsObject().getErrorMessage() != null) {
                                                    message = dataCollectionObject.getTableSettingsObject().getErrorMessage();
                                                } else {
                                                    message = "Insertion failed \n" + offlineDataTransaction.getErrorMessage();
                                                }
                                                if (AppConstants.GlobalObjects != null) {
                                                    AppConstants.GlobalObjects.setSubmitresponse_Status("100");
                                                }
                                                alertDialogError(message);
                                                return;
                                            }
                                        } catch (Exception e) {
                                            Log.d(TAG, "run: " + e);
                                            alertDialogError(e.toString());
                                            return;
                                        }
                                    }

                                    for (int sfi = 0; sfi < subFormTableSettingsType.size(); sfi++) {
                                        String subFormName = subFormNames.get(sfi);

                                        ControlObject subformControlObject = subFormControlObjects.get(sfi);
                                        if (subFormTableSettingsType.get(sfi).equalsIgnoreCase(getString(R.string.create_new_table))) {
                                            List<List<String>> subformData = subFormStringList.get(sfi);
                                            List<List<HashMap<String, String>>> subFormFilesData = subFormFilesList.get(sfi);
                                            if (subformData.size() > 0) {
                                                String subFormAutoID = "";
                                                for (int j = 0; j < subformData.size(); j++) {
                                                    boolean rowHasdata = false;

                                                    ContentValues subFormContentValues = new ContentValues();
                                                    for (int k = 1; k < subformData.get(j).size(); k++) {
                                                        String[] splittedString = subformData.get(j).get(k).split("\\|");
                                                        if (splittedString.length > 1) {
                                                            rowHasdata = true;
                                                            String columnName = splittedString[0];
                                                            String columnValue = splittedString[1];
                                                            subFormContentValues.put(columnName, columnValue);
                                                        } else {
                                                            String columnName = splittedString[0];
                                                            String columnValue = null;
                                                            subFormContentValues.put(columnName, columnValue);
                                                        }

                                                    }

                                                    //Autonumber
                                                    JSONArray subformArray = mainObject.getJSONArray("SubFormDataFields");
                                                    if (subformArray.getJSONObject(sfi).get("IfautoincrementControls").toString().equalsIgnoreCase("true")) {
                                                        JSONObject jso = subformArray.getJSONObject(sfi);
                                                        List<String> subFormColumns = ImproveHelper.getSubFormColumns(subFormName, dataCollectionObject);
                                                        JSONArray dataFieldsSubForm = jso.getJSONArray("DataFields");
                                                        JSONObject subformAutoIncrementObj = dataFieldsSubForm.getJSONObject(j).getJSONObject("AutoIncrementControl");
                                                        for (String subformColumn : subFormColumns) {
                                                            if (isAutoNumberControl(subFormName, subformColumn)) {
                                                                String subformtableName = getSubformTableName(subFormName);
                                                                String[] autoKeyValues = getAutoNumberKeyValues(subformAutoIncrementObj, subformColumn, subformtableName, subFormAutoID);
                                                                subFormAutoID = autoKeyValues[1];
                                                                subFormContentValues.put(subformColumn, autoKeyValues[0]);//Prefix+Suffix+Suffix1
                                                                subFormContentValues.put("AutoIncrementVal", autoKeyValues[1]);//Suffix
                                                                subFormContentValues.put("AutoNumberJson", autoKeyValues[2]);//Json
                                                            }
                                                        }
                                                    }
                                                    for (int k = 0; k < subFormFilesData.get(j).size(); k++) {
                                                        rowHasdata = true;
                                                        HashMap<String, String> subFormFilesMap = subFormFilesData.get(j).get(k);
                                                        for (Map.Entry<String, String> entry : subFormFilesMap.entrySet()) {
                                                            subFormContentValues.put(entry.getKey().split("\\$")[0], entry.getValue());
                                                        }
                                                    }
                                                    //if subform has mainform columns
                                                    if (ImproveHelper.checkSubFormHasMainFormColumns(subFormName, dataCollectionObject)) {
                                                        List<String> subFormColumns = ImproveHelper.getSubFormColumns(subFormName, dataCollectionObject);
                                                        for (int j1 = 0; j1 < stringListSubmit.size(); j1++) {
                                                            if (subFormColumns.contains(stringListSubmit.get(j1).split("\\|")[0])) {
                                                                subFormContentValues.put(stringListSubmit.get(j1).split("\\|")[0], (stringListSubmit.get(j1) + " ").split("\\|")[1].trim());
                                                            }
                                                        }
                                                        //Auto Number
                                                        for (int a = 0; a < subFormHaveMainFormAutoNumber.size(); a++) {
                                                            if (subFormColumns.contains(subFormHaveMainFormAutoNumber.get(a).split("\\|")[0])) {
                                                                subFormContentValues.put(subFormHaveMainFormAutoNumber.get(a).split("\\|")[0], (subFormHaveMainFormAutoNumber.get(a) + " ").split("\\|")[1].trim());
                                                            }
                                                        }
                                                    }


                                        /*String primary_key = subformControlObject.getSubFormtableSettingsObject().getPrimaryKey();
                                        if (primary_key != null && !primary_key.isEmpty()) {
                                            String value = subFormContentValues.getAsString(primary_key);
                                            subFormContentValues.put(trans_id, value);
                                        }
                                        if (subformControlObject.getSubFormtableSettingsObject().getCompositeKeys() != null && subformControlObject.getSubFormtableSettingsObject().getCompositeKeys().size() > 0) {
                                            String value = "";
                                            for (String compositeKey : subformControlObject.getSubFormtableSettingsObject().getCompositeKeys()) {
                                                value = value + subFormContentValues.get(compositeKey);
                                            }

                                            subFormContentValues.put(trans_id, value);
                                        }*/
                                                    //Row Insertion
                                                    String subformtableName = getSubformTableName(subFormName);
                                                    subFormContentValues.put("Bhargo_OrganisationID", strOrgId);
                                                    subFormContentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                                    subFormContentValues.put("Bhargo_SubmittedUserID", strUserId);
                                                    subFormContentValues.put("Bhargo_DistributionID", strDistributionId);
                                                    subFormContentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                    subFormContentValues.put("Bhargo_AppVersion", strAppVersion);
                                                    subFormContentValues.put("Bhargo_SyncStatus", 0);
                                                    subFormContentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                    subFormContentValues.put("Bhargo_PostID", strPostId);
                                                    subFormContentValues.put("Bhargo_SubFormName", subFormName);
                                                    subFormContentValues.put("Bhargo_FormName", strAppName);
                                                    subFormContentValues.put("Bhargo_TableSettingsType", subFormTableSettingsType.get(sfi));
                                                    subFormContentValues.put("Bhargo_TypeofSubmission", subFormTableMapExistingType.get(sfi));
                                                    if(improveDataBase.columnExistsInTable(subformtableName,AppConstants.Ref_Trans_id)) {
                                                    subFormContentValues.put(AppConstants.Ref_Trans_id, transIDOfMainform);//no need for map existing
                                                    }String trans_date = "Bhargo_Trans_Date";
                                                    String is_active = "Bhargo_Is_Active";
                                                    subFormContentValues.put(trans_date, getTransDateandTimeFromDevice());
                                                    subFormContentValues.put(is_active, "yes");

                                                    OfflineDataTransaction offlineDataSubForm = new OfflineDataTransaction();
                                                    offlineDataSubForm.setSubFormTableSettingsType(subFormTableSettingsType.get(sfi));
                                                    offlineDataSubForm.setContentValues(subFormContentValues);
                                                    offlineDataSubForm.setSubFormName(subFormName);
                                                    offlineDataSubForm.setTableName(subformtableName);
                                                    offlineDataSubForm.setTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setMainFormTransID(transIDOfMainform);
                                                    offlineDataSubForm.setMainFormTable(tableName);
                                                    offlineDataSubForm.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setReplaceOnSameRow(subformControlObject.getSubFormtableSettingsObject().isReplaceOnSameRow());
                                                    offlineDataSubForm.setRejectWithMessage(subformControlObject.getSubFormtableSettingsObject().isRejectWithMessage());
                                                    offlineDataSubForm.setCompositeKeyErrorMessage(subformControlObject.getSubFormtableSettingsObject().getErrorMessage());
                                                    if (rowHasdata) {
                                                        offlineDataSubFormList.add(offlineDataSubForm);
                                                    }
                                                }
                                            }

                                        } else if (subFormTableSettingsType.get(sfi).equalsIgnoreCase(getString(R.string.map_existing_table))) {

//                                            String subformtableName = strCreatedBy + "_" + ImproveHelper.replaceWithUnderscore(strAppName) + "_" + ImproveHelper.replaceWithUnderscore(subFormName);
                                            String subformtableName = getSubformTableName(subFormName);
                                            if (subFormTableMapExistingType.get(sfi).equalsIgnoreCase(getString(R.string.insert))) {

                                                JSONArray subformsArray = mainObject.getJSONArray("SubFormDataFields");
                                                JSONObject subformData = subformsArray.getJSONObject(sfi);
                                                subformtableName = subformData.getString("TableName");
                                                JSONArray insertColumns = subformData.getJSONArray("insertColumns");
                                                for (int i = 0; i < insertColumns.length(); i++) {
                                                    ContentValues subFormContentValues = new ContentValues();
                                                    JSONObject json = insertColumns.getJSONObject(i);
                                                    Iterator<String> keys = json.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + json.get(key));
                                                        subFormContentValues.put(key, json.getString(key));
                                                    }

                                                    //Row Insertion

                                                    subFormContentValues.put("Bhargo_OrganisationID", strOrgId);
                                                    subFormContentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                                    subFormContentValues.put("Bhargo_SubmittedUserID", strUserId);
                                                    subFormContentValues.put("Bhargo_DistributionID", strDistributionId);
                                                    subFormContentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                    subFormContentValues.put("Bhargo_AppVersion", strAppVersion);
                                                    subFormContentValues.put("Bhargo_SyncStatus", 0);
                                                    subFormContentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                    subFormContentValues.put("Bhargo_PostID", strPostId);
                                                    subFormContentValues.put("Bhargo_SubFormName", subFormName);
                                                    subFormContentValues.put("Bhargo_FormName", strAppName);
                                                    if(improveDataBase.columnExistsInTable(subformtableName,AppConstants.Ref_Trans_id)) {
                                                        subFormContentValues.put(AppConstants.Ref_Trans_id, transIDOfMainform);
                                                    }
                                                    String trans_date = "Bhargo_Trans_Date";
                                                    String is_active = "Bhargo_Is_Active";
                                                    subFormContentValues.put(trans_date, getTransDateandTimeFromDevice());
                                                    subFormContentValues.put(is_active, "yes");
                                                    OfflineDataTransaction offlineDataSubForm = new OfflineDataTransaction();
                                                    offlineDataSubForm.setSubFormTableSettingsType(subFormTableSettingsType.get(sfi));
                                                    offlineDataSubForm.setSubFormTableMapExistingType(subFormTableMapExistingType.get(sfi));
                                                    offlineDataSubForm.setContentValues(subFormContentValues);
                                                    offlineDataSubForm.setSubFormContentValuesUpdate(null);
                                                    offlineDataSubForm.setSubFormName(subFormName);
                                                    offlineDataSubForm.setTableName(subformtableName);
                                                    offlineDataSubForm.setTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setMainFormTransID(transIDOfMainform);
                                                    offlineDataSubForm.setMainFormTable(tableName);
                                                    offlineDataSubForm.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setReplaceOnSameRow(false);
                                                    offlineDataSubForm.setRejectWithMessage(false);
                                                    offlineDataSubForm.setCompositeKeyErrorMessage("");

//                                        if (rowHasdata) {
                                                    offlineDataSubFormList.add(i, offlineDataSubForm);
//                                        }

                                                }
                                           /* for (QueryFilterField_Bean insertFields : subformControlObject.getSubFormInsertFields()) {
                                                if (isAutoNumbersAvaliable) {
                                                    boolean isAutoNumberControl = isAutoNumberControl(subFormName, insertFields.getField_Global_Value());
                                                    if (!isAutoNumberControl) {
                                                        String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                        subFormContentValues.put(insertFields.getField_Name(), fieldValue);
                                                    }
                                                } else {
                                                    String fieldValue = ImproveHelper.getValueFromGlobalObject(context, insertFields.getField_Global_Value());
                                                    subFormContentValues.put(insertFields.getField_Name(), fieldValue);
                                                }
                                            }*/

                                            } else if (subFormTableMapExistingType.get(sfi).equalsIgnoreCase(getString(R.string.update))) {
                                                JSONArray subformsArray = mainObject.getJSONArray("SubFormDataFields");
                                                JSONObject subformData = subformsArray.getJSONObject(sfi);
                                                subformtableName = subformData.getString("TableName");
                                                JSONArray updateColumns = subformData.getJSONArray("UpdateColumns");
                                                for (int i = 0; i < updateColumns.length(); i++) {
                                                    ContentValues subFormContentValues = new ContentValues();
                                                    ContentValues subformContentValuesUpdate = new ContentValues();
                                                    JSONObject jsonUpdate = updateColumns.getJSONObject(i);
                                                    JSONObject setColumns = jsonUpdate.getJSONObject("setColumns");
                                                    Iterator<String> keys = setColumns.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + setColumns.get(key));
                                                        subformContentValuesUpdate.put(key, setColumns.getString(key));
                                                    }

                                                    JSONArray filterColumns = jsonUpdate.getJSONArray("filterColumns");
                                                    Gson gson = new Gson();
                                                    subformContentValuesUpdate.put("WhereClause", filterColumns.toString());


                                                    subFormContentValues.put("Bhargo_OrganisationID", strOrgId);
                                                    subFormContentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                                    subFormContentValues.put("Bhargo_SubmittedUserID", strUserId);
                                                    subFormContentValues.put("Bhargo_DistributionID", strDistributionId);
                                                    subFormContentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                    subFormContentValues.put("Bhargo_AppVersion", strAppVersion);
                                                    subFormContentValues.put("Bhargo_SyncStatus", 0);
                                                    subFormContentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                    subFormContentValues.put("Bhargo_PostID", strPostId);
                                                    subFormContentValues.put("Bhargo_SubFormName", subFormName);
                                                    subFormContentValues.put("Bhargo_FormName", strAppName);
                                                    subformContentValuesUpdate.put("Bhargo_TableSettingsType", subFormTableSettingsType.get(sfi));
                                                    subformContentValuesUpdate.put("Bhargo_TypeofSubmission", subFormTableMapExistingType.get(sfi));
                                                     if(improveDataBase.columnExistsInTable(subformtableName,AppConstants.Ref_Trans_id)) {
                                                    subFormContentValues.put(AppConstants.Ref_Trans_id, transIDOfMainform);//no need for map existing
                                                    }
                                                    String trans_date = "Bhargo_Trans_Date";
                                                    String is_active = "Bhargo_Is_Active";
                                                    subFormContentValues.put(trans_date, getTransDateandTimeFromDevice());
                                                    subFormContentValues.put(is_active, "yes");
                                                    OfflineDataTransaction offlineDataSubForm = new OfflineDataTransaction();
                                                    offlineDataSubForm.setSubFormTableSettingsType(subFormTableSettingsType.get(sfi));
                                                    offlineDataSubForm.setSubFormTableMapExistingType(subFormTableMapExistingType.get(sfi));
                                                    offlineDataSubForm.setContentValues(subFormContentValues);
                                                    offlineDataSubForm.setSubFormContentValuesUpdate(subformContentValuesUpdate);
                                                    offlineDataSubForm.setSubFormName(subFormName);
                                                    offlineDataSubForm.setTableName(subformtableName);
                                                    offlineDataSubForm.setTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setMainFormTransID(transIDOfMainform);
                                                    offlineDataSubForm.setMainFormTable(tableName);
                                                    offlineDataSubForm.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setReplaceOnSameRow(false);
                                                    offlineDataSubForm.setRejectWithMessage(false);
                                                    offlineDataSubForm.setCompositeKeyErrorMessage("");
//                                        if (rowHasdata) {
                                                    offlineDataSubFormList.add(offlineDataSubForm);
//                                        }
                                                }

                                            } else if (subFormTableMapExistingType.get(sfi).equalsIgnoreCase(getString(R.string.updateorinsert))) {

                                                JSONArray subformsArray = mainObject.getJSONArray("SubFormDataFields");
                                                JSONObject subformData = subformsArray.getJSONObject(sfi);
                                                subformtableName = subformData.getString("TableName");
                                                JSONArray updateColumns = subformData.getJSONArray("UpdateColumns");
                                                JSONArray insertColumns = subformData.getJSONArray("insertColumns");
                                                for (int i = 0; i < updateColumns.length(); i++) {
                                                    ContentValues subFormContentValues = new ContentValues();
                                                    ContentValues subformContentValuesUpdate = new ContentValues();
                                                    JSONObject jsonUpdate = updateColumns.getJSONObject(i);
                                                    JSONObject setColumns = jsonUpdate.getJSONObject("setColumns");
                                                    Iterator<String> keys = setColumns.keys();
                                                    while (keys.hasNext()) {
                                                        String key = keys.next();
                                                        System.out.println("Key :" + key + "  Value :" + setColumns.get(key));
                                                        subformContentValuesUpdate.put(key, setColumns.getString(key));
                                                    }

                                                    JSONArray filterColumns = jsonUpdate.getJSONArray("filterColumns");
                                                    Gson gson = new Gson();
                                                    subformContentValuesUpdate.put("WhereClause", filterColumns.toString());

                                                    //Row Insertion

                                                    subFormContentValues.put("Bhargo_OrganisationID", strOrgId);
                                                    subFormContentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                                    subFormContentValues.put("Bhargo_SubmittedUserID", strUserId);
                                                    subFormContentValues.put("Bhargo_DistributionID", strDistributionId);
                                                    subFormContentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                    subFormContentValues.put("Bhargo_AppVersion", strAppVersion);
                                                    subFormContentValues.put("Bhargo_SyncStatus", 0);
                                                    subFormContentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                    subFormContentValues.put("Bhargo_PostID", strPostId);
                                                    subFormContentValues.put("Bhargo_SubFormName", subFormName);
                                                    subFormContentValues.put("Bhargo_FormName", strAppName);
                                                    subFormContentValues.put("Bhargo_TableSettingsType", subFormTableSettingsType.get(sfi));
                                                    subFormContentValues.put("Bhargo_TypeofSubmission", subFormTableMapExistingType.get(sfi));
                                                    if(improveDataBase.columnExistsInTable(subformtableName,AppConstants.Ref_Trans_id)) {
                                                        subFormContentValues.put(AppConstants.Ref_Trans_id, transIDOfMainform);//no need for map existing
                                                    }
                                                    String trans_date = "Bhargo_Trans_Date";
                                                    String is_active = "Bhargo_Is_Active";
                                                    subFormContentValues.put(trans_date, getTransDateandTimeFromDevice());
                                                    subFormContentValues.put(is_active, "yes");
                                                    OfflineDataTransaction offlineDataSubForm = new OfflineDataTransaction();

                                                    JSONObject json = insertColumns.getJSONObject(i);
                                                    Iterator<String> keys_insert = json.keys();
                                                    while (keys_insert.hasNext()) {
                                                        String key = keys_insert.next();
                                                        System.out.println("Key :" + key + "  Value :" + json.get(key));
                                                        subFormContentValues.put(key, json.getString(key));
                                                    }
                                                    offlineDataSubForm.setSubFormTableSettingsType(subFormTableSettingsType.get(sfi));
                                                    offlineDataSubForm.setSubFormTableMapExistingType(subFormTableMapExistingType.get(sfi));
                                                    offlineDataSubForm.setContentValues(subFormContentValues);
                                                    offlineDataSubForm.setSubFormContentValuesUpdate(subformContentValuesUpdate);
                                                    offlineDataSubForm.setSubFormName(subFormName);
                                                    offlineDataSubForm.setTableName(subformtableName);
                                                    offlineDataSubForm.setTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setMainFormTransID(transIDOfMainform);
                                                    offlineDataSubForm.setMainFormTable(tableName);
                                                    offlineDataSubForm.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataSubForm.setReplaceOnSameRow(false);
                                                    offlineDataSubForm.setRejectWithMessage(false);
                                                    offlineDataSubForm.setCompositeKeyErrorMessage("");
                                                    offlineDataSubFormList.add(i, offlineDataSubForm);
                                                }
                                            }
                                        }
                                    }

                                    if (offlineDataSubFormList.size() > 0) {
                                        OfflineDataTransaction offlineDataTransaction = improveDataBase.insertSubFormData(offlineDataSubFormList);
                                        if (offlineDataTransaction.getErrorMessage() != null) {
                                            saveSuccess= false;
                                            String errorMsg = "";
                                            if (dataCollectionObject.getTableSettingsObject() != null && dataCollectionObject.getTableSettingsObject().isRejectWithMessage() && dataCollectionObject.getTableSettingsObject().getErrorMessage() != null) {
                                                errorMsg = offlineDataTransaction.getSubFormName() + "\n" + dataCollectionObject.getTableSettingsObject().getErrorMessage();
                                            } else {
                                                errorMsg = offlineDataTransaction.getSubFormName() + " Insertion failed \n" + offlineDataTransaction.getErrorMessage();
                                            }
                                            if (AppConstants.GlobalObjects != null) {
                                                AppConstants.GlobalObjects.setSubmitresponse_Status("100");
                                            }
                                            dismissProgressDialog();
                                            improveDataBase.deleteFormRowData(offlineDataTransaction.getMainFormTable(), offlineDataTransaction.getMainFormTransIDColumn(), offlineDataTransaction.getMainFormTransID());
                                            alertDialogError(errorMsg);
                                        } else {
                                            if (AppConstants.GlobalObjects != null) {
                                                AppConstants.GlobalObjects.setSubmitresponse_Status("200");
                                            }
                                            PrefManger.putSharedPreferencesBoolean(context, AppConstants.OfflineDataExistKey, true);
                                            dismissProgressDialog();
                                            Toast.makeText(context, getString(R.string.data_saved_successfully), Toast.LENGTH_SHORT).show();
                                            afterSync();
                                        }
                                    } else {
                                        if (AppConstants.GlobalObjects != null) {
                                            AppConstants.GlobalObjects.setSubmitresponse_Status("200");
                                        }
                                        PrefManger.putSharedPreferencesBoolean(context, AppConstants.OfflineDataExistKey, true);
                                        dismissProgressDialog();
                                        Toast.makeText(context, getString(R.string.data_saved_successfully), Toast.LENGTH_SHORT).show();
                                        afterSync();
                                    }
                                } else {
                                    dismissProgressDialog();
                                    Toast.makeText(context, result, Toast.LENGTH_SHORT).show();
                                }
                                if (submitevent && saveSuccess) {
                                    nextEvent();
                                }
                            } catch (Exception e) {
                                Log.d(TAG, "run: " + e);
                                alertDialogError(e.toString());
                                return;
                            }
                        }
                    });

                }
            });

            saveThread.start();
            saveThread.join();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String getControlValueforOffline(JSONObject controlValuesObject,String mainformColumnName) {
        String value= null;
        try {
            if(!controlValuesObject.getString(mainformColumnName).isEmpty()){
                value = controlValuesObject.getString(mainformColumnName);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return  value;
    }

    private String[] getAutoNumberValue(String existingTableAutoNumberColName, String existingTableName, boolean subform, String subformName, String subFormAutoID) {
        String[] autoNumberValue = new String[3];
        Gson gson = new Gson();
        try {
            if (subform && subFormsAutoNumberArraysMap.get(subformName).length() > 0) {
                jArrayAutoIncementControls = subFormsAutoNumberArraysMap.get(subformName);
            }
            JSONObject jsonObject = jArrayAutoIncementControls.getJSONObject(0);
            ExpressionMainHelper ehelper = new ExpressionMainHelper();
            String prefixValue = ehelper.ExpressionHelper(context, jsonObject.getString("Prefix"));
            String suffix1Value = "", strSuffix1 = "";
            if (jsonObject.has("Suffix1")) {
                suffix1Value = ehelper.ExpressionHelper(context, jsonObject.getString("Suffix1") + "Z");
            }
            if (!suffix1Value.contentEquals("") && suffix1Value.length() > 1) {
                strSuffix1 = suffix1Value.substring(0, suffix1Value.length() - 1);
            } else {
                strSuffix1 = suffix1Value;
            }

            String suffix = jsonObject.getString("Suffix");
            String value = getPseudoAutoNumberValue(suffix, existingTableName, subFormAutoID);
            autoNumberValue[0] = prefixValue + value + strSuffix1;
            autoNumberValue[1] = value;

            JSONObject autojJsonObject = new JSONObject();
            autojJsonObject.put("ControlName", existingTableAutoNumberColName);
            autojJsonObject.put("Prefix", prefixValue);
            autojJsonObject.put("Suffix", value);
            autojJsonObject.put("Suffix1", strSuffix1);
            autoNumberValue[2] = String.valueOf(autojJsonObject);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return autoNumberValue;
    }

    /*
     * --------------------------------------------------------------------------
     * Method: spacing Parameters: MotionEvent Returns: float Description:
     * checks the spacing between the two fingers on touch
     * ----------------------------------------------------
     */


    /*
     * --------------------------------------------------------------------------
     * Method: midPoint Parameters: PointF object, MotionEvent Returns: void
     * Description: calculates the midpoint between the two fingers
     * ------------------------------------------------------------
     */

    public String getPseudoAutoNumberValue(String suffix, String existingTableName, String subFormAutoID) {
        String autoIDValue = suffix;
        if (subFormAutoID.length() == 0) {
            List<List<String>> autoIDfromtab = improveDataBase.getDataByQuery("SELECT " + "AutoIncrementVal" + " FROM " + existingTableName + " ORDER BY ROWID DESC LIMIT 1");
            if (autoIDfromtab.size() > 0) {
                if (autoIDfromtab.get(0).get(0) != null && !autoIDfromtab.get(0).get(0).equals("")) {
                    String autoVal = autoIDfromtab.get(0).get(0);
                    String autoIDVal = (Long.parseLong(autoVal) + 1) + "";
                    if (autoVal.startsWith("000000")) {
                        autoIDVal = "000000" + autoIDVal;
                    } else if (autoVal.startsWith("00000")) {
                        autoIDVal = "00000" + autoIDVal;
                    } else if (autoVal.startsWith("0000")) {
                        autoIDVal = "0000" + autoIDVal;
                    } else if (autoVal.startsWith("000")) {
                        autoIDVal = "000" + autoIDVal;
                    } else if (autoVal.startsWith("00")) {
                        autoIDVal = "00" + autoIDVal;
                    } else if (autoVal.startsWith("0")) {
                        autoIDVal = "0" + autoIDVal;
                    }
                    autoIDValue = autoIDVal;
                }
            }
        } else {
            //For SubForm Next Autoincrement Obj
            String autoIDVal = (Long.parseLong(subFormAutoID) + 1) + "";
            if (subFormAutoID.startsWith("000000")) {
                autoIDVal = "000000" + autoIDVal;
            } else if (subFormAutoID.startsWith("00000")) {
                autoIDVal = "00000" + autoIDVal;
            } else if (subFormAutoID.startsWith("0000")) {
                autoIDVal = "0000" + autoIDVal;
            } else if (subFormAutoID.startsWith("000")) {
                autoIDVal = "000" + autoIDVal;
            } else if (subFormAutoID.startsWith("00")) {
                autoIDVal = "00" + autoIDVal;
            } else if (subFormAutoID.startsWith("0")) {
                autoIDVal = "0" + autoIDVal;
            }
            autoIDValue = autoIDVal;
        }
        return autoIDValue;
    }

    public String[] getAutoNumberKeyValues(JSONObject autoIncrementObj, String columnName, String tableName, String subFormAutoID) {
        String[] autoKeyValues = null;
        try {
            //For SubForm Next Autoincrement JsonArray Exist otherwise no, for new case main & subform  subFormAutoIDJsonArr will be size 0
            if (subFormAutoID.length() == 0) {
                if (autoIncrementObj != null) {
                    if (autoIncrementObj.get("ControlName").toString().equalsIgnoreCase(columnName)) {
                        List<List<String>> autoIDfromtab = improveDataBase.getDataByQuery("SELECT " + "AutoIncrementVal" + " FROM " + tableName + " ORDER BY ROWID DESC LIMIT 1");
                        if (autoIDfromtab.size() > 0) {
                            if (autoIDfromtab.get(0).get(0) != null && !autoIDfromtab.get(0).get(0).equals("")) {
                                String autoVal = autoIDfromtab.get(0).get(0);
                                String autoIDVal = (Long.parseLong(autoVal) + 1) + "";
                                if (autoVal.startsWith("000000")) {
                                    autoIDVal = "000000" + autoIDVal;
                                } else if (autoVal.startsWith("00000")) {
                                    autoIDVal = "00000" + autoIDVal;
                                } else if (autoVal.startsWith("0000")) {
                                    autoIDVal = "0000" + autoIDVal;
                                } else if (autoVal.startsWith("000")) {
                                    autoIDVal = "000" + autoIDVal;
                                } else if (autoVal.startsWith("00")) {
                                    autoIDVal = "00" + autoIDVal;
                                } else if (autoVal.startsWith("0")) {
                                    autoIDVal = "0" + autoIDVal;
                                }
                                autoKeyValues = new String[3];
                                autoKeyValues[0] = autoIncrementObj.get("Prefix") + autoIDVal + (autoIncrementObj.has("Suffix1") ? autoIncrementObj.get("Suffix1") : "");
                                autoKeyValues[1] = autoIDVal;
                                autoKeyValues[2] = String.valueOf(autoIncrementObj);
                            }
                        }
                    }
                }
            }
            if (subFormAutoID.length() == 0) {
                if (autoKeyValues == null) {
                    String Suffix = (String) autoIncrementObj.get("Suffix");
                    String Prefix = (String) autoIncrementObj.get("Prefix");
                    String Suffix1 = (String) (autoIncrementObj.has("Suffix1") ? autoIncrementObj.get("Suffix1") : "");
                    autoKeyValues = new String[3];
                    autoKeyValues[0] = Prefix + Suffix + Suffix1;
                    autoKeyValues[1] = Suffix;
                    autoKeyValues[2] = String.valueOf(autoIncrementObj);
                }
            } else {
                //For SubForm Next Autoincrement Obj
                String autoIDVal = (Long.parseLong(subFormAutoID) + 1) + "";
                if (subFormAutoID.startsWith("000000")) {
                    autoIDVal = "000000" + autoIDVal;
                } else if (subFormAutoID.startsWith("00000")) {
                    autoIDVal = "00000" + autoIDVal;
                } else if (subFormAutoID.startsWith("0000")) {
                    autoIDVal = "0000" + autoIDVal;
                } else if (subFormAutoID.startsWith("000")) {
                    autoIDVal = "000" + autoIDVal;
                } else if (subFormAutoID.startsWith("00")) {
                    autoIDVal = "00" + autoIDVal;
                } else if (subFormAutoID.startsWith("0")) {
                    autoIDVal = "0" + autoIDVal;
                }
                String Suffix = (String) autoIncrementObj.get("Suffix");
                String Prefix = (String) autoIncrementObj.get("Prefix");
                String Suffix1 = (String) (autoIncrementObj.has("Suffix1") ? autoIncrementObj.get("Suffix1") : "");

                autoKeyValues = new String[3];
                autoKeyValues[0] = Prefix + autoIDVal + Suffix1;
                autoKeyValues[1] = autoIDVal;
                autoKeyValues[2] = String.valueOf(autoIncrementObj);
            }

        } catch (JSONException e) {
            toast(e.getMessage(), context);
        }
        return autoKeyValues;
    }

    public String[] getAutoNumberKeyValuesManageData(JSONObject autoIncrementObj, String columnName, String tableName, String subFormAutoID, String replaceControlName) {
        String[] autoKeyValues = null;
        try {
            //For SubForm Next Autoincrement JsonArray Exist otherwise no, for new case main & subform  subFormAutoIDJsonArr will be size 0
            if (subFormAutoID.length() == 0) {
                if (autoIncrementObj != null) {
                    if (autoIncrementObj.get("ControlName").toString().equalsIgnoreCase(columnName)) {
                        List<List<String>> autoIDfromtab = improveDataBase.getDataByQuery("SELECT " + "AutoIncrementVal" + " FROM " + tableName + " ORDER BY ROWID DESC LIMIT 1");
                        if (autoIDfromtab.size() > 0) {
                            if (autoIDfromtab.get(0).get(0) != null && !autoIDfromtab.get(0).get(0).equals("")) {
                                String autoVal = autoIDfromtab.get(0).get(0);
                                String autoIDVal = (Long.parseLong(autoVal) + 1) + "";
                                if (autoVal.startsWith("000000")) {
                                    autoIDVal = "000000" + autoIDVal;
                                } else if (autoVal.startsWith("00000")) {
                                    autoIDVal = "00000" + autoIDVal;
                                } else if (autoVal.startsWith("0000")) {
                                    autoIDVal = "0000" + autoIDVal;
                                } else if (autoVal.startsWith("000")) {
                                    autoIDVal = "000" + autoIDVal;
                                } else if (autoVal.startsWith("00")) {
                                    autoIDVal = "00" + autoIDVal;
                                } else if (autoVal.startsWith("0")) {
                                    autoIDVal = "0" + autoIDVal;
                                }
                                autoKeyValues = new String[3];
                                autoKeyValues[0] = autoIncrementObj.get("Prefix") + autoIDVal + (autoIncrementObj.has("Suffix1") ? autoIncrementObj.get("Suffix1") : "");
                                autoKeyValues[1] = autoIDVal;
                                autoIncrementObj.put("ControlName", replaceControlName);
                                autoKeyValues[2] = String.valueOf(autoIncrementObj);
                            }
                        }
                    }
                }
            }
            if (subFormAutoID.length() == 0) {
                if (autoKeyValues == null) {
                    String Suffix = (String) autoIncrementObj.get("Suffix");
                    String Prefix = (String) autoIncrementObj.get("Prefix");
                    String Suffix1 = (String) (autoIncrementObj.has("Suffix1") ? autoIncrementObj.get("Suffix1") : "");
                    autoKeyValues = new String[3];
                    autoKeyValues[0] = Prefix + Suffix + Suffix1;
                    autoKeyValues[1] = Suffix;
                    autoIncrementObj.put("ControlName", replaceControlName);
                    autoKeyValues[2] = String.valueOf(autoIncrementObj);
                }
            } else {
                //For SubForm Next Autoincrement Obj
                String autoIDVal = (Long.parseLong(subFormAutoID) + 1) + "";
                if (subFormAutoID.startsWith("000000")) {
                    autoIDVal = "000000" + autoIDVal;
                } else if (subFormAutoID.startsWith("00000")) {
                    autoIDVal = "00000" + autoIDVal;
                } else if (subFormAutoID.startsWith("0000")) {
                    autoIDVal = "0000" + autoIDVal;
                } else if (subFormAutoID.startsWith("000")) {
                    autoIDVal = "000" + autoIDVal;
                } else if (subFormAutoID.startsWith("00")) {
                    autoIDVal = "00" + autoIDVal;
                } else if (subFormAutoID.startsWith("0")) {
                    autoIDVal = "0" + autoIDVal;
                }
                String Suffix = (String) autoIncrementObj.get("Suffix");
                String Prefix = (String) autoIncrementObj.get("Prefix");
                String Suffix1 = (String) (autoIncrementObj.has("Suffix1") ? autoIncrementObj.get("Suffix1") : "");

                autoKeyValues = new String[3];
                autoKeyValues[0] = Prefix + autoIDVal + Suffix1;
                autoKeyValues[1] = autoIDVal;
                autoIncrementObj.put("ControlName", replaceControlName);
                autoKeyValues[2] = String.valueOf(autoIncrementObj);
            }

        } catch (JSONException e) {
            toast(e.getMessage(), context);
        }
        return autoKeyValues;
    }

    private void updateOfflineData() {
        try {
            Thread updateThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            try {

                                subFormHaveMainFormAutoNumber = new ArrayList<>();
                                String tableName = mainObject.getString("TableName");
                                String result = null;
                                if (!improveDataBase.tableExists(tableName)) {
                                    AppDetails appDetails = improveDataBase.getAppDetails(strAppName);
                                    result = improveDataBase.createTableWhileInsertion(appDetails);
                                } else {
                                    result = "";
                                }
                                if (result != null && result.isEmpty()) {
                                    List<OfflineDataTransaction> offlineDataInsertList = new ArrayList<>();
                                    List<OfflineDataTransaction> offlineDataUpdateList = new ArrayList<>();
                                    String transIDOfMainform = strTransactionId;
                                    String tableSettingsType = dataCollectionObject.getTableSettingsType();
                                    if (tableSettingsType != null && tableSettingsType.contentEquals("Create New Table")) {

                                        JSONArray datafieldsArray = mainObject.getJSONArray("DataFields");

                                        if (datafieldsArray.length() == 1) {//If Mainform doesn't has subform columns
                                            ContentValues contentValues = new ContentValues();
                                            contentValues.put("Bhargo_OrganisationID", strOrgId);
                                            contentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                            contentValues.put("Bhargo_SubmittedUserID", strUserId);
                                            contentValues.put("Bhargo_DistributionID", strDistributionId);
                                            contentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                            contentValues.put("Bhargo_AppVersion", strAppVersion);
                                            contentValues.put("Bhargo_SyncStatus", 0);
                                            contentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                            contentValues.put("Bhargo_PostID", strPostId);
                                            contentValues.put("Bhargo_FormName", strAppName);
                                            String trans_date = "Bhargo_Trans_Date";
                                            String is_active = "Bhargo_Is_Active";
                                            contentValues.put(trans_date, getTransDateandTimeFromDevice());
                                            contentValues.put(is_active, "yes");
                                            JSONObject controlValuesObject = datafieldsArray.getJSONObject(0);
                                            for (String mainformColumnName : dataCollectionObject.getList_Table_Columns()) {
                                                if (isAutoNumbersAvaliable && isAutoNumberControl(mainformColumnName)) {
                                                    //Autonumber shouldn't be updated in update mode
                                                } else if (controlValuesObject.has(mainformColumnName)) {
                                                    contentValues.put(mainformColumnName, controlValuesObject.getString(mainformColumnName));
                                                } else if (!AppConstants.Trans_id.equalsIgnoreCase(mainformColumnName)) {
                                                    String filePath = getFilePath(mainformColumnName, stringListFiles);
                                                    contentValues.put(mainformColumnName, filePath);
                                                }
                                            }

                                            OfflineDataTransaction offlineDataTransaction = new OfflineDataTransaction();
                                            offlineDataTransaction.setContentValues(contentValues);
                                            offlineDataTransaction.setSubFormName(strAppName);
                                            offlineDataTransaction.setTableName(tableName);
                                            offlineDataTransaction.setTransIDColumn(AppConstants.Trans_id);
                                            offlineDataTransaction.setTransIDValue(strTransactionId);
                                            offlineDataTransaction.setMainFormTransID(transIDOfMainform);
                                            offlineDataTransaction.setMainFormTable(tableName);
                                            offlineDataTransaction.setMainFormTransIDColumn(AppConstants.Trans_id);
                                            offlineDataTransaction.setRejectWithMessage(dataCollectionObject.getTableSettingsObject().isRejectWithMessage());
                                            offlineDataTransaction.setCompositeKeyErrorMessage(dataCollectionObject.getTableSettingsObject().getErrorMessage());
                                            offlineDataTransaction.setReplaceOnSameRow(dataCollectionObject.getTableSettingsObject().isReplaceOnSameRow());
                                            offlineDataUpdateList.add(offlineDataTransaction);

                                        } else {//If Mainform has subform columns
                                            for (int irows = 0; irows < datafieldsArray.length(); irows++) {
                                                ContentValues contentValues = new ContentValues();
                                                contentValues.put("Bhargo_OrganisationID", strOrgId);
                                                contentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                                contentValues.put("Bhargo_SubmittedUserID", strUserId);
                                                contentValues.put("Bhargo_DistributionID", strDistributionId);
                                                contentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                contentValues.put("Bhargo_AppVersion", strAppVersion);
                                                contentValues.put("Bhargo_SyncStatus", 0);
                                                contentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                contentValues.put("Bhargo_PostID", strPostId);
                                                contentValues.put("Bhargo_FormName", strAppName);
                                                String trans_date = "Bhargo_Trans_Date";
                                                String is_active = "Bhargo_Is_Active";
                                                contentValues.put(trans_date, getTransDateandTimeFromDevice());
                                                contentValues.put(is_active, "yes");
                                                JSONObject controlValuesObject = datafieldsArray.getJSONObject(irows);
                                                for (String mainformColumnName : dataCollectionObject.getList_Table_Columns()) {
                                                    if (controlValuesObject.has(mainformColumnName)) {
                                                        contentValues.put(mainformColumnName, controlValuesObject.getString(mainformColumnName));
                                                    } else if (!AppConstants.Trans_id.equalsIgnoreCase(mainformColumnName)) {
                                                        String filePath = getFilePath(mainformColumnName, stringListFiles);
                                                        contentValues.put(mainformColumnName, filePath);
                                                    }
                                                }
                                            /*if (dataCollectionObject.getTableSettingsObject().getPrimaryKey() != null && !dataCollectionObject.getTableSettingsObject().getPrimaryKey().isEmpty()) {
                                                transIDOfMainform = controlValuesObject.getString(dataCollectionObject.getTableSettingsObject().getPrimaryKey());
                                                contentValues.put(trans_id, controlValuesObject.getString(dataCollectionObject.getTableSettingsObject().getPrimaryKey()));
                                            }
                                            if (dataCollectionObject.getTableSettingsObject().getCompositeKeys() != null && dataCollectionObject.getTableSettingsObject().getCompositeKeys().size() > 0) {
                                                String value = "";
                                                for (String compositeKey : dataCollectionObject.getTableSettingsObject().getCompositeKeys()) {
                                                    value = value + controlValuesObject.getString(compositeKey);
                                                }
                                                transIDOfMainform = value;
                                                contentValues.put(trans_id, value);
                                            }*/
                                                if (controlValuesObject.getString("TransID") != null && !controlValuesObject.getString("TransID").isEmpty()) {
                                                    OfflineDataTransaction offlineDataTransaction = new OfflineDataTransaction();
                                                    offlineDataTransaction.setContentValues(contentValues);
                                                    offlineDataTransaction.setSubFormName(strAppName);
                                                    offlineDataTransaction.setTableName(tableName);
                                                    offlineDataTransaction.setTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataTransaction.setTransIDValue(controlValuesObject.getString("TransID"));
                                                    offlineDataTransaction.setMainFormTransID(transIDOfMainform);
                                                    offlineDataTransaction.setMainFormTable(tableName);
                                                    offlineDataTransaction.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                    offlineDataTransaction.setRejectWithMessage(dataCollectionObject.getTableSettingsObject().isRejectWithMessage());
                                                    offlineDataTransaction.setCompositeKeyErrorMessage(dataCollectionObject.getTableSettingsObject().getErrorMessage());
                                                    offlineDataTransaction.setReplaceOnSameRow(dataCollectionObject.getTableSettingsObject().isReplaceOnSameRow());
                                                    offlineDataUpdateList.add(offlineDataTransaction);
                                                } else {//To Insert new Row
                                                    OfflineDataTransaction offlineDataTransaction = improveDataBase.insertIntoMainFormTable(contentValues, mainObject.getString("TableName"), AppConstants.Trans_id, dataCollectionObject.getTableSettingsObject().isReplaceOnSameRow());
                                                    transIDOfMainform = offlineDataTransaction.getMainFormTransID();
                                                    if (offlineDataTransaction.getErrorMessage() != null) {
                                                        String message = "";
                                                        if (dataCollectionObject.getTableSettingsObject().isRejectWithMessage() && dataCollectionObject.getTableSettingsObject().getErrorMessage() != null) {
                                                            message = dataCollectionObject.getTableSettingsObject().getErrorMessage();
                                                        } else {
                                                            message = "Insertion failed \n" + offlineDataTransaction.getErrorMessage();
                                                        }
                                                        alertDialogError(message);
                                                        return;
                                                    }

                                                }
                                            }
                                        }
                                    }

                                    for (int i = 0; i < subFormStringList.size(); i++) {
                                        if (subFormStringList.get(i).get(0).size() > 0) {
                                            String subFormNameID = subFormStringList.get(i).get(0).get(0).split("\\|")[0];
                                            String subFormName = subFormNameID.substring(0, subFormNameID.length() - 2);
                                            ControlObject subformControlObject = ImproveHelper.getControlObject(dataCollectionObject.getControls_list(), subFormName);
                                            if (!subformControlObject.getTableSettingsType().equalsIgnoreCase(getString(R.string.rb_none))) {
                                                String subFormtableName = getSubformTableName(subFormName);
                                                String trans_date = "Bhargo_Trans_Date";
                                                String is_active = "Bhargo_Is_Active";
                                                String subFormAutoID = "";
                                                for (int j = 0; j < subFormStringList.get(i).size(); j++) {
                                                    boolean rowHasdata = false;
                                                    ContentValues subFormContentValues = new ContentValues();
                                                    for (int k = 1; k < subFormStringList.get(i).get(j).size(); k++) {
                                                        String[] splittedString = subFormStringList.get(i).get(j).get(k).split("\\|");
                                                        if (splittedString.length > 1) {
                                                            rowHasdata = true;
                                                            String columnName = splittedString[0];
                                                            String columnValue = splittedString[1];
                                                            subFormContentValues.put(columnName, columnValue);
                                                        } else {
                                                            String columnName = splittedString[0];
                                                            String columnValue = null;
                                                            subFormContentValues.put(columnName, columnValue);
                                                        }
                                                    }

                                                    for (int k = 0; k < subFormFilesList.get(i).get(j).size(); k++) {
                                                        rowHasdata = true;
                                                        HashMap<String, String> subFormFilesMap = subFormFilesList.get(i).get(j).get(k);
                                                        for (Map.Entry<String, String> entry : subFormFilesMap.entrySet()) {
                                                            subFormContentValues.put(entry.getKey().split("\\$")[0], entry.getValue());
                                                        }
                                                    }
                                                    //if subform has mainform columns
                                                    if (ImproveHelper.checkSubFormHasMainFormColumns(subFormName, dataCollectionObject)) {
                                                        List<String> subFormColumns = ImproveHelper.getSubFormColumns(subFormName, dataCollectionObject);
                                                        for (int j1 = 0; j1 < stringListSubmit.size(); j1++) {
                                                            if (subFormColumns.contains(stringListSubmit.get(j1).split("\\|")[0])) {
                                                                subFormContentValues.put(stringListSubmit.get(j1).split("\\|")[0], (stringListSubmit.get(j1) + " ").split("\\|")[1].trim());
                                                            }
                                                        }
                                                        //Auto Number
                                                        for (int a = 0; a < subFormHaveMainFormAutoNumber.size(); a++) {
                                                            if (subFormColumns.contains(subFormHaveMainFormAutoNumber.get(a).split("\\|")[0])) {
                                                                subFormContentValues.put(subFormHaveMainFormAutoNumber.get(a).split("\\|")[0], (subFormHaveMainFormAutoNumber.get(a) + " ").split("\\|")[1].trim());
                                                            }
                                                        }
                                                    }

                                            /*String primary_key = subformControlObject.getSubFormtableSettingsObject().getPrimaryKey();
                                            if (primary_key != null && !primary_key.isEmpty()) {
                                                String value = subFormContentValues.getAsString(primary_key);
                                                subFormContentValues.put(trans_id, value);
                                            }
                                            if (subformControlObject.getSubFormtableSettingsObject().getCompositeKeys() != null && subformControlObject.getSubFormtableSettingsObject().getCompositeKeys().size() > 0) {
                                                String value = "";
                                                for (String compositeKey : subformControlObject.getSubFormtableSettingsObject().getCompositeKeys()) {
                                                    value = value + subFormContentValues.get(compositeKey);
                                                }

                                                subFormContentValues.put(trans_id, value);
                                            }*/
                                                    //Row Updation
//                        String tableName = strCreatedBy + "_" + improveHelper.replaceWithUnderscore(strAppName) + "_" + improveHelper.replaceWithUnderscore(subFormName);
                                                    subFormContentValues.put("Bhargo_OrganisationID", strOrgId);
                                                    subFormContentValues.put("Bhargo_CreatedUserID", strCreatedBy);
                                                    subFormContentValues.put("Bhargo_SubmittedUserID", strUserId);
                                                    subFormContentValues.put("Bhargo_DistributionID", strDistributionId);
                                                    subFormContentValues.put("Bhargo_IMEI", ImproveHelper.getMyDeviceId(context));
                                                    subFormContentValues.put("Bhargo_AppVersion", strAppVersion);
                                                    subFormContentValues.put("Bhargo_SyncStatus", 0);
                                                    subFormContentValues.put("Bhargo_UserID", sessionManager.getUserDataFromSession().getUserID());
                                                    subFormContentValues.put("Bhargo_PostID", strPostId);
                                                    subFormContentValues.put("Bhargo_SubFormName", subFormName);
                                                    subFormContentValues.put("Bhargo_FormName", strAppName);
                                                    subFormContentValues.put(AppConstants.Ref_Trans_id, transIDOfMainform);
                                                    subFormContentValues.put(trans_date, getTransDateandTimeFromDevice());
                                                    subFormContentValues.put(is_active, "yes");

                                                    String TransID = getTransId(subFormName, j);
                                                    List<String> editFormRowIDs = improveHelper.getRowIdsOfEditForm(jsonObjChildForm.getJSONArray("SubForm").getJSONObject(i).getJSONArray(subFormName));
                                                    if (editFormRowIDs != null && editFormRowIDs.size() > 0 && editFormRowIDs.contains(TransID)) {//Updated Row
                                                        OfflineDataTransaction offlineDataTransaction = new OfflineDataTransaction();
                                                        offlineDataTransaction.setContentValues(subFormContentValues);
                                                        offlineDataTransaction.setSubFormName(subFormName);
                                                        offlineDataTransaction.setTableName(subFormtableName);
                                                        offlineDataTransaction.setTransIDColumn(AppConstants.Trans_id);
                                                        offlineDataTransaction.setTransIDValue(TransID);
                                                        offlineDataTransaction.setMainFormTransID(transIDOfMainform);
                                                        offlineDataTransaction.setMainFormTable(tableName);
                                                        offlineDataTransaction.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                        offlineDataTransaction.setRejectWithMessage(subformControlObject.getSubFormtableSettingsObject().isRejectWithMessage());
                                                        offlineDataTransaction.setCompositeKeyErrorMessage(subformControlObject.getSubFormtableSettingsObject().getErrorMessage());
                                                        offlineDataTransaction.setReplaceOnSameRow(subformControlObject.getSubFormtableSettingsObject().isReplaceOnSameRow());
                                                        offlineDataUpdateList.add(offlineDataTransaction);
                                                    } else {//New Row
                                                        OfflineDataTransaction offlineDataSubForm = new OfflineDataTransaction();
                                                        offlineDataSubForm.setContentValues(subFormContentValues);
                                                        offlineDataSubForm.setSubFormName(subFormName);
                                                        offlineDataSubForm.setTableName(subFormtableName);
                                                        offlineDataSubForm.setTransIDColumn(AppConstants.Trans_id);
                                                        offlineDataSubForm.setMainFormTransID(transIDOfMainform);
                                                        offlineDataSubForm.setMainFormTable(tableName);
                                                        offlineDataSubForm.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                        offlineDataSubForm.setReplaceOnSameRow(subformControlObject.getSubFormtableSettingsObject().isReplaceOnSameRow());
                                                        offlineDataSubForm.setRejectWithMessage(subformControlObject.getSubFormtableSettingsObject().isRejectWithMessage());
                                                        offlineDataSubForm.setCompositeKeyErrorMessage(subformControlObject.getSubFormtableSettingsObject().getErrorMessage());
                                                        if (rowHasdata) {
                                                            offlineDataInsertList.add(offlineDataSubForm);
                                                        }

                                                        //--Autonumber--//
                                                        JSONArray subformArray = mainObject.getJSONArray("SubFormDataFields");
                                                        if (subformArray.getJSONObject(i).get("IfautoincrementControls").toString().equalsIgnoreCase("true")) {
                                                            JSONObject jso = subformArray.getJSONObject(i);
                                                            List<String> subFormColumns = ImproveHelper.getSubFormColumns(subFormName, dataCollectionObject);
                                                            JSONArray dataFieldsSubForm = jso.getJSONArray("DataFields");
                                                            JSONObject subformAutoIncrementObj = dataFieldsSubForm.getJSONObject(j).getJSONObject("AutoIncrementControl");
                                                            for (String subformColumn : subFormColumns) {
                                                                if (isAutoNumberControl(subFormName, subformColumn)) {
                                                                    String subformtableName = getSubformTableName(subFormName);
                                                                    String[] autoKeyValues = getAutoNumberKeyValues(subformAutoIncrementObj, subformColumn, subformtableName, subFormAutoID);
                                                                    subFormAutoID = autoKeyValues[1];
                                                                    subFormContentValues.put(subformColumn, autoKeyValues[0]);//Prefix+Suffix+Suffix1
                                                                    subFormContentValues.put("AutoIncrementVal", autoKeyValues[1]);//Suffix
                                                                    subFormContentValues.put("AutoNumberJson", autoKeyValues[2]);//Json
                                                                }
                                                            }
                                                        }

                                                        //--Autonumber--//
                                                    }
                                                }

                                                //For deleted Rows of Subform
                                                JSONArray subformJsonArrayData = jsonObjChildForm.getJSONArray("SubForm").getJSONObject(i).getJSONArray(subFormName);
                                                String deletedRowdIDs = improveHelper.checkForDeletedRows(subformJsonArrayData, AppConstants.transIdsOfSubforms.get(subFormName));
                                                if (deletedRowdIDs != null && !deletedRowdIDs.isEmpty()) {
                                                    String[] deletedRowID = deletedRowdIDs.split(",");
                                                    for (String rowID : deletedRowID) {
                                                        OfflineDataTransaction offlineDataTransaction = new OfflineDataTransaction();
                                                        ContentValues contentValuesDel = new ContentValues();
                                                        contentValuesDel.put(is_active, "no");
                                                        offlineDataTransaction.setContentValues(contentValuesDel);
                                                        offlineDataTransaction.setSubFormName(subFormName);
                                                        offlineDataTransaction.setTableName(subFormtableName);
                                                        offlineDataTransaction.setTransIDColumn(AppConstants.Trans_id);
                                                        offlineDataTransaction.setTransIDValue(rowID);
                                                        offlineDataTransaction.setMainFormTransID(transIDOfMainform);
                                                        offlineDataTransaction.setMainFormTable(tableName);
                                                        offlineDataTransaction.setMainFormTransIDColumn(AppConstants.Trans_id);
                                                        offlineDataUpdateList.add(offlineDataTransaction);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (offlineDataUpdateList.size() > 0) {
                                        OfflineDataTransaction offlineDataTransaction = improveDataBase.updateFormData(offlineDataUpdateList, offlineDataInsertList);
                                        if (offlineDataTransaction.getErrorMessage() != null) {
                                            dismissProgressDialog();
                                            String errorMsg = offlineDataTransaction.getSubFormName() + " updation failed\n" + offlineDataTransaction.getErrorMessage();
                                            alertDialogError(errorMsg);
                                        } else {
                                            if (AppConstants.GlobalObjects != null) {
                                                AppConstants.GlobalObjects.setSubmitresponse_Status("200");
                                            }
                                            PrefManger.putSharedPreferencesBoolean(context, AppConstants.OfflineDataExistKey, true);
                                            dismissProgressDialog();
                                            Toast.makeText(context, getString(R.string.data_updated_successfully), Toast.LENGTH_SHORT).show();
                                            afterSync();
                                        }
                                    }
                                } else {
                                    dismissProgressDialog();
                                    Toast.makeText(context, result, Toast.LENGTH_SHORT).show();
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                }
            });

            updateThread.start();
            updateThread.join();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void saveOrUpdateMapExistingOffline() {

        String stringListFileObjListOffline = "";
        String subFormStringListFileObjListOffline = "";
        String stringListSubmitOffline = "";
        String subFormStringListOffline = "";
        List<JSONObject> stringListFileObjList = new ArrayList<>();

        List<List<List<JSONObject>>> subFormFilesObjList = new ArrayList<>();

        for (int i = 0; i < stringListFiles.size(); i++) {

            if (!stringListFiles.get(i).isEmpty()) {
                stringListFileObjList.add(new JSONObject(stringListFiles.get(i)));
            }
        }

        //Row Insertion

        if (stringListFileObjList.size() > 0) {

            stringListFileObjListOffline = String.valueOf(stringListFileObjList);
        }


        for (int i = 0; i < subFormFilesList.size(); i++) {

            List<List<HashMap<String, String>>> rows = subFormFilesList.get(i);
            List<List<JSONObject>> rowObjs = new ArrayList<>();

            for (int j = 0; j < rows.size(); j++) {

                List<HashMap<String, String>> controls = rows.get(j);
                List<JSONObject> controlObjs = new ArrayList<>();

                for (int k = 0; k < controls.size(); k++) {

                    HashMap<String, String> hashMap = controls.get(k);

                    if (!hashMap.isEmpty())

                        controlObjs.add(new JSONObject(hashMap));
                }

                rowObjs.add(controlObjs);

            }

            subFormFilesObjList.add(rowObjs);

        }

        if (subFormFilesList.size() > 0) {

            subFormStringListFileObjListOffline = subFormFilesObjList.toString();
        }

        if (stringListSubmit.size() > 0) {

            stringListSubmitOffline = stringListSubmit.toString();
        }

        if (subFormStringList.size() > 0) {

            subFormStringListOffline = subFormStringList.toString();
        }

        String tableName = null;
        List<QueryFilterField_Bean> insertFields = null;
        List<QueryFilterField_Bean> updateFields = null;
        List<QueryFilterField_Bean> filterFields = null;
        if (dataCollectionObject.getTableSettingsType() != null && dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Create New Table")) {
            tableName = strCreatedBy + "_" + ImproveHelper.getTableNameWithOutSpace(strAppName);
        } else if (dataCollectionObject.getTableSettingsType() != null && dataCollectionObject.getTableSettingsType().equalsIgnoreCase("Map existing table")) {
            tableName = dataCollectionObject.getExistingTableName();
            insertFields = dataCollectionObject.getMainTableInsertFields();
            updateFields = dataCollectionObject.getMainTableUpdateFields();
            filterFields = dataCollectionObject.getMainTableWhereConditionFields();
        } else {
            tableName = strCreatedBy + "_" + ImproveHelper.getTableNameWithOutSpace(strAppName);
        }

        String finalSubFormStringListOffline = subFormStringListOffline;
        String finalStringListSubmitOffline = stringListSubmitOffline;
        String finalStringListFileObjListOffline = stringListFileObjListOffline;
        String finalSubFormStringListFileObjListOffline = subFormStringListFileObjListOffline;
        List<QueryFilterField_Bean> finalInsertFields = insertFields;
        List<QueryFilterField_Bean> finalUpdateFields = updateFields;
        List<QueryFilterField_Bean> finalFilterFields = filterFields;

        if (app_edit.equalsIgnoreCase("Edit")) {
            try {
                long result = improveDataBase.updateIntoFormSubmitTable(strOrgId, strAppName, strCreatedBy, strUserId, strDistributionId, "123456789", "", "", strAppVersion
                        , dataCollectionObject.getTableSettingsType(), dataCollectionObject.getMapExistingType()
                        , finalInsertFields, finalUpdateFields, finalFilterFields, finalStringListSubmitOffline, finalStringListFileObjListOffline
                        , finalSubFormStringListOffline, finalSubFormStringListFileObjListOffline
                        , AppConstants.SYNC_STATUS_SAVED, mainObject, sessionManager.getUserDataFromSession().getUserID(), strTransactionId, strPostId, "yes");

                if (result > 0) {
                    dismissProgressDialog();
                    Toast.makeText(context, getString(R.string.data_saved_successfully), Toast.LENGTH_SHORT).show();
                    afterSync();

                }
            } catch (Exception e) {
                e.printStackTrace();

            }
        } else {
            try {
                long result = improveDataBase.insertIntoFormSubmitTable(strOrgId, strAppName, strCreatedBy, strUserId, strDistributionId, "123456789", "", "", strAppVersion
                        , dataCollectionObject.getTableSettingsType(), dataCollectionObject.getMapExistingType()
                        , finalInsertFields, finalUpdateFields, finalFilterFields, finalStringListSubmitOffline, finalStringListFileObjListOffline
                        , finalSubFormStringListOffline, finalSubFormStringListFileObjListOffline
                        , AppConstants.SYNC_STATUS_SAVED, mainObject, sessionManager.getUserDataFromSession().getUserID(), strPostId, "yes");


                if (result > 0) {
                    AppConstants.hasData = true;
                    dismissProgressDialog();
                    Toast.makeText(context, getString(R.string.data_saved_successfully), Toast.LENGTH_SHORT).show();
                    afterSync();

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /*
     * --------------------------------------------------------------------------
     * Method: spacing Parameters: MotionEvent Returns: float Description:
     * checks the spacing between the two fingers on touch
     * ----------------------------------------------------
     */
   /* public class DownloadFileFromURLTask extends AsyncTask<String, String, String> {

        String strFileName, strAppName, strSDCardUrl;
        File file, saveFilePath;
        Context context;


        public DownloadFileFromURLTask(Context context, String strAppName, String strSDCardUrl) {
            this.context = context;
            this.strAppName = strAppName;
            this.strSDCardUrl = strSDCardUrl;

        }

        */

    /**
     * Downloading file in background thread
     *//*


        @SuppressLint("SdCardPath")
        @Override
        protected String doInBackground(String... f_url) {
            Log.i(TAG, "do in background" + f_url[0]);
            int count;
            try {
                URL url = new URL(f_url[0]);
                URLConnection conection = url.openConnection();
                conection.connect();
                // getting file length
                int lenghtOfFile = conection.getContentLength();

                // input stream to read file - with 8k buffer
                InputStream input = new BufferedInputStream(url.openStream(), 8192);

                String[] strsplit = f_url[0].split("/");
                strFileName = strsplit[strsplit.length - 1];

//                String strSeparatePaths = AppConstants.API_NAME_CHANGE +"/"+strAppName.replaceAll(" ", "_")+"/";
                File cDir = context.getExternalFilesDir(strSDCardUrl);
                saveFilePath = new File(cDir.getAbsolutePath(), strFileName.replaceAll(" ", "_"));
                Log.d(TAG, "AppsListFilesSave: " + saveFilePath);
//                outFile = new File(file, strFileName);
                // Output stream to write file
                OutputStream output = new FileOutputStream(saveFilePath);

                byte[] data = new byte[1024];

                long total = 0;

                while ((count = input.read(data)) != -1) {
                    total += count;
                    // publishing the progress....
                    // After this onProgressUpdate will be called
                    publishProgress("" + (int) ((total * 100) / lenghtOfFile));

                    // writing data to file
                    output.write(data, 0, count);
                }

                // flushing output
                output.flush();

                // closing streams
                output.close();
                input.close();


            } catch (Exception e) {

                Log.e("Error: ", e.getMessage());
            }

            return null;
        }

        */
    private void saveOrUpdateOffline() {
        try {
            String stringListFileObjListOffline = "";
            String subFormStringListFileObjListOffline = "";
            String stringListSubmitOffline = "";
            String subFormStringListOffline = "";
            List<JSONObject> stringListFileObjList = new ArrayList<>();
            List<List<List<JSONObject>>> subFormFilesObjList = new ArrayList<>();

            for (int i = 0; i < stringListFiles.size(); i++) {

                if (!stringListFiles.get(i).isEmpty()) {
                    stringListFileObjList.add(new JSONObject(stringListFiles.get(i)));
                }
            }

            if (stringListFileObjList.size() > 0) {

                stringListFileObjListOffline = String.valueOf(stringListFileObjList);
            }

            for (int i = 0; i < subFormFilesList.size(); i++) {

                List<List<HashMap<String, String>>> rows = subFormFilesList.get(i);
                List<List<JSONObject>> rowObjs = new ArrayList<>();

                for (int j = 0; j < rows.size(); j++) {

                    List<HashMap<String, String>> controls = rows.get(j);
                    List<JSONObject> controlObjs = new ArrayList<>();

                    for (int k = 0; k < controls.size(); k++) {

                        HashMap<String, String> hashMap = controls.get(k);

                        if (!hashMap.isEmpty())

                            controlObjs.add(new JSONObject(hashMap));
                    }

                    rowObjs.add(controlObjs);

                }

                subFormFilesObjList.add(rowObjs);

            }

            if (subFormFilesList.size() > 0) {

                subFormStringListFileObjListOffline = subFormFilesObjList.toString();
            }


            if (stringListSubmit.size() > 0) {

                stringListSubmitOffline = stringListSubmit.toString();
            }

            if (subFormStringList.size() > 0) {

                subFormStringListOffline = subFormStringList.toString();
            }

            if (app_edit.equalsIgnoreCase("Edit")) {

                long result = improveDataBase.updateIntoFormSubmitTable(strOrgId, strAppName, strCreatedBy, strUserId, strDistributionId, "123456789", "", "", strAppVersion
                        , dataCollectionObject.getTableSettingsType(), dataCollectionObject.getMapExistingType()
                        , null, null, null, stringListSubmitOffline, stringListFileObjListOffline
                        , subFormStringListOffline, subFormStringListFileObjListOffline
                        , AppConstants.SYNC_STATUS_SAVED, mainObject, sessionManager.getUserDataFromSession().getUserID(), strTransactionId, strPostId, "no");


                if (result > 0) {
                    dismissProgressDialog();
                    Toast.makeText(context, getString(R.string.data_saved_successfully), Toast.LENGTH_SHORT).show();
                    afterSync();

                }

            } else {

                long result = improveDataBase.insertIntoFormSubmitTable(strOrgId, strAppName, strCreatedBy, strUserId, strDistributionId, "123456789", "", "", strAppVersion
                        , dataCollectionObject.getTableSettingsType(), dataCollectionObject.getMapExistingType()
                        , null, null, null, stringListSubmitOffline, stringListFileObjListOffline
                        , subFormStringListOffline, subFormStringListFileObjListOffline
                        , AppConstants.SYNC_STATUS_SAVED, mainObject, sessionManager.getUserDataFromSession().getUserID(), strPostId, "no");

                if (result > 0) {
                    AppConstants.hasData = true;
                    dismissProgressDialog();
                    Toast.makeText(context, getString(R.string.data_saved_successfully), Toast.LENGTH_SHORT).show();
                    afterSync();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void openDocumentScanner() {
        Intent intentDocScanner = new Intent(context, DocumentScannerActivity.class);
        startActivityForResult(intentDocScanner, REQUEST_DOCUMENT_SCANNER);
    }

    public String setStyleFromIndex(String propertyText) {

        if (propertyText.equalsIgnoreCase("0")) {
            propertyText = "Bold";
        } else if (propertyText.equalsIgnoreCase("1")) {
            propertyText = "Italic";
        }
        return propertyText;
    }

    /**
     * Updating progress bar
     *//*
        protected void onProgressUpdate(String... progress) {
            // setting progress percentage

        }

        */
    public void controlManagementOptions() {

        TM1 = new Thread(new Runnable() {
            @Override
            public void run() {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {

                        if (visibilityManagementOptions != null && visibilityManagementOptions.getVisibilityOffColumns() != null && visibilityManagementOptions.getVisibilityOffColumns().size() > 0) {
                            SetVisibleOff(visibilityManagementOptions.getVisibilityOffColumns());
                        }
                        if (visibilityManagementOptions != null && visibilityManagementOptions.getVisibilityOnColumns() != null && visibilityManagementOptions.getVisibilityOnColumns().size() > 0) {
                            SetVisibleOn(visibilityManagementOptions.getVisibilityOnColumns());
                        }
                        if (visibilityManagementOptions != null && visibilityManagementOptions.getDisableColumns() != null && visibilityManagementOptions.getDisableColumns().size() > 0) {
//                            SetDisable(visibilityManagementOptions.getDisableColumns());
                            new ControlManagement(context, dataCollectionObject.getControls_list(), List_ControlClassObjects, visibilityManagementOptions.getDisableColumns(), 2);
                        }
                        if (visibilityManagementOptions != null && visibilityManagementOptions.getEnableColumns() != null && visibilityManagementOptions.getEnableColumns().size() > 0) {
//                            SetEnable(visibilityManagementOptions.getEnableColumns());
                            new ControlManagement(context, dataCollectionObject.getControls_list(), List_ControlClassObjects, visibilityManagementOptions.getEnableColumns(), 3);
                        }

                        AppConstants.EDIT_COLUMNS = new ArrayList<>();
                        if (app_edit != null && app_edit.equalsIgnoreCase("edit")) {
                            AppConstants.EDIT_COLUMNS = improveHelper.getEditColumns(dataCollectionObject.getDataManagementOptions().getEditColumns(), AppConstants.CONTROL, null);
                        }
                        if (AppConstants.EDIT_COLUMNS != null && AppConstants.EDIT_COLUMNS.size() > 0) {
                            if (app_edit != null && app_edit.equalsIgnoreCase("edit")) {
                                new ControlManagement(context, dataCollectionObject.getControls_list(), List_ControlClassObjects, AppConstants.EDIT_COLUMNS, 1);
                            }
                        }


                    }
                });
            }
        });

        TM1.start();
        try {
            TM1.join();
        } catch (
                InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void loadAndOpenSectionPopup() {
        showProgressDialog("Please wait...");
        new Thread(new Runnable() {
            @Override
            public void run() {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        List<ControlObject> controlObjectList = list_Control;
                        if (controlObjectList != null && controlObjectList.size() > 0) {
                            selectedPopUpData = null;
                            for (int i = 0; i < controlObjectList.size(); i++) {
                                if (controlObjectList.get(i).getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                                    if (controlObjectList.get(i).getControlName().equalsIgnoreCase(popUpManagementAction.getSelectedSection())) {
                                        strSectionControlName = controlObjectList.get(i).getControlName();
                                        if(controlObjectList.get(i).isHideDisplayName()) {
                                            tv_displayName.setVisibility(View.GONE);
                                            tv_hint.setVisibility(View.GONE);
                                        }else{
                                            tv_displayName.setText(controlObjectList.get(i).getDisplayName());
                                            tv_hint.setText(controlObjectList.get(i).getHint());
                                        }

                                        sectionControlList = new ArrayList<>();
                                        sectionControlList = controlObjectList.get(i).getSubFormControlList();
                                        if (sectionControlList != null && sectionControlList.size() > 0) {
                                            globalControlObjectsSection(sectionControlList);
//                                if (ll_sectionContainer.getChildCount() == 0) {
                                            ll_sectionContainer.removeAllViews();
                                            if (controlObjectList.get(i).isSectionUIFormNeeded() && controlObjectList.get(i).getUiPrimaryLayoutModelClass() != null) {
                                                for (int j = 0; j < sectionControlList.size(); j++) {
                                                    sectionControlList.get(j).setSectionControl(false);
                                                }
                                                uiPrimaryLayoutModelClass = controlObjectList.get(i).getUiPrimaryLayoutModelClass();
                                                primaryLayoutData(uiPrimaryLayoutModelClass, ll_sectionContainer);
//                                        new LoadPrimaryLayoutDataSection(uiPrimaryLayoutModelClass,ll_sectionContainer).execute();
                                            } else {
                                                if (hashPopUpSetValues != null && hashPopUpSetValues.containsKey(strSectionControlName)) {
                                                    selectedPopUpData = hashPopUpSetValues.get(strSectionControlName);
                                                    //maincontrolName: ControlData is Object
                                                    //subformcontrolName: AarryList is Object in that each row is List, in List controlName is key:ControlData is Value
                                                }
                                                for (int k = 0; k < sectionControlList.size(); k++) {
                                                    sectionControlList.get(k).setSectionControl(false);
                                                    Object editDataObj = null; //SectionMainControl :ControlData, SectionSubFormControl:ArrayList
                                                    if (selectedPopUpData != null) {
                                                        editDataObj = selectedPopUpData.get(sectionControlList.get(k).getControlName());
                                                    }
                                                    loadControl(sectionControlList.get(k), sectionControlList.get(k).getControlType(), ll_sectionContainer, null, null, 0, editDataObj,true);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        handLoadAndOpenSectionPopup.sendEmptyMessage(0);
                    }
                });
            }
        }).start();
    }

    private void openSectionPopupWithEditChecking() {
        boolean sectionEditStatus = sectionEditDoneList.contains(strSectionControlName);
        if (app_edit.equalsIgnoreCase("edit") && !sectionEditStatus) {
            showProgressDialog("Edit Data");
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    SetEditDataToControlValues setData = new SetEditDataToControlValues(context, MainActivity.this, List_ControlClassObjects, sectionControlList);
                    setData.jsonWiseExecute(jsonObjChildForm, new com.bhargo.user.interfaces.Callback() {
                        @Override
                        public void onSuccess(Object result) {
                            dismissProgressDialog();
                            sectionEditDoneList.add(strSectionControlName);
                            openSectionPopup();
                        }

                        @Override
                        public void onFailure(Throwable throwable) {
                            dismissProgressDialog();
                            //showToast(context,throwable.toString());
                            System.out.println("Popup" + throwable.toString());
                        }
                    });
                }
            });

        } else {
            if (hashPopUpSetValues != null && hashPopUpSetValues.containsKey(strSectionControlName)) {
                ControlUtils.setValueToPopupSectionForEditCase(context, sectionControlList, selectedPopUpData, List_ControlClassObjects);
            }
            openSectionPopup();
        }

    }

    private void openSectionPopup() {
        if (sectionControlList != null && sectionControlList.size() > 0) {
            for (int l = 0; l < sectionControlList.size(); l++) {
                sectionControlList.get(l).setSectionControl(true);
            }
        }
        sheetBehaviorSection.setState(BottomSheetBehavior.STATE_EXPANDED);
        sheetBehaviorSection.setHideable(false);
    }

    private void popUpManagement_old(ActionWithoutCondition_Bean actionObj) {
        try {
            PopUpManagementAction popUpManagementAction = actionObj.getPopUpManagementAction();
            if (popUpManagementAction.getPopUpControlType().equalsIgnoreCase("Close")) {
                saveDataInControlsAndClosePopUp();
            } else if (popUpManagementAction.getPopUpControlType().equalsIgnoreCase("Open")) {
                //ll_sectionContainer.removeAllViews();
                List<ControlObject> controlObjectList = new ArrayList<>();
                controlObjectList = list_Control;
                if (controlObjectList != null && controlObjectList.size() > 0) {
                    for (int i = 0; i < controlObjectList.size(); i++) {
                        if (controlObjectList.get(i).getControlType().contentEquals(CONTROL_TYPE_SECTION)) {
                            if (controlObjectList.get(i).getControlName().equalsIgnoreCase(popUpManagementAction.getSelectedSection())) {
                                strSectionControlName = controlObjectList.get(i).getControlName();
                                tv_displayName.setText(controlObjectList.get(i).getDisplayName());
                                tv_hint.setText(controlObjectList.get(i).getHint());
                                sectionControlList = new ArrayList<>();
                                sectionControlList = controlObjectList.get(i).getSubFormControlList();
                                if (sectionControlList != null && sectionControlList.size() > 0) {
                                    globalControlObjectsSection(sectionControlList);
//                                if (ll_sectionContainer.getChildCount() == 0) {
                                    ll_sectionContainer.removeAllViews();
                                    if (controlObjectList.get(i).isSectionUIFormNeeded() && controlObjectList.get(i).getUiPrimaryLayoutModelClass() != null) {
                                        for (int j = 0; j < sectionControlList.size(); j++) {
                                            sectionControlList.get(j).setSectionControl(false);
                                        }
                                        uiPrimaryLayoutModelClass = controlObjectList.get(i).getUiPrimaryLayoutModelClass();
                                        primaryLayoutData(uiPrimaryLayoutModelClass, ll_sectionContainer);
//                                        new LoadPrimaryLayoutDataSection(uiPrimaryLayoutModelClass,ll_sectionContainer).execute();
                                    } else {
                                        HashMap<String, Object> selectedPopUpData = null;
                                        if (hashPopUpSetValues != null && hashPopUpSetValues.containsKey(strSectionControlName)) {
                                            selectedPopUpData = hashPopUpSetValues.get(strSectionControlName);
                                            //maincontrolName: ControlData is Object
                                            //subformcontrolName: AarryList is Object in that each row is List, in List controlName is key:ControlData is Value

                                        }
                                        for (int k = 0; k < sectionControlList.size(); k++) {
                                            sectionControlList.get(k).setSectionControl(false);
                                            Object editDataObj = null; //SectionMainControl :ControlData, SectionSubFormControl:ArrayList
                                            if (selectedPopUpData != null) {
                                                editDataObj = selectedPopUpData.get(sectionControlList.get(k).getControlName());
                                            }
                                            if (app_edit.equalsIgnoreCase("edit")) {

                                            }
                                            loadControl(sectionControlList.get(k), sectionControlList.get(k).getControlType(), ll_sectionContainer, null, null, 0, editDataObj,true);
                                            if (k == sectionControlList.size() - 1) {
                                                if (hashPopUpSetValues != null && hashPopUpSetValues.containsKey(strSectionControlName)) {
                                                    ControlUtils.setValueToPopupSectionForEditCase(context, sectionControlList, selectedPopUpData, List_ControlClassObjects);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (sectionControlList != null && sectionControlList.size() > 0) {
                        for (int l = 0; l < sectionControlList.size(); l++) {
                            sectionControlList.get(l).setSectionControl(true);
                        }
                    }
                }
//                sheetBehaviorSection.setFitToContents(true);
                sheetBehaviorSection.setState(BottomSheetBehavior.STATE_EXPANDED);
            }

            // close Popup
            iv_sectionCancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
//                    try {
//                        if(formValidated(list_Control)) {
                            saveDataInControlsAndClosePopUp();
                        /*SaveControlValues controlValues = new SaveControlValues(strSectionControlName, sectionControlList, List_ControlClassObjects);
                        hashPopUpSetValues.put(strSectionControlName, controlValues.sectionInPopUpSaveValues().get(strSectionControlName));
                        hideKeyboard(MainActivity.this, view);
                        sheetBehaviorSection.setState(BottomSheetBehavior.STATE_COLLAPSED);*/
//                        }else{
//                            sheetBehaviorSection.setHideable(false);
//                        }
//                    } catch (InterruptedException e) {
//                        throw new RuntimeException(e);
//                    }
                }
            });

/*
            if (popUpManagementAction.getPopUpControlType().equalsIgnoreCase("Open")) {
                sheetBehaviorSection.setFitToContents(true);
                sheetBehaviorSection.setState(BottomSheetBehavior.STATE_EXPANDED);
            }
*/
        } catch (Exception e) {
            Log.getStackTraceString(e);
        }
    }

    private void popUpManagement(ActionWithoutCondition_Bean actionObj) {
        try {
            popUpManagementAction = actionObj.getPopUpManagementAction();
            if (popUpManagementAction.getPopUpControlType().equalsIgnoreCase("Close")) {
                saveDataInControlsAndClosePopUp();
            } else if (popUpManagementAction.getPopUpControlType().equalsIgnoreCase("Open")) {
                loadAndOpenSectionPopup();
            }
            // close Popup
            iv_sectionCancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
//                    try {
//                        if(formValidated(list_Control)) {
                            saveDataInControlsAndClosePopUp();
                        /*SaveControlValues controlValues = new SaveControlValues(strSectionControlName, sectionControlList, List_ControlClassObjects);
                        hashPopUpSetValues.put(strSectionControlName, controlValues.sectionInPopUpSaveValues().get(strSectionControlName));
                        hideKeyboard(MainActivity.this, view);
                        sheetBehaviorSection.setState(BottomSheetBehavior.STATE_COLLAPSED);*/
//                        }else{
//                            sheetBehaviorSection.setHideable(false);
//                        }
//                    } catch (InterruptedException e) {
//                        throw new RuntimeException(e);
//                    }
                }
            });
        } catch (Exception e) {
            Log.getStackTraceString(e);
        }
    }

    private void saveDataInControlsAndClosePopUp() {
//        try {
//            if(formValidated(list_Control)) {
                if (strSectionControlName != null && !strSectionControlName.isEmpty() && sheetBehaviorSection != null && sheetBehaviorSection.getState() == BottomSheetBehavior.STATE_EXPANDED) {
                    SaveControlValues controlValues = new SaveControlValues(context, strSectionControlName, sectionControlList, List_ControlClassObjects);
                    hashPopUpSetValues.put(strSectionControlName, controlValues.sectionInPopUpSaveValues().get(strSectionControlName));
                    hideKeyboard(MainActivity.this, view);
                    sheetBehaviorSection.setState(BottomSheetBehavior.STATE_COLLAPSED);
                } else if (strSectionControlName != null && !strSectionControlName.isEmpty() && sheetBehaviorSection != null && sheetBehaviorSection.getState() == BottomSheetBehavior.STATE_COLLAPSED) {
                    SaveControlValues controlValues = new SaveControlValues(context, strSectionControlName, sectionControlList, List_ControlClassObjects);
                    hashPopUpSetValues.put(strSectionControlName, controlValues.sectionInPopUpSaveValues().get(strSectionControlName));
                    hideKeyboard(MainActivity.this, view);
                }
//            }else{
//                sheetBehaviorSection.setHideable(false);
//            }
//        } catch (InterruptedException e) {
//            throw new RuntimeException(e);
//        }
    }

    private void loadControlOnPopup() {

    }
    /*
     * --------------------------------------------------------------------------
     * Method: midPoint Parameters: PointF object, MotionEvent Returns: void
     * Description: calculates the midpoint between the two fingers
     * ------------------------------------------------------------
     */





    /*class API_DilogDismiss implements DialogInterface.OnDismissListener {
        String ServiceType, ServiceResult, ServiceSource;
        boolean Single;
        List<API_OutputParam_Bean> List_API_OutParams;
        ActionWithoutCondition_Bean ActionBean;
        GetAPIDetails_Bean.APIDetails APIDetails;
        boolean fromsms = false;

        public API_DilogDismiss(boolean fromsms, GetAPIDetails_Bean.APIDetails APIDetails, String ServiceType, String ServiceResult,
                                ActionWithoutCondition_Bean ActionBean, boolean Single, String ServiceSource) {
            this.fromsms = fromsms;
            if (!fromsms) {
                this.ServiceType = ServiceType;
                this.ServiceResult = ServiceResult;
                this.ActionBean = ActionBean;
                this.List_API_OutParams = ActionBean.getList_API_OutParams();
                this.Single = Single;
                this.ServiceSource = ServiceSource;
                this.APIDetails = APIDetails;
            }
        }

        @Override
        public void onDismiss(DialogInterface dialogInterface) {
            try {

                if (fromsms) {
                    try {
                        JSONObject jobj = new JSONObject();
                        jobj.put("CallNotification_Execution", "Success");
                        jobj.put("SMS Status", "SMS Sent Success");

                        ImproveHelper.Controlflow("CallNotification Execute", "Action", "CallNotification", jobj.toString());
                    } catch (JSONException e) {
                        ImproveHelper.improveException(context, TAG, "CallNotification Execute", e);
                    }
                    if (ActionBean.isSuccessMessageIsEnable()) {
                        ExpressionMainHelper ehelper = new ExpressionMainHelper();
                        String Message = ehelper.ExpressionHelper(MainActivity.this, ActionBean.getMessage_Success());
                        if (ActionBean.getMessage_SuccessDisplayType().equalsIgnoreCase("2")) {
                            ShowMessageDialogWithOk(context, Message, 2);
                        } else {
                            Toast.makeText(context, Message, Toast.LENGTH_SHORT).show();
                        }


                    } else if (!ActionBean.isSuccessMessageIsEnable()) {

                    } else {
                        ImproveHelper.showToast(context, "SMS Sent..");
                    }

                } else {
                    LinkedHashMap<String, List<String>> OutputData;

                    boolean FileData = false;
                    FileData = getTypeofService(APIDetails.getSuccessCaseDetails());

                    if (FileData) {
                        OutputData = sk_filedata.OutputData;
                    } else if (ServiceSource.equalsIgnoreCase("Service Based")) {
                        if (APIDetails.getServiceCallsAt().equalsIgnoreCase("Server")) {
                            OutputData = sk_Rest_interpreter.OutputData;
                        } else {
                            if (ServiceType.trim().equalsIgnoreCase("Soap Web Service")) {
                                OutputData = sk_soapobj.OutputData;
                            } else if (ServiceType.trim().equalsIgnoreCase("WCF Service")) {
                                OutputData = sk_Restobj_WCF.OutputData;
                            } else {
                                OutputData = sk_Restobj.OutputData;
                            }
                        }
                    } else {
                        OutputData = sk_Rest_interpreterQuery.OutputData;
                    }


                    if (OutputData != null && OutputData.size() != 0) {
                        ImproveHelper.improveLog(TAG, "API_DilogDismiss_OutputData ", new Gson().toJson(OutputData));
                        try {
                            JSONObject jobj = new JSONObject();
                            jobj.put("CallAPI_Execution", "Success");
                            jobj.put("OutputData_Size", OutputData.size());

                            ImproveHelper.Controlflow("CallAPI Execute", "Action", "CallAPI", jobj.toString());
                        } catch (JSONException e) {
                            ImproveHelper.improveException(context, TAG, "CallAPI Execute", e);
                        }

                        Log.e("Result: ", "" + OutputData);
                        if (ActionBean.getSaveOfflineType().equalsIgnoreCase("Response")) {
                            SessionManager sessionManager = new SessionManager(context);
                            sessionManager.createCallAPIResponseData(strAppName + "_" + ActionBean.getSelectedAPIName(), OutputData);
                        }

                        setAPIParamstoGlobalObjects(APIDetails.getServiceName(), OutputData);

                        if (ServiceResult.equalsIgnoreCase("Single")) {
                            for (int i = 0; i < List_API_OutParams.size(); i++) {
                                if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                                    SetSingleValuetoControlForCallAPIorForm(OutputData, List_API_OutParams.get(i));
                                }
                            }
                        } else {
                            String SelectedSubForm = ActionBean.getSelectedSubForm();
                            if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_SUBFORM)) {
                                SubformView subform = (SubformView) List_ControlClassObjects.get(SelectedSubForm);
                                List<String> MappedControlID = new ArrayList<String>();
                                List<String> MappedParamName = new ArrayList<String>();
                                subform.saveNewRowData(OutputData, List_API_OutParams);
                                for (int i = 0; i < List_API_OutParams.size(); i++) {
                                    if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                                        MappedControlID.add(List_API_OutParams.get(i).getOutParam_Mapped_ID().trim());
                                        MappedParamName.add(List_API_OutParams.get(i).getOutParam_Name());
                                    }
                                }

                                int maxsize = 0;
                                for (int i = 0; i < MappedControlID.size(); i++) {
                                    if (maxsize < OutputData.get(MappedControlID.get(i).toLowerCase()).size()) {
                                        maxsize = OutputData.get(MappedControlID.get(i).toLowerCase()).size();
                                    }
                                }
//                                List<String> MappedValues = OutputData.get(MappedControlID.get(0).toLowerCase());
                                subform.setiMinRows(maxsize);

                                if (subform.iMaxRows <= maxsize) {
                                    subform.setiMaxRows(maxsize);
                                } else {
                                    subform.setiMaxRows(Integer.parseInt(subform.controlObject.getMaximumRows()));
                                }

                                View view = subform.getSubFormView();
                                LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
//                                GridLayout ll_MainSubFormContainer_GridLayout = view.findViewById(R.id.ll_MainSubFormContainer_GridLayout);

                                List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subform.getList_ControlClassObjects();
                                if (!ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                                    ll_MainSubFormContainer.removeAllViews();
                                    subform_List_ControlClassObjects.removeAll(subform_List_ControlClassObjects);
                                }
                                int totalrowsbeforeadding = subform.getList_ControlClassObjects().size();
                                for (int i = 0; i < maxsize; i++) {
//                                    subform.addInnerSubFormStripGridLayout(subform.getContext(), ll_MainSubFormContainer_GridLayout, true);
                                    subform.addInnerSubFormStrip(subform.getContext(), ll_MainSubFormContainer, true);
                                    LinkedHashMap<String, Object> temp_object = subform.getList_ControlClassObjects().get(totalrowsbeforeadding + i);

                                    SetValuetoMultiControlInCallAPIFormUsedbyControlObject(i, OutputData, List_API_OutParams, subform.controlObject.getSubFormControlList(), temp_object);
                                }

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_GRIDFORM)) {
                                GridControl subform = (GridControl) List_ControlClassObjects.get(SelectedSubForm);
                                List<String> MappedControlID = new ArrayList<String>();
                                List<String> MappedParamName = new ArrayList<String>();
                                subform.saveNewRowData(OutputData, List_API_OutParams);
                                for (int i = 0; i < List_API_OutParams.size(); i++) {
                                    if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                                        MappedControlID.add(List_API_OutParams.get(i).getOutParam_Mapped_ID().trim());
                                        MappedParamName.add(List_API_OutParams.get(i).getOutParam_Name());
                                    }
                                }
                                List<String> MappedValues = OutputData.get(MappedControlID.get(0).toLowerCase());
                                subform.setiMinRows(MappedValues.size());
                                if (subform.iMaxRows <= MappedValues.size()) {
                                    subform.setiMaxRows(MappedValues.size());
                                } else {
                                    subform.setiMaxRows(Integer.parseInt(subform.controlObject.getMaximumRows()));
                                }

                                View view = subform.getSubFormView();

                                LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                subform.SubFormTAG = 0;
                                List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subform.getList_ControlClassObjects();
                                if (!ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                                    ll_grid_view.removeAllViews();
                                    subform_List_ControlClassObjects.removeAll(subform_List_ControlClassObjects);
                                }

                                int totalrowsbeforeadding = subform.getList_ControlClassObjects().size();

                                for (int i = 0; i < MappedValues.size(); i++) {
                                    subform.addGridRow();
                                    LinkedHashMap<String, Object> temp_object = subform.getList_ControlClassObjects().get(totalrowsbeforeadding + i);

                                    SetValuetoMultiControlInCallAPIFormUsedbyControlObject(i, OutputData, List_API_OutParams, subform.controlObject.getSubFormControlList(), temp_object);
                                }

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                                DataViewer DataViewer = (DataViewer) List_ControlClassObjects.get(SelectedSubForm);
                                DataViewer.setOutputData(OutputData);
                                List<DataViewerModelClass> dataViewerModelClassList = new ArrayList<>();
                                if (ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                                    dataViewerModelClassList = DataViewer.getDataViewerModelClassList();
                                }

                                List<String> Header_list = OutputData.get(ActionBean.getHeader_Mapped_item().toLowerCase());
                                List<String> CornerText_list = new ArrayList<>();
                                List<String> SubHeader_list = new ArrayList<>();
                                List<String> DateandTime_list = new ArrayList<>();
                                List<String> ImagePath_list = new ArrayList<>();
                                List<String> ProfileImagePath_list = new ArrayList<>();
                                LinkedHashMap<String, List<String>> hash_Description = new LinkedHashMap<String, List<String>>();
                                List<String> Advance_ImageSource = new ArrayList<>();
                                List<String> Advance_ConditionColumn = new ArrayList<>();
//--EV--//
                                List<String> Distance_list = new ArrayList<>();
                                List<String> WorkingHours_list = new ArrayList<>();
                                List<String> ItemOne_list = new ArrayList<>();
                                List<String> ItemTwo_list = new ArrayList<>();
                                List<String> Rating_list = new ArrayList<>();
                                List<String> Source_Icons_list = new ArrayList<>();
                                List<String> Source_Name_list = new ArrayList<>();
                                List<String> Source_Time_list = new ArrayList<>();
                                List<String> News_Type_list = new ArrayList<>();

                                //--EV--//

                                if (ActionBean.getCorner_Mapped_item() != null && ActionBean.getCorner_Mapped_item().length() > 0) {
                                    CornerText_list = OutputData.get(ActionBean.getCorner_Mapped_item().toLowerCase());
                                }

                                if (ActionBean.getSubHeader_Mapped_item() != null && ActionBean.getSubHeader_Mapped_item().length() > 0) {
                                    SubHeader_list = OutputData.get(ActionBean.getSubHeader_Mapped_item().toLowerCase());
                                }
                                if (ActionBean.getDateandTime_Mapped_item() != null && ActionBean.getDateandTime_Mapped_item().length() > 0) {
                                    DateandTime_list = OutputData.get(ActionBean.getDateandTime_Mapped_item().toLowerCase());
                                }

                                if (ActionBean.getImage_Mapped_item() != null && ActionBean.getImage_Mapped_item().length() > 0) {
                                    ImagePath_list = OutputData.get(ActionBean.getImage_Mapped_item().toLowerCase());
                                }
                                if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                    if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                        Advance_ImageSource = OutputData.get(ActionBean.getImageAdvanced_ImageSource().toLowerCase());
                                    }
                                    Advance_ConditionColumn = OutputData.get(ActionBean.getImageAdvanced_ConditionColumn().toLowerCase());
                                }

                                if (ActionBean.getProfileImage_Mapped_item() != null && ActionBean.getProfileImage_Mapped_item().length() > 0) {
                                    ProfileImagePath_list = OutputData.get(ActionBean.getProfileImage_Mapped_item().toLowerCase());
                                }
                                if (ActionBean.getDescription_Mapped_item() != null && ActionBean.getDescription_Mapped_item().size() > 0) {
                                    for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                        List<String> X_ItemList = OutputData.get(ActionBean.getDescription_Mapped_item().get(x).toLowerCase());
                                        hash_Description.put(ActionBean.getDescription_Mapped_item().get(x), X_ItemList);
                                    }
                                }
                                //--EV--//
                                if (ActionBean.getDistance() != null && ActionBean.getDistance().length() > 0) {
                                    Distance_list = OutputData.get(ActionBean.getDistance().toLowerCase());
                                }
                                if (ActionBean.getWorking_hours() != null && ActionBean.getWorking_hours().length() > 0) {
                                    WorkingHours_list = OutputData.get(ActionBean.getWorking_hours().toLowerCase());
                                }
                                if (ActionBean.getItem_one_count() != null && ActionBean.getItem_one_count().length() > 0) {
                                    ItemOne_list = OutputData.get(ActionBean.getItem_one_count().toLowerCase());
                                }
                                if (ActionBean.getItem_two_count() != null && ActionBean.getItem_two_count().length() > 0) {
                                    ItemTwo_list = OutputData.get(ActionBean.getItem_two_count().toLowerCase());
                                }
                                if (ActionBean.getRating() != null && ActionBean.getRating().length() > 0) {
                                    Rating_list = OutputData.get(ActionBean.getRating().toLowerCase());
                                }
                                if (ActionBean.getSource_icon() != null && ActionBean.getSource_icon().length() > 0) {
                                    Source_Icons_list = OutputData.get(ActionBean.getSource_icon().toLowerCase());
                                }
                                if (ActionBean.getSource_name() != null && ActionBean.getSource_name().length() > 0) {
                                    Source_Name_list = OutputData.get(ActionBean.getSource_name().toLowerCase());
                                }
                                if (ActionBean.getSource_time() != null && ActionBean.getSource_time().length() > 0) {
                                    Source_Time_list = OutputData.get(ActionBean.getSource_time().toLowerCase());
                                }
                                if (ActionBean.getNews_type() != null && ActionBean.getNews_type().length() > 0) {
                                    News_Type_list = OutputData.get(ActionBean.getNews_type().toLowerCase());
                                }
                                //--EV--//

                                for (int i = 0; i < Header_list.size(); i++) {
                                    DataViewerModelClass dmv = new DataViewerModelClass();
                                    dmv.setHeading(Header_list.get(i));
                                    List<String> Description = new ArrayList<String>();
                                    switch (DataViewer.controlObject.getDataViewer_UI_Pattern()) {
                                        case AppConstants.GridView_With_Image_2_Columns:
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            if (CornerText_list != null && CornerText_list.size() != 0) {
                                                dmv.setCornerText(CornerText_list.get(i));
                                            }

                                            if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                                if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                                    dmv.setImage_Path(null);
                                                    dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                                }
                                                dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                                dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                            }
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Image_3_Columns:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                                if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                                    dmv.setImage_Path(null);
                                                    dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                                }
                                                dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                                dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                            }
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Image_2_Columns_call:
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                                if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                                    dmv.setImage_Path(null);
                                                    dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                                }
                                                dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                                dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                            }
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Image_3_Columns_call:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                                if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                                    dmv.setImage_Path(null);
                                                    dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                                }
                                                dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                                dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                            }
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Video_2_Columns:
                                            dmv.setVideo_Path(ImagePath_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Video_3_Columns:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setVideo_Path(ImagePath_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Video_2_Columns_call:
                                            dmv.setVideo_Path(ImagePath_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.GridView_With_Video_3_Columns_call:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setVideo_Path(ImagePath_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.ListView_2_Columns:
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.ListView_With_Image_2_Columns:
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.ListView_With_Image_3_Columns:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.Geo_Spatial_View:
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setGpsValue(ImagePath_list.get(i));
                                            }
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.TimeLine_View:
                                            dmv.setDateandTime(DateandTime_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.TimeLine_With_Photo_View:
                                            if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
                                                dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
                                            }

                                            dmv.setDateandTime(DateandTime_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.LinearView_With_Video:
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.BlogSpot_View:
                                            if (ProfileImagePath_list != null && ProfileImagePath_list.size() != 0) {
                                                dmv.setProfileImage_Path(ProfileImagePath_list.get(i));
                                            }
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setImage_Path(ImagePath_list.get(i));
                                            break;
                                        case AppConstants.MapView_Item_Info:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setDistance(Distance_list.get(i));
                                            dmv.setWorkingHours(WorkingHours_list.get(i));
                                            dmv.setItemOneCount(ItemOne_list.get(i));
                                            dmv.setItemTwoCount(ItemTwo_list.get(i));
                                            break;
                                        case AppConstants.EV_Dashboard_Design_One:
                                        case AppConstants.EV_Dashboard_Design_Three:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                                if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                                    dmv.setImage_Path(null);
                                                    dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                                }
                                                dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                                dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                            }
                                            dmv.setRating(Rating_list.get(i));
                                            break;
                                        case AppConstants.EV_Dashboard_Design_Two:
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            if (ActionBean.getList_ImageAdvanced_Items() != null && ActionBean.getList_ImageAdvanced_Items().size() > 0) {
                                                if (ActionBean.getImageAdvanced_ImageorNot().equalsIgnoreCase("Yes")) {
                                                    dmv.setImage_Path(null);
                                                    dmv.setAdvanceImage_Source(Advance_ImageSource.get(i));
                                                }
                                                dmv.setList_Image_Path(ActionBean.getList_ImageAdvanced_Items());
                                                dmv.setAdvanceImage_ConditionColumn(Advance_ConditionColumn.get(i));
                                            }

                                            break;
                                        case AppConstants.EV_News_Design:
                                            if (Source_Icons_list.size() > 0) {
                                                dmv.setSource_icon(Source_Icons_list.get(i));
                                                dmv.setSource_name(Source_Name_list.get(i));
                                                dmv.setSource_time(Source_Time_list.get(i));
                                            }
                                            dmv.setNews_type(News_Type_list.get(i));
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.EV_Notifications_Design:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                        case AppConstants.EV_Dealers_Design:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setDistance(Distance_list.get(i));
                                            dmv.setWorkingHours(WorkingHours_list.get(i));
                                            if (ImagePath_list != null && ImagePath_list.size() != 0) {
                                                dmv.setImage_Path(ImagePath_list.get(i));
                                            }
                                            break;
                                        case AppConstants.EV_Jobs_Design:
                                            dmv.setSubHeading(SubHeader_list.get(i));
                                            dmv.setSource_name(Source_Name_list.get(i));
                                            dmv.setSource_time(Source_Time_list.get(i));
                                            for (int x = 0; x < ActionBean.getDescription_Mapped_item().size(); x++) {
                                                List<String> xItem = hash_Description.get(ActionBean.getDescription_Mapped_item().get(x));
                                                Description.add(xItem.get(i));
                                            }
                                            dmv.setDescription(Description);
                                            break;
                                    }
                                    dataViewerModelClassList.add(dmv);
                                }

                                DataViewer.SetDataViewerData(dataViewerModelClassList);

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
                                String cName = ActionBean.getResult_ListView_FilterMappedControl();
                                String mapControl = ActionBean.getResult_ListView_FilterItem();
                                String mapControlID = ActionBean.getResult_ListView_FilterItemID();

                                List<String> MappedValues = OutputData.get(mapControl);
                                List<String> MappedValuesIDS = OutputData.get(mapControlID);
                                Log.e("Result: ", "" + MappedValues.toString());
                                SetMultipleValuesbyControlID(cName, MappedValues, MappedValuesIDS);


                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
                                String cName = ActionBean.getResult_ListView_FilterMappedControl();
                                String mapControl = ActionBean.getResult_ListView_FilterItem();

                                List<String> MappedValues = OutputData.get(mapControl);
                                Log.e("Result: ", "" + MappedValues.toString());
                                SetMultipleValuestoImageControl(cName, MappedValues);


                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_MAPVIEW)) {
                                MapControl MapControl = (MapControl) List_ControlClassObjects.get(SelectedSubForm);
                                if (List_API_OutParams.get(0).getOutParam_Mapped_ID() != null && List_API_OutParams.get(0).getOutParam_Mapped_ID().length() > 0) {
                                    String MappedValue = List_API_OutParams.get(0).getOutParam_Mapped_ID();
                                    List<String> MappedValues = OutputData.get(MappedValue.toLowerCase());
                                    String DefultMarker = List_API_OutParams.get(0).getOutParam_Marker_defultImage();
                                    MapControl.setMapPonitsDynamically(AppConstants.map_Multiple_Marker, MappedValues, DefultMarker);
                                } else {

                                }

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CALENDARVIEW)) {
                                CalendarEventControl CalendarEventControl = (CalendarEventControl) List_ControlClassObjects.get(SelectedSubForm);

                                String MappedValue_Date = List_API_OutParams.get(0).getOutParam_Mapped_ID();
                                String MappedValue_Message = List_API_OutParams.get(1).getOutParam_Mapped_ID();
                                List<String> MappedValues_Date = OutputData.get(MappedValue_Date.toLowerCase());
                                List<String> MappedValues_Message = OutputData.get(MappedValue_Message.toLowerCase());

                                for (int x = 0; x < MappedValues_Date.size(); x++) {
                                    CalendarEventControl.AddDateDynamically("Single", MappedValues_Date.get(x), MappedValues_Message.get(x));
                                }

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
                                ChartControl chartControl = (ChartControl) List_ControlClassObjects.get(SelectedSubForm);
                                chartControl.setChartData(ActionBean, OutputData);
                            }
                        }

                        if (ActionBean.isSuccessMessageIsEnable()) {
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            String Message = ehelper.ExpressionHelper(MainActivity.this, ActionBean.getMessage_Success());
                            if (ActionBean.getMessage_SuccessDisplayType().equalsIgnoreCase("2")) {
                                ShowMessageDialogWithOk(context, Message, 2);
                            } else {
                                Toast.makeText(context, Message, Toast.LENGTH_SHORT).show();
                            }


                        } else if (!ActionBean.isSuccessMessageIsEnable()) {

                        } else {
//                            ImproveHelper.showToast(getApplicationContext(), "Data Recevied ...");
                        }
                    } else {

                        try {
                            JSONObject jobj = new JSONObject();
                            jobj.put("CallAPI_Execution", "Success");
                            jobj.put("OutputData_Size", OutputData.size());

                            ImproveHelper.Controlflow("CallAPI Execute", "Action", "CallAPI", jobj.toString());
                        } catch (JSONException e) {
                            ImproveHelper.improveException(context, TAG, "CallAPI Execute", e);
                        }

                        if (ServiceResult.equalsIgnoreCase("Single")) {
                            for (int i = 0; i < List_API_OutParams.size(); i++) {
                                if (!List_API_OutParams.get(i).isOutParam_Delete()) {
                                    SetNoDatatoControlForCallAPIorForm(List_API_OutParams.get(i));
                                }
                            }
                        } else {
                            String SelectedSubForm = ActionBean.getSelectedSubForm();
                            if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_SUBFORM)) {
                                SubformView subform = (SubformView) List_ControlClassObjects.get(SelectedSubForm);
                                if (!ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                                    subform.setiMinRows(0);
                                    subform.setiMaxRows(Integer.parseInt(subform.controlObject.getMaximumRows()));
                                    View view = subform.getSubFormView();
                                    LinearLayout ll_MainSubFormContainer = view.findViewById(R.id.ll_MainSubFormContainer);
                                    ll_MainSubFormContainer.removeAllViews();
                                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subform.getList_ControlClassObjects();
                                    subform_List_ControlClassObjects.removeAll(subform_List_ControlClassObjects);
                                }
                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_GRIDFORM)) {
                                GridControl subform = (GridControl) List_ControlClassObjects.get(SelectedSubForm);

                                View view = subform.getSubFormView();

                                if (!ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                                    LinearLayout ll_grid_view = view.findViewById(R.id.ll_grid_view);

                                    subform.SubFormTAG = 0;
                                    List<LinkedHashMap<String, Object>> subform_List_ControlClassObjects = subform.getList_ControlClassObjects();

                                    subform.setiMinRows(0);
                                    subform.setiMaxRows(Integer.parseInt(subform.controlObject.getMaximumRows()));
                                    ll_grid_view.removeAllViews();
                                    subform_List_ControlClassObjects.removeAll(subform_List_ControlClassObjects);
                                }
                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                                DataViewer DataViewer = (DataViewer) List_ControlClassObjects.get(SelectedSubForm);
                                DataViewer.setOutputData(OutputData);
                                List<DataViewerModelClass> dataViewerModelClassList = new ArrayList<>();
                                if (ActionBean.getMulti_DataType().equalsIgnoreCase("append")) {
                                    DataViewerModelClass dmv = new DataViewerModelClass();
                                    dataViewerModelClassList.add(dmv);
                                }
                                DataViewer.SetDataViewerData(dataViewerModelClassList);

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
                                String cName = ActionBean.getResult_ListView_FilterMappedControl();
                                SetMultipleValuesbyControlID(cName, null, null);
                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_MAPVIEW)) {
                                MapControl MapControl = (MapControl) List_ControlClassObjects.get(SelectedSubForm);
                                MapControl.getGoogleMap().clear();

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CALENDARVIEW)) {

                            } else if (ActionBean.getResult_DisplayType().equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
                            }
                        }

                        if (AppConstants.GlobalObjects.getAPIs_status_ListHash() == null) {
                            LinkedHashMap<String, String> tempAPI = new LinkedHashMap<String, String>();
                            AppConstants.GlobalObjects.setAPIs_status_ListHash(tempAPI);
                        }

                        AppConstants.GlobalObjects.getAPIs_status_ListHash().put(APIDetails.getServiceName().toLowerCase(), "100");

                        if (ActionBean.isMessage_SuccessNoRecordsIsEnable()) {
                            ExpressionMainHelper ehelper = new ExpressionMainHelper();
                            String Message = ehelper.ExpressionHelper(MainActivity.this, ActionBean.getMessage_SuccessNoRecords());
                            if (ActionBean.getMessage_SuccessNoRecordsDisplayType().equalsIgnoreCase("2")) {
                                ShowMessageDialogWithOk(context, Message, 2);
                            } else {
                                Toast.makeText(context, Message, Toast.LENGTH_SHORT).show();
                            }


                        } else if (!ActionBean.isMessage_SuccessNoRecordsIsEnable()) {

                        } else {
                            ImproveHelper.showToast(getApplicationContext(), "No Data Found...");
                        }
                    }
                }
                dismissProgressDialog();

                if (FromAction == 1) {
                    Executeindex++;
                    EventExecute();
                } else {
                    Executeindex++;
                    checkandExecute(IfElseBlock_Bean);
                }
            } catch (Exception E) {
                System.out.println("Error===" + E);
                ImproveHelper.showToast(getApplicationContext(), "Server Error.");
            }
        }
    }*/

    private void globalControlObjectsSection(List<ControlObject> sectionControlListMain) {
        List<ControlObject> sectionControlList = new ArrayList<>();
        sectionControlList = sectionControlListMain;
        for (int k = 0; k < sectionControlList.size(); k++) {
            if (!sectionControlList.get(k).getControlName().equals("")) {
                globalControlObjects.put(sectionControlList.get(k).getControlName(), sectionControlList.get(k));
            }
        }
//        return globalControlObjects;
    }


    /**
     * After completing background task Dismiss the progress dialog
     **//*
        @SuppressLint("SdCardPath")
        @Override
        protected void onPostExecute(String file_url) {
            Log.i(TAG, "on post execute!: " + file_url);

            // dismiss progressbars after the file was downloaded
//            if (saveFilePath.exists()) {
            Log.d(TAG, "onPostExecuteAppsList: " + strFileName);
//                ImproveHelper.showToastAlert(context, strFileName + "\n" + " Download successfully!");
//            }
            *//*else {
//                ImproveHelper.showToastAlert(context, "No File Exist");
            }*//*


        }
    }*/
    public interface DownloadFileListener {
        void onSuccess(File file);

        void onFailed(String errorMessage);
    }

    public class LoadPrimaryLayoutData extends AsyncTask<String, String, String> {


        public LoadPrimaryLayoutData() {
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                    try {
                        primaryLayoutData(uiPrimaryLayoutModelClass, linearLayout);
                    } catch (Exception e) {
                        Log.getStackTraceString(e);
                    }
                }
            });
            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            try {
                Log.d(TAG, "onPostExecute: " + "dismiss");
            } catch (Exception e) {
                Log.getStackTraceString(e);
            }

           /* dismissProgressDialog();

            iv_loading.setVisibility(View.GONE);*/
        }
    }

    public class LoadPrimaryLayoutDataSection extends AsyncTask<String, String, String> {

        private final UIPrimaryLayoutModelClass uiPrimaryLayoutModelClass;
        private final LinearLayout linearLayoutSection;

        public LoadPrimaryLayoutDataSection(UIPrimaryLayoutModelClass uiPrimaryLayoutModelClass, LinearLayout linearLayoutSection) {
            this.uiPrimaryLayoutModelClass = uiPrimaryLayoutModelClass;
            this.linearLayoutSection = linearLayoutSection;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    primaryLayoutData(uiPrimaryLayoutModelClass, linearLayoutSection);
                }
            });
            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            Log.d(TAG, "onPostExecute: " + "dismiss");
        }
    }

    public class DownloadFileFromURLTask extends AsyncTask<String, String, String> {

        String strFileName, strFileNameUnderscore, strAppName, strSDCardUrl;
        File file, saveFilePath;
        Context context;
        int flag = 0;
        DownloadFileListener downloadFileListener;

        public DownloadFileFromURLTask(Context context, String strAppName, String strSDCardUrl, int flag, DownloadFileListener downloadFileListener) {
            this.context = context;
            this.strAppName = strAppName;
            this.strSDCardUrl = strSDCardUrl;
            this.flag = flag;
            this.downloadFileListener = downloadFileListener;
        }

        /**
         * Downloading file in background thread
         */


        @SuppressLint("SdCardPath")
        @Override
        protected String doInBackground(String... f_url) {
            Log.i(TAG, "do in background" + f_url[0]);
            int count;
            try {
                URL url = new URL(f_url[0]);
                URLConnection conection = url.openConnection();
                conection.connect();
                // getting file length
                int lenghtOfFile = conection.getContentLength();

                // input stream to read file - with 8k buffer
                InputStream input = new BufferedInputStream(url.openStream(), 8192);

                String[] strsplit = f_url[0].split("/");
                strFileName = strsplit[strsplit.length - 1];
                strFileNameUnderscore = strFileName.replaceAll(" ", "_");
                /*if (flag != 1 && ((strFileName.contentEquals("DepartmentMaster.txt"))
                        || (strFileName.contentEquals("DesignationMaster.txt"))
                        || (strFileName.contentEquals("LocationMaster.txt"))
                        || (strFileName.contentEquals("PostingMaster.txt"))
                )) {*/
                if(flag == 0) {
                    strFileName = "DC_" + strFileNameUnderscore;
                }
//                }
//                String strSeparatePaths = AppConstants.API_NAME_CHANGE +"/"+strAppName.replaceAll(" ", "_")+"/";
                File cDir = context.getExternalFilesDir(strSDCardUrl);
                saveFilePath = new File(cDir.getAbsolutePath(), strFileName);
                Log.d(TAG, "AppsListFilesSave: " + saveFilePath);
//                outFile = new File(file, strFileName);
                // Output stream to write file
                OutputStream output = new FileOutputStream(saveFilePath);

                byte[] data = new byte[1024];

                long total = 0;

                while ((count = input.read(data)) != -1) {
                    total += count;
                    // publishing the progress....
                    // After this onProgressUpdate will be called
                    publishProgress("" + (int) ((total * 100) / lenghtOfFile));

                    // writing data to file
                    output.write(data, 0, count);
                }

                // flushing output
                output.flush();

                // closing streams
                output.close();
                input.close();


            } catch (Exception e) {
                saveFilePath = null;
                Log.e("Error: ", e.getMessage());
            }

            if (saveFilePath == null) {
                return null;
            } else {
                return saveFilePath.getAbsolutePath();
            }
        }

        /**
         * Updating progress bar
         */
        protected void onProgressUpdate(String... progress) {
            // setting progress percentage

        }

        /**
         * After completing background task Dismiss the progress dialog
         **/
        @SuppressLint("SdCardPath")
        @Override
        protected void onPostExecute(String file_url) {
            Log.i(TAG, "on post execute!: " + file_url);
            Log.d(TAG, "onPostExecuteAppsList: " + strFileName);
            if (file_url == null) {
                downloadFileListener.onFailed("Failed To Download File. Try Again!");
            } else {
                downloadFileListener.onSuccess(new File(file_url));
            }
        }
    }

    private class DrawerItemClickListener implements ListView.OnItemClickListener {
        @Override
        public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {

            String tagName = ((TextView) view).getText().toString().trim();

            view.setTag(tagName);

            for (int i = 0; i < currentMultiForm.getNavMenu().getMenuItemList().size(); i++) {

                if (tagName.contentEquals(currentMultiForm.getNavMenu().getMenuItemList().get(i).getTagName())) {

                    if (currentMultiForm.getNavMenu().getMenuItemList().get(i).getOnClickEventObject() != null) {
                        if (AppConstants.EventCallsFrom == 1) {
                            hash_Onclick_EventObjects.put(tagName, currentMultiForm.getNavMenu().getMenuItemList().get(i).getOnClickEventObject());
                            AppConstants.EventFrom_subformOrNot = false;
                            ClickEvent(view);
                        }
                    }
                }

            }

            mDrawerLayout.closeDrawer(mDrawerMainLayout);
        }
    }

    public class LoadControlsFromXML extends AsyncTask<String, String, String> {
        String designDetails = null;

        public LoadControlsFromXML(String designDetails) {
            this.designDetails = designDetails;
        }

        @Override
        protected void onPreExecute() {
//            showProgressDialog("Please wait...");
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    loadControlsWithDesign(designDetails);
                }
            });

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
//            dismissProgressDialog();
            super.onPostExecute(s);

        }
    }

    class API_RESULT implements APIResultListener {

        String ServiceType, ServiceResult, ServiceSource;
        boolean Single;
        List<API_OutputParam_Bean> List_API_OutParams;
        ActionWithoutCondition_Bean ActionBean;
        GetAPIDetails_Bean.APIDetails APIDetails;
        boolean fromsms = false;

        public API_RESULT() {
        }

        public API_RESULT(boolean fromsms, GetAPIDetails_Bean.APIDetails APIDetails, String ServiceType, String ServiceResult,
                          ActionWithoutCondition_Bean ActionBean, boolean Single, String ServiceSource) {
            this.fromsms = fromsms;
            if (!fromsms) {
                this.ServiceType = ServiceType;
                this.ServiceResult = ServiceResult;
                this.ActionBean = ActionBean;
                this.List_API_OutParams = ActionBean.getList_API_OutParams();
                this.Single = Single;
                this.ServiceSource = ServiceSource;
                this.APIDetails = APIDetails;
            }
        }
        @Override
        public void onResult(String responcestr, String responceType) {
            try {
                CallApiData callApiData=new CallApiData(getInstance(),MainActivity.this,ActionBean,fromsms,
                        APIDetails, ServiceType, ServiceResult, ServiceSource,strAppName,List_ControlClassObjects,dataCollectionObject);
                //responcestr="{\"State\":\"AP\",\"District\":\"Vizag\",\"Schools\":[{\"SchoolID\":\"123\",\"SchoolName\":\"School 123\",\"Phone\":\"9000000123\",\"classes\":[{\"classID\":\"1\",\"className\":\"1st\",\"Sections\":[\"1A\",\"1B\"]},{\"classID\":\"2\",\"className\":\"2nd\",\"Sections\":[\"2A\",\"2B\"]}],\"Facilities\":[\"PlayGround\",\"Swimming\"],\"StaffTypes\":{\"Teachers\":[{\"ID\":\"t1\",\"Name\":\"Teacher 1\",\"Details\":{\"Phone\":\"999999\",\"Address\":\"Vizag\",\"Education\":\"BTech\"}},{\"ID\":\"t2\",\"Name\":\"Teacher 2\",\"Details\":{\"Phone\":\"999999222\",\"Address\":\"Vizag\",\"Education\":\"Degree\"}}]},\"NonStaff\":[{\"ID\":\"s1\",\"Name\":\"Nostaff 1\"},{\"ID\":\"s2\",\"Name\":\"Nostaff 2\"}]},{\"SchoolID\":\"333\",\"SchoolName\":\"School 333\",\"Phone\":\"9000000333\",\"classes\":[{\"classID\":\"LKG\",\"className\":\"LKG\",\"Sections\":[\"A\",\"B\"]},{\"classID\":\"UKG\",\"className\":\"UKG\",\"Sections\":[\"A\",\"B\"]}],\"Facilities\":[\"PlayGround\",\"Swimming\",\"Chess\",\"Skating\"],\"StaffTypes\":{\"Teachers\":[{\"ID\":\"t1\",\"Name\":\"Teacher 1\",\"Details\":{\"Phone\":\"999999\",\"Address\":\"Vizag\",\"Education\":\"BTech\"}},{\"ID\":\"t2\",\"Name\":\"Teacher 2\",\"Details\":{\"Phone\":\"999999222\",\"Address\":\"Vizag\",\"Education\":\"Degree\"}}]},\"NonStaff\":[{\"ID\":\"s1\",\"Name\":\"Nostaff 1\"},{\"ID\":\"s2\",\"Name\":\"Nostaff 2\"}]}]}";
                //responceType="json";
                callApiData.resultIntoRealm(responcestr, responceType, new com.bhargo.user.interfaces.Callback() {
                    @Override
                    public void onSuccess(Object result) {
                        nextEvent();
                    }

                    @Override
                    public void onFailure(Throwable throwable) {
                        nextEvent();
                    }
                });
            } catch (Exception e) {
                ImproveHelper.showToast(getApplicationContext(), "Server Error."+e.getMessage());
            }
        }
    }

    public class LoadControlsFromChild extends AsyncTask<String, String, String> {


        public LoadControlsFromChild() {

        }

        @Override
        protected void onPreExecute() {

            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
//
                    for (int j = 0; j < list_Control.size(); j++) {
                        try {
                            String controlName = list_Control.get(j).getControlName();
                            Log.d(TAG, "loadControlsWithDesignControlNames: " + list_Control.get(j).getControlName());
                            String controlValue = null;
                            if (jsonObjChildForm.has(controlName) && !jsonObjChildForm.getString(controlName).equalsIgnoreCase("") && jsonObjChildForm.getString(controlName) != null) {
                                if (list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_GPS)) {
                                    controlValue = jsonObjChildForm.getString(controlName + "_Coordinates");
                                } else {
                                    controlValue = jsonObjChildForm.getString(controlName);
                                }
                            }

                            if (list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_CAMERA)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_GPS)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_SIGNATURE)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_AUDIO_PLAYER)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_VIDEO_PLAYER)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_VOICE_RECORDING)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_VIDEO_RECORDING)
                                    || list_Control.get(j).getControlType().equalsIgnoreCase(CONTROL_TYPE_IMAGE)) {
                                if (controlValue != null && !controlValue.isEmpty() && !controlValue.equalsIgnoreCase("")) {
                                    list_Control.get(j).setControlValue(controlValue);
                                }
                            } else {

                                list_Control.get(j).setDefaultValue(controlValue);

                            }

                            loadControl(list_Control.get(j), list_Control.get(j).getControlType(), linearLayout, null, null, 0, null,false);

                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                    if (dataCollectionObject.getOnLoadEventObject() != null) {
                        AppConstants.GlobalObjects.setCurrent_GPS("");
                        FormLoad();
                    } else {
                        dismissProgressDialog();
                    }


                }
            });

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

            Log.d(TAG, "onPostExecute: " + "dismiss");
            dismissProgressDialog();

        }
    }

    public class LoadControlsFromNew extends AsyncTask<String, String, String> {


        public LoadControlsFromNew() {

        }

        @Override
        protected void onPreExecute() {

            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    jArrayAutoIncementControls = new JSONArray();
                    isAutoNumbersAvaliable = false;
                    for (int i = 0; i < list_Control.size(); i++) {
                        loadControl(list_Control.get(i), list_Control.get(i).getControlType(), linearLayout, null, null, 0, null,false);
                    }
                    if(getIntent().hasExtra("voice_to_text")) {
                        voiceInputService(getIntent().getStringExtra("voice_to_text"));
                    }
                    iv_loading.setVisibility(View.GONE);
                    if (dataCollectionObject.getOnLoadEventObject() != null) {
                        if (AppConstants.GlobalObjects != null) {
                            AppConstants.GlobalObjects.setCurrent_GPS("");
                        }
                        FormLoad();
                    } else {
                        dismissProgressDialog();
                    }
                    if (dataCollectionObject.getOnLoadEventObject() == null) {
                        formLoad = false;
                        if (AppConstants.EDIT_MODE) {
                            addFormEditEvent();
                        }
                    }

                    CheckLivetrackingandSetSavedState();

                }
            });

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            Log.d(TAG, "onPostExecute: " + "dismiss");
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && linearLayout.getChildCount()>0) {
                linearLayout.getChildAt(0).setFocusable(View.FOCUSABLE);
                linearLayout.getChildAt(0).setFocusableInTouchMode(true);
                linearLayout.getChildAt(0).requestFocus();
            }

            controlManagementOptions();
//            dismissProgressDialog();
        }
    }

    public class OnlyWrapData extends AsyncTask<String, String, String> {

        int height;
        int viewH;
        LinearLayout.LayoutParams layoutParams;
        LinearLayout.LayoutParams layoutParamsView;

        public OnlyWrapData(int height, int viewH, LinearLayout.LayoutParams layoutParamsView, LinearLayout.LayoutParams layoutParams) {

        }

        @Override
        protected void onPreExecute() {

            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... strings) {

            runOnUiThread(new Runnable() {
                @Override
                public void run() {

                }
            });

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            Log.d(TAG, "onPostExecute: " + "dismiss");
            dismissProgressDialog();

        }
    }

    private void voiceInputService(String content){
        try {
            showProgressDialog("Getting Data");
//            String content = " Content: My name is Kumar aged 30 and mobile number, email id are 9959950913 and abc@gmail.com respectively. I am male studying in Class 1";
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("form fields : ");
            for (int i = 0; i <dataCollectionObject.getControls_list().size() ; i++) {
                if(i!=0){
                    stringBuilder.append(", ");
                }
                stringBuilder.append(dataCollectionObject.getControls_list().get(i).getControlName());
            }
            String note = " Now map form fields with content and give result in json format without explanation";
            stringBuilder.append(" Content: ").append(content).append(note);
            GetChatGPTService getChatGPTService = RetrofitUtils.getChatGPTService();
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("model", "gpt-3.5-turbo");
            JSONArray jsonArray = new JSONArray();
            JSONObject object = new JSONObject();
            object.put("role","user");
            object.put("content",stringBuilder.toString());
            jsonArray.put(object);
            jsonObject.put("messages",jsonArray);
            JsonObject jo = (JsonObject) JsonParser.parseString(jsonObject.toString());
            String token = "Bearer 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";
            Call<ResponseBody> call = getChatGPTService.chatGptService(token,jo);
            call.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {

                    if(response.body()!=null){
                        JSONObject resp = null;
                        try {
                            resp = new JSONObject(response.body().string());
                            String content = resp.getJSONArray("choices").getJSONObject(0).getJSONObject("message").getString("content");
                            Log.d("chatGPTResponse",new JSONObject(content).toString());
                            JSONObject contentObj = new JSONObject(content);
                            dismissProgressDialog();
                            new SetEditDataToControlValues(MainActivity.this).setDataToControlValues(dataCollectionObject.getControls_list(),List_ControlClassObjects,contentObj);
                            iv_loading.setVisibility(View.GONE);
                            if (dataCollectionObject.getOnLoadEventObject() != null) {
                                if (AppConstants.GlobalObjects != null) {
                                    AppConstants.GlobalObjects.setCurrent_GPS("");
                                }
                                FormLoad();
                            } else {
                                dismissProgressDialog();
                            }
                            if (dataCollectionObject.getOnLoadEventObject() == null) {
                                formLoad = false;
                                if (AppConstants.EDIT_MODE) {
                                    addFormEditEvent();
                                }
                            }

                            CheckLivetrackingandSetSavedState();
                           /* Iterator<String> iter = contentObj.keys();
                            List<Item> items = new ArrayList<>();
                            while (iter.hasNext()) {

                                String key = iter.next();
                                try {
                                    Object value = contentObj.get(key);
                                    items.add(new Item(key,value.toString()));

                                } catch (JSONException e) {
                                    // Something went wrong!
                                }
                            }
                            for (int i = 0; i <items.size() ; i++) {
                                SetValuetoControl(items.get(i).getId(),items.get(i).getValue(),"","");
                            }*/
                        } catch (JSONException | IOException e) {
                            dismissProgressDialog();
                            throw new RuntimeException(e);
                        }

                    }else{
                        iv_loading.setVisibility(View.GONE);
                        if (dataCollectionObject.getOnLoadEventObject() != null) {
                            if (AppConstants.GlobalObjects != null) {
                                AppConstants.GlobalObjects.setCurrent_GPS("");
                            }
                            FormLoad();
                        } else {
                            dismissProgressDialog();
                        }
                        if (dataCollectionObject.getOnLoadEventObject() == null) {
                            formLoad = false;
                            if (AppConstants.EDIT_MODE) {
                                addFormEditEvent();
                            }
                        }

                        CheckLivetrackingandSetSavedState();
                    }

                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    dismissProgressDialog();
                    iv_loading.setVisibility(View.GONE);
                    if (dataCollectionObject.getOnLoadEventObject() != null) {
                        if (AppConstants.GlobalObjects != null) {
                            AppConstants.GlobalObjects.setCurrent_GPS("");
                        }
                        FormLoad();
                    } else {
                        dismissProgressDialog();
                    }
                    if (dataCollectionObject.getOnLoadEventObject() == null) {
                        formLoad = false;
                        if (AppConstants.EDIT_MODE) {
                            addFormEditEvent();
                        }
                    }

                    CheckLivetrackingandSetSavedState();
                }
            });

        } catch (JSONException e) {
            throw new RuntimeException(e);
        }




    }


}



