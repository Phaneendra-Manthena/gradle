package com.bhargo.user.utils;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import com.bhargo.user.Java_Beans.API_InputParam_Bean;
import com.bhargo.user.Java_Beans.API_OutputParam_Bean;
import com.bhargo.user.Java_Beans.ActionWithCondition_Bean;
import com.bhargo.user.Java_Beans.ActionWithoutCondition_Bean;
import com.bhargo.user.Java_Beans.AssignControl_Bean;
import com.bhargo.user.Java_Beans.Axis;
import com.bhargo.user.Java_Beans.CallForm_ParamMapping_Bean;
import com.bhargo.user.Java_Beans.ColumnSettings;
import com.bhargo.user.Java_Beans.Condition_Bean;
import com.bhargo.user.Java_Beans.ControlObject;
import com.bhargo.user.Java_Beans.Control_EventObject;
import com.bhargo.user.Java_Beans.Create_Query_Object;
import com.bhargo.user.Java_Beans.CustomToolBar;
import com.bhargo.user.Java_Beans.DataCollectionObject;
import com.bhargo.user.Java_Beans.DataManagementOptions;
import com.bhargo.user.Java_Beans.DataTableColumn_Bean;
import com.bhargo.user.Java_Beans.DisplaySettings;
import com.bhargo.user.Java_Beans.EnabledControl_Bean;
import com.bhargo.user.Java_Beans.ForeignKey_Bean;
import com.bhargo.user.Java_Beans.GridColumnSettings;
import com.bhargo.user.Java_Beans.IfElseBlock_Bean;
import com.bhargo.user.Java_Beans.ImageAdvanced_Mapped_Item;
import com.bhargo.user.Java_Beans.Item;
import com.bhargo.user.Java_Beans.LanguageMapping;
import com.bhargo.user.Java_Beans.MultiFormApp;
import com.bhargo.user.Java_Beans.PopUpManagementAction;
import com.bhargo.user.Java_Beans.QueryIndexField_Bean;
import com.bhargo.user.Java_Beans.RemoveControlItem;
import com.bhargo.user.Java_Beans.RemoveRowAction;
import com.bhargo.user.Java_Beans.SMSGateways_InputDetails_Bean;
import com.bhargo.user.Java_Beans.SetSelectionControl_Bean;
import com.bhargo.user.Java_Beans.SyncFormData;
import com.bhargo.user.Java_Beans.VisibilityManagementOptions;
import com.bhargo.user.R;
import com.bhargo.user.navigation.NavMenu;
import com.bhargo.user.navigation.NavMenuItem;
import com.bhargo.user.Java_Beans.QueryFilterField_Bean;
import com.bhargo.user.Java_Beans.QuerySelectField_Bean;
import com.bhargo.user.Java_Beans.RenderingType;
import com.bhargo.user.Java_Beans.SMS_InputParam_Bean;
import com.bhargo.user.Java_Beans.SetProperty;
import com.bhargo.user.Java_Beans.SubControls_Advance_Bean;
import com.bhargo.user.Java_Beans.TableSettingSObject_Bean;
import com.bhargo.user.Java_Beans.UserGroup;
import com.bhargo.user.Java_Beans.Variable_Bean;
import com.bhargo.user.Java_Beans.WebLinkObject;
import com.bhargo.user.pojos.AdvanceManagement;
import com.bhargo.user.pojos.CalendarEvent;
import com.bhargo.user.pojos.EditOrViewColumns;
import com.bhargo.user.pojos.FilterSubFormColumns;
import com.bhargo.user.uisettings.pojos.ControlUIProperties;
import com.bhargo.user.uisettings.pojos.LayoutProperties;
import com.bhargo.user.uisettings.pojos.MappingControlModel;
import com.bhargo.user.uisettings.pojos.UILayoutProperties;
import com.bhargo.user.uisettings.pojos.UIPrimaryLayoutModelClass;
import com.bhargo.user.Java_Beans.Param;

import org.json.JSONObject;
import org.w3c.dom.CharacterData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

public class XMLHelper {

    private static final String TAG = "XMLHelper";
    public Document doc;
    public Element mainElement;
    HashMap<String, String> controlPositionInUI = new HashMap<>();
    private String themeNo = "THEME1";

    //GetValueFromTagName
    public static String getValueFromTag(Document Vdoc, String TagName) {

        Element temele = Vdoc.getDocumentElement();
        String valuestr = "";
        try {
            if (temele.getElementsByTagName(TagName).item(0) != null) {
                valuestr = temele.getElementsByTagName(TagName).item(0).getTextContent().trim();
            } else {
                valuestr = temele.getElementsByTagName(TagName).item(1).getTextContent().trim();
            }
        } catch (Exception e) {
            valuestr = "";
            e.printStackTrace();
        }
        return valuestr;
    }

    public static String getCharacterDataFromElement(Element e) {
        try{
        Node child = e.getFirstChild();

        if (child instanceof CharacterData) {
            CharacterData cd = (CharacterData) child;
            return cd.getData();
        }}catch(Exception exception){
//            Log.d(TAG, "getCharacterDataFromElement: "+exception.toString());
        }
        return "";
    }

    public static List<String> getListDataFromElement(Element e) {
        List<String> Items = new ArrayList<>();
        NodeList childNodes = e.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node child = childNodes.item(i).getFirstChild();
            if (child instanceof CharacterData) {
                CharacterData cd = (CharacterData) child;
                Items.add(cd.getData());
            }
        }

        return Items;
    }

    public static void setGetDataAction(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean){
        actionWithoutConditionBean.setActionId(actionGroupElement.getAttribute("ActionId"));
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));
        NodeList childNodesList = actionGroupElement.getChildNodes();
        for (int i = 0; i < childNodesList.getLength(); i++) {

            Element element = (Element) childNodesList.item(i);

            if (element.getNodeName().equalsIgnoreCase("GetDataType")) {
                String getDataType = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setGetDataActionType(getDataType);

            }
            if (element.getNodeName().equalsIgnoreCase("DataBaseTableType")) {
                String dataBaseTableType = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setDataBaseTableType(dataBaseTableType);

            }
            if (element.getNodeName().equalsIgnoreCase("ConnectionName")) {
                String connectionName = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setConnectionName(connectionName);

            }
            if (element.getNodeName().equalsIgnoreCase("ConnectionId")) {
                String connectionId = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setConnectionId(connectionId);

            }
            if (element.getNodeName().equalsIgnoreCase("ConnectionSource")) {
                String connectionSource = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setConnectionSource(connectionSource);

            }
            if (element.getNodeName().equalsIgnoreCase("DirectQuery")) {
                String directQuery = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setDirectQueryString(directQuery);

            }
            if (element.getNodeName().equalsIgnoreCase("TableName")) {
                String tableName = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setSelect_FormTableName(tableName);

            }
            if (element.getNodeName().equalsIgnoreCase("SQLName")) {
                String tableName = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setSelect_FormName(tableName);

            }

            if (element.getNodeName().equalsIgnoreCase("InputParameters")) {
                setInParams(actionWithoutConditionBean,element);
            }

            if (element.getNodeName().equalsIgnoreCase("Order")) {
                String order = getCharacterDataFromElement(element);
                actionWithoutConditionBean.setOrder(order);
            }
            if(element.getNodeName().equalsIgnoreCase("OrderByColumns")){
                String orderbycol = getCharacterDataFromElement(element);
                actionWithoutConditionBean.setOrderByColumns(orderbycol);
            }
            if (element.getNodeName().equalsIgnoreCase("OutputParameters")) {
                setOutParams(actionWithoutConditionBean,element);
            }
            if (element.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = element.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }
        }
    }
    public static void setManageDataAction(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean){
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));
        actionWithoutConditionBean.setActionId(actionGroupElement.getAttribute("ActionId"));
        NodeList childNodesList = actionGroupElement.getChildNodes();
        for (int i = 0; i < childNodesList.getLength(); i++) {
            Element element = (Element) childNodesList.item(i);

            if (element.getNodeName().equalsIgnoreCase("ManageDataType")) {
                String getDataType = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setManageDataActionType(getDataType);

            }
            if (element.getNodeName().equalsIgnoreCase("DataBaseTableType")) {
                String dataBaseTableType = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setDataBaseTableType(dataBaseTableType);

            }
            if (element.getNodeName().equalsIgnoreCase("ConnectionName")) {
                String connectionName = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setConnectionName(connectionName);

            }
            if (element.getNodeName().equalsIgnoreCase("ConnectionId")) {
                String connectionId = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setConnectionId(connectionId);

            }

            if (element.getNodeName().equalsIgnoreCase("ConnectionSource")) {
                String connectionId = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setConnectionSource(connectionId);

            }
            //DMLInputType
            if (element.getNodeName().equalsIgnoreCase("DMLInputType")) {
                String DMLInputType = getCharacterDataFromElement(element);
                actionWithoutConditionBean.setDML_Input_Type(DMLInputType);
            }
            if (element.getNodeName().equalsIgnoreCase("DMLDataSourceValue")) {
                String DMLInputType = getCharacterDataFromElement(element);
                actionWithoutConditionBean.setDML_DataSource_Value(DMLInputType);
            }
            if (element.getNodeName().equalsIgnoreCase("DMLDataSourceExpression")) {
                String DMLInputType = getCharacterDataFromElement(element);
                actionWithoutConditionBean.setDML_DataSource_ExpressionExists(Boolean.parseBoolean(DMLInputType));
            }
            if (element.getNodeName().equalsIgnoreCase("DMLDataSourceExpressionValue")) {
                String DMLInputType = getCharacterDataFromElement(element);
                actionWithoutConditionBean.setDML_DataSource_ExpressionValue(DMLInputType);
            }

            if (element.getNodeName().equalsIgnoreCase("TableSettings")) {
                setWizardData(element,actionWithoutConditionBean);
            }

            if (element.getNodeName().equalsIgnoreCase("SQLName")) {
                String connectionId = getCharacterDataFromElement(element);

                actionWithoutConditionBean.setSelect_FormName(connectionId);

            }

            if (element.getNodeName().equalsIgnoreCase("DirectSQLNames")) {
                NodeList childNodes = element.getChildNodes();
                List<String> sqlNamesList = new ArrayList<>();

                for (int j = 0; j < childNodes.getLength(); j++) {
                    if (childNodes.item(j).getNodeType() == 1) {
                        if (childNodes.item(j).hasChildNodes()) {
                            sqlNamesList.add(childNodes.item(j).getChildNodes().item(0).getNodeValue());
                        }
                    }

                }
                actionWithoutConditionBean.setSqlNamesList(sqlNamesList);

            }

            if (element.getNodeName().equalsIgnoreCase("InputParameters") && actionWithoutConditionBean.getManageDataActionType().contentEquals("DML")) {
                setDMLInParams(actionWithoutConditionBean,element);

            }

            if (element.getNodeName().equalsIgnoreCase("InputParameters") && actionWithoutConditionBean.getManageDataActionType().contentEquals("Group DML")) {
                setGroupDMLInParams(actionWithoutConditionBean,element);

            }
            if (element.getNodeName().equalsIgnoreCase("OutputParameters") ) {
                setOutParams(actionWithoutConditionBean,element);

            }
            if (element.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = element.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }


        }
    }

    public static void setWizardData(Element actionGroupElement,ActionWithoutCondition_Bean actionWithoutConditionBean){
        if (((Element) actionGroupElement).getAttribute("option").trim().equalsIgnoreCase("existing")) {

            actionWithoutConditionBean.setTableSettingsType(getTableSettingsType("existing"));



            if (actionGroupElement.getNodeType() == Node.ELEMENT_NODE) {


                Element TableColumnsElement = (Element) actionGroupElement;

                for (int k = 0; k < TableColumnsElement.getChildNodes().getLength(); k++) {

                    NodeList nNodeChildNodes = TableColumnsElement.getChildNodes();
                    for (int inNodeChildNodes = 0; inNodeChildNodes < nNodeChildNodes.getLength(); inNodeChildNodes++) {
                        Node nNodeTableColumn = nNodeChildNodes.item(inNodeChildNodes);
                        if (nNodeChildNodes.item(inNodeChildNodes).getNodeType() == Node.ELEMENT_NODE) {
                            Element settingFieldsElement = (Element) nNodeChildNodes.item(inNodeChildNodes);
                            if (settingFieldsElement.getNodeName().equals("TableColumns")) {

                                actionWithoutConditionBean.setExistingTableName(((Element) nNodeTableColumn).getAttribute("name").trim());
                                actionWithoutConditionBean.setMapExistingType(getMapExistingType(((Element) nNodeTableColumn).getAttribute("activity").trim()));

                                if (((Element) nNodeTableColumn).getAttribute("activity").trim().equalsIgnoreCase("insert")) {
                                    NodeList insertNodeList = nNodeTableColumn.getChildNodes();
                                    List<QueryFilterField_Bean> queryFilterField_beans = new ArrayList<>();
                                    for (int linsertNode = 0; linsertNode < insertNodeList.getLength(); linsertNode++) {
                                        QueryFilterField_Bean queryFilterField_bean = new QueryFilterField_Bean();
                                        Element inputParamsElement = (Element) insertNodeList.item(linsertNode);
                                        if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                            String enable = inputParamsElement.getAttribute("enable");
                                            queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                            String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                            queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                            NodeList inputParametersList = inputParamsElement.getChildNodes();

                                            Element inputParamElement1 = (Element) inputParametersList.item(0);
                                            String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                            queryFilterField_bean.setField_Name(paramOneValue);

                                            String autoNumberenable = inputParamElement1.getAttribute("autoNumber");
                                            queryFilterField_bean.setAutoNumber(Boolean.parseBoolean(autoNumberenable));

                                            Element inputParamElement2 = (Element) inputParametersList.item(1);
                                            String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                            queryFilterField_bean.setField_Global_Value(paramTwoValue);

                                            Element inputParamElement3 = (Element) inputParametersList.item(2);
                                            String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                            queryFilterField_bean.setField_Global_Type(paramThreeValue);
                                            if(queryFilterField_bean.getField_Global_Value()!=null && !queryFilterField_bean.getField_Global_Value().isEmpty()){
                                                queryFilterField_beans.add(queryFilterField_bean);
                                            }

//
                                        }
                                    }

                                    actionWithoutConditionBean.setMainTableInsertFields(queryFilterField_beans);

                                } else if (((Element) nNodeTableColumn).getAttribute("activity").trim().equalsIgnoreCase("update")) {

                                    NodeList updateNodeList = nNodeTableColumn.getChildNodes();
                                    List<QueryFilterField_Bean> queryFilterField_beansSetColumns = new ArrayList<>();
                                    List<QueryFilterField_Bean> queryFilterField_beansFilters = new ArrayList<>();
                                    for (int lupdateNode = 0; lupdateNode < updateNodeList.getLength(); lupdateNode++) {
                                        QueryFilterField_Bean queryFilterField_bean = new QueryFilterField_Bean();
                                        Element inputParamsElement = (Element) updateNodeList.item(lupdateNode);
                                        if (inputParamsElement.getAttribute("operationType").equalsIgnoreCase("setColumns")) {
                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                                queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement1 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement2 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                                queryFilterField_bean.setField_Global_Value(paramTwoValue);


                                                queryFilterField_beansSetColumns.add(queryFilterField_bean);
                                            }
                                        } else {
                                            String enable = inputParamsElement.getAttribute("enable");
                                            queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                            String operator = inputParamsElement.getAttribute("operator");
                                            queryFilterField_bean.setField_and_or(operator);

                                            NodeList inputParametersList = inputParamsElement.getChildNodes();

                                            Element inputParamElement0 = (Element) inputParametersList.item(0);
                                            String paramOneValue = getCharacterDataFromElement(inputParamElement0);
                                            queryFilterField_bean.setField_Name(paramOneValue);

                                            Element inputParamElement1 = (Element) inputParametersList.item(1);
                                            String paramTwoValue = getCharacterDataFromElement(inputParamElement1);
                                            queryFilterField_bean.setField_Operator(paramTwoValue);

                                            //check bhavani
                                          /*  Element inputParamElement3 = (Element) inputParametersList.item(2);
                                            String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                            if (paramThreeValue.toLowerCase().contains("(im:")) {
                                                queryFilterField_bean.setField_ValueType("Others");
                                                queryFilterField_bean.setField_Global_Value(paramThreeValue);
                                            } else {
                                                queryFilterField_bean.setField_ValueType("GPS");
                                                String value[] = paramThreeValue.split("@");
                                                queryFilterField_bean.setDistanceAround(value[0]);
                                                queryFilterField_bean.setNearBy(value[1]);
                                            }*/
                                            if (enable.equalsIgnoreCase("true")) {
                                                Element inputParamElement2 = (Element) inputParametersList.item(2);
                                                String name = inputParamElement2.getAttribute("name");

                                                if (name.equalsIgnoreCase("expression")) {
                                                    String paramThreeValue = getCharacterDataFromElement(inputParamElement2);
                                                    queryFilterField_bean.setField_ValueType("Others");
                                                    queryFilterField_bean.setField_Global_Value(paramThreeValue);
                                                } else if (name.equalsIgnoreCase("gis")) {

                                                    queryFilterField_bean.setField_ValueType("GPS");
                                                    Element inputParamElement3 = (Element) inputParametersList.item(3);
                                                    String paramDistanceAroundValue = getCharacterDataFromElement(inputParamElement3);
                                                    queryFilterField_bean.setDistanceAround(paramDistanceAroundValue);
                                                    Element inputParamElement4 = (Element) inputParametersList.item(4);
                                                    String paramNearByValue = getCharacterDataFromElement(inputParamElement4);
                                                    queryFilterField_bean.setNearBy(paramNearByValue);
                                                }
                                            }

                                            queryFilterField_beansFilters.add(queryFilterField_bean);
                                        }
                                    }

                                    actionWithoutConditionBean.setMainTableUpdateFields(queryFilterField_beansSetColumns);
                                    actionWithoutConditionBean.setMainTableWhereConditionFields(queryFilterField_beansFilters);

                                } else {
//updateOrInsert

                                    NodeList updateNodeList = nNodeTableColumn.getChildNodes();
                                    List<QueryFilterField_Bean> queryFilterField_beansSetColumns = new ArrayList<>();
                                    List<QueryFilterField_Bean> queryFilterField_beansFilters = new ArrayList<>();
                                    List<QueryFilterField_Bean> queryFilterField_beansInsert = new ArrayList<>();
                                    for (int lupdateNode = 0; lupdateNode < updateNodeList.getLength(); lupdateNode++) {
                                        QueryFilterField_Bean queryFilterField_bean = new QueryFilterField_Bean();
                                        Element inputParamsElement = (Element) updateNodeList.item(lupdateNode);
                                        if (inputParamsElement.getAttribute("operationType").equalsIgnoreCase("setColumns")) {
                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                                queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement1 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement2 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                                queryFilterField_bean.setField_Global_Value(paramTwoValue);


                                                queryFilterField_beansSetColumns.add(queryFilterField_bean);
                                            }
                                        } else if (inputParamsElement.getAttribute("operationType").equalsIgnoreCase("filters")) {
                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String operator = inputParamsElement.getAttribute("operator");
                                                queryFilterField_bean.setField_and_or(operator);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement0 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement0);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement1 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Operator(paramTwoValue);

                                            /*Element inputParamElement3 = (Element) inputParametersList.item(2);
                                            String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                            queryFilterField_bean.setField_Global_Value(paramThreeValue);*/
                                                if (enable.equalsIgnoreCase("true")) {
                                                    Element inputParamElement2 = (Element) inputParametersList.item(2);
                                                    String name = inputParamElement2.getAttribute("name");

                                                    if (name.equalsIgnoreCase("expression")) {
                                                        String paramThreeValue = getCharacterDataFromElement(inputParamElement2);
                                                        queryFilterField_bean.setField_ValueType("Others");
                                                        queryFilterField_bean.setField_Global_Value(paramThreeValue);
                                                    } else if (name.equalsIgnoreCase("gis")) {
                                                        queryFilterField_bean.setField_ValueType("GPS");
                                                        Element inputParamElement3 = (Element) inputParametersList.item(3);
                                                        String paramDistanceAroundValue = getCharacterDataFromElement(inputParamElement3);
                                                        queryFilterField_bean.setDistanceAround(paramDistanceAroundValue);
                                                        Element inputParamElement4 = (Element) inputParametersList.item(4);
                                                        String paramNearByValue = getCharacterDataFromElement(inputParamElement4);
                                                        queryFilterField_bean.setNearBy(paramNearByValue);
                                                    }
                                                }


                                                queryFilterField_beansFilters.add(queryFilterField_bean);
                                            }
                                        } else {

                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                                queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement1 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                String autoNumberenable = inputParamElement1.getAttribute("autoNumber");
                                                queryFilterField_bean.setAutoNumber(Boolean.parseBoolean(autoNumberenable));

                                                Element inputParamElement2 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                                queryFilterField_bean.setField_Global_Value(paramTwoValue);

                                                Element inputParamElement3 = (Element) inputParametersList.item(2);
                                                String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                                queryFilterField_bean.setField_Global_Type(paramThreeValue);

                                                queryFilterField_beansInsert.add(queryFilterField_bean);
//
                                            }


                                        }
                                    }

                                    actionWithoutConditionBean.setMainTableUpdateFields(queryFilterField_beansSetColumns);
                                    actionWithoutConditionBean.setMainTableWhereConditionFields(queryFilterField_beansFilters);
                                    actionWithoutConditionBean.setMainTableInsertFields(queryFilterField_beansInsert);



                                }
                            }
                        }
                    }
                }
            }


        }
    }

    public static void setFormFileds(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
//        actionWithoutConditionBean.setActionType("Call API/Query");

        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));

        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);

            if (FieldsElement.getNodeName().equalsIgnoreCase("FormName")) {
                String FormName = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setSelect_FormName(FormName);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("AppMode")) {
                String AppMode = getCharacterDataFromElement(FieldsElement);
                actionWithoutConditionBean.setSelect_FormAppMode(AppMode);
            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("TableName")) {
                String TableName = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setSelect_FormTableName(TableName);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {

                NodeList inputParametersList = FieldsElement.getChildNodes();

                List<API_InputParam_Bean> Form_InParamsList = new ArrayList<API_InputParam_Bean>();

                for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                    Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);


                    NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramOneList.item(0);

                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
                    apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
                    apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
                    apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));
                    apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));

                    if (apiInputParamBean.isEnable()) {
                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);

                        String nameAtt = paramTwo.getAttribute("name");

                        if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_MappedControl_Type("Static");
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                        } else if (nameAtt.equalsIgnoreCase("expression")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_ExpressionExists(true);
                            apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                        } else if (!nameAtt.equalsIgnoreCase("") &&
                                !nameAtt.equalsIgnoreCase("none")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                        } else {
//                            apiInputParamBean.setEnable(false);
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                            apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
                        }

                        NodeList paramThreeList = inputParamElement.getElementsByTagName("Param");
                        Element paramThree = (Element) paramThreeList.item(2);
                        apiInputParamBean.setInParam_Operator(getCharacterDataFromElement(paramThree));


                        NodeList paramfourList = inputParamElement.getElementsByTagName("Param");
                        Element paramFour = (Element) paramfourList.item(3);
                        apiInputParamBean.setInParam_and_or(getCharacterDataFromElement(paramFour));

                        NodeList paramFiveList = inputParamElement.getElementsByTagName("Param");
                        Element paramFive = (Element) paramFiveList.item(4);
                        apiInputParamBean.setInParam_near_by_distance(getCharacterDataFromElement(paramFive));

                        NodeList paramSixList = inputParamElement.getElementsByTagName("Param");
                        Element paramSix = (Element) paramSixList.item(5);
                        apiInputParamBean.setInParam_near_by_records(getCharacterDataFromElement(paramSix));


                    }

                    Form_InParamsList.add(apiInputParamBean);
                }
                actionWithoutConditionBean.setList_Form_InParams(Form_InParamsList);

            }

            if (FieldsElement.getNodeName().equalsIgnoreCase("OrderByColumns")) {
                String orderByColumns = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setOrderByColumns(orderByColumns);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("Order")) {
                String order = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setOrder(order);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {

                NodeList outParametersList = FieldsElement.getChildNodes();

                String type = FieldsElement.getAttribute("type");
                String display = "";
                actionWithoutConditionBean.setResult_NoOfRecords(type);

                if (!type.equalsIgnoreCase("Single")) {
                    display = FieldsElement.getAttribute("display");
                    actionWithoutConditionBean.setResult_DisplayType(display);


                    if (display.equals(AppConstants.DISPLAY_TYPE_SUBFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_GRIDFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATAVIEWER) ||
                            display.equals(AppConstants.DISPLAY_TYPE_MAPVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CALENDARVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_LISTVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_IMAGEVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CHART) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATA_TABLE) ||
                            display.equals(AppConstants.DISPLAY_TYPE_SECTION)) {
                        String MultiControlName = FieldsElement.getAttribute("MultiControlName");
                        actionWithoutConditionBean.setSelectedSubForm(MultiControlName);
                    }
                    actionWithoutConditionBean.setMulti_DataType(FieldsElement.getAttribute("activity"));
                }

                List<API_OutputParam_Bean> FormOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();

                if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    for (int i = 0; i < outParametersList.getLength(); i++) {
                        Element OutputItems = (Element) outParametersList.item(i);
                        if (OutputItems.getNodeName().equalsIgnoreCase("ProfileImage")) {
                            String ProfileImage = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setProfileImage_Mapped_item(ProfileImage);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Image")) {
                            String Image = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setImage_Mapped_item(Image);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ImageAdvanceSettings")) {

                            Element ImageElement = (Element) outParametersList.item(i);

                            NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
                            Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
                            String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
                            actionWithoutConditionBean.setImageAdvanced_ImageorNot(ImageAvailablestr);

                            if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
                                NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
                                Element ImageSource = (Element) nl_ImageSource.item(0);
                                String ImageSourcestr = getCharacterDataFromElement(ImageSource);
                                actionWithoutConditionBean.setImageAdvanced_ImageSource(ImageSourcestr);
                            }

                            NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
                            Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
                            String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
                            actionWithoutConditionBean.setImageAdvanced_ConditionColumn(ConditionColumnstr);

                            NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
                            Element Operator = (Element) nl_Operator.item(0);
                            String Operatorstr = getCharacterDataFromElement(Operator);
                            actionWithoutConditionBean.setImageAdvanced_Operator(Operatorstr);

                            NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
                            List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
                            for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
                                Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


                                NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
                                for (int k = 0; k < nl_advItems.getLength(); k++) {
                                    NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                                    ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                                    for (int l = 0; l < nl_Items.getLength(); l++) {
                                        Element Item = (Element) nl_Items.item(l);
                                        if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                                            String Value1 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value(Value1);
                                        } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                                            String Value2 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value2(Value2);
                                        } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                                            String ImagePath = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_ImagePath(ImagePath);
                                        }
                                    }
                                    ImageAdvanced_Mapped_Items.add(IA_Item);
                                }

                            }
                            actionWithoutConditionBean.setList_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);


                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Corner")) {
                            String Corner = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setCorner_Mapped_item(Corner);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Header")) {
                            String Header = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setHeader_Mapped_item(Header);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SubHeader")) {
                            String SubHeader = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSubHeader_Mapped_item(SubHeader);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DateandTime")) {
                            String DateandTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDateandTime_Mapped_item(DateandTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Distance")) {
                            String Distance = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDistance(Distance);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("WorkingHours")) {
                            String WorkingHours = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setWorking_hours(WorkingHours);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemOne")) {
                            String ItemOne = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItem_one_count(ItemOne);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemTwo")) {
                            String ItemTwo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItem_two_count(ItemTwo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Rating")) {
                            String Rating = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setRating(Rating);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceIcon")) {
                            String SourceIcon = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_icon(SourceIcon);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceName")) {
                            String SourceName = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_name(SourceName);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceTime")) {
                            String SourceTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_time(SourceTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("NewsType")) {
                            String NewsType = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setNews_type(NewsType);
                        }else if (OutputItems.getNodeName().equalsIgnoreCase("ItemName")) {
                            String ItemName = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItemName(ItemName);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("WatsAppNo")) {
                            String WatsAppNo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setWatsAppNo(WatsAppNo);
                        }   else if (OutputItems.getNodeName().equalsIgnoreCase("DailNo")) {
                            String DailNo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDailNo(DailNo);
                        }  else if (OutputItems.getNodeName().equalsIgnoreCase("DescriptionParams")) {
                            List<String> description_Mapped_item = new ArrayList<>();
                            NodeList DescriptionList = OutputItems.getChildNodes();
                            for (int ParamCnt = 0; ParamCnt < DescriptionList.getLength(); ParamCnt++) {
                                Element ParamElement = (Element) DescriptionList.item(ParamCnt);
                                if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                                    String value = getCharacterDataFromElement(ParamElement);
                                    description_Mapped_item.add(value);
                                }
                            }
                            actionWithoutConditionBean.setDescription_Mapped_item(description_Mapped_item);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DV_Trans_Id")) {
                            String dv_Trans_Id = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDv_trans_id(dv_Trans_Id);
                        }
                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
//                    outParametersList=FieldsElement.getChildNodes().item(0).getChildNodes();
                  /*  for (int i = 0; i <outParametersList.getLength() ; i++) {


                    }*/
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                        NodeList paramthreeList = inputParamElement.getElementsByTagName("Param");
                        Element paramThree = (Element) paramthreeList.item(2);
                        String FilterItemID = getCharacterDataFromElement(paramThree);
                        actionWithoutConditionBean.setResult_ListView_FilterItemID(FilterItemID);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);


                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    setChartOutParams(outParametersList, actionWithoutConditionBean);
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATA_TABLE)) {
                    actionWithoutConditionBean.setDataTableRowHeight(FieldsElement.getAttribute("DataTableRowHeight"));
                    actionWithoutConditionBean.setDataTableRowHeightWrapContent(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableRowHeightWrapContent")));
                    actionWithoutConditionBean.setDataTableFixedWidthEnabled(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableFixedWidthEnabled")));
                    setDataTableColumns(outParametersList, actionWithoutConditionBean);
                } else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {

                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            for (int x = 0; x < param3List.getLength(); x++) {
                                Element param3ele = (Element) param3List.item(x);

                                String TypeofParam = param3ele.getAttribute("type");
                                if (TypeofParam.equalsIgnoreCase("DefultMarker")) {
                                    String param3Value = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                                }

                                if (TypeofParam.equalsIgnoreCase("RenderingType")) {
                                    String paramrederingTypeValue = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupData")) {
                                    List<String> paramrederingpopupdata = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupImage")) {
                                    List<String> paramrederingpopupImages = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                                }

                                if (param3ele.hasAttribute("expressionExists")) {

                                    String expressionExists = param3ele.getAttribute("expressionExists");
                                    String paramTwoValue = getCharacterDataFromElement(param3ele);
                                    if (expressionExists.trim().equalsIgnoreCase("false")) {
                                        FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                                    } else {
                                        FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                                    }
                                }
                            }


                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }

                    actionWithoutConditionBean.setList_Form_OutParams(FormOutputParam_BeanList);
                }
            }

            if (FieldsElement.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = FieldsElement.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }

        }

    }

    private static void setChartOutParams(NodeList outParametersList, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        for (int i = 0; i < outParametersList.getLength(); i++) {
            Element OutputItems = (Element) outParametersList.item(i);
            if (OutputItems.getNodeName().equalsIgnoreCase("XAxisValues")) {
                List<String> xAxisValues = new ArrayList<>();
                List<Axis> xAxisObjectList = new ArrayList<>();
                List<String> comboChartTypes = new ArrayList<>();
                NodeList xAxisValuesNodes = OutputItems.getChildNodes();
                for (int ParamCnt = 0; ParamCnt < xAxisValuesNodes.getLength(); ParamCnt++) {
                    Element ParamElement = (Element) xAxisValuesNodes.item(ParamCnt);
                    if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                        String value = getCharacterDataFromElement(ParamElement);
                        xAxisValues.add(value);
                        if (ParamElement.hasAttribute("chartType")) {
                            comboChartTypes.add(ParamElement.getAttribute("chartType"));
                        }
                    }
                    if (ParamElement.getNodeName().equalsIgnoreCase("XAxis")) {
                        Axis axis = new Axis();
                        Element xAxisElement = (Element) xAxisValuesNodes.item(ParamCnt);
                        NodeList xAxisNodesList = xAxisElement.getChildNodes();
                        for (int j = 0; j < xAxisNodesList.getLength(); j++) {
                            Element element = (Element) xAxisNodesList.item(j);
                            if (element.getNodeName().equalsIgnoreCase("Value")) {
                                axis.setValue(getCharacterDataFromElement(element));

                            } else if (element.getNodeName().equalsIgnoreCase("Label")) {
                                axis.setLabel(getCharacterDataFromElement(element));

                            }

                        }
                        xAxisObjectList.add(axis);

                    }

                }
                actionWithoutConditionBean.setxAxisList(xAxisObjectList);
                actionWithoutConditionBean.setxAxisValues(xAxisValues);
                if (comboChartTypes.size() > 0) {
                    actionWithoutConditionBean.setComboChartTypes(comboChartTypes);
                }

            } else if (OutputItems.getNodeName().equalsIgnoreCase("YAxisValues")) {
                List<String> yAxisValues = new ArrayList<>();
                List<Axis> yAxisObjectList = new ArrayList<>();
                NodeList yAxisValuesNodes = OutputItems.getChildNodes();
                for (int ParamCnt = 0; ParamCnt < yAxisValuesNodes.getLength(); ParamCnt++) {
                    Element ParamElement = (Element) yAxisValuesNodes.item(ParamCnt);
                    if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                        String value = getCharacterDataFromElement(ParamElement);
                        yAxisValues.add(value);
                    }
                    if (ParamElement.getNodeName().equalsIgnoreCase("YAxis")) {
                        Axis axis = new Axis();
                        Element yAxisElement = (Element) yAxisValuesNodes.item(ParamCnt);
                        NodeList yAxisNodesList = yAxisElement.getChildNodes();
                        for (int j = 0; j < yAxisNodesList.getLength(); j++) {
                            Element element = (Element) yAxisNodesList.item(j);
                            if (element.getNodeName().equalsIgnoreCase("Value")) {
                                axis.setValue(getCharacterDataFromElement(element));

                            } else if (element.getNodeName().equalsIgnoreCase("Label")) {
                                axis.setLabel(getCharacterDataFromElement(element));

                            }

                        }
                        yAxisObjectList.add(axis);

                    }
                }
                actionWithoutConditionBean.setyAxisValues(yAxisValues);
                actionWithoutConditionBean.setyAxisList(yAxisObjectList);

            } else if (OutputItems.getNodeName().equalsIgnoreCase("PieChartControlName")) {
                String PieChartControlName = getCharacterDataFromElement(OutputItems);
                actionWithoutConditionBean.setPieChartControlName(PieChartControlName);

            } else if (OutputItems.getNodeName().equalsIgnoreCase("PieChartMeasurementValue")) {
                String PieChartMeasurementValue = getCharacterDataFromElement(OutputItems);
                actionWithoutConditionBean.setPieChartMeasurementValue(PieChartMeasurementValue);
            }
        }
    }

    private static void setDataTableColumns(NodeList outParametersList, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        List<DataTableColumn_Bean> dataTableColumn_beans = new ArrayList<>();
        List<API_OutputParam_Bean> FormOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();
        for (int i = 0; i < outParametersList.getLength(); i++) {
            Element OutputItems = (Element) outParametersList.item(i);
            if (OutputItems.getNodeName().equalsIgnoreCase("DataTableColumn")) {
                API_OutputParam_Bean api_outputParam_bean = new API_OutputParam_Bean("", "", false);
                DataTableColumn_Bean dataTableColumn_bean = new DataTableColumn_Bean();
                ColumnSettings settings = new ColumnSettings();
                dataTableColumn_bean.setColumnEnabled(Boolean.parseBoolean(OutputItems.getAttribute("ColumnEnabled")));
                api_outputParam_bean.setOutParam_Delete(!Boolean.parseBoolean(OutputItems.getAttribute("ColumnEnabled")));

                NodeList paramsList = OutputItems.getChildNodes();
                for (int j = 0; j < paramsList.getLength(); j++) {
                    Node param = paramsList.item(j);
                    if (param.getNodeType() == Node.ELEMENT_NODE) {
                        if (param.getNodeName().trim().equalsIgnoreCase("ColumnName")) {
                            dataTableColumn_bean.setColumnName(param.getTextContent().trim());
                        } else if (param.getNodeName().trim().equalsIgnoreCase("HeaderName")) {
                            api_outputParam_bean.setOutParam_Mapped_ID(param.getTextContent().trim());
                            dataTableColumn_bean.setHeaderName(param.getTextContent().trim());
                        } else if (param.getNodeName().trim().equalsIgnoreCase("HeaderId")) {
                            dataTableColumn_bean.setHeaderId(param.getTextContent().trim());
                        } else if (param.getNodeName().trim().equalsIgnoreCase("FooterFunction")) {
                            dataTableColumn_bean.setFooterFunction(param.getTextContent().trim());
                        } else if (param.getNodeName().trim().equalsIgnoreCase("ColumnWidth")) {
                            settings.setColumnWidth(param.getTextContent().trim());
//                            dataTableColumn_bean.setColumnWidth(param.getTextContent().trim());
                        } else if (param.getNodeName().trim().equalsIgnoreCase("SettingsEdited")) {
                            dataTableColumn_bean.setSettingsEdited(Boolean.parseBoolean(param.getTextContent().trim()));
                        }else if (param.getNodeName().trim().equalsIgnoreCase("EnableSorting")) {
                            settings.setEnableSorting(Boolean.parseBoolean(param.getTextContent().trim()));
//                            dataTableColumn_bean.setColumnWidth(param.getTextContent().trim());
                        }else if (param.getNodeName().trim().equalsIgnoreCase("WrapContent")) {
                            settings.setWrapContent(Boolean.parseBoolean(param.getTextContent().trim()));
//                            dataTableColumn_bean.setColumnWidth(param.getTextContent().trim());
                        }else if (param.getNodeName().trim().equalsIgnoreCase("DisplayType")) {
                            settings.setDisplayType(param.getTextContent().trim());
//                            dataTableColumn_bean.setColumnWidth(param.getTextContent().trim());
                        } else if (param.getNodeName().trim().equalsIgnoreCase("HeaderSettings")) {
                            DisplaySettings headerSettings = new DisplaySettings();
                            NodeList headerParams = param.getChildNodes();
                            for (int k = 0; k < headerParams.getLength(); k++) {
                                Node headerParam = headerParams.item(k);
                                if (headerParam.getNodeType() == Node.ELEMENT_NODE) {
                                    if (headerParam.getNodeName().trim().equalsIgnoreCase("BackGroundColor")) {
                                        headerSettings.setBackGroundColor(headerParam.getTextContent().trim());
                                    }else if (headerParam.getNodeName().trim().equalsIgnoreCase("TextColor")) {
                                        headerSettings.setTextColor(headerParam.getTextContent().trim());
                                    }else if (headerParam.getNodeName().trim().equalsIgnoreCase("TextSize")) {
                                        headerSettings.setTextSize(headerParam.getTextContent().trim());
                                    }else if (headerParam.getNodeName().trim().equalsIgnoreCase("TextStyle")) {
                                        headerSettings.setTextStyle(headerParam.getTextContent().trim());
                                    }else if (headerParam.getNodeName().trim().equalsIgnoreCase("TextAlignment")) {
                                        headerSettings.setTextAlignment(headerParam.getTextContent().trim());
                                    }
                                }

                            }
                            settings.setHeaderSettings(headerSettings);
                        } else if (param.getNodeName().trim().equalsIgnoreCase("BodySettings")) {
                            DisplaySettings bodySettings = new DisplaySettings();
                            NodeList bodyParams = param.getChildNodes();
                            for (int k = 0; k < bodyParams.getLength(); k++) {
                                Node bodyParam = bodyParams.item(k);
                                if (bodyParam.getNodeType() == Node.ELEMENT_NODE) {
                                    if (bodyParam.getNodeName().trim().equalsIgnoreCase("BackGroundColor")) {
                                        bodySettings.setBackGroundColor(bodyParam.getTextContent().trim());
                                    }else if (bodyParam.getNodeName().trim().equalsIgnoreCase("TextColor")) {
                                        bodySettings.setTextColor(bodyParam.getTextContent().trim());
                                    }else if (bodyParam.getNodeName().trim().equalsIgnoreCase("TextSize")) {
                                        bodySettings.setTextSize(bodyParam.getTextContent().trim());
                                    }else if (bodyParam.getNodeName().trim().equalsIgnoreCase("TextStyle")) {
                                        bodySettings.setTextStyle(bodyParam.getTextContent().trim());
                                    }else if (bodyParam.getNodeName().trim().equalsIgnoreCase("TextAlignment")) {
                                        bodySettings.setTextAlignment(bodyParam.getTextContent().trim());
                                    }
                                }

                            }
                            settings.setBodySettings(bodySettings);
                        } else if (param.getNodeName().trim().equalsIgnoreCase("FooterSettings")) {
                            DisplaySettings footerSettings = new DisplaySettings();
                            NodeList footerParams = param.getChildNodes();
                            for (int k = 0; k < footerParams.getLength(); k++) {
                                Node footerParam = footerParams.item(k);
                                if (footerParam.getNodeType() == Node.ELEMENT_NODE) {
                                    if (footerParam.getNodeName().trim().equalsIgnoreCase("BackGroundColor")) {
                                        footerSettings.setBackGroundColor(footerParam.getTextContent().trim());
                                    }else if (footerParam.getNodeName().trim().equalsIgnoreCase("TextColor")) {
                                        footerSettings.setTextColor(footerParam.getTextContent().trim());
                                    }else if (footerParam.getNodeName().trim().equalsIgnoreCase("TextSize")) {
                                        footerSettings.setTextSize(footerParam.getTextContent().trim());
                                    }else if (footerParam.getNodeName().trim().equalsIgnoreCase("TextStyle")) {
                                        footerSettings.setTextStyle(footerParam.getTextContent().trim());
                                    }else if (footerParam.getNodeName().trim().equalsIgnoreCase("TextAlignment")) {
                                        footerSettings.setTextAlignment(footerParam.getTextContent().trim());
                                    }
                                }

                            }
                            settings.setFooterSettings(footerSettings);
                        }/*else if (param.getNodeName().trim().equalsIgnoreCase("HeaderColor")) {
                            dataTableColumn_bean.setHeaderColor(param.getTextContent().trim());
                        }else if (param.getNodeName().trim().equalsIgnoreCase("enableSorting")) {
                            dataTableColumn_bean.setEnableSorting(Boolean.parseBoolean(param.getTextContent().trim()));
                        }*/
                    }
                }

                dataTableColumn_bean.setSettings(settings);
                FormOutputParam_BeanList.add(api_outputParam_bean);


                dataTableColumn_beans.add(dataTableColumn_bean);
            }


        }
        actionWithoutConditionBean.setDataTableColumn_beanList(dataTableColumn_beans);
        actionWithoutConditionBean.setList_Form_OutParams(FormOutputParam_BeanList);

    }

    public static void setCallSQL(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));

        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);

            if (FieldsElement.getNodeName().equalsIgnoreCase("SQLName")) {
                String FormName = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setSelect_FormName(FormName);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {

                NodeList inputParametersList = FieldsElement.getChildNodes();

                List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

                for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                    Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);


                    NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramOneList.item(0);

                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
                    apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
                    apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
                    apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));

                    NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                    Element paramTwo = (Element) paramTwoList.item(1);

                    String nameAtt = paramTwo.getAttribute("name");

                    if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_MappedControl_Type("Static");
                        apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    } else if (nameAtt.equalsIgnoreCase("expression")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_ExpressionExists(true);
                        apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                    } else if (!nameAtt.equalsIgnoreCase("") &&
                            !nameAtt.equalsIgnoreCase("none")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                        apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    } else {
//                        apiInputParamBean.setEnable(false);
                        apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
                    }

                    API_InParamsList.add(apiInputParamBean);
                }
                actionWithoutConditionBean.setList_Form_InParams(API_InParamsList);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {

                NodeList outParametersList = FieldsElement.getChildNodes();

                String type = FieldsElement.getAttribute("type");
                String display = "";
                actionWithoutConditionBean.setResult_NoOfRecords(type);

                if (!type.equalsIgnoreCase("Single")) {
                    display = FieldsElement.getAttribute("display");
                    actionWithoutConditionBean.setResult_DisplayType(display);


                    if (display.equals(AppConstants.DISPLAY_TYPE_SUBFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_GRIDFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATAVIEWER) ||
                            display.equals(AppConstants.DISPLAY_TYPE_MAPVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CALENDARVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CHART) ||
                            display.equals(AppConstants.DISPLAY_TYPE_LISTVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_IMAGEVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATA_TABLE) ||
                            display.equals(AppConstants.DISPLAY_TYPE_SECTION)) {
                        String MultiControlName = FieldsElement.getAttribute("MultiControlName");
                        actionWithoutConditionBean.setSelectedSubForm(MultiControlName);
                    }
                    actionWithoutConditionBean.setMulti_DataType(FieldsElement.getAttribute("activity"));
                }

                List<API_OutputParam_Bean> FormOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();

                if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    for (int i = 0; i < outParametersList.getLength(); i++) {
                        Element OutputItems = (Element) outParametersList.item(i);
                        if (OutputItems.getNodeName().equalsIgnoreCase("ProfileImage")) {
                            String ProfileImage = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setProfileImage_Mapped_item(ProfileImage);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Image")) {
                            String Image = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setImage_Mapped_item(Image);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ImageAdvanceSettings")) {

                            Element ImageElement = (Element) outParametersList.item(i);

                            NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
                            Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
                            String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
                            actionWithoutConditionBean.setImageAdvanced_ImageorNot(ImageAvailablestr);

                            if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
                                NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
                                Element ImageSource = (Element) nl_ImageSource.item(0);
                                String ImageSourcestr = getCharacterDataFromElement(ImageSource);
                                actionWithoutConditionBean.setImageAdvanced_ImageSource(ImageSourcestr);
                            }

                            NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
                            Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
                            String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
                            actionWithoutConditionBean.setImageAdvanced_ConditionColumn(ConditionColumnstr);

                            NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
                            Element Operator = (Element) nl_Operator.item(0);
                            String Operatorstr = getCharacterDataFromElement(Operator);
                            actionWithoutConditionBean.setImageAdvanced_Operator(Operatorstr);

                            NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
                            List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
                            for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
                                Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


                                NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
                                for (int k = 0; k < nl_advItems.getLength(); k++) {
                                    NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                                    ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                                    for (int l = 0; l < nl_Items.getLength(); l++) {
                                        Element Item = (Element) nl_Items.item(l);
                                        if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                                            String Value1 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value(Value1);
                                        } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                                            String Value2 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value2(Value2);
                                        } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                                            String ImagePath = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_ImagePath(ImagePath);
                                        }
                                    }
                                    ImageAdvanced_Mapped_Items.add(IA_Item);
                                }

                            }
                            actionWithoutConditionBean.setList_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);


                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Corner")) {
                            String Corner = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setCorner_Mapped_item(Corner);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Header")) {
                            String Header = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setHeader_Mapped_item(Header);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SubHeader")) {
                            String SubHeader = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSubHeader_Mapped_item(SubHeader);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DateandTime")) {
                            String DateandTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDateandTime_Mapped_item(DateandTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Distance")) {
                            String Distance = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDistance(Distance);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("WorkingHours")) {
                            String WorkingHours = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setWorking_hours(WorkingHours);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemOne")) {
                            String ItemOne = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItem_one_count(ItemOne);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemTwo")) {
                            String ItemTwo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItem_two_count(ItemTwo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Rating")) {
                            String Rating = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setRating(Rating);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceIcon")) {
                            String SourceIcon = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_icon(SourceIcon);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceName")) {
                            String SourceName = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_name(SourceName);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceTime")) {
                            String SourceTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_time(SourceTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("NewsType")) {
                            String NewsType = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setNews_type(NewsType);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemName")) {
                            String ItemName = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItemName(ItemName);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("WatsAppNo")) {
                            String WatsAppNo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setWatsAppNo(WatsAppNo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DailNo")) {
                            String DailNo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDailNo(DailNo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DescriptionParams")) {
                            List<String> description_Mapped_item = new ArrayList<>();
                            NodeList DescriptionList = OutputItems.getChildNodes();
                            for (int ParamCnt = 0; ParamCnt < DescriptionList.getLength(); ParamCnt++) {
                                Element ParamElement = (Element) DescriptionList.item(ParamCnt);
                                if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                                    String value = getCharacterDataFromElement(ParamElement);
                                    description_Mapped_item.add(value);
                                }
                            }
                            actionWithoutConditionBean.setDescription_Mapped_item(description_Mapped_item);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DV_Trans_Id")) {
                            String dv_Trans_Id = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDv_trans_id(dv_Trans_Id);
                        }
                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                        NodeList paramthreeList = inputParamElement.getElementsByTagName("Param");
                        Element paramThree = (Element) paramthreeList.item(2);
                        String FilterItemID = getCharacterDataFromElement(paramThree);
                        actionWithoutConditionBean.setResult_ListView_FilterItemID(FilterItemID);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    setChartOutParams(outParametersList, actionWithoutConditionBean);
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATA_TABLE)) {
                    actionWithoutConditionBean.setDataTableRowHeight(FieldsElement.getAttribute("DataTableRowHeight"));
                    actionWithoutConditionBean.setDataTableRowHeightWrapContent(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableRowHeightWrapContent")));
                    actionWithoutConditionBean.setDataTableFixedWidthEnabled(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableFixedWidthEnabled")));
                    setDataTableColumns(outParametersList, actionWithoutConditionBean);
                } else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {
                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            for (int x = 0; x < param3List.getLength(); x++) {
                                Element param3ele = (Element) param3List.item(x);

                                String TypeofParam = param3ele.getAttribute("type");
                                if (TypeofParam.equalsIgnoreCase("DefultMarker")) {
                                    String param3Value = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                                }

                                if (TypeofParam.equalsIgnoreCase("RenderingType")) {
                                    String paramrederingTypeValue = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupData")) {
                                    List<String> paramrederingpopupdata = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupImage")) {
                                    List<String> paramrederingpopupImages = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                                }

                                if (param3ele.hasAttribute("expressionExists")) {

                                    String expressionExists = param3ele.getAttribute("expressionExists");
                                    String paramTwoValue = getCharacterDataFromElement(param3ele);
                                    if (expressionExists.trim().equalsIgnoreCase("false")) {
                                        FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                                    } else {
                                        FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                                    }
                                }
                            }

                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }
                /*else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {
                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            if (param3List.getLength() > 2) {
                                Element param3 = (Element) param3List.item(2);
                                String param3Value = getCharacterDataFromElement(param3);
                                FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                            }

                            if (param3List.getLength() > 3) {
                                Element paramrederingType = (Element) param3List.item(3);
                                String paramrederingTypeValue = getCharacterDataFromElement(paramrederingType);
                                FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                            }

                            if (param3List.getLength() > 4) {
                                Element paramrePopupData = (Element) param3List.item(4);
                                List<String> paramrederingpopupdata = getListDataFromElement(paramrePopupData);
                                FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                            }

                            if (param3List.getLength() > 5) {
                                Element paramrePopupImages = (Element) param3List.item(5);
                                List<String> paramrederingpopupImages = getListDataFromElement(paramrePopupImages);
                                FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                            }

//                            if (settings.trim().equalsIgnoreCase("false")) {
                            NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                            Element paramTwo = (Element) paramTwoList.item(1);

                            String expressionExists = paramTwo.getAttribute("expressionExists");
                            String paramTwoValue = getCharacterDataFromElement(paramTwo);
                            if (expressionExists.trim().equalsIgnoreCase("false")) {
                                FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                            } else {
                                FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                            }

                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }*/

                    actionWithoutConditionBean.setList_Form_OutParams(FormOutputParam_BeanList);
                }
            }

            if (FieldsElement.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = FieldsElement.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }

        }

    }

    public static void setCallDML(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));

        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);

            if (FieldsElement.getNodeName().equalsIgnoreCase("SQLName")) {
                String FormName = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setSelect_FormName(FormName);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {
                String type = FieldsElement.getAttribute("type");
                actionWithoutConditionBean.setDML_Input_Type(type);
                boolean isAdvanced = Boolean.parseBoolean(FieldsElement.getAttribute("isAdvanced"));

                if (type.equalsIgnoreCase("Multiple")) {

                    actionWithoutConditionBean.setDML_DataSource_ExpressionExists(isAdvanced);
                    if (isAdvanced) {
                        actionWithoutConditionBean.setDML_DataSource_ExpressionValue(FieldsElement.getAttribute("Datasource"));
                    } else {
                        actionWithoutConditionBean.setDML_DataSource_Value(FieldsElement.getAttribute("Datasource"));
                    }
                }

                NodeList inputParametersList = FieldsElement.getChildNodes();

                List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

                for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                    Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);


                    NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramOneList.item(0);

                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
                    apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
                    apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
                    apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));

                    NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                    Element paramTwo = (Element) paramTwoList.item(1);

                    String nameAtt = paramTwo.getAttribute("name");

                    if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_MappedControl_Type("Static");
                        apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    } else if (nameAtt.equalsIgnoreCase("expression")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_ExpressionExists(true);
                        apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                    } else if (!nameAtt.equalsIgnoreCase("") &&
                            !nameAtt.equalsIgnoreCase("none")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                        apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    } else {
//                        apiInputParamBean.setEnable(false);
                        apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
                    }

                    API_InParamsList.add(apiInputParamBean);
                }
                actionWithoutConditionBean.setList_Form_InParams(API_InParamsList);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {

                NodeList outParametersList = FieldsElement.getChildNodes();

                String type = FieldsElement.getAttribute("type");
                String display = "";
                actionWithoutConditionBean.setResult_NoOfRecords(type);

                if (!type.equalsIgnoreCase("Single")) {
                    display = FieldsElement.getAttribute("display");
                    actionWithoutConditionBean.setResult_DisplayType(display);


                    if (display.equals(AppConstants.DISPLAY_TYPE_SUBFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_GRIDFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATAVIEWER) ||
                            display.equals(AppConstants.DISPLAY_TYPE_MAPVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CALENDARVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CHART) ||
                            display.equals(AppConstants.DISPLAY_TYPE_LISTVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_IMAGEVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATA_TABLE) ||
                            display.equals(AppConstants.DISPLAY_TYPE_SECTION)) {
                        String MultiControlName = FieldsElement.getAttribute("MultiControlName");
                        actionWithoutConditionBean.setSelectedSubForm(MultiControlName);
                    }
                    actionWithoutConditionBean.setMulti_DataType(FieldsElement.getAttribute("activity"));
                }

                List<API_OutputParam_Bean> FormOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();

                if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    for (int i = 0; i < outParametersList.getLength(); i++) {
                        Element OutputItems = (Element) outParametersList.item(i);
                        if (OutputItems.getNodeName().equalsIgnoreCase("ProfileImage")) {
                            String ProfileImage = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setProfileImage_Mapped_item(ProfileImage);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Image")) {
                            String Image = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setImage_Mapped_item(Image);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ImageAdvanceSettings")) {

                            Element ImageElement = (Element) outParametersList.item(i);

                            NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
                            Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
                            String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
                            actionWithoutConditionBean.setImageAdvanced_ImageorNot(ImageAvailablestr);

                            if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
                                NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
                                Element ImageSource = (Element) nl_ImageSource.item(0);
                                String ImageSourcestr = getCharacterDataFromElement(ImageSource);
                                actionWithoutConditionBean.setImageAdvanced_ImageSource(ImageSourcestr);
                            }

                            NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
                            Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
                            String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
                            actionWithoutConditionBean.setImageAdvanced_ConditionColumn(ConditionColumnstr);

                            NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
                            Element Operator = (Element) nl_Operator.item(0);
                            String Operatorstr = getCharacterDataFromElement(Operator);
                            actionWithoutConditionBean.setImageAdvanced_Operator(Operatorstr);

                            NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
                            List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
                            for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
                                Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


                                NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
                                for (int k = 0; k < nl_advItems.getLength(); k++) {
                                    NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                                    ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                                    for (int l = 0; l < nl_Items.getLength(); l++) {
                                        Element Item = (Element) nl_Items.item(l);
                                        if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                                            String Value1 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value(Value1);
                                        } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                                            String Value2 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value2(Value2);
                                        } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                                            String ImagePath = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_ImagePath(ImagePath);
                                        }
                                    }
                                    ImageAdvanced_Mapped_Items.add(IA_Item);
                                }

                            }
                            actionWithoutConditionBean.setList_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);


                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Corner")) {
                            String Corner = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setCorner_Mapped_item(Corner);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Header")) {
                            String Header = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setHeader_Mapped_item(Header);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SubHeader")) {
                            String SubHeader = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSubHeader_Mapped_item(SubHeader);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DateandTime")) {
                            String DateandTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDateandTime_Mapped_item(DateandTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Distance")) {
                            String Distance = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDistance(Distance);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("WorkingHours")) {
                            String WorkingHours = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setWorking_hours(WorkingHours);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemOne")) {
                            String ItemOne = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItem_one_count(ItemOne);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemTwo")) {
                            String ItemTwo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItem_two_count(ItemTwo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Rating")) {
                            String Rating = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setRating(Rating);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceIcon")) {
                            String SourceIcon = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_icon(SourceIcon);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceName")) {
                            String SourceName = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_name(SourceName);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceTime")) {
                            String SourceTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSource_time(SourceTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("NewsType")) {
                            String NewsType = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setNews_type(NewsType);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemName")) {
                            String ItemName = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setItemName(ItemName);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("WatsAppNo")) {
                            String WatsAppNo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setWatsAppNo(WatsAppNo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DailNo")) {
                            String DailNo = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDailNo(DailNo);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DescriptionParams")) {
                            List<String> description_Mapped_item = new ArrayList<>();
                            NodeList DescriptionList = OutputItems.getChildNodes();
                            for (int ParamCnt = 0; ParamCnt < DescriptionList.getLength(); ParamCnt++) {
                                Element ParamElement = (Element) DescriptionList.item(ParamCnt);
                                if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                                    String value = getCharacterDataFromElement(ParamElement);
                                    description_Mapped_item.add(value);
                                }
                            }
                            actionWithoutConditionBean.setDescription_Mapped_item(description_Mapped_item);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DV_Trans_Id")) {
                            String dv_Trans_Id = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDv_trans_id(dv_Trans_Id);
                        }
                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                        NodeList paramthreeList = inputParamElement.getElementsByTagName("Param");
                        Element paramThree = (Element) paramthreeList.item(2);
                        String FilterItemID = getCharacterDataFromElement(paramThree);
                        actionWithoutConditionBean.setResult_ListView_FilterItemID(FilterItemID);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    setChartOutParams(outParametersList, actionWithoutConditionBean);
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATA_TABLE)) {
                    actionWithoutConditionBean.setDataTableRowHeight(FieldsElement.getAttribute("DataTableRowHeight"));
                    actionWithoutConditionBean.setDataTableRowHeightWrapContent(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableRowHeightWrapContent")));
                    actionWithoutConditionBean.setDataTableFixedWidthEnabled(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableFixedWidthEnabled")));
                    setDataTableColumns(outParametersList, actionWithoutConditionBean);
                } else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {
                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            for (int x = 0; x < param3List.getLength(); x++) {
                                Element param3ele = (Element) param3List.item(x);

                                String TypeofParam = param3ele.getAttribute("type");
                                if (TypeofParam.equalsIgnoreCase("DefultMarker")) {
                                    String param3Value = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                                }

                                if (TypeofParam.equalsIgnoreCase("RenderingType")) {
                                    String paramrederingTypeValue = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupData")) {
                                    List<String> paramrederingpopupdata = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupImage")) {
                                    List<String> paramrederingpopupImages = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                                }

                                if (param3ele.hasAttribute("expressionExists")) {

                                    String expressionExists = param3ele.getAttribute("expressionExists");
                                    String paramTwoValue = getCharacterDataFromElement(param3ele);
                                    if (expressionExists.trim().equalsIgnoreCase("false")) {
                                        FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                                    } else {
                                        FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                                    }
                                }
                            }

                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }
                /*else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {
                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            if (param3List.getLength() > 2) {
                                Element param3 = (Element) param3List.item(2);
                                String param3Value = getCharacterDataFromElement(param3);
                                FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                            }

                            if (param3List.getLength() > 3) {
                                Element paramrederingType = (Element) param3List.item(3);
                                String paramrederingTypeValue = getCharacterDataFromElement(paramrederingType);
                                FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                            }

                            if (param3List.getLength() > 4) {
                                Element paramrePopupData = (Element) param3List.item(4);
                                List<String> paramrederingpopupdata = getListDataFromElement(paramrePopupData);
                                FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                            }

                            if (param3List.getLength() > 5) {
                                Element paramrePopupImages = (Element) param3List.item(5);
                                List<String> paramrederingpopupImages = getListDataFromElement(paramrePopupImages);
                                FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                            }

//                            if (settings.trim().equalsIgnoreCase("false")) {
                            NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                            Element paramTwo = (Element) paramTwoList.item(1);

                            String expressionExists = paramTwo.getAttribute("expressionExists");
                            String paramTwoValue = getCharacterDataFromElement(paramTwo);
                            if (expressionExists.trim().equalsIgnoreCase("false")) {
                                FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                            } else {
                                FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                            }

                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }*/

                    actionWithoutConditionBean.setList_Form_OutParams(FormOutputParam_BeanList);
                }
            }

            if (FieldsElement.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = FieldsElement.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }
        }

    }

    public static void setCallGroupDML(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));

        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);

            if (FieldsElement.getNodeName().equalsIgnoreCase("SQLName")) {
                String FormName = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setSelect_FormName(FormName);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {

                NodeList inputParametersList = FieldsElement.getChildNodes();

                List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

                for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                    Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);

                    String type = inputParamElement.getAttribute("type");
                    boolean isAdvanced = Boolean.parseBoolean(inputParamElement.getAttribute("isAdvanced"));
                    String StatementName = inputParamElement.getAttribute("StatementName");


                    NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramOneList.item(0);

                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
                    apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
                    apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
                    apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));


                    apiInputParamBean.setInParam_GroupDML_Input_Type(type);
                    apiInputParamBean.setInParam_GroupDML_StatementName(StatementName);
                    if (type.equalsIgnoreCase("Multiple")) {

                        apiInputParamBean.setInParam_GroupDML_DataSource_ExpressionExists(isAdvanced);
                        if (isAdvanced) {
                            apiInputParamBean.setInParam_GroupDML_DataSource_ExpressionValue(inputParamElement.getAttribute("Datasource"));
                        } else {
                            apiInputParamBean.setInParam_GroupDML_DataSource_Value(inputParamElement.getAttribute("Datasource"));
                        }
                    }


                    NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                    Element paramTwo = (Element) paramTwoList.item(1);

                    String nameAtt = paramTwo.getAttribute("name");

                    if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_MappedControl_Type("Static");
                        apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    } else if (nameAtt.equalsIgnoreCase("expression")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_ExpressionExists(true);
                        apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                    } else if (!nameAtt.equalsIgnoreCase("") &&
                            !nameAtt.equalsIgnoreCase("none")) {
                        apiInputParamBean.setEnable(true);
                        apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                        apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    } else {
//                        apiInputParamBean.setEnable(false);
                        apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
                    }

                    API_InParamsList.add(apiInputParamBean);
                }
                actionWithoutConditionBean.setList_Form_InParams(API_InParamsList);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {

                NodeList outParametersList = FieldsElement.getChildNodes();

                String type = FieldsElement.getAttribute("type");
                String display = "";
                actionWithoutConditionBean.setResult_NoOfRecords(type);

                if (!type.equalsIgnoreCase("Single")) {
                    display = FieldsElement.getAttribute("display");
                    actionWithoutConditionBean.setResult_DisplayType(display);


                    if (display.equals(AppConstants.DISPLAY_TYPE_SUBFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_GRIDFORM) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATAVIEWER) ||
                            display.equals(AppConstants.DISPLAY_TYPE_MAPVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CALENDARVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_CHART) ||
                            display.equals(AppConstants.DISPLAY_TYPE_LISTVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_IMAGEVIEW) ||
                            display.equals(AppConstants.DISPLAY_TYPE_DATA_TABLE) ||
                            display.equals(AppConstants.DISPLAY_TYPE_SECTION)) {
                        String MultiControlName = FieldsElement.getAttribute("MultiControlName");
                        actionWithoutConditionBean.setSelectedSubForm(MultiControlName);
                    }
                    actionWithoutConditionBean.setMulti_DataType(FieldsElement.getAttribute("activity"));
                }

                List<API_OutputParam_Bean> FormOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();

                if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    for (int i = 0; i < outParametersList.getLength(); i++) {
                        Element OutputItems = (Element) outParametersList.item(i);
                        if (OutputItems.getNodeName().equalsIgnoreCase("ProfileImage")) {
                            String ProfileImage = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setProfileImage_Mapped_item(ProfileImage);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Image")) {
                            String Image = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setImage_Mapped_item(Image);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("ImageAdvanceSettings")) {

                            Element ImageElement = (Element) outParametersList.item(i);

                            NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
                            Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
                            String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
                            actionWithoutConditionBean.setImageAdvanced_ImageorNot(ImageAvailablestr);

                            if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
                                NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
                                Element ImageSource = (Element) nl_ImageSource.item(0);
                                String ImageSourcestr = getCharacterDataFromElement(ImageSource);
                                actionWithoutConditionBean.setImageAdvanced_ImageSource(ImageSourcestr);
                            }

                            NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
                            Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
                            String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
                            actionWithoutConditionBean.setImageAdvanced_ConditionColumn(ConditionColumnstr);

                            NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
                            Element Operator = (Element) nl_Operator.item(0);
                            String Operatorstr = getCharacterDataFromElement(Operator);
                            actionWithoutConditionBean.setImageAdvanced_Operator(Operatorstr);

                            NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
                            List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
                            for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
                                Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


                                NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
                                for (int k = 0; k < nl_advItems.getLength(); k++) {
                                    NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                                    ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                                    for (int l = 0; l < nl_Items.getLength(); l++) {
                                        Element Item = (Element) nl_Items.item(l);
                                        if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                                            String Value1 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value(Value1);
                                        } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                                            String Value2 = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_Value2(Value2);
                                        } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                                            String ImagePath = getCharacterDataFromElement(Item);
                                            IA_Item.setImageAdvanced_ImagePath(ImagePath);
                                        }
                                    }
                                    ImageAdvanced_Mapped_Items.add(IA_Item);
                                }

                            }
                            actionWithoutConditionBean.setList_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);


                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Corner")) {
                            String Corner = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setCorner_Mapped_item(Corner);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("Header")) {
                            String Header = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setHeader_Mapped_item(Header);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("SubHeader")) {
                            String SubHeader = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setSubHeader_Mapped_item(SubHeader);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DateandTime")) {
                            String DateandTime = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDateandTime_Mapped_item(DateandTime);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DescriptionParams")) {
                            List<String> description_Mapped_item = new ArrayList<>();
                            NodeList DescriptionList = OutputItems.getChildNodes();
                            for (int ParamCnt = 0; ParamCnt < DescriptionList.getLength(); ParamCnt++) {
                                Element ParamElement = (Element) DescriptionList.item(ParamCnt);
                                if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                                    String value = getCharacterDataFromElement(ParamElement);
                                    description_Mapped_item.add(value);
                                }
                            }
                            actionWithoutConditionBean.setDescription_Mapped_item(description_Mapped_item);
                        } else if (OutputItems.getNodeName().equalsIgnoreCase("DV_Trans_Id")) {
                            String dv_Trans_Id = getCharacterDataFromElement(OutputItems);
                            actionWithoutConditionBean.setDv_trans_id(dv_Trans_Id);
                        }
                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                        NodeList paramthreeList = inputParamElement.getElementsByTagName("Param");
                        Element paramThree = (Element) paramthreeList.item(2);
                        String FilterItemID = getCharacterDataFromElement(paramThree);
                        actionWithoutConditionBean.setResult_ListView_FilterItemID(FilterItemID);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);
                        String FilterMappedControl = getCharacterDataFromElement(paramOne);
                        actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);
                        String FilterItem = getCharacterDataFromElement(paramTwo);
                        actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                    }
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
                    outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
                    setChartOutParams(outParametersList, actionWithoutConditionBean);
                } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATA_TABLE)) {
                    actionWithoutConditionBean.setDataTableRowHeight(FieldsElement.getAttribute("DataTableRowHeight"));
                    actionWithoutConditionBean.setDataTableRowHeightWrapContent(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableRowHeightWrapContent")));
                    actionWithoutConditionBean.setDataTableFixedWidthEnabled(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableFixedWidthEnabled")));
                    setDataTableColumns(outParametersList, actionWithoutConditionBean);
                } else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {
                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            for (int x = 0; x < param3List.getLength(); x++) {
                                Element param3ele = (Element) param3List.item(x);

                                String TypeofParam = param3ele.getAttribute("type");
                                if (TypeofParam.equalsIgnoreCase("DefultMarker")) {
                                    String param3Value = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                                }

                                if (TypeofParam.equalsIgnoreCase("RenderingType")) {
                                    String paramrederingTypeValue = getCharacterDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupData")) {
                                    List<String> paramrederingpopupdata = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                                }

                                if (TypeofParam.equalsIgnoreCase("PopupImage")) {
                                    List<String> paramrederingpopupImages = getListDataFromElement(param3ele);
                                    FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                                }

                                if (param3ele.hasAttribute("expressionExists")) {

                                    String expressionExists = param3ele.getAttribute("expressionExists");
                                    String paramTwoValue = getCharacterDataFromElement(param3ele);
                                    if (expressionExists.trim().equalsIgnoreCase("false")) {
                                        FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                                    } else {
                                        FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                                    }
                                }
                            }

                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }
                /*else {
                    for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                        String defaultVal = inputParamElement.getAttribute("default");
                        String enable = inputParamElement.getAttribute("enable");
                        String settings = inputParamElement.getAttribute("settings");

                        API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);

                        FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                        FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                        if (enable.trim().equalsIgnoreCase("true")) {
                            NodeList param3List = inputParamElement.getElementsByTagName("Param");

                            if (param3List.getLength() > 2) {
                                Element param3 = (Element) param3List.item(2);
                                String param3Value = getCharacterDataFromElement(param3);
                                FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                            }

                            if (param3List.getLength() > 3) {
                                Element paramrederingType = (Element) param3List.item(3);
                                String paramrederingTypeValue = getCharacterDataFromElement(paramrederingType);
                                FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                            }

                            if (param3List.getLength() > 4) {
                                Element paramrePopupData = (Element) param3List.item(4);
                                List<String> paramrederingpopupdata = getListDataFromElement(paramrePopupData);
                                FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                            }

                            if (param3List.getLength() > 5) {
                                Element paramrePopupImages = (Element) param3List.item(5);
                                List<String> paramrederingpopupImages = getListDataFromElement(paramrePopupImages);
                                FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                            }

//                            if (settings.trim().equalsIgnoreCase("false")) {
                            NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                            Element paramTwo = (Element) paramTwoList.item(1);

                            String expressionExists = paramTwo.getAttribute("expressionExists");
                            String paramTwoValue = getCharacterDataFromElement(paramTwo);
                            if (expressionExists.trim().equalsIgnoreCase("false")) {
                                FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                            } else {
                                FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                            }

                            if (settings.trim().equalsIgnoreCase("true")) {
                                NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                                }
                            }
                        }
                        FormOutputParam_BeanList.add(FormOutputParam_Bean);

                    }*/

                    actionWithoutConditionBean.setList_Form_OutParams(FormOutputParam_BeanList);
                }
            }

            if (FieldsElement.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = FieldsElement.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }
        }

    }

    private void callAPIOutparametersOldCode(ActionWithoutCondition_Bean actionWithoutConditionBean, Element FieldsElement){
        NodeList outParametersList = FieldsElement.getChildNodes();

        String type = FieldsElement.getAttribute("type");
        String display = "";
        actionWithoutConditionBean.setResult_NoOfRecords(type);

        if (!type.equalsIgnoreCase("Single")) {
            display = FieldsElement.getAttribute("display");
            actionWithoutConditionBean.setResult_DisplayType(display);


            if (display.equals(AppConstants.DISPLAY_TYPE_SUBFORM) ||
                    display.equals(AppConstants.DISPLAY_TYPE_GRIDFORM) ||
                    display.equals(AppConstants.DISPLAY_TYPE_DATAVIEWER) ||
                    display.equals(AppConstants.DISPLAY_TYPE_MAPVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_CALENDARVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_LISTVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_IMAGEVIEW)
                    || display.contentEquals(AppConstants.DISPLAY_TYPE_CHART)
                    || display.contentEquals(AppConstants.DISPLAY_TYPE_DATA_TABLE)
                    || display.contentEquals(AppConstants.DISPLAY_TYPE_SECTION)) {
                String MultiControlName = FieldsElement.getAttribute("MultiControlName");
                actionWithoutConditionBean.setSelectedSubForm(MultiControlName);
            }
            actionWithoutConditionBean.setMulti_DataType(FieldsElement.getAttribute("activity"));
        }

        List<API_OutputParam_Bean> apiOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();

        if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
            outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
            for (int i = 0; i < outParametersList.getLength(); i++) {
                Element OutputItems = (Element) outParametersList.item(i);
                if (OutputItems.getNodeName().equalsIgnoreCase("ProfileImage")) {
                    String ProfileImage = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setProfileImage_Mapped_item(ProfileImage);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Image")) {
                    String Image = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setImage_Mapped_item(Image);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ImageAdvanceSettings")) {

                    Element ImageElement = (Element) outParametersList.item(i);

                    NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
                    Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
                    String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
                    actionWithoutConditionBean.setImageAdvanced_ImageorNot(ImageAvailablestr);

                    if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
                        NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
                        Element ImageSource = (Element) nl_ImageSource.item(0);
                        String ImageSourcestr = getCharacterDataFromElement(ImageSource);
                        actionWithoutConditionBean.setImageAdvanced_ImageSource(ImageSourcestr);
                    }

                    NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
                    Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
                    String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
                    actionWithoutConditionBean.setImageAdvanced_ConditionColumn(ConditionColumnstr);

                    NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
                    Element Operator = (Element) nl_Operator.item(0);
                    String Operatorstr = getCharacterDataFromElement(Operator);
                    actionWithoutConditionBean.setImageAdvanced_Operator(Operatorstr);

                    NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
                    List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
                    for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
                        Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


                        NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
                        for (int k = 0; k < nl_advItems.getLength(); k++) {
                            NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                            ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                            for (int l = 0; l < nl_Items.getLength(); l++) {
                                Element Item = (Element) nl_Items.item(l);
                                if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                                    String Value1 = getCharacterDataFromElement(Item);
                                    IA_Item.setImageAdvanced_Value(Value1);
                                } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                                    String Value2 = getCharacterDataFromElement(Item);
                                    IA_Item.setImageAdvanced_Value2(Value2);
                                } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                                    String ImagePath = getCharacterDataFromElement(Item);
                                    IA_Item.setImageAdvanced_ImagePath(ImagePath);
                                }
                            }
                            ImageAdvanced_Mapped_Items.add(IA_Item);
                        }

                    }
                    actionWithoutConditionBean.setList_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);


                } else if (OutputItems.getNodeName().equalsIgnoreCase("Corner")) {
                    String Corner = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setCorner_Mapped_item(Corner);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Header")) {
                    String Header = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setHeader_Mapped_item(Header);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SubHeader")) {
                    String SubHeader = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSubHeader_Mapped_item(SubHeader);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("DateandTime")) {
                    String DateandTime = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDateandTime_Mapped_item(DateandTime);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Distance")) {
                    String Distance = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDistance(Distance);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("WorkingHours")) {
                    String WorkingHours = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setWorking_hours(WorkingHours);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemOne")) {
                    String ItemOne = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItem_one_count(ItemOne);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemTwo")) {
                    String ItemTwo = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItem_two_count(ItemTwo);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Rating")) {
                    String Rating = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setRating(Rating);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceIcon")) {
                    String SourceIcon = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSource_icon(SourceIcon);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceName")) {
                    String SourceName = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSource_name(SourceName);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceTime")) {
                    String SourceTime = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSource_time(SourceTime);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("NewsType")) {
                    String NewsType = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setNews_type(NewsType);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemName")) {
                    String ItemName = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItemName(ItemName);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("WatsAppNo")) {
                    String WatsAppNo = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setWatsAppNo(WatsAppNo);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("DailNo")) {
                    String DailNo = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDailNo(DailNo);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("DescriptionParams")) {
                    List<String> description_Mapped_item = new ArrayList<>();
                    NodeList DescriptionList = OutputItems.getChildNodes();
                    for (int ParamCnt = 0; ParamCnt < DescriptionList.getLength(); ParamCnt++) {
                        Element ParamElement = (Element) DescriptionList.item(ParamCnt);
                        if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                            String value = getCharacterDataFromElement(ParamElement);
                            description_Mapped_item.add(value);
                        }
                    }
                    actionWithoutConditionBean.setDescription_Mapped_item(description_Mapped_item);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("DV_Trans_Id")) {
                    String dv_Trans_Id = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDv_trans_id(dv_Trans_Id);
                }
            }
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
            for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramOneList.item(0);
                String FilterMappedControl = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                Element paramTwo = (Element) paramTwoList.item(1);
                String FilterItem = getCharacterDataFromElement(paramTwo);
                actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                NodeList paramthreeList = inputParamElement.getElementsByTagName("Param");
                Element paramThree = (Element) paramthreeList.item(2);
                String FilterItemID = getCharacterDataFromElement(paramThree);
                actionWithoutConditionBean.setResult_ListView_FilterItemID(FilterItemID);

            }
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
            for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramOneList.item(0);
                String FilterMappedControl = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                Element paramTwo = (Element) paramTwoList.item(1);
                String FilterItem = getCharacterDataFromElement(paramTwo);
                actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);


            }
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
            outParametersList = FieldsElement.getChildNodes().item(0).getChildNodes();
            setChartOutParams(outParametersList, actionWithoutConditionBean);
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATA_TABLE)) {
            actionWithoutConditionBean.setDataTableRowHeight(FieldsElement.getAttribute("DataTableRowHeight"));
            actionWithoutConditionBean.setDataTableRowHeightWrapContent(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableRowHeightWrapContent")));
            actionWithoutConditionBean.setDataTableFixedWidthEnabled(Boolean.parseBoolean(FieldsElement.getAttribute("DataTableFixedWidthEnabled")));
            setDataTableColumns(outParametersList, actionWithoutConditionBean);
        } else {
            for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                String defaultVal = inputParamElement.getAttribute("default");
                String enable = inputParamElement.getAttribute("enable");
                String settings = inputParamElement.getAttribute("settings");

                API_OutputParam_Bean apiOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramOneList.item(0);

                String paramOneValue = getCharacterDataFromElement(paramOne);

                apiOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                apiOutputParam_Bean.setOutParam_Name(paramOneValue);

                if (enable.trim().equalsIgnoreCase("true")) {

                    NodeList param3List = inputParamElement.getElementsByTagName("Param");
                    for (int x = 0; x < param3List.getLength(); x++) {
                        Element param3ele = (Element) param3List.item(x);

                        String TypeofParam = param3ele.getAttribute("type");
                        if (TypeofParam.equalsIgnoreCase("DefultMarker")) {
                            String param3Value = getCharacterDataFromElement(param3ele);
                            apiOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                        }

                        if (TypeofParam.equalsIgnoreCase("RenderingType")) {
                            String paramrederingTypeValue = getCharacterDataFromElement(param3ele);
                            apiOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                        }

                        if (TypeofParam.equalsIgnoreCase("PopupData")) {
                            List<String> paramrederingpopupdata = getListDataFromElement(param3ele);
                            apiOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                        }

                        if (TypeofParam.equalsIgnoreCase("PopupImage")) {
                            List<String> paramrederingpopupImages = getListDataFromElement(param3ele);
                            apiOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                        }

                        if (param3ele.hasAttribute("expressionExists")) {

                            String expressionExists = param3ele.getAttribute("expressionExists");
                            String paramTwoValue = getCharacterDataFromElement(param3ele);
                            if (expressionExists.trim().equalsIgnoreCase("false")) {
                                apiOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                            } else {
                                apiOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                            }
                        }
                    }


                    if (settings.trim().equalsIgnoreCase("true")) {
                        NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                        Element ControlSettings = (Element) ControlSettingsList.item(0);

                        String settings_type = ControlSettings.getAttribute("type");
                        if (settings_type.equalsIgnoreCase("language")) {
                            List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                            apiOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                        } else if (settings_type.equalsIgnoreCase("Image")) {

                            getandSetImageSettings(ControlSettings, apiOutputParam_Bean);

                        } else if (settings_type.equalsIgnoreCase("Marker")) {
                            getandSetMarkerSettings(ControlSettings, apiOutputParam_Bean);
                        }
                    }
                }
                apiOutputParam_BeanList.add(apiOutputParam_Bean);

            }

            actionWithoutConditionBean.setList_API_OutParams(apiOutputParam_BeanList);
        }
    }

    public static void setAPIQuery_Old(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionId(actionGroupElement.getAttribute("ActionId"));
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();
        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);

            if (FieldsElement.getNodeName().equalsIgnoreCase("APIName")) {
                String APIName = getCharacterDataFromElement(FieldsElement);

                actionWithoutConditionBean.setSelectedAPIName(APIName);

            }
            if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {

                NodeList inputParametersList = FieldsElement.getChildNodes();

                List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

                for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                    Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);

                    boolean isArrayObject = Boolean.parseBoolean(inputParamElement.getAttribute("isArrayObject"));

                    if (!isArrayObject) {
                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean("", "", "");
                        for (int i = 0; i < paramOneList.getLength(); i++) {
                            Element param = (Element) paramOneList.item(i);

                            if (param.getAttribute("type").equalsIgnoreCase("apiInParam")) {
                                String paramOneValue = getCharacterDataFromElement(param);
                                apiInputParamBean.setInParam_Name(paramOneValue);
                                apiInputParamBean.setInParam_Static(param.getAttribute("static"));
                                apiInputParamBean.setInParam_Optional(param.getAttribute("optional"));
                                apiInputParamBean.setInParam_InputMode(param.getAttribute("inputMode"));
                            } else if (param.getAttribute("type").equalsIgnoreCase("inputParameter")) {
                                String nameAtt = param.getAttribute("name");

                                String staticornot = apiInputParamBean.getInParam_Static();
                                if (staticornot.equalsIgnoreCase("Yes")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_MappedControl_Type("Static");
                                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(param));
                                } else if (nameAtt.equalsIgnoreCase("expression")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_ExpressionExists(true);
                                    apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(param));
                                } else if (!nameAtt.equalsIgnoreCase("") &&
                                        !nameAtt.equalsIgnoreCase("none")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(param));
                                } else {
                                    apiInputParamBean.setEnable(false);
                                }
                            }
                        }
                        API_InParamsList.add(apiInputParamBean);


                    } else {
                        API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean("", "", "");
                        String ArrayObjectName = inputParamElement.getAttribute("ArrayObjectName");

                        apiInputParamBean.setInParam_isUnderArrayObject(true);
                        apiInputParamBean.setInParam_ArrayObjectName(ArrayObjectName);

                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");

                        for (int i = 0; i < paramOneList.getLength(); i++) {
                            Element param = (Element) paramOneList.item(i);
                            if (param.getAttribute("type").equalsIgnoreCase("DataSource")) {
                                if (param.getAttribute("isAdvanced").equalsIgnoreCase("true")) {
                                    apiInputParamBean.setInParam_SelectedDataExpressionExists(true);
                                    apiInputParamBean.setInParam_SelectedDataExpressionValue(getCharacterDataFromElement(param));


                                } else {
                                    apiInputParamBean.setInParam_SelectedDataExpressionExists(false);
                                    apiInputParamBean.setInParam_SelectedDataSource(getCharacterDataFromElement(param));
                                }

                            } else if (param.getAttribute("type").equalsIgnoreCase("apiInParam")) {
                                String paramOneValue = getCharacterDataFromElement(param);
                                apiInputParamBean.setInParam_Name(paramOneValue);
                                apiInputParamBean.setInParam_Static(param.getAttribute("static"));
                                apiInputParamBean.setInParam_Optional(param.getAttribute("optional"));
                                apiInputParamBean.setInParam_InputMode(param.getAttribute("inputMode"));
                            } else if (param.getAttribute("type").equalsIgnoreCase("inputParameter")) {
                                String nameAtt = param.getAttribute("name");

                                String staticornot = apiInputParamBean.getInParam_Static();
                                if (staticornot.equalsIgnoreCase("Yes")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_MappedControl_Type("Static");
                                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(param));
                                } else if (nameAtt.equalsIgnoreCase("expression")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_ExpressionExists(true);
                                    apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(param));
                                } else if (!nameAtt.equalsIgnoreCase("") &&
                                        !nameAtt.equalsIgnoreCase("none")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(param));
                                } else {
                                    apiInputParamBean.setEnable(false);
                                }
                            }
                        }

                        API_InParamsList.add(apiInputParamBean);
                    }
                }
                actionWithoutConditionBean.setList_API_InParams(API_InParamsList);

            }


            if (FieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {
                setOutParams(actionWithoutConditionBean,FieldsElement);

            }

            if (FieldsElement.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = FieldsElement.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }

        }

    }

    public static void setAPIQuery(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionId(actionGroupElement.getAttribute("ActionId"));
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        actionWithoutConditionBean.setSaveOfflineType(actionGroupElement.getAttribute("offline"));
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();
        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);

            if (FieldsElement.getNodeName().equalsIgnoreCase("APIName")) {
                String APIName = getCharacterDataFromElement(FieldsElement);
                actionWithoutConditionBean.setSelectedAPIName(APIName);
                actionWithoutConditionBean.set_APIFormDataExits(FieldsElement.getAttribute("FormDataExits"));
            }
            else if (FieldsElement.getNodeName().equalsIgnoreCase("APICategory")) {
                if (FieldsElement.hasChildNodes()) {
                    String APICategory = FieldsElement.getChildNodes().item(0).getNodeValue();
                    actionWithoutConditionBean.set_SelectedAPICategory(APICategory);
                }
            }
            else if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {
                NodeList inputParametersList = FieldsElement.getChildNodes();
                List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

                for (int inputParamListCnt = 0; inputParamListCnt < inputParametersList.getLength(); inputParamListCnt++) {
                    API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean("", "", "");
                    Element inputParamsElement = (Element) inputParametersList.item(inputParamListCnt);

                    boolean isArrayObject = Boolean.parseBoolean(inputParamsElement.getAttribute("isArrayObject"));
                    String arrayObjectName = inputParamsElement.getAttribute("ArrayObjectName");
                    boolean isParentAvailable = Boolean.parseBoolean(inputParamsElement.getAttribute("isParentAvailable"));
                    String parentName =  inputParamsElement.getAttribute("ParentName");
                    String dataSourceName =  inputParamsElement.getAttribute("DataSourceName");
                    boolean isFiltersAvailable =  Boolean.parseBoolean(inputParamsElement.getAttribute("isFiltersAvailable"));

                    apiInputParamBean.setInParam_isUnderArrayObject(isArrayObject);
                    apiInputParamBean.setInParam_ArrayObjectName(arrayObjectName);

                    apiInputParamBean.set_inParam_isParentAvailable(isParentAvailable);
                    apiInputParamBean.set_inParam_ParentName(parentName);
                    apiInputParamBean.set_inParam_DataSourceName(dataSourceName);
                    apiInputParamBean.set_inParam_isFiltersAvailable(isFiltersAvailable);
                    String staticTemp = "";
                    NodeList inputParameterList = inputParamsElement.getChildNodes();
                    for (int inputParameterListCnt = 0; inputParameterListCnt < inputParameterList.getLength(); inputParameterListCnt++) {
                        Element paramElement = (Element) inputParameterList.item(inputParameterListCnt);
                        List<API_InputParam_Bean> filterInParamsList =new ArrayList<>();
                        if(paramElement.getNodeName().equalsIgnoreCase("Param")){
                            if (paramElement.getAttribute("type").equalsIgnoreCase("apiInParam")) {
                                String paramOneValue = getCharacterDataFromElement(paramElement);
                                apiInputParamBean.setInParam_Name(paramOneValue);

                                apiInputParamBean.setInParam_Static(paramElement.getAttribute("static"));
                                apiInputParamBean.setInParam_Optional(paramElement.getAttribute("optional"));
                                apiInputParamBean.setInParam_InputMode(paramElement.getAttribute("inputMode"));
                                apiInputParamBean.set_APIFormDataType( paramElement.getAttribute("FormDataType"));
                                apiInputParamBean.set_InParam_Type(paramElement.getAttribute("inparamType"));
                                staticTemp = paramElement.getAttribute("static");
                            }
                            else if (paramElement.getAttribute("type").equalsIgnoreCase("inputParameter")) {
                                String paramTwoValue = "";
                                if (paramElement.hasChildNodes()) {
                                    paramTwoValue = paramElement.getChildNodes().item(0).getNodeValue();
                                }
                                String nameAtt = paramElement.getAttribute("name");

                                staticTemp = apiInputParamBean.getInParam_Static();
                                if (staticTemp.equalsIgnoreCase("Yes")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_MappedControl_Type("Static");
                                    apiInputParamBean.setInParam_Mapped_ID(paramTwoValue);
                                } else if (nameAtt.equalsIgnoreCase("expression")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_ExpressionExists(true);
                                    apiInputParamBean.setInParam_ExpressionValue(paramTwoValue);
                                } else if (!nameAtt.equalsIgnoreCase("") &&
                                        !nameAtt.equalsIgnoreCase("none")) {
                                    apiInputParamBean.setEnable(true);
                                    apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                                    apiInputParamBean.setInParam_Mapped_ID(paramTwoValue);
                                } else {
                                    apiInputParamBean.setEnable(false);
                                }
                                apiInputParamBean.setInParam_Mapped_ID(paramTwoValue);
                                apiInputParamBean.setInParam_ExpressionValue(paramTwoValue);
                            }
                            else if (paramElement.getAttribute("type").equalsIgnoreCase("DataSource")) {

                                String isAdvanced = paramElement.getAttribute("isAdvanced");
                                String paramThreeValue = "";
                                if (paramElement.hasChildNodes()) {
                                    paramThreeValue = paramElement.getFirstChild().getNodeValue();
                                }
                                if (isAdvanced.equalsIgnoreCase("true")) {
                                    apiInputParamBean.setInParam_SelectedDataExpressionExists(true);
                                    apiInputParamBean.setInParam_SelectedDataExpressionValue(paramThreeValue);
                                } else if (isAdvanced.equalsIgnoreCase("false")) {
                                    apiInputParamBean.setInParam_SelectedDataExpressionExists(false);
                                    apiInputParamBean.setInParam_SelectedDataSource(paramThreeValue);
                                }
                            }
                        }
                        else  if(paramElement.getNodeName().equalsIgnoreCase("Filters")){
                            NodeList filterParametersList = paramElement.getChildNodes();
                            for (int filterParametersListCnt = 0; filterParametersListCnt < filterParametersList.getLength(); filterParametersListCnt++) {
                                if (filterParametersList.item(filterParametersListCnt).getNodeType() == 1) {
                                    if (filterParametersList.item(filterParametersListCnt).getNodeName().equalsIgnoreCase("Filter")) {
                                        API_InputParam_Bean filterParamBean = new API_InputParam_Bean("", "", "");
                                        NodeList filterList = filterParametersList.item(filterParametersListCnt).getChildNodes();
                                        for (int filterListCnt = 0; filterListCnt < filterList.getLength(); filterListCnt++) {
                                            if (filterList.item(filterListCnt).getNodeType() == 1) {
                                                Element filterElement = (Element) filterList.item(filterListCnt);
                                                if (filterElement.getNodeName().equalsIgnoreCase("Param")) {
                                                    if (filterElement.getAttribute("type").equalsIgnoreCase("formFieldsInputParam")) {
                                                        if (filterElement.hasChildNodes()) {
                                                            filterParamBean.setInParam_Name(filterElement.getFirstChild().getNodeValue());
                                                        }
                                                    }
                                                    else if (filterElement.getAttribute("type").equalsIgnoreCase("inputParameter")) {
                                                        String nameAtt = filterElement.getAttribute("name");
                                                        String paramTwoValue="";
                                                        if (filterElement.hasChildNodes()) {
                                                            paramTwoValue = filterElement.getFirstChild().getNodeValue();
                                                        }
                                                        if (nameAtt.equalsIgnoreCase("expression")) {
                                                            filterParamBean.setEnable(true);
                                                            filterParamBean.setInParam_ExpressionExists(true);
                                                            filterParamBean.setInParam_ExpressionValue(paramTwoValue);
                                                        } else if (!nameAtt.equalsIgnoreCase("") &&
                                                                !nameAtt.equalsIgnoreCase("none")) {
                                                            filterParamBean.setEnable(true);
                                                            filterParamBean.setInParam_MappedControl_Type(nameAtt);
                                                            filterParamBean.setInParam_Mapped_ID(paramTwoValue);
                                                        } else {
                                                            filterParamBean.setEnable(false);
                                                        }
                                                    }
                                                    else if (filterElement.getAttribute("type").equalsIgnoreCase("operator")) {
                                                        if (filterElement.hasChildNodes()) {
                                                            filterParamBean.setInParam_Operator(filterElement.getFirstChild().getNodeValue());
                                                        }
                                                    }
                                                    else if (filterElement.getAttribute("type").equalsIgnoreCase("condition")) {
                                                        if (filterElement.hasChildNodes()) {
                                                            filterParamBean.setInParam_and_or(filterElement.getFirstChild().getNodeValue());
                                                        }
                                                    }
                                                    else if (filterElement.getAttribute("type").equalsIgnoreCase("NearBy")) {
                                                        if (filterElement.hasChildNodes()) {
                                                            filterParamBean.setInParam_near_by_distance(filterElement.getFirstChild().getNodeValue());
                                                        }
                                                    }
                                                    else if (filterElement.getAttribute("type").equalsIgnoreCase("NoofRecords")) {
                                                        if (filterElement.hasChildNodes()) {
                                                            filterParamBean.setInParam_near_by_records(filterElement.getFirstChild().getNodeValue());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        filterInParamsList.add(filterParamBean);
                                    }
                                }
                            }
                        }

                        apiInputParamBean.set_FilterParams(filterInParamsList);
                    }
                    API_InParamsList.add(apiInputParamBean);
                }
                actionWithoutConditionBean.setList_API_InParams(API_InParamsList);
            }
            else if (FieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {
                setOutParams(actionWithoutConditionBean, FieldsElement);
            }
            else if (FieldsElement.getNodeName().equalsIgnoreCase("MessageSettings")) {
                NodeList MessageSettingsList = FieldsElement.getChildNodes();
                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                    Node MessageSettings = MessageSettingsList.item(k);
                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessWithZeroRecorsMessage")) {
                            boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_SuccessNoRecordsIsEnable(SuccessEnable);

                            if (SuccessEnable) {
                                String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_SuccessNoRecordsDisplayType(MessageSuccess_DisplayType);
                                actionWithoutConditionBean.setMessage_SuccessNoRecords(MessageSettings.getTextContent().trim());
                            }

                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                            boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                            actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);

                            if (FailEnable) {
                                String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                                actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                            }
                        }
                    }
                }
            }

        }

    }


    public static List<LanguageMapping> getlanguageSettings(Element actionGroupElement) {
        List<LanguageMapping> list_OutParam_Languages = new ArrayList<>();

        for (int i = 0; i < actionGroupElement.getChildNodes().getLength(); i++) {
            Element settings_Item = (Element) actionGroupElement.getChildNodes().item(i);
            String language = settings_Item.getAttribute("language");
            String languageValue = getCharacterDataFromElement(settings_Item);

            LanguageMapping LanguageMapping = new LanguageMapping();
            LanguageMapping.setOutParam_Lang_Name(language);
            LanguageMapping.setOutParam_Lang_Mapped(languageValue);

            list_OutParam_Languages.add(LanguageMapping);
        }


        return list_OutParam_Languages;
    }

    public static void getandSetImageSettings(Element ImageElement, API_OutputParam_Bean apiOutputParam_Bean) {

        NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
        Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
        String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
        apiOutputParam_Bean.setOutParam_ImageAdvanced_ImageorNot(ImageAvailablestr);

        if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
            NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
            Element ImageSource = (Element) nl_ImageSource.item(0);
            String ImageSourcestr = getCharacterDataFromElement(ImageSource);
            apiOutputParam_Bean.setOutParam_ImageAdvanced_ImageSource(ImageSourcestr);
        }

        NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
        Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
        String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
        apiOutputParam_Bean.setOutParam_ImageAdvanced_ConditionColumn(ConditionColumnstr);

        NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
        Element Operator = (Element) nl_Operator.item(0);
        String Operatorstr = getCharacterDataFromElement(Operator);
        apiOutputParam_Bean.setOutParam_ImageAdvanced_Operator(Operatorstr);

        NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
        List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
        for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
            Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


            NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
            for (int k = 0; k < nl_advItems.getLength(); k++) {
                NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                for (int l = 0; l < nl_Items.getLength(); l++) {
                    Element Item = (Element) nl_Items.item(l);
                    if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                        String Value1 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value(Value1);
                    } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                        String Value2 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value2(Value2);
                    } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                        String ImagePath = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_ImagePath(ImagePath);
                    }
                }
                ImageAdvanced_Mapped_Items.add(IA_Item);
            }

        }
        apiOutputParam_Bean.setList_OutParam_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);

    }


    public static void getandSetImageSettingsForSetValue(Element ImageElement, AssignControl_Bean AssignControl_Bean) {

        NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
        Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
        String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
        AssignControl_Bean.setOutParam_ImageAdvanced_ImageorNot(ImageAvailablestr);

        if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
            NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
            Element ImageSource = (Element) nl_ImageSource.item(0);
            String ImageSourcestr = getCharacterDataFromElement(ImageSource);
            AssignControl_Bean.setOutParam_ImageAdvanced_ImageSource(ImageSourcestr);
        }

        NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
        Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
        String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
        AssignControl_Bean.setOutParam_ImageAdvanced_ConditionColumn(ConditionColumnstr);

        NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
        Element Operator = (Element) nl_Operator.item(0);
        String Operatorstr = getCharacterDataFromElement(Operator);
        AssignControl_Bean.setOutParam_ImageAdvanced_Operator(Operatorstr);

        NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
        List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
        for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
            Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


            NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
            for (int k = 0; k < nl_advItems.getLength(); k++) {
                NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                for (int l = 0; l < nl_Items.getLength(); l++) {
                    Element Item = (Element) nl_Items.item(l);
                    if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                        String Value1 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value(Value1);
                    } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                        String Value2 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value2(Value2);
                    } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                        String ImagePath = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_ImagePath(ImagePath);
                    }
                }
                ImageAdvanced_Mapped_Items.add(IA_Item);
            }

        }
        AssignControl_Bean.setList_OutParam_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);

    }

    public static void getandSetMarkerSettings(Element MarkerElement, API_OutputParam_Bean apiOutputParam_Bean) {

        /*NodeList nl_MarkerSource = MarkerElement.getElementsByTagName("MarkerSource");
        Element MarkerSource = (Element) nl_MarkerSource.item(0);
        String MarkerSourcestr = getCharacterDataFromElement(MarkerSource);
        apiOutputParam_Bean.setOutParam_MarkerAdvanced_ImageSource(MarkerSourcestr);*/

        NodeList nl_ConditionColumn = MarkerElement.getElementsByTagName("ConditionColumn");
        Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
        String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
        apiOutputParam_Bean.setOutParam_MarkerAdvanced_ConditionColumn(ConditionColumnstr);

        NodeList nl_Operator = MarkerElement.getElementsByTagName("Operator");
        Element Operator = (Element) nl_Operator.item(0);
        String Operatorstr = getCharacterDataFromElement(Operator);
        apiOutputParam_Bean.setOutParam_MarkerAdvanced_Operator(Operatorstr);

        NodeList nl_MarkerAdvancedItems = MarkerElement.getElementsByTagName("MarkerAdvancedItems");
        List<ImageAdvanced_Mapped_Item> MarkerAdvanced_Mapped_Items = new ArrayList<>();
        for (int j = 0; j < nl_MarkerAdvancedItems.getLength(); j++) {
            Element MarkerAdvancedItem = (Element) nl_MarkerAdvancedItems.item(j);


            NodeList nl_advItems = MarkerAdvancedItem.getChildNodes();
            for (int k = 0; k < nl_advItems.getLength(); k++) {
                NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                for (int l = 0; l < nl_Items.getLength(); l++) {
                    Element Item = (Element) nl_Items.item(l);
                    if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                        String Value1 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value(Value1);
                    } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                        String Value2 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value2(Value2);
                    } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                        String ImagePath = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_ImagePath(ImagePath);
                    }
                }
                MarkerAdvanced_Mapped_Items.add(IA_Item);
            }

        }
        apiOutputParam_Bean.setList_OutParam_MarkerAdvanced_Items(MarkerAdvanced_Mapped_Items);

    }

    public static void getandSetMarkerSettingsForSetValue(Element MarkerElement, AssignControl_Bean AssignControl_Bean) {

        NodeList nl_MarkerSource = MarkerElement.getElementsByTagName("MarkerSource");
        Element MarkerSource = (Element) nl_MarkerSource.item(0);
        String MarkerSourcestr = getCharacterDataFromElement(MarkerSource);
        AssignControl_Bean.setOutParam_MarkerAdvanced_ImageSource(MarkerSourcestr);

        NodeList nl_ConditionColumn = MarkerElement.getElementsByTagName("ConditionColumn");
        Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
        String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
        AssignControl_Bean.setOutParam_MarkerAdvanced_ConditionColumn(ConditionColumnstr);

        NodeList nl_Operator = MarkerElement.getElementsByTagName("Operator");
        Element Operator = (Element) nl_Operator.item(0);
        String Operatorstr = getCharacterDataFromElement(Operator);
        AssignControl_Bean.setOutParam_MarkerAdvanced_Operator(Operatorstr);

        NodeList nl_MarkerAdvancedItems = MarkerElement.getElementsByTagName("MarkerAdvancedItems");
        List<ImageAdvanced_Mapped_Item> MarkerAdvanced_Mapped_Items = new ArrayList<>();
        for (int j = 0; j < nl_MarkerAdvancedItems.getLength(); j++) {
            Element MarkerAdvancedItem = (Element) nl_MarkerAdvancedItems.item(j);


            NodeList nl_advItems = MarkerAdvancedItem.getChildNodes();
            for (int k = 0; k < nl_advItems.getLength(); k++) {
                NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                for (int l = 0; l < nl_Items.getLength(); l++) {
                    Element Item = (Element) nl_Items.item(l);
                    if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                        String Value1 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value(Value1);
                    } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                        String Value2 = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_Value2(Value2);
                    } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                        String ImagePath = getCharacterDataFromElement(Item);
                        IA_Item.setImageAdvanced_ImagePath(ImagePath);
                    }
                }
                MarkerAdvanced_Mapped_Items.add(IA_Item);
            }

        }
        AssignControl_Bean.setList_OutParam_MarkerAdvanced_Items(MarkerAdvanced_Mapped_Items);

    }

    public static void setVisibilityOn1(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Visibility On");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element paramElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String paramOneValue = getCharacterDataFromElement(paramElement);

            list.add(paramOneValue);

        }

        actionWithoutConditionBean.setList_VisibleOnControlIds(list);

    }

    public static void setVisibilityOn(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Visibility On");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();
        List<SubControls_Advance_Bean> List_SubControl_Advance = new ArrayList<SubControls_Advance_Bean>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element ItemElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String Subform = ItemElement.getAttribute("Subform");

            if (Subform.equalsIgnoreCase("false")) {
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String paramOneValue = getCharacterDataFromElement(paramOne);
                list.add(paramOneValue);

            } else {
                SubControls_Advance_Bean SubControls_Advance = new SubControls_Advance_Bean();
                SubControls_Advance.setSubformControlName(ItemElement.getAttribute("SubformName"));
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String TypeofValue = paramOne.getAttribute("TypeofValue");
                SubControls_Advance.setEnable(true);

                String paramOneControlValue = getCharacterDataFromElement(paramOne);
                SubControls_Advance.setControlName(paramOneControlValue);
                SubControls_Advance.setValueType(TypeofValue);

                if (TypeofValue.equalsIgnoreCase("Advance")) {
                    Element paramtwo = (Element) paramList.item(1);
                    String paramTwoExpressionValue = getCharacterDataFromElement(paramtwo);
                    SubControls_Advance.setValueExpression(paramTwoExpressionValue);
                }

                List_SubControl_Advance.add(SubControls_Advance);
            }


        }
        actionWithoutConditionBean.setList_VisibleOnControlIds(list);
        actionWithoutConditionBean.setList_SubControl_Advance(List_SubControl_Advance);

    }

    public static void setVisibilityOff1(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Visibility Off");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element paramElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String paramOneValue = getCharacterDataFromElement(paramElement);

            list.add(paramOneValue);

        }

        actionWithoutConditionBean.setList_VisibleOffControlIds(list);

    }

    public static void setVisibilityOff(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Visibility Off");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();
        List<SubControls_Advance_Bean> List_SubControl_Advance = new ArrayList<SubControls_Advance_Bean>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element ItemElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String Subform = ItemElement.getAttribute("Subform");

            if (Subform.equalsIgnoreCase("false")) {
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String paramOneValue = getCharacterDataFromElement(paramOne);
                list.add(paramOneValue);

            } else {
                SubControls_Advance_Bean SubControls_Advance = new SubControls_Advance_Bean();
                SubControls_Advance.setSubformControlName(ItemElement.getAttribute("SubformName"));
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String TypeofValue = paramOne.getAttribute("TypeofValue");
                SubControls_Advance.setEnable(true);

                String paramOneControlValue = getCharacterDataFromElement(paramOne);
                SubControls_Advance.setControlName(paramOneControlValue);
                SubControls_Advance.setValueType(TypeofValue);

                if (TypeofValue.equalsIgnoreCase("Advance")) {
                    Element paramtwo = (Element) paramList.item(1);
                    String paramTwoExpressionValue = getCharacterDataFromElement(paramtwo);
                    SubControls_Advance.setValueExpression(paramTwoExpressionValue);
                }

                List_SubControl_Advance.add(SubControls_Advance);
            }


        }
        actionWithoutConditionBean.setList_VisibleOffControlIds(list);
        actionWithoutConditionBean.setList_SubControl_Advance(List_SubControl_Advance);

    }

    public static void setEnableControl1(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Enable Control");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element paramElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String paramOneValue = getCharacterDataFromElement(paramElement);

            list.add(paramOneValue);
        }

        actionWithoutConditionBean.setList_EnableControlIds(list);
    }

    public static void setEnableControl(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Enable Control");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();
        List<SubControls_Advance_Bean> List_SubControl_Advance = new ArrayList<SubControls_Advance_Bean>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element ItemElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String Subform = ItemElement.getAttribute("Subform");

            if (Subform.equalsIgnoreCase("false")) {
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String paramOneValue = getCharacterDataFromElement(paramOne);
                list.add(paramOneValue);

            } else {
                SubControls_Advance_Bean SubControls_Advance = new SubControls_Advance_Bean();
                SubControls_Advance.setSubformControlName(ItemElement.getAttribute("SubformName"));
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String TypeofValue = paramOne.getAttribute("TypeofValue");
                SubControls_Advance.setEnable(true);

                String paramOneControlValue = getCharacterDataFromElement(paramOne);
                SubControls_Advance.setControlName(paramOneControlValue);
                SubControls_Advance.setValueType(TypeofValue);

                if (TypeofValue.equalsIgnoreCase("Advance")) {
                    Element paramtwo = (Element) paramList.item(1);
                    String paramTwoExpressionValue = getCharacterDataFromElement(paramtwo);
                    SubControls_Advance.setValueExpression(paramTwoExpressionValue);
                }

                List_SubControl_Advance.add(SubControls_Advance);
            }


        }
        actionWithoutConditionBean.setList_EnableControlIds(list);
        actionWithoutConditionBean.setList_SubControl_Advance(List_SubControl_Advance);

    }

    public static void setDisableControl1(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Disable Control");

        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element paramElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String paramOneValue = getCharacterDataFromElement(paramElement);
            list.add(paramOneValue);
        }
        actionWithoutConditionBean.setList_DisableControlIds(list);
    }

    public static void setDisableControl(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Disable Control");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();
        List<SubControls_Advance_Bean> List_SubControl_Advance = new ArrayList<SubControls_Advance_Bean>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element ItemElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String Subform = ItemElement.getAttribute("Subform");

            if (Subform.equalsIgnoreCase("false")) {
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String paramOneValue = getCharacterDataFromElement(paramOne);
                list.add(paramOneValue);

            } else {
                SubControls_Advance_Bean SubControls_Advance = new SubControls_Advance_Bean();
                SubControls_Advance.setSubformControlName(ItemElement.getAttribute("SubformName"));
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String TypeofValue = paramOne.getAttribute("TypeofValue");
                SubControls_Advance.setEnable(true);

                String paramOneControlValue = getCharacterDataFromElement(paramOne);
                SubControls_Advance.setControlName(paramOneControlValue);
                SubControls_Advance.setValueType(TypeofValue);

                if (TypeofValue.equalsIgnoreCase("Advance")) {
                    Element paramtwo = (Element) paramList.item(1);
                    String paramTwoExpressionValue = getCharacterDataFromElement(paramtwo);
                    SubControls_Advance.setValueExpression(paramTwoExpressionValue);
                }

                List_SubControl_Advance.add(SubControls_Advance);
            }


        }
        actionWithoutConditionBean.setList_DisableControlIds(list);
        actionWithoutConditionBean.setList_SubControl_Advance(List_SubControl_Advance);

    }

    public static void setClearControl1(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Clear Control");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element paramElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String paramOneValue = getCharacterDataFromElement(paramElement);
            list.add(paramOneValue);
        }
        actionWithoutConditionBean.setList_ClearControlIds(list);
    }

    public static void setClearControl(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Clear Control");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        List<String> list = new ArrayList<String>();
        List<Item> list_items = new ArrayList<>();
        List<SubControls_Advance_Bean> List_SubControl_Advance = new ArrayList<SubControls_Advance_Bean>();

        for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
            Element ItemElement = (Element) formFieldsChildList.item(formFieldsCnt);

            String Subform = ItemElement.getAttribute("Subform");

            if (Subform.equalsIgnoreCase("false")) {
                NodeList paramList = ItemElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramList.item(0);
                String paramOneValue = getCharacterDataFromElement(paramOne);
                list.add(paramOneValue);
                Item item = new Item();
                item.setValue(paramOneValue);
                item.setId("Control");
                list_items.add(item);

            } else {
                if(ItemElement.getAttribute("SubformName").contentEquals("Variable")){
                    NodeList paramList = ItemElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramList.item(0);
                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    list.add(paramOneValue);
                    Item item = new Item();
                    item.setValue(paramOneValue);
                    item.setId("Variable");
                    list_items.add(item);
                }else if(ItemElement.getAttribute("SubformName").contentEquals("DataSource")){
                    NodeList paramList = ItemElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramList.item(0);
                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    list.add(paramOneValue);
                    Item item = new Item();
                    item.setValue(paramOneValue);
                    item.setId("DataSource");
                    list_items.add(item);
                }else {
                    SubControls_Advance_Bean SubControls_Advance = new SubControls_Advance_Bean();
                    SubControls_Advance.setSubformControlName(ItemElement.getAttribute("SubformName"));
                    NodeList paramList = ItemElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramList.item(0);
                    String TypeofValue = paramOne.getAttribute("TypeofValue");
                    SubControls_Advance.setEnable(true);

                    String paramOneControlValue = getCharacterDataFromElement(paramOne);
                    SubControls_Advance.setControlName(paramOneControlValue);
                    SubControls_Advance.setValueType(TypeofValue);

                    if (TypeofValue.equalsIgnoreCase("Advance")) {
                        Element paramtwo = (Element) paramList.item(1);
                        String paramTwoExpressionValue = getCharacterDataFromElement(paramtwo);
                        SubControls_Advance.setValueExpression(paramTwoExpressionValue);
                    }

                    List_SubControl_Advance.add(SubControls_Advance);
                }
            }


        }
        actionWithoutConditionBean.setList_ClearControlIds(list);
        actionWithoutConditionBean.setList_ClearControlItems(list_items);
        actionWithoutConditionBean.setList_SubControl_Advance(List_SubControl_Advance);

    }

    public static void setScanQRCOde(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        NodeList paramOneList = actionGroupElement.getElementsByTagName("ScanName");
        Element paramOne = (Element) paramOneList.item(0);
        String ScanName = getCharacterDataFromElement(paramOne);
        actionWithoutConditionBean.setScan_Name(ScanName);
    }

    public static void setBhargoLogin(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));

        NodeList paramOneList = actionGroupElement.getElementsByTagName("MobileNumber");
        Element paramOne = (Element) paramOneList.item(0);

        String MobileNumber = getCharacterDataFromElement(paramOne);
        actionWithoutConditionBean.setBhargoLogin_mobilenumber_MapValue(MobileNumber);
        actionWithoutConditionBean.setBhargoLogin_mobilenumber_MapType(paramOne.getAttribute("type"));

        NodeList paramOTPList = actionGroupElement.getElementsByTagName("OTP");
        Element paramOTP = (Element) paramOTPList.item(0);

        String OTP = getCharacterDataFromElement(paramOTP);
        actionWithoutConditionBean.setBhargoLogin_OTP_MapValue(OTP);
        actionWithoutConditionBean.setBhargoLogin_OTP_MapType(paramOTP.getAttribute("type"));

    }

    public static void setChangeLanguage(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));

        NodeList paramOneList = actionGroupElement.getElementsByTagName("Language");
        Element paramOne = (Element) paramOneList.item(0);

        String MobileNumber = getCharacterDataFromElement(paramOne);
        actionWithoutConditionBean.setChangeLanguage_MapValue(MobileNumber);
        actionWithoutConditionBean.setChangeLanguage_MapType(paramOne.getAttribute("type"));


    }

    public static void setNotification(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        String communicationMode = actionGroupElement.getAttribute("communicationMode");

        actionWithoutConditionBean.setActionType("Notification");
        actionWithoutConditionBean.setNotification_Type(communicationMode);

        if (communicationMode.equalsIgnoreCase("SMS")) {
            NodeList formFieldsChildList = actionGroupElement.getChildNodes();

            for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
                Element FieldsElement = (Element) formFieldsChildList.item(FieldsCnt);
                if (FieldsElement.getNodeName().equalsIgnoreCase("GateWayID")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_GatewayID(paramOneValue);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("param")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_GatewayName(paramOneValue);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("GateWayServiceURL")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_GatewayServiceURL(paramOneValue);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("GateWayServiceCallsAt")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_GatewayServiceCallsAt(paramOneValue);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("GateWayInputDetails")) {
                    NodeList inputParametersList = FieldsElement.getChildNodes();
                    List<SMSGateways_InputDetails_Bean> smsGateways_inputDetails_beans=new ArrayList<>();
                    for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                        Element paramOne = (Element) inputParametersList.item(inputParamCnt);
                        SMSGateways_InputDetails_Bean apiInputParamBean = new SMSGateways_InputDetails_Bean();
                        apiInputParamBean.setKeyName(paramOne.getAttribute("KeyName"));
                        apiInputParamBean.setKeyValue(paramOne.getAttribute("KeyValue"));
                        apiInputParamBean.setStatic(paramOne.getAttribute("Static"));
                        apiInputParamBean.setPurpose(paramOne.getAttribute("Purpose"));
                        apiInputParamBean.setOptional(paramOne.getAttribute("Optional"));

                        smsGateways_inputDetails_beans.add(apiInputParamBean);
                    }
                    actionWithoutConditionBean.setSmsGateways_inputDetails_beans(smsGateways_inputDetails_beans);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("TemplateID")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_TemplateID(paramOneValue);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("TemplateName")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_TemplateName(paramOneValue);
                }else if (FieldsElement.getNodeName().equalsIgnoreCase("TemplateMessage")) {
                    String paramOneValue = getCharacterDataFromElement(FieldsElement);
                    actionWithoutConditionBean.setNotification_SMS_TemplateMessage(paramOneValue);
                } else if (FieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {
                    NodeList inputParametersList = FieldsElement.getChildNodes();

                    List<SMS_InputParam_Bean> API_InParamsList = new ArrayList<SMS_InputParam_Bean>();

                    for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                        Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);


                        NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String paramOneValue = getCharacterDataFromElement(paramOne);
                        SMS_InputParam_Bean apiInputParamBean = new SMS_InputParam_Bean(paramOneValue, "", "");
                        apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
                        apiInputParamBean.setInParam_Purpose(paramOne.getAttribute("purpose"));
                        apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
                        apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));

                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);

                        String nameAtt = paramTwo.getAttribute("name");

                        if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_MappedControl_Type("Static");
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                        } else if (nameAtt.equalsIgnoreCase("expression")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_ExpressionExists(true);
                            apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                        } else if (!nameAtt.equalsIgnoreCase("") &&
                                !nameAtt.equalsIgnoreCase("none")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                        } else {
                            apiInputParamBean.setEnable(false);
                        }

                        API_InParamsList.add(apiInputParamBean);
                    }
                    actionWithoutConditionBean.setList_SMS_InputParam_Bean(API_InParamsList);

                }
            }

        } else {

            NodeList formFieldsChildList = actionGroupElement.getChildNodes();

            for (int formFieldsCnt = 0; formFieldsCnt < formFieldsChildList.getLength(); formFieldsCnt++) {
                Element paramElement = (Element) formFieldsChildList.item(formFieldsCnt);

                String nameAttr = paramElement.getAttribute("name");

                if (nameAttr.equalsIgnoreCase("gateway")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    //nk sms pending
                    actionWithoutConditionBean.setNotification_SMS_GatewayName(paramOneValue);
                    actionWithoutConditionBean.setNotification_eMail_Gateway(paramOneValue);
                    actionWithoutConditionBean.setNotification_Email_Type(paramElement.getAttribute("EmailType"));

                } else if (nameAttr.equalsIgnoreCase("mappedType")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_SMSNo_MappedType(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("mappedId")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_SMSNo_MappedID(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("smsMessage")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_SMS_Message(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("FromeMail")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_eMail_FromID(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("toeMail")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_eMail_ToID(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("subject")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_eMail_Subject(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("message")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_eMail_Message(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("inAppMessage")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_InApp_Message(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("receivers")) {

                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_InApp_MessageReceiverID(paramOneValue);

                    String nameAttrType = paramElement.getAttribute("type");
                    actionWithoutConditionBean.setNotification_InApp_MessageReceiverType(nameAttrType);

                } else if (nameAttr.equalsIgnoreCase("TypeOfReceiver")) {

                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_InApp_TypeOfReceiver(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("receivers")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_InApp_MessageReceiver(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("ReceiverIDExpression")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_ReceiverId_ExpressionFlag(true);
                    actionWithoutConditionBean.setNotification_ReceiverId_Expression(paramOneValue);

                } else if (nameAttr.equalsIgnoreCase("expression")) {
                    String paramOneValue = getCharacterDataFromElement(paramElement);
                    actionWithoutConditionBean.setNotification_ExpressionFlag(true);
                    actionWithoutConditionBean.setNotification_Expression(paramOneValue);

                }

            }
        }

        if (actionGroupElement.getElementsByTagName("MessageSettings").item(0).getChildNodes().getLength() == 0) {

        } else {
            NodeList MessageSettingsList = actionGroupElement.getElementsByTagName("MessageSettings").item(0).getChildNodes();

            for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                Node MessageSettings = MessageSettingsList.item(k);
                if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                    if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                        boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                        actionWithoutConditionBean.setSuccessMessageIsEnable(SuccessEnable);
                        String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                        actionWithoutConditionBean.setMessage_SuccessDisplayType(MessageSuccess_DisplayType);
                        actionWithoutConditionBean.setMessage_Success(MessageSettings.getTextContent().trim());

                    } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                        boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                        actionWithoutConditionBean.setMessage_FailNoRecordsIsEnable(FailEnable);
                        String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                        actionWithoutConditionBean.setMessage_FailNoRecordsDisplayType(MessageDisplayType);
                        actionWithoutConditionBean.setMessage_Fail(MessageSettings.getTextContent().trim());
                    }
                }
            }
        }
    }

    public static void setValue_old(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Set Value");


        List<String> itemsList = null;
        List<String> itemIdsList = null;

        NodeList paramOneList = actionGroupElement.getElementsByTagName("Param");
        Element paramOne = (Element) paramOneList.item(0);
        String paramOneValue = getCharacterDataFromElement(paramOne);
        String paramOnesource = paramOne.getAttribute("source");

        String subform = paramOne.getAttribute("subform");

        actionWithoutConditionBean.setSetvalue_TypeofSource(paramOnesource);
        actionWithoutConditionBean.setSetvalue_ControleID(paramOneValue);
        actionWithoutConditionBean.setSetValue_Subform(Boolean.parseBoolean(subform));

        NodeList paramTwoList = actionGroupElement.getElementsByTagName("Param");
        Element paramTwo;

        NodeList paramThreeList = actionGroupElement.getElementsByTagName("Param");
        Element paramThree;

        if (subform.equalsIgnoreCase("true")) {
            NodeList paramSubFormList = actionGroupElement.getElementsByTagName("Param");
            Element paramSubform = (Element) paramSubFormList.item(1);
            String Subformposition = paramSubform.getAttribute("position");
            String Subform_ControlName = getCharacterDataFromElement(paramSubform);

            actionWithoutConditionBean.setSetvalue_SubFormControlName(Subform_ControlName);
            actionWithoutConditionBean.setSetvalue_SubFormPosition(Subformposition);

            if (Subformposition.equalsIgnoreCase("Dynamic")) {
                NodeList paramDynamicExpList = actionGroupElement.getElementsByTagName("Param");
                Element paramDynamicExp = (Element) paramDynamicExpList.item(2);
                String Subform_DynamicExp = getCharacterDataFromElement(paramDynamicExp);
                actionWithoutConditionBean.setSetvalue_SubFormDynamicExpression(Subform_DynamicExp);

                paramTwo = (Element) paramTwoList.item(3);
                paramThree = (Element) paramThreeList.item(4);
            } else {
                paramTwo = (Element) paramTwoList.item(2);
                paramThree = (Element) paramThreeList.item(3);
            }
        } else {
            paramTwo = (Element) paramTwoList.item(1);
            paramThree = (Element) paramThreeList.item(2);
        }

        String paramTwoValue = getCharacterDataFromElement(paramTwo);
        actionWithoutConditionBean.setSetValue_TypeOfValue(paramTwoValue);


        if (paramTwoValue.trim().equals("Value")) {

            String paramThreeValue = getCharacterDataFromElement(paramThree);

            actionWithoutConditionBean.setSetValue_Advanced_Value(paramThreeValue);

        }

        if (paramTwoValue.trim().equals("MultipleValues")) {
            String paramThreeValue = getCharacterDataFromElement(paramThree);

            actionWithoutConditionBean.setSetValue_TypeOfAppend(paramThreeValue);

            NodeList paramFourList = actionGroupElement.getElementsByTagName("Items");
            Element itemsElementList = (Element) paramFourList.item(0);

            String expValue = itemsElementList.getAttribute("expression");

            actionWithoutConditionBean.setSetValue_MultiValueExpression(Boolean.valueOf(expValue));

            String expBodyValue = "";

            if (expValue.equals("true")) {
                expBodyValue = itemsElementList.getAttribute("expressionBody");

                actionWithoutConditionBean.setSetValue_MultiValueExpressionBody(expBodyValue);

            }

            if (expValue.equals("false")) {
                NodeList itemsChildList = itemsElementList.getChildNodes();

                itemsList = new ArrayList<String>();
                itemIdsList = new ArrayList<String>();

                for (int itemsCnt = 0; itemsCnt < itemsChildList.getLength(); itemsCnt++) {
                    Element itemElement = (Element) itemsChildList.item(itemsCnt);

                    String itemValue = getCharacterDataFromElement(itemElement);
                    String itemIDValue = itemElement.getAttribute("ItemID");
                    itemsList.add(itemValue);
                    itemIdsList.add(itemIDValue);
                }
            }

        }


        actionWithoutConditionBean.setSetValue_AppendValues(itemsList);
        actionWithoutConditionBean.setSetValue_AppendValuesID(itemIdsList);

    }

    public static void setValue(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Set Value");
        if (actionGroupElement.getElementsByTagName("AssignControls").getLength() > 0) {
            NodeList assignControls = actionGroupElement.getElementsByTagName("AssignControls");

            Element assignControlElement = (Element) assignControls.item(0);

            actionWithoutConditionBean.setSv_TypeofSource(assignControlElement.getAttribute("source"));
            actionWithoutConditionBean.setSv_ControlType(assignControlElement.getAttribute("TypeOfControl"));

            if (actionWithoutConditionBean.getSv_TypeofSource().contentEquals("Control")) {

                if (actionWithoutConditionBean.getSv_ControlType().contentEquals("Single")) {

//                    AssignControl_Bean sv_Single_List_AssignControls = new AssignControl_Bean();
                    NodeList nList = actionGroupElement.getElementsByTagName("AssignControl");
                    List<AssignControl_Bean> assignControl_beanList = new ArrayList<>();
                    for (int assign = 0; assign < nList.getLength(); assign++) {

                        AssignControl_Bean sv_Single_List_AssignControls = new AssignControl_Bean();
                        Element assignControl = (Element) actionGroupElement.getElementsByTagName("AssignControl").item(assign);

                        sv_Single_List_AssignControls.setActivity(assignControl.getAttribute("activity"));

                        NodeList paramsList = assignControl.getElementsByTagName("Param");

                        Element param1 = (Element) paramsList.item(0);

                        sv_Single_List_AssignControls.setControlName(param1.getTextContent().trim());

                        if (param1.hasAttribute("twoValueControlType") &&
                                param1.getAttribute("twoValueControlType").equals(AppConstants.CONTROL_TYPE_PROGRESS)) {
                            Element param2 = (Element) paramsList.item(1);
                            sv_Single_List_AssignControls.setTwovaluecontrol(true);
                            sv_Single_List_AssignControls.setTwoValueControlType(AppConstants.CONTROL_TYPE_PROGRESS);

                            sv_Single_List_AssignControls.setTwoValue_expression1((param2.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value1(param2.getTextContent().trim());

                            Element param3 = (Element) paramsList.item(2);
                            sv_Single_List_AssignControls.setTwoValue_expression2((param3.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value2(param3.getTextContent().trim());

                        } else if (param1.hasAttribute("twoValueControlType") &&
                                param1.getAttribute("twoValueControlType").equals(AppConstants.CONTROL_TYPE_COUNT_DOWN_TIMER)) {
                            Element param2 = (Element) paramsList.item(1);
                            sv_Single_List_AssignControls.setTwovaluecontrol(true);
                            sv_Single_List_AssignControls.setTwoValueControlType(AppConstants.CONTROL_TYPE_COUNT_DOWN_TIMER);

                            sv_Single_List_AssignControls.setTwoValue_expression1((param2.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value1(param2.getTextContent().trim());

                            Element param3 = (Element) paramsList.item(2);
                            sv_Single_List_AssignControls.setTwoValue_expression2((param3.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value2(param3.getTextContent().trim());

                            Element param4 = (Element) paramsList.item(3);
                            sv_Single_List_AssignControls.setTwoValue_expression3((param4.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value3(param4.getTextContent().trim());

                        } else if (param1.hasAttribute("twoValueControlType") &&
                                param1.getAttribute("twoValueControlType").equals(AppConstants.CONTROL_TYPE_COUNT_UP_TIMER)) {
                            Element param2 = (Element) paramsList.item(1);
                            sv_Single_List_AssignControls.setTwovaluecontrol(true);
                            sv_Single_List_AssignControls.setTwoValueControlType(AppConstants.CONTROL_TYPE_COUNT_UP_TIMER);

                            sv_Single_List_AssignControls.setTwoValue_expression1((param2.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value1(param2.getTextContent().trim());

                            Element param3 = (Element) paramsList.item(2);
                            sv_Single_List_AssignControls.setTwoValue_expression2((param3.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value2(param3.getTextContent().trim());

                            Element param4 = (Element) paramsList.item(3);
                            sv_Single_List_AssignControls.setTwoValue_expression3((param4.getAttribute("name").contentEquals("expression")));
                            sv_Single_List_AssignControls.setTwoValue_value3(param4.getTextContent().trim());

                        } else {
                            Element param2 = (Element) paramsList.item(1);
                            sv_Single_List_AssignControls.setExpression(param2.getAttribute("name").contentEquals("expression"));
                            sv_Single_List_AssignControls.setControlValue(param2.getTextContent().trim());
                            sv_Single_List_AssignControls.setTwovaluecontrol(false);

                            Element param3 = (Element) paramsList.item(2);
                            if (param3.getAttribute("name").contentEquals("expression")) {
                                //paraone
                                sv_Single_List_AssignControls.setTwovaluecontrol(true);
                                sv_Single_List_AssignControls.setTwoValueControlType(AppConstants.CONTROL_TYPE_CHECKBOX);
                                sv_Single_List_AssignControls.setTwoValue_expression1((param2.getAttribute("name").contentEquals("expression")));
                                sv_Single_List_AssignControls.setTwoValue_value1(param2.getTextContent().trim());
                                //paratwo
                                sv_Single_List_AssignControls.setTwoValue_expression2((param3.getAttribute("name").contentEquals("expression")));
                                sv_Single_List_AssignControls.setTwoValue_value2(param3.getTextContent().trim());
                            }

                            if (assignControl.getElementsByTagName("ParamItems").getLength() > 0) {


                                String attri_Type = ((Element) assignControl.getElementsByTagName("ParamItems").item(0)).getAttribute("Type");

                                Node paramsItems = assignControl.getElementsByTagName("ParamItems").item(0);

                                NodeList itemNodeList = paramsItems.getChildNodes();

                                List<String> multipleValueIds = new ArrayList<>();
                                List<String> multipleValueTexts = new ArrayList<>();
                                List<Boolean> multipleValueExpressionIds = new ArrayList<>();
                                List<Boolean> multipleValueExpressionTexts = new ArrayList<>();
                                sv_Single_List_AssignControls.setMultiplevalue_Type(attri_Type);


                                if (attri_Type.equalsIgnoreCase("Static")) {
                                    sv_Single_List_AssignControls.setTwovaluecontrol(true);

                                    for (int i = 0; i < itemNodeList.getLength(); i++) {

                                        Element item = (Element) itemNodeList.item(i);

                                        Element itemId = (Element) item.getElementsByTagName("ItemID").item(0);

                                        multipleValueIds.add(itemId.getTextContent().trim());

                                        multipleValueExpressionIds.add(!itemId.getAttribute("name").equalsIgnoreCase(""));

                                        Element itemText = (Element) item.getElementsByTagName("ItemText").item(0);

                                        multipleValueTexts.add(itemText.getTextContent().trim());

                                        multipleValueExpressionTexts.add(!itemText.getAttribute("name").equalsIgnoreCase(""));


                                    }

                                    sv_Single_List_AssignControls.setMultiplevalueIDs(multipleValueIds);
                                    sv_Single_List_AssignControls.setMultiplevalueTexts(multipleValueTexts);

                                    sv_Single_List_AssignControls.setMultipleExpressionID(multipleValueExpressionIds);
                                    sv_Single_List_AssignControls.setMultipleExpressionText(multipleValueExpressionTexts);
                                } else if (attri_Type.equalsIgnoreCase("Advance")) {
                                    sv_Single_List_AssignControls.setTwovaluecontrol(true);

                                    Element item = (Element) itemNodeList.item(0);

                                    Element itemId = (Element) item.getElementsByTagName("ItemID").item(0);
                                    sv_Single_List_AssignControls.setMultiplevalue_Advance_ItemID(itemId.getTextContent().trim());

                                    Element itemText = (Element) item.getElementsByTagName("ItemText").item(0);
                                    sv_Single_List_AssignControls.setMultiplevalue_Advance_ItemText(itemText.getTextContent().trim());

                                }

                            }

                            if (assignControl.getElementsByTagName("ControlSettings").getLength() > 0) {
                                NodeList ControlSettingsList = assignControl.getElementsByTagName("ControlSettings");
                                Element ControlSettings = (Element) ControlSettingsList.item(0);

                                String settings_type = ControlSettings.getAttribute("type");
                                if (settings_type.equalsIgnoreCase("language")) {
                                    List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                                    sv_Single_List_AssignControls.setList_OutParam_Languages(list_OutParam_Languages);

                                } else if (settings_type.equalsIgnoreCase("Image")) {

                                    getandSetImageSettingsForSetValue(ControlSettings, sv_Single_List_AssignControls);

                                } else if (settings_type.equalsIgnoreCase("Marker")) {
                                    getandSetMarkerSettingsForSetValue(ControlSettings, sv_Single_List_AssignControls);
                                }


//                    NodeList ControlSettingsList = assignControl.getElementsByTagName("ControlSettings");
//
//                    Element ControlSettingsElement = (Element) ControlSettingsList.item(0);
//
//                    String SettingType=ControlSettingsElement.getAttribute("type");
//                    if(SettingType.equalsIgnoreCase("language")){
//
//                        Node paramsItems = ControlSettingsElement.getElementsByTagName("Param").item(0);
//
//                        NodeList itemNodeList = paramsItems.getChildNodes();
//                        for (int i = 0; i <itemNodeList.getLength() ; i++) {
//                            LanguageMapping lang=new LanguageMapping();
//                            Element item = (Element) itemNodeList.item(i);
//                            item.getAttribute("language");
//
//                        }
//
//
//                    }

                            }
                        }

                        assignControl_beanList.add(sv_Single_List_AssignControls);

                    }


                    actionWithoutConditionBean.setSv_single_control_assign_controls(assignControl_beanList);
//                    actionWithoutConditionBean.setSv_Single_List_AssignControls(sv_Single_List_AssignControls);
                } else if (actionWithoutConditionBean.getSv_ControlType().contentEquals("Multi")) {

                    actionWithoutConditionBean.setSv_Multiple_RowType(assignControlElement.getAttribute("rowType"));
                    actionWithoutConditionBean.setSv_Multiple_ControlName(assignControlElement.getAttribute("controlName"));
                    actionWithoutConditionBean.setSv_Multiple_Single_assignLevel(assignControlElement.getAttribute("assignLevel"));
                    actionWithoutConditionBean.setSv_Multiple_multi_assignType(assignControlElement.getAttribute("assignType"));
                    actionWithoutConditionBean.setSv_data_source(assignControlElement.getAttribute("DataSource"));


                    if (actionWithoutConditionBean.getSv_Multiple_RowType().contentEquals("Update Specific Rows")) {
                        Element param = (Element) assignControlElement.getElementsByTagName("Param").item(0);

//                        actionWithoutConditionBean.setSv_Multiple_Single_rowPosition_Expression(param.getAttribute("name").contentEquals("expression"));
                        actionWithoutConditionBean.setSv_Multiple_Single_rowPosition_Expression(true);

                        actionWithoutConditionBean.setSv_Multiple_Single_rowPosition(param.getTextContent().trim());
                    }


                    List<AssignControl_Bean> assignControl_beanList = new ArrayList<>();

                    NodeList assignControlNodes = actionGroupElement.getElementsByTagName("AssignControl");

                    for (int i = 0; i < assignControlNodes.getLength(); i++) {

                        Element assignControl = (Element) assignControlNodes.item(i);

                        AssignControl_Bean AssignControl_Bean = new AssignControl_Bean();

                        AssignControl_Bean.setActivity(assignControl.getAttribute("activity"));

                        NodeList paramsList = assignControl.getElementsByTagName("Param");

                        Element param1 = (Element) paramsList.item(0);

                        AssignControl_Bean.setControlName(param1.getTextContent().trim());

                        Element param2 = (Element) paramsList.item(1);

                        AssignControl_Bean.setExpression(param2.getAttribute("name").contentEquals("expression"));

                        AssignControl_Bean.setControlValue(param2.getTextContent().trim());

                        /*if (!assignControl.getAttribute("activity").contentEquals("")) {
                            if (paramsList.getLength() > 2) {
                                Element param3 = (Element) paramsList.item(3);
                                AssignControl_Bean.setIdExpression(param3.getAttribute("name").equalsIgnoreCase("expression"));
                                if (paramsList.getLength() > 2) {
                                    Element param4 = (Element) paramsList.item(3);
                                    AssignControl_Bean.setControlIdValue(param4.getTextContent().trim());
                                }
                            }
                        }*/

                        for (int j = 0; j < paramsList.getLength(); j++) {
                            Element param3 = (Element) paramsList.item(j);
                            if (param3.hasAttribute("type")) {
                                String param3Value = getCharacterDataFromElement(param3);
                                if (param3.getAttribute("type").equalsIgnoreCase("MapDataSoure")) {
                                    actionWithoutConditionBean.setSv_Map_DataSource(param3Value);
//                                    actionWithoutConditionBean.setSv_Map_DataSource_Expression(true);
                                    actionWithoutConditionBean.setSv_Map_DataSource_Expression(Boolean.parseBoolean(param3.getAttribute("Expression")));
                                } else if (param3.getAttribute("type").equalsIgnoreCase("DefultMarker")) {
                                    AssignControl_Bean.setOutParam_Marker_defultImage(param3Value);
                                } else if (param3.getAttribute("type").equalsIgnoreCase("RenderingType")) {
                                    AssignControl_Bean.setOutParam_Marker_RenderingType(param3Value);
                                } else if (param3.getAttribute("type").equalsIgnoreCase("PopupData")) {
                                    List<String> paramrederingpopupdata = getListDataFromElement(param3);
                                    AssignControl_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                                } else if (param3.getAttribute("type").equalsIgnoreCase("PopupImage")) {
                                    List<String> paramrederingpopupImages = getListDataFromElement(param3);
                                    AssignControl_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                                }
                            }
                        }
                        /*if(paramsList.getLength()>2){
                            Element param3 = (Element) paramsList.item(2);
                            String param3Value = getCharacterDataFromElement(param3);
                            AssignControl_Bean.setOutParam_Marker_defultImage(param3Value);
                        }

                        if(paramsList.getLength()>2){
                            Element param3 = (Element) paramsList.item(2);
                            String param3Value = getCharacterDataFromElement(param3);
                            AssignControl_Bean.setOutParam_Marker_defultImage(param3Value);
                        }

                        if(paramsList.getLength()>3){
                            Element paramrederingType = (Element) paramsList.item(3);
                            String paramrederingTypeValue = getCharacterDataFromElement(paramrederingType);
                            AssignControl_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                        }

                        if(paramsList.getLength()>4){
                            Element paramrePopupData = (Element) paramsList.item(4);
                            List<String> paramrederingpopupdata = getListDataFromElement(paramrePopupData);
                            AssignControl_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                        }

                        if(paramsList.getLength()>5){
                            Element paramrePopupImages = (Element) paramsList.item(5);
                            List<String> paramrederingpopupImages = getListDataFromElement(paramrePopupImages);
                            AssignControl_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                        }*/


                        if (assignControl.getElementsByTagName("ParamItems").getLength() > 0) {

                            Node paramsItems = assignControl.getElementsByTagName("ParamItems").item(0);

                            NodeList itemNodeList = paramsItems.getChildNodes();

                            List<String> multipleValueIds = new ArrayList<>();
                            List<String> multipleValueTexts = new ArrayList<>();

                            for (int j = 0; j < itemNodeList.getLength(); j++) {

                                Element item = (Element) itemNodeList.item(j);

                                Element itemId = (Element) item.getElementsByTagName("ItemID").item(0);

                                multipleValueIds.add(itemId.getTextContent().trim());

                                Element itemText = (Element) item.getElementsByTagName("ItemText").item(0);

                                multipleValueTexts.add(itemText.getTextContent().trim());


                            }

                            AssignControl_Bean.setMultiplevalueIDs(multipleValueIds);
                            AssignControl_Bean.setMultiplevalueTexts(multipleValueTexts);
                        }

                        assignControl_beanList.add(AssignControl_Bean);

                    }

                    actionWithoutConditionBean.setSv_Multiple_List_AssignControls(assignControl_beanList);
                }


            } else {
                //         if (actionWithoutConditionBean.getSv_ControlType().contentEquals("Single")) {

                AssignControl_Bean sv_Single_List_AssignControls = new AssignControl_Bean();

                Element assignControl = (Element) actionGroupElement.getElementsByTagName("AssignControl").item(0);

                sv_Single_List_AssignControls.setActivity(assignControl.getAttribute("activity"));

                NodeList paramsList = assignControl.getElementsByTagName("Param");

                Element param1 = (Element) paramsList.item(0);

                sv_Single_List_AssignControls.setControlName(param1.getTextContent().trim());

                Element param2 = (Element) paramsList.item(1);

                sv_Single_List_AssignControls.setExpression(param2.getAttribute("name").contentEquals("expression"));

                sv_Single_List_AssignControls.setControlValue(param2.getTextContent().trim());

                //DataSource
                if(paramsList.getLength()==3){
                    Element param3 = (Element) paramsList.item(2);
                    if(param3.getAttribute("name").equals("dataSourceName")){
                        sv_Single_List_AssignControls.setDataSource(param3.getTextContent().trim());
                    }
                }


                if (assignControl.getElementsByTagName("ParamItems").getLength() > 0) {


                    Node paramsItems = assignControl.getElementsByTagName("ParamItems").item(0);

                    NodeList itemNodeList = paramsItems.getChildNodes();

                    List<String> multipleValueIds = new ArrayList<>();
                    List<String> multipleValueTexts = new ArrayList<>();
                    List<Boolean> multipleValueExpressionIds = new ArrayList<>();
                    List<Boolean> multipleValueExpressionTexts = new ArrayList<>();

                    for (int i = 0; i < itemNodeList.getLength(); i++) {

                        Element item = (Element) itemNodeList.item(i);

                        Element itemId = (Element) item.getElementsByTagName("ItemID").item(0);

                        multipleValueIds.add(itemId.getTextContent().trim());

                        multipleValueExpressionIds.add(!itemId.getAttribute("name").equalsIgnoreCase(""));

                        Element itemText = (Element) item.getElementsByTagName("ItemText").item(0);

                        multipleValueTexts.add(itemText.getTextContent().trim());

                        multipleValueExpressionTexts.add(!itemText.getAttribute("name").equalsIgnoreCase(""));

                        sv_Single_List_AssignControls.setTwovaluecontrol(true);
                    }

                    sv_Single_List_AssignControls.setMultiplevalueIDs(multipleValueIds);
                    sv_Single_List_AssignControls.setMultiplevalueTexts(multipleValueTexts);

                    sv_Single_List_AssignControls.setMultipleExpressionID(multipleValueExpressionIds);
                    sv_Single_List_AssignControls.setMultipleExpressionText(multipleValueExpressionTexts);
                }

                if (assignControl.getElementsByTagName("ControlSettings").getLength() > 0) {
                    NodeList ControlSettingsList = assignControl.getElementsByTagName("ControlSettings");
                    Element ControlSettings = (Element) ControlSettingsList.item(0);

                    String settings_type = ControlSettings.getAttribute("type");
                    if (settings_type.equalsIgnoreCase("language")) {
                        List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                        sv_Single_List_AssignControls.setList_OutParam_Languages(list_OutParam_Languages);

                    } else if (settings_type.equalsIgnoreCase("Image")) {

                        getandSetImageSettingsForSetValue(ControlSettings, sv_Single_List_AssignControls);

                    } else if (settings_type.equalsIgnoreCase("Marker")) {
                        getandSetMarkerSettingsForSetValue(ControlSettings, sv_Single_List_AssignControls);
                    }


//                    NodeList ControlSettingsList = assignControl.getElementsByTagName("ControlSettings");
//
//                    Element ControlSettingsElement = (Element) ControlSettingsList.item(0);
//
//                    String SettingType=ControlSettingsElement.getAttribute("type");
//                    if(SettingType.equalsIgnoreCase("language")){
//
//                        Node paramsItems = ControlSettingsElement.getElementsByTagName("Param").item(0);
//
//                        NodeList itemNodeList = paramsItems.getChildNodes();
//                        for (int i = 0; i <itemNodeList.getLength() ; i++) {
//                            LanguageMapping lang=new LanguageMapping();
//                            Element item = (Element) itemNodeList.item(i);
//                            item.getAttribute("language");
//
//                        }
//
//
//                    }

                }


                actionWithoutConditionBean.setSv_Single_List_AssignControls(sv_Single_List_AssignControls);
                //}
            }
        }
    }



    public static void setMessage(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        String dialog = actionGroupElement.getAttribute("dialog");

        actionWithoutConditionBean.setActionType("Show Message");
        actionWithoutConditionBean.setMessageType(dialog);

        NodeList paramOneList = actionGroupElement.getElementsByTagName("Param");
        Element paramOne = (Element) paramOneList.item(0);
        String paramOneValue = getCharacterDataFromElement(paramOne);

        actionWithoutConditionBean.setMessageOn_Below_ControlID(paramOneValue);

        NodeList paramTwoList;
        paramTwoList = actionGroupElement.getElementsByTagName("Param");
        if (paramTwoList.item(1) != null) {
            Element paramTwo = (Element) paramTwoList.item(1);
            String parentControlName = paramTwo.getAttribute("SubformName");
            String paramTwoValue = getCharacterDataFromElement(paramTwo);

            actionWithoutConditionBean.setMessage_Noraml(paramTwoValue);
            actionWithoutConditionBean.setMessageOn_Below_ParentControlID(parentControlName);

            String nameAtt = paramTwo.getAttribute("type");
            actionWithoutConditionBean.setMessageOn_Popup_Type(nameAtt);
        }

        NodeList paramThreeList;
        paramThreeList = actionGroupElement.getElementsByTagName("Param");
        if (paramThreeList.item(2) != null) {
            Element paramThree = (Element) paramThreeList.item(2);

            String paramThreeValue = getCharacterDataFromElement(paramThree);

            actionWithoutConditionBean.setMessage_Advanced(paramThreeValue);
        }

    }

    public static void setGeoTagging(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Set GPS");

        NodeList paramOneList = actionGroupElement.getElementsByTagName("Param");
        Element paramOne = (Element) paramOneList.item(0);

        String paramOneValue = getCharacterDataFromElement(paramOne);
        actionWithoutConditionBean.setGeoTag_ControlName(paramOneValue);

        NodeList paramTwoList = actionGroupElement.getElementsByTagName("Param");
        Element paramTwo = (Element) paramTwoList.item(1);

        String paramTwoValue = getCharacterDataFromElement(paramTwo);
        actionWithoutConditionBean.setGeoTag_GPSSource(paramTwoValue);

        // System.out.println("paramTwoValue-->"+paramTwoValue);

        if (paramTwoValue.trim().equalsIgnoreCase("Satellite")) {
            actionWithoutConditionBean.setGeoTag_GPSAccuracy(paramTwo.getAttribute("accuracy"));
        }

        NodeList paramThreeList = actionGroupElement.getElementsByTagName("Param");
        Element paramThree = (Element) paramThreeList.item(2);

        String paramThreeValue = getCharacterDataFromElement(paramThree);

        actionWithoutConditionBean.setGeoTag_GPSType(paramThreeValue);

        if (paramThreeValue.trim().equalsIgnoreCase(AppConstants.Multi_points_line) || paramThreeValue.trim().equalsIgnoreCase(AppConstants.Polygon) || paramThreeValue.trim().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {

            NodeList paramFourList = actionGroupElement.getElementsByTagName("Param");
            Element paramFour = (Element) paramFourList.item(3);

            String paramFourValue = getCharacterDataFromElement(paramFour);

            actionWithoutConditionBean.setGeoTag_GPSIntervalType(paramFourValue);

            if (paramFourValue.trim().equalsIgnoreCase("Distance") || paramFourValue.trim().equalsIgnoreCase("Time")) {
                actionWithoutConditionBean.setGeoTag_GPSIntervalValue(paramFour.getAttribute("intervals"));
            }

        }


    }


    public static void setDefaultSubmit(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Default Submit");

    }

    public static void setExitApp(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Exit from Application");

    }


    public static void setIfBlock(Element actionChildEle, ActionWithCondition_Bean actionWithCondition_Bean) {

        String expressionExists = actionChildEle.getAttribute("expressionExists");
        String exit = actionChildEle.getAttribute("exit");
        String breakif = actionChildEle.getAttribute("break");

        IfElseBlock_Bean ifElseBlock_Bean = new IfElseBlock_Bean();

        ifElseBlock_Bean.setExpressionExists(Boolean.parseBoolean(expressionExists));

        //System.out.println("expressionExists: " + expressionExists);
        NodeList ifChildList = actionChildEle.getChildNodes();

        for (int ifChildListCnt = 0; ifChildListCnt < ifChildList.getLength(); ifChildListCnt++) {

            Element ifChildEle = (Element) ifChildList.item(ifChildListCnt);

            if (expressionExists.equalsIgnoreCase("true")) {
                if (ifChildEle.getNodeName().equalsIgnoreCase("ConditionalStatement")) {

                    NodeList paramNode = ifChildEle.getElementsByTagName("Param");
                    Element param = (Element) paramNode.item(0);

                    String expressionValue = getCharacterDataFromElement(param);
                    // System.out.println("expressionValue: " + expressionValue);

                    ifElseBlock_Bean.setAdvancedCondition(expressionValue);
                }

            }

            if (expressionExists.equalsIgnoreCase("false")) {

                if (ifChildEle.getNodeName().equalsIgnoreCase("Conditions")) {
                    String conditionType = ifChildEle.getAttribute("satisfy");

                    ifElseBlock_Bean.setConditionType(conditionType);

                    NodeList conditionsChildList = ifChildEle.getChildNodes();

                    List<Condition_Bean> conditionBeanList = new ArrayList<Condition_Bean>();


                    for (int conditionsCnt = 0; conditionsCnt < conditionsChildList.getLength(); conditionsCnt++) {
                        Element conditionEle = (Element) conditionsChildList.item(conditionsCnt);

                        Condition_Bean condition_Bean = new Condition_Bean();

                        NodeList paramOneList = conditionEle.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);

                        String nameAtt = paramOne.getAttribute("name");
                        String paramOneValue = getCharacterDataFromElement(paramOne);


                        condition_Bean.setValueType(nameAtt);
                        condition_Bean.setValue(paramOneValue);


                        NodeList paramTwoList = conditionEle.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);

                        String paramTwoValue = getCharacterDataFromElement(paramTwo);

                        condition_Bean.setCondition(paramTwoValue);

                        NodeList paramThreeList = conditionEle.getElementsByTagName("Param");
                        Element paramThree = (Element) paramThreeList.item(2);

                        String paramThreeValue = getCharacterDataFromElement(paramThree);

                        condition_Bean.setTarget(paramThreeValue);

                        NodeList conditionsElementList = conditionEle.getChildNodes();

                        NodeList paramFourList = conditionEle.getElementsByTagName("Param");
                        Element paramFour = (Element) paramFourList.item(3);

                        String paramFourValue = getCharacterDataFromElement(paramFour);
                        condition_Bean.setGPSRadius(paramFourValue);

	    	         /*if(conditionsElementList.getLength()>=4 || conditionsElementList.getLength()>=5)
	    	         {

	    	        	 NodeList itemListOneList = conditionEle.getElementsByTagName("ItemList");
		        		 Element itemListOne = (Element) itemListOneList.item(0);

		        		 String valueAttr=itemListOne.getAttribute("name");

		        		 if(valueAttr.equalsIgnoreCase("value"))
		        		 {
		        		 String valueItemList=getCharacterDataFromElement(itemListOne);

		        		 List<String> valueItemsList=new ArrayList<String>();

		        		 if(valueItemList.contains("$"))
		        		 {
		        			String []valueItemAry=valueItemList.split("\\$");

		        			 for(int valItmCnt=0; valItmCnt<valueItemAry.length;valItmCnt++)
		        			 {

		        				 valueItemsList.add(valueItemAry[valItmCnt]);
		        			 }

		        		 }else{
		        			 valueItemsList.add(valueItemList);
		        		 }

		        		 condition_Bean.setValueItemsList(valueItemsList);
		        		 }


	    	         }*/


	    	        /* if(conditionsElementList.getLength()>=4 || conditionsElementList.getLength()>=5)
	    	         {
	    	        	 NodeList itemListTwoList = conditionEle.getElementsByTagName("ItemList");
		        		 Element itemListTwo = (Element) itemListTwoList.item(1);

		        		 String targetAttr=itemListTwo.getAttribute("name");

		        		 if(targetAttr.equalsIgnoreCase("target"))
		        		 {
		        		 String targetItemList=getCharacterDataFromElement(itemListTwo);

		        		 List<String> targetItemsList=new ArrayList<String>();

		        		 if(targetItemList.contains("$"))
		        		 {
		        			String []targetItemAry=targetItemList.split("\\$");

		        			 for(int tarItmCnt=0; tarItmCnt<targetItemAry.length;tarItmCnt++)
		        			 {

		        				 targetItemsList.add(targetItemAry[tarItmCnt]);
		        			 }

		        		 }else{
		        			 targetItemsList.add(targetItemList);
		        		 }

		        		 condition_Bean.setTargetItemsList(targetItemsList);

		        		 }


	    	         }*/

                        if (conditionsElementList.getLength() == 5) {
                            NodeList itemListTwoList = conditionEle.getElementsByTagName("ItemList");
                            Element itemListTwo = (Element) itemListTwoList.item(0);

                            String targetAttr = itemListTwo.getAttribute("name");

                            if (targetAttr.equalsIgnoreCase("target")) {
                                String targetItemList = getCharacterDataFromElement(itemListTwo);

                                List<String> targetItemsList = new ArrayList<String>();

                                if (targetItemList.contains("$")) {
                                    String[] targetItemAry = targetItemList.split("\\$");

                                    for (int tarItmCnt = 0; tarItmCnt < targetItemAry.length; tarItmCnt++) {

                                        targetItemsList.add(targetItemAry[tarItmCnt]);
                                    }

                                } else {
                                    targetItemsList.add(targetItemList);
                                }

                                condition_Bean.setTargetItemsList(targetItemsList);

                            }


                        }


                        conditionBeanList.add(condition_Bean);
                    }

                    ifElseBlock_Bean.setConditionsList(conditionBeanList);

                }

            }


            if (ifChildEle.getNodeName().equalsIgnoreCase("Then")) {

                NodeList conditionalList = ifChildEle.getElementsByTagName("ConditionalActions");
                Element conditionalEle = (Element) conditionalList.item(0);

                NodeList doList = conditionalEle.getElementsByTagName("Do").item(0).getChildNodes();

                List<ActionWithoutCondition_Bean> actionWithoutConditionBeanList = new ArrayList<ActionWithoutCondition_Bean>();

                for (int doCnt = 0; doCnt < doList.getLength(); doCnt++) {

                    Element actionGroupElement = (Element) doList.item(doCnt);

                    String actionType = actionGroupElement.getAttribute("type");
                    String actionName = actionGroupElement.getAttribute("name");

                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();
                    actionWithoutConditionBean.setActionName(actionName);

                    if(actionType.equalsIgnoreCase(AppConstants.GET_DATA)){

                        setGetDataAction(actionGroupElement, actionWithoutConditionBean);

                    } else if(actionType.equalsIgnoreCase(AppConstants.MANAGE_DATA)){

                        setManageDataAction(actionGroupElement, actionWithoutConditionBean);

                    }else if (actionType.equalsIgnoreCase("Call Form Fields")) {

                        setFormFileds(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call API/Query")) {
                        setAPIQuery(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call SQL")) {
                        setCallSQL(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call DML")) {
                        setCallDML(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Group DML")) {
                        setCallGroupDML(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Visibility On")) {
                        setVisibilityOn(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Visibility Off")) {
                        setVisibilityOff(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Enable Control")) {
                        setEnableControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Disable Control")) {
                        setDisableControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Clear Control")) {
                        setClearControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Notification")) {
                        setNotification(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set Value")) {
                        setValue(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Show Message")) {
                        setMessage(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set GPS")) {
                        setGeoTagging(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equals("Default Submit")) {
                        setDefaultSubmit(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equals("Exit from Application")) {
                        setExitApp(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Form")) {

                        setCallForm(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Sync Form Data")) {

                        setSyncFormData(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set ShowMap")) {

                        setShowMap(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set Calender Event")) {

                        setCalenderEvent(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Dial number")) {
                        setDialNumber(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Text to speech")) {
                        setTextToSpeech(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Start live tracking")) {
                        setStartTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Pause live tracking")) {
                        setPauseTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Stop live tracking")) {
                        setStopTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Focus")) {
                        setFocusEvent(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Web")) {
                        setCallWeb(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Selection")) {
                        setSelection(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Scan QR Code")) {
                        setScanQRCOde(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Chat Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Notifications Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Apps Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Reports Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Tasks Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call ELearning Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Bhargo Home Screen")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Bhargo Login")) {
                        setBhargoLogin(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Logout")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                    } else if (actionType.equalsIgnoreCase("Change Language")) {
                        setChangeLanguage(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Properties")) {
                        setPropertyAction(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Whatsapp")) {
                        setOpenWhatsApp(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Email")) {
                        setOpenEmail(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Google Maps")) {
                        setOpenGoogleMaps(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Download File")) {
                        setDownloadFile(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Get GPS Location")) {
                        getGPSLocation(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Manage Count Down Timer")) {
                        getManageCountDownTimer(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Manage Count Up Timer")) {
                        getManageCountUpTimer(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equals(AppConstants.Remove_Row)) {
                        setRemoveRowAction(actionGroupElement,actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("PopUpManagement")) {
                        setPopUpManagementAction(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("Download As PDF")) {
                        setDownloadAsPDF(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("Download As Excel")) {
                        setDownloadAsExcell(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Print")) {
                        setPrint(actionGroupElement, actionWithoutConditionBean);
                    }


                    actionWithoutConditionBeanList.add(actionWithoutConditionBean);

                }

                ifElseBlock_Bean.setActionsList(actionWithoutConditionBeanList);


            }

        }

        actionWithCondition_Bean.setIfBlock(ifElseBlock_Bean);

    }
    public static void setDownloadAsPDF(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Download As PDF");
        NodeList childList = actionGroupElement.getChildNodes();
        Element selectedControlElement = (Element) childList.item(0);
        actionWithoutConditionBean.setDownload_selectedControl(getCharacterDataFromElement(selectedControlElement));
        Element selectedControlTYpe = (Element) childList.item(1);
        actionWithoutConditionBean.setDownload_selectedControlType((getCharacterDataFromElement(selectedControlTYpe)));

    }

    public static void setDownloadAsExcell(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Download As Excel");
        NodeList childList = actionGroupElement.getChildNodes();
        Element selectedControlElement = (Element) childList.item(0);
        actionWithoutConditionBean.setDownload_selectedControl(getCharacterDataFromElement(selectedControlElement));
        Element selectedControlTYpe = (Element) childList.item(1);
        actionWithoutConditionBean.setDownload_selectedControlType((getCharacterDataFromElement(selectedControlTYpe)));
    }

    public static void setPrint(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        actionWithoutConditionBean.setActionType("Print");
        NodeList childList = actionGroupElement.getChildNodes();
        Element selectedControlElement = (Element) childList.item(0);
        actionWithoutConditionBean.setDownload_selectedControl(getCharacterDataFromElement(selectedControlElement));
        Element selectedControlTYpe = (Element) childList.item(1);
        actionWithoutConditionBean.setDownload_selectedControlType((getCharacterDataFromElement(selectedControlTYpe)));

    }


    public static void setElseIfBlock(Element actionChildEle, IfElseBlock_Bean ifElseBlock_Bean) {

        String expressionExists = actionChildEle.getAttribute("expressionExists");
        String exit = actionChildEle.getAttribute("exit");
        String breakif = actionChildEle.getAttribute("break");


        ifElseBlock_Bean.setExpressionExists(Boolean.parseBoolean(expressionExists));

        //System.out.println("expressionExists: " + expressionExists);
        NodeList ifChildList = actionChildEle.getChildNodes();

        for (int ifChildListCnt = 0; ifChildListCnt < ifChildList.getLength(); ifChildListCnt++) {

            Element ifChildEle = (Element) ifChildList.item(ifChildListCnt);

            if (expressionExists.equalsIgnoreCase("true")) {
                if (ifChildEle.getNodeName().equalsIgnoreCase("ConditionalStatement")) {

                    NodeList paramNode = ifChildEle.getElementsByTagName("Param");
                    Element param = (Element) paramNode.item(0);

                    String expressionValue = getCharacterDataFromElement(param);
                    // System.out.println("expressionValue: " + expressionValue);

                    ifElseBlock_Bean.setAdvancedCondition(expressionValue);
                }

            }

            if (expressionExists.equalsIgnoreCase("false")) {

                if (ifChildEle.getNodeName().equalsIgnoreCase("Conditions")) {

                    String conditionType = ifChildEle.getAttribute("satisfy");

                    ifElseBlock_Bean.setConditionType(conditionType);

                    NodeList conditionsChildList = ifChildEle.getChildNodes();

                    List<Condition_Bean> conditionBeanList = new ArrayList<Condition_Bean>();


                    for (int conditionsCnt = 0; conditionsCnt < conditionsChildList.getLength(); conditionsCnt++) {
                        Element conditionEle = (Element) conditionsChildList.item(conditionsCnt);

                        Condition_Bean condition_Bean = new Condition_Bean();

                        NodeList paramOneList = conditionEle.getElementsByTagName("Param");
                        Element paramOne = (Element) paramOneList.item(0);


                        String nameAtt = paramOne.getAttribute("name");
                        String paramOneValue = getCharacterDataFromElement(paramOne);


                        condition_Bean.setValueType(nameAtt);
                        condition_Bean.setValue(paramOneValue);


                        NodeList paramTwoList = conditionEle.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);

                        String paramTwoValue = getCharacterDataFromElement(paramTwo);

                        condition_Bean.setCondition(paramTwoValue);

                        NodeList paramThreeList = conditionEle.getElementsByTagName("Param");
                        Element paramThree = (Element) paramThreeList.item(2);

                        String paramThreeValue = getCharacterDataFromElement(paramThree);
                        condition_Bean.setTarget(paramThreeValue);

                        NodeList conditionsElementList = conditionEle.getChildNodes();

                        NodeList paramFourList = conditionEle.getElementsByTagName("Param");
                        Element paramFour = (Element) paramFourList.item(3);

                        String paramFourValue = getCharacterDataFromElement(paramFour);
                        condition_Bean.setGPSRadius(paramFourValue);

	    	       /*  if(conditionsElementList.getLength()>=4 || conditionsElementList.getLength()>=5)
	    	         {

	    	        	 NodeList itemListOneList = conditionEle.getElementsByTagName("ItemList");
		        		 Element itemListOne = (Element) itemListOneList.item(0);

		        		 String valueAttr=itemListOne.getAttribute("name");

		        		 if(valueAttr.equalsIgnoreCase("value"))
		        		 {
		        		 String valueItemList=getCharacterDataFromElement(itemListOne);

		        		 List<String> valueItemsList=new ArrayList<String>();

		        		 if(valueItemList.contains("$"))
		        		 {
		        			String []valueItemAry=valueItemList.split("\\$");

		        			 for(int valItmCnt=0; valItmCnt<valueItemAry.length;valItmCnt++)
		        			 {

		        				 valueItemsList.add(valueItemAry[valItmCnt]);
		        			 }

		        		 }else{
		        			 valueItemsList.add(valueItemList);
		        		 }

		        		 condition_Bean.setValueItemsList(valueItemsList);
		        		 }


	    	         }


	    	         if(conditionsElementList.getLength()>=4 || conditionsElementList.getLength()>=5)
	    	         {
	    	        	 NodeList itemListTwoList = conditionEle.getElementsByTagName("ItemList");
		        		 Element itemListTwo = (Element) itemListTwoList.item(1);

		        		 String targetAttr=itemListTwo.getAttribute("name");

		        		 if(targetAttr.equalsIgnoreCase("target"))
		        		 {
		        		 String targetItemList=getCharacterDataFromElement(itemListTwo);

		        		 List<String> targetItemsList=new ArrayList<String>();

		        		 if(targetItemList.contains("$"))
		        		 {
		        			String []targetItemAry=targetItemList.split("\\$");

		        			 for(int tarItmCnt=0; tarItmCnt<targetItemAry.length;tarItmCnt++)
		        			 {

		        				 targetItemsList.add(targetItemAry[tarItmCnt]);
		        			 }

		        		 }else{
		        			 targetItemsList.add(targetItemList);
		        		 }

		        		 condition_Bean.setTargetItemsList(targetItemsList);

		        		 }

	    	         }*/


                        if (conditionsElementList.getLength() == 5) {
                            NodeList itemListTwoList = conditionEle.getElementsByTagName("ItemList");
                            Element itemListTwo = (Element) itemListTwoList.item(0);

                            String targetAttr = itemListTwo.getAttribute("name");

                            if (targetAttr.equalsIgnoreCase("target")) {
                                String targetItemList = getCharacterDataFromElement(itemListTwo);

                                List<String> targetItemsList = new ArrayList<String>();

                                if (targetItemList.contains("$")) {
                                    String[] targetItemAry = targetItemList.split("\\$");

                                    for (int tarItmCnt = 0; tarItmCnt < targetItemAry.length; tarItmCnt++) {

                                        targetItemsList.add(targetItemAry[tarItmCnt]);
                                    }

                                } else {
                                    targetItemsList.add(targetItemList);
                                }

                                condition_Bean.setTargetItemsList(targetItemsList);

                            }


                        }


                        conditionBeanList.add(condition_Bean);
                    }

                    ifElseBlock_Bean.setConditionsList(conditionBeanList);

                }

            }


            if (ifChildEle.getNodeName().equalsIgnoreCase("Then")) {

                NodeList conditionalList = ifChildEle.getElementsByTagName("ConditionalActions");
                Element conditionalEle = (Element) conditionalList.item(0);

                NodeList doList = conditionalEle.getElementsByTagName("Do").item(0).getChildNodes();

                List<ActionWithoutCondition_Bean> actionWithoutConditionBeanList = new ArrayList<ActionWithoutCondition_Bean>();

                for (int doCnt = 0; doCnt < doList.getLength(); doCnt++) {

                    Element actionGroupElement = (Element) doList.item(doCnt);

                    String actionType = actionGroupElement.getAttribute("type");
                    String actionName = actionGroupElement.getAttribute("name");

                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();
                    actionWithoutConditionBean.setActionName(actionName);

                    if(actionType.equalsIgnoreCase("Get Data")){

                        setGetDataAction(actionGroupElement, actionWithoutConditionBean);

                    }else if(actionType.equalsIgnoreCase(AppConstants.MANAGE_DATA)){

                        setManageDataAction(actionGroupElement, actionWithoutConditionBean);

                    }else  if (actionType.equalsIgnoreCase("Call Form Fields")) {

                        setFormFileds(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call API/Query")) {
                        setAPIQuery(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call SQL")) {
                        setCallSQL(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call DML")) {
                        setCallDML(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Group DML")) {
                        setCallGroupDML(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Visibility On")) {
                        setVisibilityOn(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Visibility Off")) {
                        setVisibilityOff(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Enable Control")) {
                        setEnableControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Disable Control")) {
                        setDisableControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Clear Control")) {
                        setClearControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Notification")) {
                        setNotification(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set Value")) {
                        setValue(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Show Message")) {
                        setMessage(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set GPS")) {
                        setGeoTagging(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equals("Default Submit")) {
                        setDefaultSubmit(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equals("Exit from Application")) {
                        setExitApp(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Form")) {

                        setCallForm(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Sync Form Data")) {

                        setSyncFormData(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set ShowMap")) {

                        setShowMap(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set Calender Event")) {

                        setCalenderEvent(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Dial number")) {
                        setDialNumber(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Text to speech")) {
                        setTextToSpeech(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Start live tracking")) {
                        setStartTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Pause live tracking")) {
                        setPauseTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Stop live tracking")) {
                        setStopTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Focus")) {

                        setFocusEvent(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Web")) {
                        setCallWeb(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Selection")) {
                        setSelection(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Scan QR Code")) {
                        setScanQRCOde(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Chat Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Notifications Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Apps Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Reports Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Tasks Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call ELearning Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Bhargo Home Screen")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Bhargo Login")) {
                        setBhargoLogin(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Logout")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                    } else if (actionType.equalsIgnoreCase("Change Language")) {
                        setChangeLanguage(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Properties")) {
                        setPropertyAction(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Whatsapp")) {
                        setOpenWhatsApp(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Email")) {
                        setOpenEmail(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Google Maps")) {
                        setOpenGoogleMaps(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Download File")) {
                        setDownloadFile(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Get GPS Location")) {
                        getGPSLocation(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Manage Count Down Timer")) {
                        getManageCountDownTimer(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Manage Count Up Timer")) {
                        getManageCountUpTimer(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equals(AppConstants.Remove_Row)) {
                        setRemoveRowAction(actionGroupElement,actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("PopUpManagement")) {
                        setPopUpManagementAction(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("Download As PDF")) {
                        setDownloadAsPDF(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("Download As Excel")) {
                        setDownloadAsExcell(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Print")) {
                        setPrint(actionGroupElement, actionWithoutConditionBean);
                    }


                    actionWithoutConditionBeanList.add(actionWithoutConditionBean);

                }

                ifElseBlock_Bean.setActionsList(actionWithoutConditionBeanList);


            }

        }


    }


    public static void setElseBlock(Element actionChildEle, ActionWithCondition_Bean actionWithCondition_Bean) {

        NodeList ifChildList = actionChildEle.getChildNodes();

        IfElseBlock_Bean ifElseBlock_Bean = new IfElseBlock_Bean();

        for (int ifChildListCnt = 0; ifChildListCnt < ifChildList.getLength(); ifChildListCnt++) {

            Element ifChildEle = (Element) ifChildList.item(ifChildListCnt);


            if (ifChildEle.getNodeName().equalsIgnoreCase("Then")) {

                NodeList conditionalList = ifChildEle.getElementsByTagName("ConditionalActions");
                Element conditionalEle = (Element) conditionalList.item(0);

                NodeList doList = conditionalEle.getElementsByTagName("Do").item(0).getChildNodes();

                List<ActionWithoutCondition_Bean> actionWithoutConditionBeanList = new ArrayList<ActionWithoutCondition_Bean>();

                for (int doCnt = 0; doCnt < doList.getLength(); doCnt++) {

                    Element actionGroupElement = (Element) doList.item(doCnt);

                    String actionType = actionGroupElement.getAttribute("type");

                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();
                    /**/
                    if(actionType.equalsIgnoreCase("Get Data")){

                        setGetDataAction(actionGroupElement, actionWithoutConditionBean);

                    }else if(actionType.equalsIgnoreCase(AppConstants.MANAGE_DATA)){

                        setManageDataAction(actionGroupElement, actionWithoutConditionBean);

                    }else if (actionType.equalsIgnoreCase("Call Form Fields")) {

                        setFormFileds(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call API/Query")) {
                        setAPIQuery(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call SQL")) {
                        setCallSQL(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call DML")) {
                        setCallDML(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Group DML")) {
                        setCallGroupDML(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Visibility On")) {
                        setVisibilityOn(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Visibility Off")) {
                        setVisibilityOff(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Enable Control")) {
                        setEnableControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Disable Control")) {
                        setDisableControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Clear Control")) {
                        setClearControl(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Notification")) {
                        setNotification(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set Value")) {
                        setValue(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Show Message")) {
                        setMessage(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set GPS")) {
                        setGeoTagging(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equals("Default Submit")) {
                        setDefaultSubmit(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equals("Exit from Application")) {
                        setExitApp(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Form")) {

                        setCallForm(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Sync Form Data")) {

                        setSyncFormData(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set ShowMap")) {

                        setShowMap(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Set Calender Event")) {

                        setCalenderEvent(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Dial number")) {
                        setDialNumber(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Text to speech")) {
                        setTextToSpeech(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Start live tracking")) {
                        setStartTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Pause live tracking")) {
                        setPauseTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Stop live tracking")) {
                        setStopTracking(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Focus")) {

                        setFocusEvent(actionGroupElement, actionWithoutConditionBean);

                    } else if (actionType.equalsIgnoreCase("Call Web")) {
                        setCallWeb(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Selection")) {
                        setSelection(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Scan QR Code")) {
                        setScanQRCOde(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Chat Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Notifications Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Apps Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Reports Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Tasks Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call ELearning Window")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Bhargo Home Screen")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                        addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Bhargo Login")) {
                        setBhargoLogin(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Call Logout")) {
                        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
                    } else if (actionType.equalsIgnoreCase("Change Language")) {
                        setChangeLanguage(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Set Properties")) {
                        setPropertyAction(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Whatsapp")) {
                        setOpenWhatsApp(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Email")) {
                        setOpenEmail(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Open Google Maps")) {
                        setOpenGoogleMaps(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Download File")) {
                        setDownloadFile(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Get GPS Location")) {
                        getGPSLocation(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Manage Count Down Timer")) {
                        getManageCountDownTimer(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equals("Manage Count Up Timer")) {
                        getManageCountUpTimer(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equals(AppConstants.Remove_Row)) {
                        setRemoveRowAction(actionGroupElement,actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("PopUpManagement")) {
                        setPopUpManagementAction(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("Download As PDF")) {
                        setDownloadAsPDF(actionGroupElement, actionWithoutConditionBean);
                    }else if (actionType.equalsIgnoreCase("Download As Excel")) {
                        setDownloadAsExcell(actionGroupElement, actionWithoutConditionBean);
                    } else if (actionType.equalsIgnoreCase("Print")) {
                        setPrint(actionGroupElement, actionWithoutConditionBean);
                    }


                    actionWithoutConditionBeanList.add(actionWithoutConditionBean);

                }

                ifElseBlock_Bean.setActionsList(actionWithoutConditionBeanList);

            }

        }


        actionWithCondition_Bean.setElseBlock(ifElseBlock_Bean);

    }


    public static void setActionWithOutCondition(Element actionElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {

        NodeList doList = actionElement.getElementsByTagName("Do");
        Element doElement = (Element) doList.item(0);


        NodeList actionGroupList = doElement.getElementsByTagName("ActionGroup");
        Element actionGroupElement = (Element) actionGroupList.item(0);

        String actionType = actionGroupElement.getAttribute("type");
        boolean Active = true;
        if (actionGroupElement.hasAttribute("Active")) {
            Active = Boolean.parseBoolean(actionGroupElement.getAttribute("Active"));
        }

        actionWithoutConditionBean.setActive(Active);

        // System.out.println("actionType-->"+actionType);
        // ActionWithoutCondition_Bean actionWithoutConditionBean=new ActionWithoutCondition_Bean();

        if(actionType.equalsIgnoreCase("Get Data")){

            setGetDataAction(actionGroupElement, actionWithoutConditionBean);

        }else if(actionType.equalsIgnoreCase(AppConstants.MANAGE_DATA)){

            setManageDataAction(actionGroupElement, actionWithoutConditionBean);

        }else if (actionType.equalsIgnoreCase("Call Form Fields")) {

            setFormFileds(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Call API/Query")) {
            setAPIQuery(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Call SQL")) {
            setCallSQL(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Call DML")) {
            setCallDML(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Call Group DML")) {
            setCallGroupDML(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Visibility On")) {
            setVisibilityOn(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Visibility Off")) {
            setVisibilityOff(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Enable Control")) {
            setEnableControl(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Disable Control")) {
            setDisableControl(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Clear Control")) {
            setClearControl(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Notification")) {
            setNotification(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Set Value")) {
            setValue(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Show Message")) {
            setMessage(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Set GPS")) {
            setGeoTagging(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equals("Default Submit")) {
            setDefaultSubmit(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equals("Exit from Application")) {
            setExitApp(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Call Form")) {

            setCallForm(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Sync Form Data")) {

            setSyncFormData(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Set ShowMap")) {

            setShowMap(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Set Calender Event")) {

            setCalenderEvent(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Dial number")) {
            setDialNumber(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Text to speech")) {
            setTextToSpeech(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Start live tracking")) {
            setStartTracking(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Pause live tracking")) {
            setPauseTracking(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Stop live tracking")) {
            setStopTracking(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Set Focus")) {

            setFocusEvent(actionGroupElement, actionWithoutConditionBean);

        } else if (actionType.equalsIgnoreCase("Call Web")) {
            setCallWeb(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Set Selection")) {
            setSelection(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Scan QR Code")) {
            setScanQRCOde(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Chat Window")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Notifications Window")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Apps Window")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Reports Window")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Tasks Window")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call ELearning Window")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Bhargo Home Screen")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
            addNavigationOptions(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Bhargo Login")) {
            setBhargoLogin(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Call Logout")) {
            actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));
        } else if (actionType.equalsIgnoreCase("Change Language")) {
            setChangeLanguage(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Set Properties")) {
            setPropertyAction(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Open Whatsapp")) {
            setOpenWhatsApp(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Open Email")) {
            setOpenEmail(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Open Google Maps")) {
            setOpenGoogleMaps(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Download File")) {
            setDownloadFile(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Get GPS Location")) {
            getGPSLocation(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Manage Count Down Timer")) {
            getManageCountDownTimer(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equals("Manage Count Up Timer")) {
            getManageCountUpTimer(actionGroupElement, actionWithoutConditionBean);
        }else if (actionType.equals(AppConstants.Remove_Row)) {
            setRemoveRowAction(actionGroupElement,actionWithoutConditionBean);
        }else if (actionType.equalsIgnoreCase("PopUpManagement")) {
            setPopUpManagementAction(actionGroupElement, actionWithoutConditionBean);
        }else if (actionType.equalsIgnoreCase("Download As PDF")) {
            setDownloadAsPDF(actionGroupElement, actionWithoutConditionBean);
        }else if (actionType.equalsIgnoreCase("Download As Excel")) {
            setDownloadAsExcell(actionGroupElement, actionWithoutConditionBean);
        } else if (actionType.equalsIgnoreCase("Print")) {
            setPrint(actionGroupElement, actionWithoutConditionBean);
        }

    }

    public static void getManageCountDownTimer(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionId(actionGroupElement.getAttribute("ActionId"));
        actionWithoutConditionBean.setActionType("Manage Count Down Timer");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();
        for (int i = 0; i < formFieldsChildList.getLength(); i++) {
            Element paramOne = (Element) formFieldsChildList.item(i);
            if (paramOne.getNodeName().equalsIgnoreCase("Type")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setManageCountDownTimer_Type(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Control_Selected")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setManageCountDownTimer_Control_Selected(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Timer_Option")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setManageCountDownTimer_Option(value);
            }
        }
    }

    public static void getManageCountUpTimer(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionId(actionGroupElement.getAttribute("ActionId"));
        actionWithoutConditionBean.setActionType("Manage Count Up Timer");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();
        for (int i = 0; i < formFieldsChildList.getLength(); i++) {
            Element paramOne = (Element) formFieldsChildList.item(i);
            if (paramOne.getNodeName().equalsIgnoreCase("Type")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setManageCountUpTimer_Type(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Control_Selected")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setManageCountUpTimer_Control_Selected(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Timer_Option")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setManageCountUpTimer_Option(value);
            }
        }
    }

    public static void getGPSLocation(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Get GPS Location");
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();
        for (int i = 0; i < formFieldsChildList.getLength(); i++) {
            Element paramOne = (Element) formFieldsChildList.item(i);
            if (paramOne.getNodeName().equalsIgnoreCase("GPSMode")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setGetGPSLocation_GPSMode(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("GPSAccuracy")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setGetGPSLocation_GPSAccuracy(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Type")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setGetGPSLocation_Type(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Control_Selected")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setGetGPSLocation_Control_Selected(value);
            } else if (paramOne.getNodeName().equalsIgnoreCase("Variable_Selected")) {
                String value = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setGetGPSLocation_Variable_Selected(value);
            }
        }

       /* NodeList paramOneList = actionGroupElement.getElementsByTagName("GPSMode");
        Element paramOne = (Element) paramOneList.item(0);

        String GPSMode = getCharacterDataFromElement(paramOne);
        actionWithoutConditionBean.setGetGPSLocation_GPSMode(GPSMode);

        NodeList paramTwoList = actionGroupElement.getElementsByTagName("GPSAccuracy");
        Element paramTwo = (Element) paramTwoList.item(0);

        String GPSAccuracy = getCharacterDataFromElement(paramTwo);
        actionWithoutConditionBean.setGetGPSLocation_GPSAccuracy(GPSAccuracy);*/


    }


    public static void setActionWithCondition(Element actionElement, ActionWithCondition_Bean actionWithCondition_Bean) {

        NodeList ifElseIfElseList = actionElement.getChildNodes();

        List<IfElseBlock_Bean> elseBlockList = new ArrayList<IfElseBlock_Bean>();

        for (int ifElseIfElseCnt = 0; ifElseIfElseCnt < ifElseIfElseList.getLength(); ifElseIfElseCnt++) {

            Element actionChildEle = (Element) ifElseIfElseList.item(ifElseIfElseCnt);

            if (actionChildEle.getNodeName().equalsIgnoreCase("If")) {
                setIfBlock(actionChildEle, actionWithCondition_Bean);

            } else if (actionChildEle.getNodeName().equalsIgnoreCase("ElseIf")) {

                IfElseBlock_Bean ifElseBlock_Bean = new IfElseBlock_Bean();

                setElseIfBlock(actionChildEle, ifElseBlock_Bean);

                elseBlockList.add(ifElseBlock_Bean);

            } else if (actionChildEle.getNodeName().equalsIgnoreCase("Else")) {

                setElseBlock(actionChildEle, actionWithCondition_Bean);
            }

        }

        actionWithCondition_Bean.setElseBlockList(elseBlockList);

    }

    public static void setEvents(ControlObject controlObject, Node ControlNode) {

        NodeList eventsList = ((Element) ControlNode).getElementsByTagName("Events").item(0).getChildNodes();
        // System.out.println("eventsList.getLength()-->"+eventsList.getLength());
        for (int eventCnt = 0; eventCnt < eventsList.getLength(); eventCnt++) {
            if (eventsList.item(eventCnt).getNodeType() == Node.ELEMENT_NODE) {

                Element eventElement = (Element) eventsList.item(eventCnt);

                String actionType = eventElement.getAttribute("type");

                NodeList acionsList = eventElement.getElementsByTagName("Actions").item(0).getChildNodes();

                //System.out.println("acionsList.getLength()-->"+acionsList.getLength());

                Control_EventObject controlEventObject = new Control_EventObject();

                List<ActionWithCondition_Bean> actionWithConditionList = new ArrayList<ActionWithCondition_Bean>();
                List<ActionWithoutCondition_Bean> actionWithOutConditionList = new ArrayList<ActionWithoutCondition_Bean>();
                if (actionType.equalsIgnoreCase("onAddRowEvent")) {
                    setAddRow(controlObject.getControlName(),controlObject.getControlType(),actionWithOutConditionList);
                    for (int actionCnt = 0; actionCnt < acionsList.getLength(); actionCnt++) {
                        if (acionsList.item(actionCnt).getNodeType() == Node.ELEMENT_NODE) {
                            Element actionElement = (Element) acionsList.item(actionCnt);

                            String condition = actionElement.getAttribute("condition");
                            String priority = actionElement.getAttribute("priority");

                            String actionName = actionElement.getAttribute("name");

                            if (condition.equalsIgnoreCase("true")) {

                                ActionWithCondition_Bean actionWithCondition_Bean = new ActionWithCondition_Bean();

                                actionWithCondition_Bean.setPositionInEvent(Integer.parseInt(priority)+1);
                                actionWithCondition_Bean.setActionWithConditionName(actionName);
                                boolean Active = true;
                                if (actionElement.hasAttribute("Active")) {
                                    Active = Boolean.parseBoolean(actionElement.getAttribute("Active"));
                                }

                                actionWithCondition_Bean.setActive(Active);

                                setActionWithCondition(actionElement, actionWithCondition_Bean);

                                actionWithConditionList.add(actionWithCondition_Bean);


                            } else if (condition.equalsIgnoreCase("false")) {
                                ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();

                                actionWithoutConditionBean.setPositionInEvent(Integer.parseInt(priority));
                                actionWithoutConditionBean.setActionName(actionName);


                                setActionWithOutCondition(actionElement, actionWithoutConditionBean);

                                actionWithOutConditionList.add(actionWithoutConditionBean);
                            }
                        }

                    }
                }else{
                    for (int actionCnt = 0; actionCnt < acionsList.getLength(); actionCnt++) {
                        if (acionsList.item(actionCnt).getNodeType() == Node.ELEMENT_NODE) {
                            Element actionElement = (Element) acionsList.item(actionCnt);

                            String condition = actionElement.getAttribute("condition");
                            String priority = actionElement.getAttribute("priority");

                            String actionName = actionElement.getAttribute("name");

                            if (condition.equalsIgnoreCase("true")) {

                                ActionWithCondition_Bean actionWithCondition_Bean = new ActionWithCondition_Bean();

                                actionWithCondition_Bean.setPositionInEvent(Integer.parseInt(priority));
                                actionWithCondition_Bean.setActionWithConditionName(actionName);
                                boolean Active = true;
                                if (actionElement.hasAttribute("Active")) {
                                    Active = Boolean.parseBoolean(actionElement.getAttribute("Active"));
                                }

                                actionWithCondition_Bean.setActive(Active);

                                setActionWithCondition(actionElement, actionWithCondition_Bean);

                                actionWithConditionList.add(actionWithCondition_Bean);


                            } else if (condition.equalsIgnoreCase("false")) {
                                ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();

                                actionWithoutConditionBean.setPositionInEvent(Integer.parseInt(priority));
                                actionWithoutConditionBean.setActionName(actionName);

                                setActionWithOutCondition(actionElement, actionWithoutConditionBean);

                                actionWithOutConditionList.add(actionWithoutConditionBean);
                            }
                        }

                    }
                }

                controlEventObject.setActionWithConditionList(actionWithConditionList);
                controlEventObject.setActionWithOutConditionList(actionWithOutConditionList);

                if (actionType.equalsIgnoreCase("onSelectEvent") ||
                        actionType.equalsIgnoreCase("onChangeEvent")) {
                    controlObject.setOnChangeEventObject(controlEventObject);
                }

                if (actionType.equalsIgnoreCase("onKeyEvent") ||
                        actionType.equalsIgnoreCase("onFocusExists")) {
                    controlObject.setOnFocusEventObject(controlEventObject);
                }

                if (actionType.equalsIgnoreCase("onClickEvent") ||
                        actionType.equalsIgnoreCase("onTimeElapsedEvent") ||
                        actionType.equalsIgnoreCase("onRowClickEvent") ||
                        actionType.equalsIgnoreCase("onMapClickEvent")) {
                    controlObject.setOnClickEventObject(controlEventObject);
                }
                if (actionType.equalsIgnoreCase("onMapMarkerClickEvent")) {
                    controlObject.setOnMapMarkerClickEventObject(controlEventObject);
                }

                if (actionType.equalsIgnoreCase("onAddRowEvent")) {
                    controlObject.setOnAddRowEventObject(controlEventObject);
                }
                if (actionType.equalsIgnoreCase("onDeleteRowEvent")) {
                    setDeleteRow(controlObject.getControlName(),controlObject.getControlType(),actionWithOutConditionList);
                    controlObject.setOnDeleteRowEventObject(controlEventObject);
                }


            }
        }
    }

    public static void setEvents_submit(DataCollectionObject AppObject, Node ControlNode) {

        NodeList eventsList = ((Element) ControlNode).getElementsByTagName("Events").item(0).getChildNodes();
        // System.out.println("eventsList.getLength()-->"+eventsList.getLength());
        for (int eventCnt = 0; eventCnt < eventsList.getLength(); eventCnt++) {

            Element eventElement = (Element) eventsList.item(eventCnt);

            String actionType = eventElement.getAttribute("type");

            NodeList acionsList = eventElement.getElementsByTagName("Actions").item(0).getChildNodes();

            //System.out.println("acionsList.getLength()-->"+acionsList.getLength());

            Control_EventObject controlEventObject = new Control_EventObject();

            List<ActionWithCondition_Bean> actionWithConditionList = new ArrayList<ActionWithCondition_Bean>();
            List<ActionWithoutCondition_Bean> actionWithOutConditionList = new ArrayList<ActionWithoutCondition_Bean>();


            for (int actionCnt = 0; actionCnt < acionsList.getLength(); actionCnt++) {
                Element actionElement = (Element) acionsList.item(actionCnt);

                String condition = actionElement.getAttribute("condition");
                String priority = actionElement.getAttribute("priority");


                String actionName = actionElement.getAttribute("name");

                if (condition.equalsIgnoreCase("true")) {

                    ActionWithCondition_Bean actionWithCondition_Bean = new ActionWithCondition_Bean();

                    actionWithCondition_Bean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithCondition_Bean.setActionWithConditionName(actionName);

                    setActionWithCondition(actionElement, actionWithCondition_Bean);

                    actionWithConditionList.add(actionWithCondition_Bean);


                } else if (condition.equalsIgnoreCase("false")) {
                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();

                    actionWithoutConditionBean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithoutConditionBean.setActionName(actionName);

                    setActionWithOutCondition(actionElement, actionWithoutConditionBean);

                    actionWithOutConditionList.add(actionWithoutConditionBean);
                }

            }


            controlEventObject.setActionWithConditionList(actionWithConditionList);
            controlEventObject.setActionWithOutConditionList(actionWithOutConditionList);

            AppObject.setOnSubmitClickObject(controlEventObject);

        }

    }

    public static void setEventsForPreLoad(DataCollectionObject Appobject, Node ControlNode) {

        NodeList eventsList = ControlNode.getChildNodes();
        // System.out.println("eventsList.getLength()-->"+eventsList.getLength());
        for (int eventCnt = 0; eventCnt < eventsList.getLength(); eventCnt++) {
            Control_EventObject controlEventObject = new Control_EventObject();
            Element eventElement = (Element) eventsList.item(eventCnt);

            String actionType = eventElement.getAttribute("type");

            NodeList acionsList = eventElement.getElementsByTagName("Actions").item(0).getChildNodes();

            //System.out.println("acionsList.getLength()-->"+acionsList.getLength());


            List<ActionWithCondition_Bean> actionWithConditionList = new ArrayList<ActionWithCondition_Bean>();
            List<ActionWithoutCondition_Bean> actionWithOutConditionList = new ArrayList<ActionWithoutCondition_Bean>();


            for (int actionCnt = 0; actionCnt < acionsList.getLength(); actionCnt++) {
                Element actionElement = (Element) acionsList.item(actionCnt);

                String condition = actionElement.getAttribute("condition");
                String priority = actionElement.getAttribute("priority");
                String actionName = actionElement.getAttribute("name");

                if (condition.equalsIgnoreCase("true")) {

                    ActionWithCondition_Bean actionWithCondition_Bean = new ActionWithCondition_Bean();

                    actionWithCondition_Bean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithCondition_Bean.setActionWithConditionName(actionName);

                    setActionWithCondition(actionElement, actionWithCondition_Bean);

                    actionWithConditionList.add(actionWithCondition_Bean);


                } else if (condition.equalsIgnoreCase("false")) {
                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();

                    actionWithoutConditionBean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithoutConditionBean.setActionName(actionName);

                    setActionWithOutCondition(actionElement, actionWithoutConditionBean);

                    actionWithOutConditionList.add(actionWithoutConditionBean);
                }

            }


            controlEventObject.setActionWithConditionList(actionWithConditionList);
            controlEventObject.setActionWithOutConditionList(actionWithOutConditionList);
            if (actionType.equalsIgnoreCase("onPreLoadEvent")) {
                Appobject.setOnPreLoadEventObject(controlEventObject);
            }/*else{
                Appobject.setOnSubmitClickObject(controlEventObject);
            }*/
//            else if (actionType.equalsIgnoreCase("onSubmitEvent")) {
//                Appobject.setOnSubmitClickObject(controlEventObject);
//            }

        }
    }

    public static void setEventsForLoad(DataCollectionObject Appobject, Node ControlNode) {

        NodeList eventsList = ControlNode.getChildNodes();
        // System.out.println("eventsList.getLength()-->"+eventsList.getLength());
        for (int eventCnt = 0; eventCnt < eventsList.getLength(); eventCnt++) {
            Control_EventObject controlEventObject = new Control_EventObject();
            Element eventElement = (Element) eventsList.item(eventCnt);

            String actionType = eventElement.getAttribute("type");
            NodeList acionsList = eventElement.getElementsByTagName("Actions").item(0).getChildNodes();

            //System.out.println("acionsList.getLength()-->"+acionsList.getLength());


            List<ActionWithCondition_Bean> actionWithConditionList = new ArrayList<ActionWithCondition_Bean>();
            List<ActionWithoutCondition_Bean> actionWithOutConditionList = new ArrayList<ActionWithoutCondition_Bean>();


            for (int actionCnt = 0; actionCnt < acionsList.getLength(); actionCnt++) {
                Element actionElement = (Element) acionsList.item(actionCnt);

                String condition = actionElement.getAttribute("condition");
                String priority = actionElement.getAttribute("priority");
                String actionName = actionElement.getAttribute("name");

                if (condition.equalsIgnoreCase("true")) {

                    ActionWithCondition_Bean actionWithCondition_Bean = new ActionWithCondition_Bean();

                    actionWithCondition_Bean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithCondition_Bean.setActionWithConditionName(actionName);

                    boolean Active = true;
                    if (actionElement.hasAttribute("Active")) {
                        Active = Boolean.parseBoolean(actionElement.getAttribute("Active"));
                    }
                    actionWithCondition_Bean.setActive(Active);

                    setActionWithCondition(actionElement, actionWithCondition_Bean);

                    actionWithConditionList.add(actionWithCondition_Bean);


                } else if (condition.equalsIgnoreCase("false")) {
                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();

                    actionWithoutConditionBean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithoutConditionBean.setActionName(actionName);

                    boolean Active = true;
                    if (actionElement.hasAttribute("Active")) {
                        Active = Boolean.parseBoolean(actionElement.getAttribute("Active"));
                    }
                    actionWithoutConditionBean.setActive(Active);

                    setActionWithOutCondition(actionElement, actionWithoutConditionBean);

                    actionWithOutConditionList.add(actionWithoutConditionBean);
                }

            }


            controlEventObject.setActionWithConditionList(actionWithConditionList);
            controlEventObject.setActionWithOutConditionList(actionWithOutConditionList);
            if (actionType.equalsIgnoreCase("onLoadEvent")) {
                Appobject.setOnLoadEventObject(controlEventObject);
            }/*else{
                Appobject.setOnSubmitClickObject(controlEventObject);
            }*/
//            else if (actionType.equalsIgnoreCase("onSubmitEvent")) {
//                Appobject.setOnSubmitClickObject(controlEventObject);
//            }

        }
    }

    public static void setSyncFormData(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Sync Form Data");
        SyncFormData syncFormData = new SyncFormData();
        //DataSynchronizationType
        Element elementType = (Element) actionGroupElement.getElementsByTagName("DataSynchronizationType").item(0);
        syncFormData.setSyncType(getCharacterDataFromElement(elementType));
        Element elementFormName = (Element) actionGroupElement.getElementsByTagName("FormName").item(0);
        syncFormData.setFormName(getCharacterDataFromElement(elementFormName));
        Element elementTableName = (Element) actionGroupElement.getElementsByTagName("TableName").item(0);
        syncFormData.setTableName(getCharacterDataFromElement(elementTableName));
        Element elementRetrieveDataFromServerDB = (Element) actionGroupElement.getElementsByTagName("RetrieveDataFromServerDB").item(0);
        syncFormData.setEnableRetrieveDataFromServer(Boolean.parseBoolean(getCharacterDataFromElement(elementRetrieveDataFromServerDB)));
        Element elementSendDataToServerDB = (Element) actionGroupElement.getElementsByTagName("SendDataToServerDB").item(0);
        syncFormData.setEnableSendDataToServer(Boolean.parseBoolean(getCharacterDataFromElement(elementSendDataToServerDB)));
        if (syncFormData.isEnableRetrieveDataFromServer()) {
            Element elementRetrieveType = (Element) actionGroupElement.getElementsByTagName("RetrieveType").item(0);
            syncFormData.setRetrieveType(getCharacterDataFromElement(elementRetrieveType));
            if (syncFormData.getRetrieveType().contentEquals(AppConstants.RETRIEVE_TYPE_FILTER_BASED)) {
                syncFormData.setFilterColumns(filterColumns(actionGroupElement));
            }
        }

        actionWithoutConditionBean.setSyncFormData(syncFormData);
    }

    private static List<API_InputParam_Bean> filterColumns(Element actionGroupElement) {
        List<API_InputParam_Bean> inputParam_beans = new ArrayList<>();
        NodeList formFieldsChildList = actionGroupElement.getChildNodes();

        for (int FieldsCnt = 0; FieldsCnt < formFieldsChildList.getLength(); FieldsCnt++) {
            Element fieldsElement = (Element) formFieldsChildList.item(FieldsCnt);
            if (fieldsElement.getNodeName().equalsIgnoreCase("InputParameters")) {

                NodeList inputParametersList = fieldsElement.getChildNodes();

                for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
                    Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);

                    NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramOneList.item(0);

                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
                    apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
                    apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
                    apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));
                    apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));

                    if (apiInputParamBean.isEnable()) {
                        NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                        Element paramTwo = (Element) paramTwoList.item(1);

                        String nameAtt = paramTwo.getAttribute("name");

                        if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_MappedControl_Type("Static");
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                        } else if (nameAtt.equalsIgnoreCase("expression")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_ExpressionExists(true);
                            apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                        } else if (!nameAtt.equalsIgnoreCase("") &&
                                !nameAtt.equalsIgnoreCase("none")) {
                            apiInputParamBean.setEnable(true);
                            apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                        } else {
//                            apiInputParamBean.setEnable(false);
                            apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                            apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
                        }

                        NodeList paramThreeList = inputParamElement.getElementsByTagName("Param");
                        Element paramThree = (Element) paramThreeList.item(2);
                        apiInputParamBean.setInParam_Operator(getCharacterDataFromElement(paramThree));


                        NodeList paramfourList = inputParamElement.getElementsByTagName("Param");
                        Element paramFour = (Element) paramfourList.item(3);
                        apiInputParamBean.setInParam_and_or(getCharacterDataFromElement(paramFour));

                        NodeList paramFiveList = inputParamElement.getElementsByTagName("Param");
                        Element paramFive = (Element) paramFiveList.item(4);
                        apiInputParamBean.setInParam_near_by_distance(getCharacterDataFromElement(paramFive));

                        NodeList paramSixList = inputParamElement.getElementsByTagName("Param");
                        Element paramSix = (Element) paramSixList.item(5);
                        apiInputParamBean.setInParam_near_by_records(getCharacterDataFromElement(paramSix));


                    }

                    inputParam_beans.add(apiInputParamBean);
                }


            }
        }
        return inputParam_beans;
    }

    public static void setCallForm(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Call Form");
        NodeList formNameList = actionGroupElement.getElementsByTagName("FormName");
        Element formName = (Element) formNameList.item(0);
        String formNameValue = getCharacterDataFromElement(formName);
        actionWithoutConditionBean.setSelect_FormName(formNameValue);
        actionWithoutConditionBean.setCallForm_Select_FormName(formNameValue);
        if (actionGroupElement.getElementsByTagName("FormType").getLength() != 0) {
            Element formType = (Element) actionGroupElement.getElementsByTagName("FormType").item(0);
            actionWithoutConditionBean.setFormType(getCharacterDataFromElement(formType));
        }
        if (actionGroupElement.getElementsByTagName("CloseParent").getLength() != 0) {
            Element closeParent = (Element) actionGroupElement.getElementsByTagName("CloseParent").item(0);
            actionWithoutConditionBean.setCloseParentEnabled(!closeParent.getTextContent().contentEquals("false"));
        }
        if (actionGroupElement.getElementsByTagName("CloseAll").getLength() != 0) {
            Element closeAll = (Element) actionGroupElement.getElementsByTagName("CloseAll").item(0);
            actionWithoutConditionBean.setCloseAllFormsEnabled(Boolean.parseBoolean(closeAll.getTextContent()));
        }
        if (actionGroupElement.getElementsByTagName("KeepSession").getLength() != 0) {
            Element keepSession = (Element) actionGroupElement.getElementsByTagName("KeepSession").item(0);
            actionWithoutConditionBean.setKeepSessionEnabled(Boolean.parseBoolean(keepSession.getTextContent()));
        }
        if (actionGroupElement.getElementsByTagName("GoToHome").getLength() != 0) {
            Element goToHome = (Element) actionGroupElement.getElementsByTagName("GoToHome").item(0);
            actionWithoutConditionBean.setGoToHomeEnabled(Boolean.parseBoolean(goToHome.getTextContent()));
        }

//        NodeList mappedItemsList = actionGroupElement.getElementsByTagName("MappedItems");
        List<Variable_Bean> List_Varibles = new ArrayList<Variable_Bean>();
        if (actionGroupElement.getElementsByTagName("MappedItems").getLength() != 0 && actionGroupElement.getElementsByTagName("MappedItems").item(0).getTextContent() != "") {
            NodeList mapItems = actionGroupElement.getElementsByTagName("MappedItems").item(0).getChildNodes();
            for (int mappedItemsCnt = 0; mappedItemsCnt < mapItems.getLength(); mappedItemsCnt++) {

                Variable_Bean variables = new Variable_Bean("", "", "");
                if (mapItems.item(mappedItemsCnt).getNodeType() == Node.ELEMENT_NODE) {
                    Element mapItemElement = (Element) mapItems.item(mappedItemsCnt);
                    NodeList paramOneList = mapItemElement.getElementsByTagName("Param");
                    Element paramOne = (Element) paramOneList.item(0);
                    String variableType = paramOne.getAttribute("variabletype");
                    String paramOneValue = getCharacterDataFromElement(paramOne);
                    variables.setVariable_Name(paramOneValue);
                    variables.setVariable_Type(variableType);
                    NodeList paramTwoList = mapItemElement.getElementsByTagName("Param");
                    Element paramTwo = (Element) paramTwoList.item(1);
                    String paramTwoValue = getCharacterDataFromElement(paramTwo);
                    variables.setVariable_Mapped_ID(paramTwoValue);

                    NodeList paramThreeList = mapItemElement.getElementsByTagName("Param");
                    Element paramThree = (Element) paramThreeList.item(2);
                    String offlineVariable = getCharacterDataFromElement(paramThree);

                    variables.setOffline_Variable(Boolean.parseBoolean(offlineVariable));
                    List_Varibles.add(variables);
                }

            }
        }
        actionWithoutConditionBean.setList_Varibles(List_Varibles);

        if (actionGroupElement.getElementsByTagName("AdvanceManagement").getLength() != 0) {
            DataManagementOptions dataManagementOptions = new DataManagementOptions();
            Element dataManagementElement = (Element) actionGroupElement.getElementsByTagName("AdvanceManagement").item(0);
            if(dataManagementElement.getAttribute("Settings").contentEquals("Yes")){
                dataManagementOptions = DataCollection.getAdvancedSettings(dataManagementElement);
            }
           /* NodeList dataManagementNodes = dataManagementElement.getChildNodes();
            for (int i = 0; i < dataManagementNodes.getLength(); i++) {
                Node innerNode = dataManagementNodes.item(i);
                if (innerNode.getNodeType() == Node.ELEMENT_NODE) {
                    if (innerNode.getNodeName().trim().equalsIgnoreCase("EnableViewData")) {
                        dataManagementOptions.setEnableViewData(Boolean.parseBoolean(innerNode.getTextContent().trim()));
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("FetchData")) {
                        dataManagementOptions.setFetchData(innerNode.getTextContent().trim());
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("SkipIndexPage")) {
                        dataManagementOptions.setSkipIndexPage(Boolean.parseBoolean(innerNode.getTextContent().trim()));
                    }  else if (innerNode.getNodeName().trim().equalsIgnoreCase("DisplayColumns")) {
                        NodeList columnNodesList = innerNode.getChildNodes();
                        List<String> columnsList = new ArrayList<>();
                        for (int j = 0; j < columnNodesList.getLength(); j++) {
                            Node columnNode = columnNodesList.item(j);
                            if (columnNode.getNodeType() == Node.ELEMENT_NODE && columnNode.getNodeName().trim().equalsIgnoreCase("ColumnName")) {
                                columnsList.add(columnNode.getTextContent().trim());
                            }
                        }
                        dataManagementOptions.setDetailedPageColumns(columnsList);

                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("InputParameters")) {
                        dataManagementOptions.setFilterColumns(filterColumns(dataManagementElement));
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("OrderByColumns")) {
                       *//* OrderBy orderBy = new OrderBy();
                        NodeList columnNodesList = innerNode.getChildNodes();
                        List<String> columnsList = new ArrayList<>();
                        for (int j = 0; j <columnNodesList.getLength() ; j++) {
                            Node columnNode = columnNodesList.item(j);
                            if(columnNode.getNodeType()== Node.ELEMENT_NODE && columnNode.getNodeName().trim().equalsIgnoreCase("ColumnName")){
                                columnsList.add(columnNode.getTextContent().trim());
                            }
                        }
                        orderBy.setColumnsList(columnsList);
                        orderBy.setOrder(((Element)innerNode).getAttribute("order"));
                        dataManagementOptions.setIndexPageColumnsOrder(orderBy);*//*
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("LazyLoading")) {
                        dataManagementOptions.setLazyLoadingEnabled(Boolean.parseBoolean(innerNode.getTextContent().trim()));
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("ReportDisplayType")) {
                        if(innerNode.getTextContent()!=null && !innerNode.getTextContent().isEmpty() && !innerNode.getTextContent().equalsIgnoreCase("false")){
                        dataManagementOptions.setReportDisplayType(Integer.parseInt(innerNode.getTextContent().trim()));}
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("CaptionForAdd")) {
                        dataManagementOptions.setCaptionForAdd(innerNode.getTextContent().trim());
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("AllowOnlyOneRecordPerPost")) {
                        dataManagementOptions.setRecordInsertionType(innerNode.getTextContent().trim());
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("EnableEditData")) {
                        dataManagementOptions.setEnableEditData(Boolean.parseBoolean(innerNode.getTextContent().trim()));
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("EditColumns")) {
                        NodeList columnNodesList = innerNode.getChildNodes();
                        List<EditOrViewColumns> editOrViewColumnsList = new ArrayList<>();
                        for (int childCnt = 0; childCnt < columnNodesList.getLength(); childCnt++) {
                            EditOrViewColumns editOrViewColumns = new EditOrViewColumns();
                            Element settingFieldsElement = (Element) columnNodesList.item(childCnt);
                            if (settingFieldsElement.getNodeName().equals("ColumnName")) {
                                String TableColumnName = getCharacterDataFromElement(settingFieldsElement);
                                editOrViewColumns.setColumnName(TableColumnName);
                            }
                            editOrViewColumns.setColumnType(settingFieldsElement.getAttribute("type"));
                            editOrViewColumns.setFormName(settingFieldsElement.getAttribute("subformName"));
                            editOrViewColumnsList.add(editOrViewColumns);
                        }
                        dataManagementOptions.setEditColumns(editOrViewColumnsList);
                    } else if (innerNode.getNodeName().trim().equalsIgnoreCase("EnableDeleteData")) {
                        dataManagementOptions.setEnableDeleteData(Boolean.parseBoolean(innerNode.getTextContent().trim()));
                    }
                }
            }*/
            actionWithoutConditionBean.setDataManagementOptions(dataManagementOptions);
        }  if (actionGroupElement.getElementsByTagName("VisibilityManagement").getLength() != 0) {
            VisibilityManagementOptions visibilityManagementOptions = new VisibilityManagementOptions();
            Element advanceManagementElement = (Element) actionGroupElement.getElementsByTagName("VisibilityManagement").item(0);
            if(advanceManagementElement.getAttribute("Settings").contentEquals("Yes")){
                visibilityManagementOptions = DataCollection.getControlVisibility(advanceManagementElement);
            }
            actionWithoutConditionBean.setVisibilityManagementOptions(visibilityManagementOptions);
    }
    }

    public static void setShowMap(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Set ShowMap");
        NodeList SelectedControlList = actionGroupElement.getElementsByTagName("SelectedControl");
        Element SelectedControl = (Element) SelectedControlList.item(0);
        String SelectedControlValue = getCharacterDataFromElement(SelectedControl);
        actionWithoutConditionBean.setShowmap_Control(SelectedControlValue);

        NodeList MapIconList = actionGroupElement.getElementsByTagName("MapIcon");
        if(MapIconList!=null&&MapIconList.item(0)!=null) {
            Element markerElement = (Element) MapIconList.item(0);
            String marker = getCharacterDataFromElement(markerElement);
            actionWithoutConditionBean.setShowmap_Marker(marker);
        }

        NodeList MappedValuelList = actionGroupElement.getElementsByTagName("MappedValue");
        Element MappedValue = (Element) MappedValuelList.item(0);
        String MappedValueValue = getCharacterDataFromElement(MappedValue);
        actionWithoutConditionBean.setShowmap_MappedValueID(MappedValueValue);

        NodeList ActivitylList = actionGroupElement.getElementsByTagName("Activity");
        Element activityElement = (Element) ActivitylList.item(0);
        String activity = getCharacterDataFromElement(activityElement);
        actionWithoutConditionBean.setShowmap_Activity(activity);

        NodeList TypeOfViewlList = actionGroupElement.getElementsByTagName("TypeOfView");
        Element TypeOfView = (Element) TypeOfViewlList.item(0);
        String TypeOfViewValue = getCharacterDataFromElement(TypeOfView);
        actionWithoutConditionBean.setShowmap_PointViewType(TypeOfViewValue);

    }

    public static void setCalenderEvent(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Set Calender Event");
        NodeList SelectedControlList = actionGroupElement.getElementsByTagName("SelectedControl");
        Element SelectedControl = (Element) SelectedControlList.item(0);
        String SelectedControlValue = getCharacterDataFromElement(SelectedControl);
        actionWithoutConditionBean.setCalenderevent_Control(SelectedControlValue);

        NodeList CalendarTypeList = actionGroupElement.getElementsByTagName("CalendarType");
        Element EleCalendarType = (Element) CalendarTypeList.item(0);
        String CalendarTypeValue = getCharacterDataFromElement(EleCalendarType);
        actionWithoutConditionBean.setCalenderevent_Type(CalendarTypeValue);

        if (CalendarTypeValue.equalsIgnoreCase("Single")) {
            NodeList SingleDateList = actionGroupElement.getElementsByTagName("SingleDate");
            Element EleSingleDate = (Element) SingleDateList.item(0);
            String SingleDateValue = getCharacterDataFromElement(EleSingleDate);
            actionWithoutConditionBean.setCalenderevent_Single_Date(SingleDateValue);

        } else {
            NodeList StartDateList = actionGroupElement.getElementsByTagName("StartDate");
            Element EleStartDate = (Element) StartDateList.item(0);
            String StartDateValue = getCharacterDataFromElement(EleStartDate);
            actionWithoutConditionBean.setCalenderevent_Multi_StartDate(StartDateValue);

            NodeList EndDateList = actionGroupElement.getElementsByTagName("EndDate");
            Element EleEndDate = (Element) EndDateList.item(0);
            String EndDateValue = getCharacterDataFromElement(EleEndDate);
            actionWithoutConditionBean.setCalenderevent_Multi_EndDate(EndDateValue);
        }

        NodeList MessageList = actionGroupElement.getElementsByTagName("Message");
        Element EleMessage = (Element) MessageList.item(0);
        String MessageValue = getCharacterDataFromElement(EleMessage);
        actionWithoutConditionBean.setCalenderevent_Message(MessageValue);
    }

    public static void setDialNumber(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Dial number");

        NodeList List = actionGroupElement.getElementsByTagName("DialNumberValue");
        Element DialNumber = (Element) List.item(0);
        String DialNumberValue = getCharacterDataFromElement(DialNumber);
        actionWithoutConditionBean.setDialNumberValue(DialNumberValue);


    }

    public static void setTextToSpeech(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Text to speech");

        NodeList List = actionGroupElement.getElementsByTagName("VoiceTextValue");
        Element VoiceText = (Element) List.item(0);
        String VoiceTextValue = getCharacterDataFromElement(VoiceText);
        actionWithoutConditionBean.setVoiceTextValue(VoiceTextValue);


    }

    public static void setStartTracking(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Start live tracking");

        NodeList List = actionGroupElement.getElementsByTagName("TrackingControlName");
        Element TrackingControl = (Element) List.item(0);
        String TrackingControlName = getCharacterDataFromElement(TrackingControl);
        actionWithoutConditionBean.setLiveTrackingControl(TrackingControlName);


    }

    public static void setPauseTracking(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Pause live tracking");

        NodeList List = actionGroupElement.getElementsByTagName("TrackingControlName");
        Element TrackingControl = (Element) List.item(0);
        String TrackingControlName = getCharacterDataFromElement(TrackingControl);
        actionWithoutConditionBean.setLiveTrackingControl(TrackingControlName);

    }

    public static void setStopTracking(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Stop live tracking");

        NodeList List = actionGroupElement.getElementsByTagName("TrackingControlName");
        Element TrackingControl = (Element) List.item(0);
        String TrackingControlName = getCharacterDataFromElement(TrackingControl);
        actionWithoutConditionBean.setLiveTrackingControl(TrackingControlName);

    }

    private static String nodeToString(Node node) {
        StringWriter sw = new StringWriter();
        try {
            Transformer t = TransformerFactory.newInstance().newTransformer();
            t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
            t.setOutputProperty(OutputKeys.INDENT, "no");
            t.transform(new DOMSource(node), new StreamResult(sw));
        } catch (TransformerException e) {
            e.printStackTrace();
        }

        return sw.toString();
    }

    public static void setEventsMenu(NavMenuItem menu, Node ControlNode) {

        NodeList eventsList = ((Element) ControlNode).getElementsByTagName("Events").item(0).getChildNodes();
        // System.out.println("eventsList.getLength()-->"+eventsList.getLength());
        for (int eventCnt = 0; eventCnt < eventsList.getLength(); eventCnt++) {

            Element eventElement = (Element) eventsList.item(eventCnt);

            String actionType = eventElement.getAttribute("type");

            NodeList acionsList = eventElement.getElementsByTagName("Actions").item(0).getChildNodes();

            //System.out.println("acionsList.getLength()-->"+acionsList.getLength());

            Control_EventObject controlEventObject = new Control_EventObject();

            List<ActionWithCondition_Bean> actionWithConditionList = new ArrayList<ActionWithCondition_Bean>();
            List<ActionWithoutCondition_Bean> actionWithOutConditionList = new ArrayList<ActionWithoutCondition_Bean>();


            for (int actionCnt = 0; actionCnt < acionsList.getLength(); actionCnt++) {
                Element actionElement = (Element) acionsList.item(actionCnt);

                String condition = actionElement.getAttribute("condition");
                String priority = actionElement.getAttribute("priority");

                String actionName = actionElement.getAttribute("name");

                if (condition.equalsIgnoreCase("true")) {

                    ActionWithCondition_Bean actionWithCondition_Bean = new ActionWithCondition_Bean();

                    actionWithCondition_Bean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithCondition_Bean.setActionWithConditionName(actionName);

                    setActionWithCondition(actionElement, actionWithCondition_Bean);

                    actionWithConditionList.add(actionWithCondition_Bean);


                } else if (condition.equalsIgnoreCase("false")) {
                    ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();

                    actionWithoutConditionBean.setPositionInEvent(Integer.parseInt(priority));
                    actionWithoutConditionBean.setActionName(actionName);

                    setActionWithOutCondition(actionElement, actionWithoutConditionBean);

                    actionWithOutConditionList.add(actionWithoutConditionBean);
                }

            }


            controlEventObject.setActionWithConditionList(actionWithConditionList);
            controlEventObject.setActionWithOutConditionList(actionWithOutConditionList);

            if (actionType.equalsIgnoreCase("onClickEvent")) {
                menu.setOnClickEventObject(controlEventObject);
            }


        }

    }

    public static void setFocusEvent(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Set Focus");
        NodeList SelectedControlList = actionGroupElement.getElementsByTagName("SelectedControl");
        Element SelectedControl = (Element) SelectedControlList.item(0);
        String SelectedControlValue = getCharacterDataFromElement(SelectedControl);
        actionWithoutConditionBean.setSetfocus_controlId(SelectedControlValue);

        NodeList isSubformlist = actionGroupElement.getElementsByTagName("isSubform");
        Element EleisSubformType = (Element) isSubformlist.item(0);
        String isSubformTypeValue = getCharacterDataFromElement(EleisSubformType);
        actionWithoutConditionBean.setSetfocus_subform(Boolean.parseBoolean(isSubformTypeValue));

        if (Boolean.parseBoolean(isSubformTypeValue)) {
            NodeList SubformNameList = actionGroupElement.getElementsByTagName("SubformName");
            Element EleSubformName = (Element) SubformNameList.item(0);
            String SubformNameValue = getCharacterDataFromElement(EleSubformName);
            actionWithoutConditionBean.setSetfocus_SubformName(SubformNameValue);

            NodeList RowPositionTypeList = actionGroupElement.getElementsByTagName("RowPositionType");
            Element EleRowPositionType = (Element) RowPositionTypeList.item(0);
            String RowPositionType = getCharacterDataFromElement(EleRowPositionType);
            actionWithoutConditionBean.setSetfocus_subform_PositionType(RowPositionType);
            if (actionWithoutConditionBean.getSetfocus_subform_PositionType().equalsIgnoreCase("Dynamic")) {
                NodeList PositionExpressionList = actionGroupElement.getElementsByTagName("PositionExpression");
                Element ElePositionExpression = (Element) PositionExpressionList.item(0);
                String PositionExpression = getCharacterDataFromElement(ElePositionExpression);
                actionWithoutConditionBean.setSetfocus_Expression(PositionExpression);
            }
        }


    }

    public static void setCallWeb(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Call Web");

        NodeList URLList = actionGroupElement.getElementsByTagName("URL");
        Element SelectedControl = (Element) URLList.item(0);
        String urlValue = getCharacterDataFromElement(SelectedControl);
        actionWithoutConditionBean.setCallWeb_Link(urlValue);

        NodeList TypeOfParameterList = actionGroupElement.getElementsByTagName("TypeOfParameter");
        Element TypeOfParameterControl = (Element) TypeOfParameterList.item(0);
        String TypeOfParameter = getCharacterDataFromElement(TypeOfParameterControl);
        actionWithoutConditionBean.setCallWeb_LinkType(TypeOfParameter);

        if (actionGroupElement.getElementsByTagName("CloseParent").getLength() != 0) {
            Element closeParent = (Element) actionGroupElement.getElementsByTagName("CloseParent").item(0);
            actionWithoutConditionBean.setCloseParentEnabled(!closeParent.getTextContent().contentEquals("false"));
        }
        if (actionGroupElement.getElementsByTagName("CloseAll").getLength() != 0) {
            Element closeAll = (Element) actionGroupElement.getElementsByTagName("CloseAll").item(0);
            actionWithoutConditionBean.setCloseAllFormsEnabled(Boolean.parseBoolean(closeAll.getTextContent()));
        }
        if (actionGroupElement.getElementsByTagName("KeepSession").getLength() != 0) {
            Element keepSession = (Element) actionGroupElement.getElementsByTagName("KeepSession").item(0);
            actionWithoutConditionBean.setKeepSessionEnabled(Boolean.parseBoolean(keepSession.getTextContent()));
        }
        if (actionGroupElement.getElementsByTagName("GoToHome").getLength() != 0) {
            Element goToHome = (Element) actionGroupElement.getElementsByTagName("GoToHome").item(0);
            actionWithoutConditionBean.setGoToHomeEnabled(Boolean.parseBoolean(goToHome.getTextContent()));
        }

        List<CallForm_ParamMapping_Bean> List_CallformParams = new ArrayList<>();

        if (TypeOfParameter.equalsIgnoreCase("Query String")) {

            Element Delimiter = (Element) actionGroupElement.getElementsByTagName("QueryStrings").item(0);

            NodeList ParameterList = Delimiter.getElementsByTagName("Parameter");
            for (int i = 0; i < ParameterList.getLength(); i++) {

                CallForm_ParamMapping_Bean Delimiter_param = new CallForm_ParamMapping_Bean();
                Delimiter_param.setParam_Name(getCharacterDataFromElement(((Element) ParameterList.item(i))));

                String Value = ((Element) ParameterList.item(i)).getAttribute("Key");
                Delimiter_param.setParam_GlobalObj_MappedID(Value);

                List_CallformParams.add(Delimiter_param);
            }
            actionWithoutConditionBean.setCallWeb_Params(List_CallformParams);
        } else if (TypeOfParameter.equalsIgnoreCase("Delimiter")) {
            Element Delimiter = (Element) actionGroupElement.getElementsByTagName("Delimiter").item(0);

            NodeList ParameterList = Delimiter.getElementsByTagName("Parameter");
            for (int i = 0; i < ParameterList.getLength(); i++) {
                CallForm_ParamMapping_Bean Delimiter_param = new CallForm_ParamMapping_Bean();
                Delimiter_param.setParam_GlobalObj_MappedID(getCharacterDataFromElement(((Element) ParameterList.item(i))));
                List_CallformParams.add(Delimiter_param);
            }
            actionWithoutConditionBean.setCallWeb_Params(List_CallformParams);
        }


    }

    public static void setSelection(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        List<SetSelectionControl_Bean> setSelectionControl_beanList = new ArrayList<>();
        actionWithoutConditionBean.setActionType("Set Selection");
        if (actionGroupElement.getElementsByTagName("SetSelectionControls").getLength() > 0) {
            NodeList setSelectionControlsNode = actionGroupElement.getElementsByTagName("SetSelectionControls");
            Element setSelectionControlsElement = (Element) setSelectionControlsNode.item(0);
            NodeList setSelectionControlNodeList = setSelectionControlsElement.getElementsByTagName("SetSelectionControl");
            for (int i = 0; i < setSelectionControlNodeList.getLength(); i++) {
                Element selectionControlElement = (Element) setSelectionControlNodeList.item(i);
                SetSelectionControl_Bean setSelectionControl_bean = new SetSelectionControl_Bean();
                setSelectionControl_bean.setControlName(selectionControlElement.getAttribute("controlName"));
                setSelectionControl_bean.setControlType(selectionControlElement.getAttribute("controlType"));
                if (setSelectionControl_bean.getControlType().contentEquals("Multi")) {
                    setSelectionControl_bean.setParentControlType(selectionControlElement.getAttribute("multiValueControlType"));
                    setSelectionControl_bean.setParentControlName(selectionControlElement.getAttribute("multiValueControlName"));
                }
                NodeList selectionValueList = selectionControlElement.getElementsByTagName("SelectionValue");
               // for (int j = 0; j < selectionValueList.getLength(); j++) {
                    Element selectionValueElement = (Element) selectionValueList.item(0);

                    if (selectionValueElement.getAttribute("expression").contentEquals("true")) {
                        setSelectionControl_bean.setExpressionExists(true);
                        if (selectionValueElement.getAttribute("expressionType").contentEquals("Value/Fields/Data")) {
                            setSelectionControl_bean.setGlobalValueSelected(true);
                            setSelectionControl_bean.setAdvancedValueSelected(false);
                        } else if (selectionValueElement.getAttribute("expressionType").contentEquals("Advanced")) {
                            setSelectionControl_bean.setGlobalValueSelected(false);
                            setSelectionControl_bean.setAdvancedValueSelected(true);
                        }
                    } else {
                        setSelectionControl_bean.setExpressionExists(false);
                    }
                    NodeList itemNodesList = selectionValueElement.getElementsByTagName("Item");
                    if(itemNodesList!=null){
                        if(itemNodesList.getLength()==1){
                            Element itemElement = (Element) itemNodesList.item(0);
                            setSelectionControl_bean.setSelectedId(itemElement.getTextContent());
                        }else if(itemNodesList.getLength()>1){
                            String value="";
                            for (int k = 0; k <itemNodesList.getLength() ; k++) {
                                Element itemElement = (Element) itemNodesList.item(k);
                                if(k==0) {
                                    value = itemElement.getTextContent();
                                }else{
                                    value = value+","+itemElement.getTextContent();
                                }


                            }
                            setSelectionControl_bean.setSelectedId(value);
                        }
                        setSelectionControl_beanList.add(setSelectionControl_bean);
                    }
                    //setSelectionControl_bean.setSelectedId(selectionValueElement.getTextContent());


               // }

                //setSelectionControl_beanList.add(setSelectionControl_bean);

            }
        }

        actionWithoutConditionBean.setSetSelectionControl_beans(setSelectionControl_beanList);

    }

    private static String getTableSettingsType(String tableSettingsType) {
        String strTableSettingsType = null;
        switch (tableSettingsType) {
            case "new":
                strTableSettingsType = "Create New Table";
                break;
            case "existing":
                strTableSettingsType = "Map existing table";
                break;
            case "none":
                strTableSettingsType = "None";
                break;
        }

        return strTableSettingsType;

    }

    private static String getMapExistingType(String mapExistingType) {
        String strmapExistingType = null;
        switch (mapExistingType) {
            case "insert":
                strmapExistingType = "Insert";
                break;
            case "update":
                strmapExistingType = "Update";
                break;
            case "updateOrInsert":
                strmapExistingType = "Insert or Update";
                break;
        }

        return strmapExistingType;

    }

    public static String getBaseQueryName(String workFlowXMLString) {
        String baseQueryName = "";
        Document doc;
        Element mainElement;
        try {
            String response = workFlowXMLString.replaceAll("[^\\x20-\\x7e]", "");
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;

            builder = factory.newDocumentBuilder();

            doc = builder.parse(new InputSource(new StringReader(response)));
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getChildNodes().item(0).getChildNodes();
            baseQueryName = ((Element) doc.getChildNodes().item(0)).getAttribute("queryBase");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baseQueryName;
    }

    public static void setSetProperties(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType(actionGroupElement.getAttribute("type"));

        NodeList paramOneList = actionGroupElement.getElementsByTagName("SelectControlName");
        Element paramOne = (Element) paramOneList.item(0);

        String SelectControlName = getCharacterDataFromElement(paramOne);
        actionWithoutConditionBean.setProp_ControlName(SelectControlName);

        NodeList ChildList = actionGroupElement.getChildNodes();

        for (int FieldsCnt = 0; FieldsCnt < ChildList.getLength(); FieldsCnt++) {
            Element ItemElement = (Element) ChildList.item(FieldsCnt);
            if (ItemElement.getNodeName().equalsIgnoreCase("DisplayName")) {
                actionWithoutConditionBean.setProp_Displayname(true);
                actionWithoutConditionBean.setProp_Displayname_value(getCharacterDataFromElement(ItemElement));

            } else if (ItemElement.getNodeName().equalsIgnoreCase("Hint")) {
                actionWithoutConditionBean.setProp_hint(true);
                actionWithoutConditionBean.setProp_hint_Value(getCharacterDataFromElement(ItemElement));
            } else if (ItemElement.getNodeName().equalsIgnoreCase("FilePath")) {
                actionWithoutConditionBean.setProp_filePath(true);
                actionWithoutConditionBean.setProp_filePath_Type(ItemElement.getAttribute("FilePathType"));
                actionWithoutConditionBean.setProp_filePath_TypeValue(getCharacterDataFromElement(ItemElement));
            } else if (ItemElement.getNodeName().equalsIgnoreCase("Hint")) {
                actionWithoutConditionBean.setProp_multiImage_Alignment(true);
                actionWithoutConditionBean.setProp_multiImage_AlignmentType(getCharacterDataFromElement(ItemElement));
            } else if (ItemElement.getNodeName().equalsIgnoreCase("HideDisplayName")) {
                actionWithoutConditionBean.setProp_hideDisplayName(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("HTMLViewer")) {
                actionWithoutConditionBean.setProp_enableHTMLViewer(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("MakeItSection")) {
                actionWithoutConditionBean.setProp_makeItasSection(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("DisplayBarCode")) {
                actionWithoutConditionBean.setProp_displayasBarCode(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("DisplayQRCode")) {
                actionWithoutConditionBean.setProp_displayasQRCode(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("UNICode")) {
                actionWithoutConditionBean.setProp_enableUNICode(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("MaskCharecters")) {
                actionWithoutConditionBean.setProp_maskcharacters(true);
            } else if (ItemElement.getNodeName().equalsIgnoreCase("StrikeText")) {
                actionWithoutConditionBean.setProp_strikeText(true);
            }

        }


    }

    private static void setPropertyAction(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType("Set Properties");
        SetProperty setPropertyActionObject = new SetProperty();
        Element setPropertyElement = (Element) actionGroupElement.getElementsByTagName("SetProperty").item(0);
        setPropertyActionObject.setType(setPropertyElement.getAttribute("type"));
        setPropertyActionObject.setControlName(setPropertyElement.getAttribute("controlName"));
        setPropertyActionObject.setControlType(setPropertyElement.getAttribute("controlTYpe"));
        if (setPropertyActionObject.getType().contentEquals(AppConstants.SET_PROPERTY_TYPE_SUB_CONTROL)) {
            setPropertyActionObject.setParentControlName(setPropertyElement.getAttribute("parentControlName"));
        }
        List<Param> propertieslist = new ArrayList<>();
        NodeList paramsList = setPropertyElement.getChildNodes();

        for (int i = 0; i < paramsList.getLength(); i++) {
            Param property = new Param();
            Node Opton = paramsList.item(i);
            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                Element eElement = (Element) Opton;
                property.setText(eElement.getNodeValue());
                if (eElement.hasAttribute("type")) {
                    property.setType(eElement.getAttribute("type"));
                }
                if (eElement.hasAttribute("name")) {
                    property.setName(eElement.getAttribute("name"));

                }
                if (eElement.hasAttribute("value")) {
                    property.setValue(eElement.getAttribute("value"));

                }
                property.setText(getCharacterDataFromElement(eElement));
            }
            propertieslist.add(property);

        }

        setPropertyActionObject.setPropertiesList(propertieslist);
        actionWithoutConditionBean.setSetPropertyActionObject(setPropertyActionObject);

    }

    public static void setOpenWhatsApp(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        List<EnabledControl_Bean> enabledControl_beanList = new ArrayList<>();
        actionWithoutConditionBean.setActionType("Open Whatsapp");
        NodeList childList = actionGroupElement.getChildNodes();
        Element outputParamsElement = (Element) childList.item(0);

        NodeList outParametersList = outputParamsElement.getChildNodes();

        for (int i = 0; i < outParametersList.getLength(); i++) {
            EnabledControl_Bean enabledControl_bean = new EnabledControl_Bean();
            Element paramElement = (Element) outParametersList.item(i);
            boolean expressionExists = Boolean.parseBoolean(paramElement.getAttribute("expression"));
            enabledControl_bean.setControlName(paramElement.getAttribute("controlName"));
            enabledControl_bean.setExpressionExists(expressionExists);
            NodeList paramOneList = paramElement.getElementsByTagName("SelectionValue");
            Element paramOne = (Element) paramOneList.item(0);
            String paramOneValue = getCharacterDataFromElement(paramOne);
            enabledControl_bean.setSelectedValue(paramOneValue);
            if (!expressionExists) {
                NodeList paramtwoList = paramElement.getElementsByTagName("ValueFieldsMappedType");
                Element paramtwo = (Element) paramtwoList.item(0);
                String paramtwoValue = getCharacterDataFromElement(paramtwo);
                enabledControl_bean.setValueFieldsMappedType(paramtwoValue);

                NodeList paramThreeList = paramElement.getElementsByTagName("ValueFieldsMappedId");
                Element paramThree = (Element) paramThreeList.item(0);
                String paramThreeValue = getCharacterDataFromElement(paramThree);
                enabledControl_bean.setValueFieldsMappedId(paramThreeValue);
            }
            enabledControl_beanList.add(enabledControl_bean);

        }

        actionWithoutConditionBean.setEnabledControl_beanList(enabledControl_beanList);


    }

    public static void setOpenEmail(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        List<EnabledControl_Bean> enabledControl_beanList = new ArrayList<>();
        actionWithoutConditionBean.setActionType("Open Email");
        NodeList childList = actionGroupElement.getChildNodes();
        Element outputParamsElement = (Element) childList.item(0);

        NodeList outParametersList = outputParamsElement.getChildNodes();

        for (int i = 0; i < outParametersList.getLength(); i++) {
            EnabledControl_Bean enabledControl_bean = new EnabledControl_Bean();
            Element paramElement = (Element) outParametersList.item(i);
            boolean expressionExists = Boolean.parseBoolean(paramElement.getAttribute("expression"));
            enabledControl_bean.setControlName(paramElement.getAttribute("controlName"));
            enabledControl_bean.setExpressionExists(expressionExists);
            NodeList paramOneList = paramElement.getElementsByTagName("SelectionValue");
            Element paramOne = (Element) paramOneList.item(0);
            String paramOneValue = getCharacterDataFromElement(paramOne);
            enabledControl_bean.setSelectedValue(paramOneValue);
            if (!expressionExists) {
                NodeList paramtwoList = paramElement.getElementsByTagName("ValueFieldsMappedType");
                Element paramtwo = (Element) paramtwoList.item(0);
                String paramtwoValue = getCharacterDataFromElement(paramtwo);
                enabledControl_bean.setValueFieldsMappedType(paramtwoValue);

                NodeList paramThreeList = paramElement.getElementsByTagName("ValueFieldsMappedId");
                Element paramThree = (Element) paramThreeList.item(0);
                String paramThreeValue = getCharacterDataFromElement(paramThree);
                enabledControl_bean.setValueFieldsMappedId(paramThreeValue);
            }
            enabledControl_beanList.add(enabledControl_bean);

        }

        actionWithoutConditionBean.setEnabledControl_beanList(enabledControl_beanList);


    }

    public static void setOpenGoogleMaps(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        List<EnabledControl_Bean> enabledControl_beanList = new ArrayList<>();
        actionWithoutConditionBean.setActionType("Open Google Maps");
        NodeList childList = actionGroupElement.getChildNodes();
        Element outputParamsElement = (Element) childList.item(0);

        NodeList outParametersList = outputParamsElement.getChildNodes();

        for (int i = 0; i < outParametersList.getLength(); i++) {
            EnabledControl_Bean enabledControl_bean = new EnabledControl_Bean();
            Element paramElement = (Element) outParametersList.item(i);
            boolean expressionExists = Boolean.parseBoolean(paramElement.getAttribute("expression"));
            enabledControl_bean.setControlName(paramElement.getAttribute("controlName"));
            enabledControl_bean.setExpressionExists(expressionExists);
            NodeList paramOneList = paramElement.getElementsByTagName("SelectionValue");
            Element paramOne = (Element) paramOneList.item(0);
            String paramOneValue = getCharacterDataFromElement(paramOne);
            enabledControl_bean.setSelectedValue(paramOneValue);
            if (!expressionExists) {
                NodeList paramtwoList = paramElement.getElementsByTagName("ValueFieldsMappedType");
                Element paramtwo = (Element) paramtwoList.item(0);
                String paramtwoValue = getCharacterDataFromElement(paramtwo);
                enabledControl_bean.setValueFieldsMappedType(paramtwoValue);

                NodeList paramThreeList = paramElement.getElementsByTagName("ValueFieldsMappedId");
                Element paramThree = (Element) paramThreeList.item(0);
                String paramThreeValue = getCharacterDataFromElement(paramThree);
                enabledControl_bean.setValueFieldsMappedId(paramThreeValue);
            }
            enabledControl_beanList.add(enabledControl_bean);

        }

        actionWithoutConditionBean.setEnabledControl_beanList(enabledControl_beanList);


    }

    public static void setDownloadFile(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        List<EnabledControl_Bean> enabledControl_beanList = new ArrayList<>();
        actionWithoutConditionBean.setActionType("Download File");
        NodeList childList = actionGroupElement.getChildNodes();
        Element outputParamsElement = (Element) childList.item(0);

        NodeList outParametersList = outputParamsElement.getChildNodes();

        for (int i = 0; i < outParametersList.getLength(); i++) {
            EnabledControl_Bean enabledControl_bean = new EnabledControl_Bean();
            Element paramElement = (Element) outParametersList.item(i);
            boolean expressionExists = Boolean.parseBoolean(paramElement.getAttribute("expression"));
            enabledControl_bean.setControlName(paramElement.getAttribute("controlName"));
            enabledControl_bean.setExpressionExists(expressionExists);
            NodeList paramOneList = paramElement.getElementsByTagName("SelectionValue");
            Element paramOne = (Element) paramOneList.item(0);
            String paramOneValue = getCharacterDataFromElement(paramOne);
            enabledControl_bean.setSelectedValue(paramOneValue);
            if (!expressionExists) {
                NodeList paramtwoList = paramElement.getElementsByTagName("ValueFieldsMappedType");
                Element paramtwo = (Element) paramtwoList.item(0);
                String paramtwoValue = getCharacterDataFromElement(paramtwo);
                enabledControl_bean.setValueFieldsMappedType(paramtwoValue);

                NodeList paramThreeList = paramElement.getElementsByTagName("ValueFieldsMappedId");
                Element paramThree = (Element) paramThreeList.item(0);
                String paramThreeValue = getCharacterDataFromElement(paramThree);
                enabledControl_bean.setValueFieldsMappedId(paramThreeValue);
            }
            enabledControl_beanList.add(enabledControl_bean);

        }

        actionWithoutConditionBean.setEnabledControl_beanList(enabledControl_beanList);


    }

  /*  public static void addNavigationOptions(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        if (actionGroupElement.getElementsByTagName("CloseParent").getLength() != 0) {
            Element closeParent = (Element) actionGroupElement.getElementsByTagName("CloseParent").item(0);
            actionWithoutConditionBean.setCloseParentEnabled(!closeParent.getTextContent().contentEquals("false"));
        }
        if (actionGroupElement.getElementsByTagName("CloseAll").getLength() != 0) {
            Element closeAll = (Element) actionGroupElement.getElementsByTagName("CloseAll").item(0);
            actionWithoutConditionBean.setCloseAllFormsEnabled(Boolean.parseBoolean(closeAll.getTextContent()));
        }
    }*/

    /*XML To Data collectionObject*/
    private static String response ;
    public DataCollectionObject XML_To_DataCollectionObject(String XMLString) {

        System.out.println("==========Step XML_To_DataCollectionObject============");
        DataCollectionObject AppObject = new DataCollectionObject();
//        AppConstants.subformWithUI = new ArrayList<>();
//        HashMap<String,String>  controlPositionInUI = new HashMap<>();
        try {
            List<ControlObject> Controls_list = new ArrayList<ControlObject>();
            List<FilterSubFormColumns> filterSubFormColumnsList = new ArrayList<FilterSubFormColumns>();
            AppObject.setControls_list(Controls_list);

//            String response = XMLString.replaceAll("[^\\x20-\\x7e]", "");
            response = XMLString;
            if (response.startsWith("N")) {
                response = response.substring(1);
            }
            response = response.replaceAll("&(?!amp;)", "&amp;");
            response = response.replaceAll("CNAME", "CDATA");
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;
            builder = factory.newDocumentBuilder();
            doc = builder.parse(new InputSource(new StringReader(response)));
            doc.getDocumentElement().normalize();

            NodeList nList = doc.getChildNodes().item(0).getChildNodes();
            AppObject.setApp_Name(((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            AppObject.setApp_OnPreLoadEvent(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("onPreLoadEvent")));
            AppObject.setApp_OnLoadEvent(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("onLoadEvent")));
            AppObject.setApp_OnSubmitEvent(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("onSubmitEvent")));
            AppObject.setApp_Theam(((Element) doc.getChildNodes().item(0)).getAttribute("theme"));
            AppObject.setApp_Mode(((Element) doc.getChildNodes().item(0)).getAttribute("mode"));
            // AppObject.setApp_Mode("Online");
            AppObject.setEnableClearButton(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("clearButton")));
            AppObject.setDefaultActionForSubmit(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("submitDefalutAction")));
            AppObject.setSubmit_ButtonExitType(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonExitType"));
            AppObject.setSubmit_ButtonName(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonName"));
            AppObject.setSubmit_ButtonColor(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonColor"));
            AppObject.setSubmit_ButtonFontSize(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonFontSize"));
//            AppObject.setUIFormNeeded(false);
            AppObject.setUIFormNeeded(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("isUIFormNeeded")));
            AppObject.setApp_Title(((Element) doc.getChildNodes().item(0)).getAttribute("appHeading"));
            AppObject.setCaptchaRequired(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("CaptchaRequired")));
            Log.d("XMLHELPER_DCOName", ((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            Log.d("XMLHELPER_DCOTheme", ((Element) doc.getChildNodes().item(0)).getAttribute("theme"));
            Log.d("XMLHELPER_DCOMode", ((Element) doc.getChildNodes().item(0)).getAttribute("mode"));
            Log.d("XMLHELPER_DCONLoadEvent", ((Element) doc.getChildNodes().item(0)).getAttribute("onLoadEvent"));
            Log.d("XMLHELPER_DCOONSubEvent", ((Element) doc.getChildNodes().item(0)).getAttribute("onSubmitEvent"));
            themeNo = ((Element) doc.getChildNodes().item(0)).getAttribute("theme");
            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
//                    Log.d("ElementNameMain",nNode.getNodeName().trim());
                    if (nNode.getNodeName().trim().equalsIgnoreCase("FormControls")) {
                        NodeList ControleNodeList = nNode.getChildNodes();
                        List<String> ControlTypesList = new ArrayList<String>();
                        List<String> IndexColums = new ArrayList<String>();

                        for (int j = 0; j < ControleNodeList.getLength(); j++) {
                            Node ControlNode = ControleNodeList.item(j);

                            if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {

                                if (!ControlNode.getNodeName().contentEquals("RTL")) {
                                    ControlObject controlObject = new ControlObject();
                                    controlObject.setControlCategory(ControlNode.getNodeName());
                                    controlObject.setControlTitle(ControlNode.getNodeName());
                                    controlObject.setControlID(((Element) ControlNode).getAttribute("controlName").trim());
                                    controlObject.setControlType(ControlNode.getNodeName());
                                    controlObject.setDisplayName(((Element) ControlNode).getAttribute("displayName").trim());
                                    controlObject.setControlName(((Element) ControlNode).getAttribute("controlName").trim());
                                    controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                    controlObject.setHint(((Element) ControlNode).getAttribute("hint").trim());

                                    Log.d("XMLHELPER_DisplayName", ((Element) ControlNode).getAttribute("displayName").trim());
                                    Log.d("XMLHELPER_DefaultValue", ((Element) ControlNode).getAttribute("defaultValue").trim());
                                    Log.d("XMLHELPER_HintDC", ((Element) ControlNode).getAttribute("hint").trim());
                                    /*EditStart*/
                                    ControlTypesList.add(ControlNode.getNodeName());
                                    DataCollectionObject.Control_Types.put(((Element) ControlNode).getAttribute("controlName").trim(), ControlNode.getNodeName());
                                    IndexColums.add(((Element) ControlNode).getAttribute("controlName").trim());
                                    /*EditEnd*/
                                    switch (ControlNode.getNodeName().trim()) {

                                        case AppConstants.CONTROL_TYPE_TEXT_INPUT:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                                        AppConstants.ValidatorsForControls(ControlNode,controlObject);
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (validatorsList != null && validatorsList.getLength() > 0) {
                                                    for (int k = 0; k < validatorsList.getLength(); k++) {
                                                        Node Opton = validatorsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setUniqueField(true);
                                                                Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMaxCharacters(true);
                                                                controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMinCharacters(true);
                                                                controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
//
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromBarcode(true);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromQRCode(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                                                controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setGoogleLocationSearch(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentLocation")) {
                                                                controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setCurrentLocation(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("VoiceInput")) {
                                                                controlObject.setVoiceText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setVoiceText(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("AllowOnlyAlphabets")) {
                                                                controlObject.setAllowOnlyAlphabets(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);

                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_NUMERIC_INPUT:
//
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList numericValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (numericValidatorsList != null && numericValidatorsList.getLength() > 0) {
                                                    for (int k = 0; k < numericValidatorsList.getLength(); k++) {
                                                        Node Opton = numericValidatorsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                                Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setUniqueField(true);
                                                                controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                                                Log.d("XMLMaxValue", Opton.getChildNodes().item(2).getTextContent().trim());
                                                                Log.d("XMLMaxValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMaxValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableUpperLimit(true);
                                                                controlObject.setUpperLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setUpperLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                                                Log.d("XMLMinValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMinValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

//
                                                                controlObject.setEnableLowerLimit(true);
                                                                controlObject.setLowerLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setLowerLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                                                Log.d("XMLCapValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCapValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableCappingDigits(true);
                                                                controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList numberOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < numberOptonsList.getLength(); k++) {
                                                    Node Opton = numberOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromBarcode(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromQRCode(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_PHONE:


                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList phoneValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (phoneValidatorsList != null && phoneValidatorsList.getLength() > 0) {
                                                    for (int p = 0; p < phoneValidatorsList.getLength(); p++) {
                                                        Node Opton = phoneValidatorsList.item(p);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                                Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setUniqueField(true);
                                                                controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableCappingDigits(true);
                                                                controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList phoneOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < phoneOptonsList.getLength(); k++) {
                                                    Node Opton = phoneOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_EMAIL:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {

                                                NodeList emailValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (emailValidatorsList != null && emailValidatorsList.getLength() > 0) {
                                                    for (int e = 0; e < emailValidatorsList.getLength(); e++) {
                                                        Node Opton = emailValidatorsList.item(e);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                                Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setUniqueField(true);
                                                                controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList EmailOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < EmailOptonsList.getLength(); k++) {
                                                    Node Opton = EmailOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")
                                                        || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_LARGE_INPUT:

                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {

                                                NodeList largeInputValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (largeInputValidatorsList != null && largeInputValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < largeInputValidatorsList.getLength(); li++) {
                                                        Node Opton = largeInputValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                                Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setUniqueField(true);
                                                                controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMaxCharacters(true);
                                                                controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMinCharacters(true);
                                                                controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList largeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < largeOptonsList.getLength(); k++) {
                                                    Node Opton = largeOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLEditor")) {
                                                            controlObject.setHtmlEditorEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                                            controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_CAMERA:


                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList cameraValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (cameraValidatorsList != null && cameraValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < cameraValidatorsList.getLength(); li++) {
                                                        Node Opton = cameraValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxSize")) {
                                                                Log.d("XMLCamMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCamMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMaxUploadSize(true);
                                                                controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minSize")) {
                                                                Log.d("XMLCamMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCamMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMinUploadSize(true);
                                                                controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList cameraOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < cameraOptionsList.getLength(); k++) {
                                                    Node Opton = cameraOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("AspectRatio")) {
                                                            controlObject.setEnableAspectRatio(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageGPS")) {
                                                            controlObject.setEnableImageWithGps(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableZoomControl")) {
                                                            controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setZoomControl(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableFlash")) {
                                                            controlObject.setFlash(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setFlash(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FilePhoto")) {
//                                                        controlObject.setEnableFilePhoto(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableFilePhoto(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("fileUpload")) {
                                                            controlObject.setCaptureFromFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Capture")) {
                                                            controlObject.setCaptureFromCamera(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("CaptureOrientation")) {
                                                            controlObject.setCaptureOrientation(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_FILE_BROWSING:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {

                                                NodeList fileBrowserValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (fileBrowserValidatorsList != null && fileBrowserValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < fileBrowserValidatorsList.getLength(); li++) {
                                                        Node Opton = fileBrowserValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLFbMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("FbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("extensionCheck")) {
                                                                Log.d("XMLFBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableExtensions(true);
                                                                String extensions = eElement.getElementsByTagName("Param").item(1).getTextContent();
                                                                List<String> names = new ArrayList<>();
                                                                names.addAll(Arrays.asList(extensions.split("\\$")));
                                                                controlObject.setExtensionsListNames(names);
                                                                controlObject.setFileExtensionError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("FbExtensionCheck", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("maxUpload")) {
                                                                Log.d("XMLFileMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLFileMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMaxUploadSize(true);
                                                                controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("minUpload")) {
                                                                Log.d("XMLFileMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLFileMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableMinUploadSize(true);
                                                                controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList FileuploadOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < FileuploadOptonsList.getLength(); k++) {
                                                    Node Opton = FileuploadOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ScanEnabled")) {
                                                            controlObject.setEnableScan(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_CALENDER:

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                                                controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                                            }
                                            if (((Element) ControlNode).hasAttribute("defaultValue")) {
                                                controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                            }
                                            if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                                                controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                                            }
                                            if (((Element) ControlNode).hasAttribute("defaultValue")) {
                                                controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                            }
                                            if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                                                controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                                            }
                                            if (((Element) ControlNode).hasAttribute("defaultValue")) {
                                                controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                                        Node Opton = calendarValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenDates")) {
                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableBetweenStartAndEndDate(true);
                                                                controlObject.setStartDate(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setEndDate(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                                controlObject.setBetweenStartAndEndDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("preDate")) {

                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setEnableBeforeCurrentDate(true);
                                                                controlObject.setBeforeCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("postDate")) {

                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableAfterCurrentDate(true);
                                                                controlObject.setAfterCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                                    Node Opton = DateOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("GetYear")) {
                                                            controlObject.setGetYearFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetMonth")) {
                                                            controlObject.setGetMonthFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetMonthFromSelection(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDay")) {
                                                            controlObject.setGetDayFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDayFromSelection(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDate")) {
                                                            controlObject.setGetDateFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);

                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_CHECKBOX:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            //ValueType
                                            String valueType=((Element) ControlNode).getAttribute("ValueType").trim();
                                            controlObject.setCheckbox_ValueType(valueType);
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList checkBoxValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (checkBoxValidatorsList != null && checkBoxValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < checkBoxValidatorsList.getLength(); li++) {
                                                        Node Opton = checkBoxValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLCBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("CbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList CheckboxOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < CheckboxOptonsList.getLength(); k++) {
                                                    Node Opton = CheckboxOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                            controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                            controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            if(valueType.equals("Value")){
                                                NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                                                setItems(CheckboxItemsList, controlObject);
                                            }else if(valueType.equals("Boolean")){
                                                String checkedValue=((Element) ControlNode).getAttribute("CheckedValue").trim();
                                                String unCheckedValue=((Element) ControlNode).getAttribute("unCheckedValue").trim();
                                                controlObject.setCheckbox_CheckedValue(checkedValue);
                                                controlObject.setCheckbox_unCheckedValue(unCheckedValue);
                                            }
//                                        List<String> cbItems = new ArrayList<>();

                                        /* for (int l = 0; l < CheckboxItemsList.getLength(); l++) {
                                            Node Opton1 = CheckboxItemsList.item(l);

                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                    cbItems.add(Opton1.getTextContent().trim());
                                                }
                                            }
                                        }

                                        controlObject.setItems(cbItems);*/
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_RADIO_BUTTON:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList radioButtonValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (radioButtonValidatorsList != null && radioButtonValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < radioButtonValidatorsList.getLength(); li++) {
                                                        Node Opton = radioButtonValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLRBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("RBUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList RadioOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < RadioOptonsList.getLength(); k++) {
                                                    Node Opton = RadioOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                            controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                            controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Horizontal")) {
                                                            controlObject.setEnableHorizontalAlignment(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();

                                            setItems(RBItemsList, controlObject);
                                         /*List<String> rbItems = new ArrayList<>();
                                        List<Item> rbItemsList = new ArrayList<>();
                                       for (int l = 0; l < RBItemsList.getLength(); l++) {
                                            Node Opton1 = RBItemsList.item(l);

                                            Item item = new Item();
                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                    rbItems.add(Opton1.getTextContent().trim());
                                                    item.setId(((Element) Opton1).getAttribute("id"));
                                                    item.setValue(Opton1.getTextContent().trim());

                                                    rbItemsList.add(item);

                                                }
                                            }
                                        }

                                        controlObject.setItems(rbItems);
                                        controlObject.setItemsList(rbItemsList);*/
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_DROP_DOWN:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList dropDownValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (dropDownValidatorsList != null && dropDownValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < dropDownValidatorsList.getLength(); li++) {
                                                        Node Opton = dropDownValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLDDMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("DDUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList DropdownOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < DropdownOptonsList.getLength(); k++) {
                                                    Node Opton = DropdownOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                            controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("chronologicalOrder")) {
                                                            controlObject.setEnableSortByChronologicalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ascending")) {
                                                            controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("descending")) {
                                                            controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                            controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }

                                            List<String> ddItems = new ArrayList<>();
                                            NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                                            setItems(DDItemsList, controlObject);
                                    /*    for (int l = 0; l < DDItemsList.getLength(); l++) {
                                            Node Opton1 = DDItemsList.item(l);

                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                    ddItems.add(Opton1.getTextContent().trim());
                                                }
                                            }
                                        }

                                        controlObject.setItems(ddItems);*/
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_CHECK_LIST:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList checkListValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (checkListValidatorsList != null && checkListValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < checkListValidatorsList.getLength(); li++) {
                                                        Node Opton = checkListValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLCLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("CbLUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList MultiSelectOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < MultiSelectOptonsList.getLength(); k++) {
                                                    Node Opton = MultiSelectOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                            controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("AscendingOrder")) {
                                                            controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }  else if (Opton.getNodeName().trim().equalsIgnoreCase("DescendingOrder")) {
                                                            controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("RowSelectionType")) {
                                                            controlObject.setRowSelectionType(Opton.getTextContent().trim());
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                            controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }

//                                        List<String> CLItems = new ArrayList<>();
                                            if (((Element) ControlNode).getElementsByTagName("Items").getLength() != 0) {
                                                NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                                                setItems(CLItemsList, controlObject);
                                            }
                                        /* for (int l = 0; l < CLItemsList.getLength(); l++) {
                                            Node Opton1 = CLItemsList.item(l);

                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                                    CLItems.add(Opton1.getTextContent().trim());
                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                }
                                            }
                                        }

                                        controlObject.setItems(CLItems);*/
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_RATING:

                                            controlObject.setRatingItemCount(((Element) ControlNode).getAttribute("noOfItems").trim());

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList ratingValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (ratingValidatorsList != null && ratingValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < ratingValidatorsList.getLength(); li++) {
                                                        Node Opton = ratingValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLRatingMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("RUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList RatingOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < RatingOptionsList.getLength(); k++) {
                                                    Node Opton = RatingOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("DisableCount")) {
                                                            controlObject.setDisableRatingCount(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisableRatingCount(false);
                                                            Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                            Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                                            Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("RatingType")) {

//                                                    controlObject.setSelectRatingItemType(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setRatingType(Opton.getTextContent().trim());

                                                            Log.d("MainRatingCountTType", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_VOICE_RECORDING:

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList voiceRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (voiceRecValidatorsList != null && voiceRecValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < voiceRecValidatorsList.getLength(); li++) {
                                                        Node Opton = voiceRecValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                                                Log.d("XMLVoiceRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLVoiceRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableVoiceMaximumDuration(true);
                                                                controlObject.setVoiceMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                                                Log.d("XMLVoiceRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLVoiceRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableVoiceMinimumDuration(true);
                                                                controlObject.setVoiceMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList voiceOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < voiceOptionsList.getLength(); k++) {
                                                    Node Opton = voiceOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            Log.d("XML_VoiceRecDisable ", Opton.getTextContent().trim());
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("AudioFormat")) {
                                                            Log.d("XML_VoiceRec ", Opton.getTextContent().trim());
                                                            if(!Opton.getTextContent().isEmpty()){
                                                            String[] strAudioFormats = Opton.getTextContent().trim().split("\\$");
                                                            List<String> temp = new ArrayList<>();
                                                            for (int count = 0; count < strAudioFormats.length; count++) {
                                                                temp.add(strAudioFormats[count]);
                                                            }
                                                            controlObject.setAudioFormatIds(temp);
                                                            controlObject.setAudioFormatNames(temp);}
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadAudioFile")) {
                                                            controlObject.setEnableUploadAudioFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableUploadAudioFile(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_VIDEO_RECORDING:

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setEnableCompression(Boolean.parseBoolean(((Element) ControlNode).getAttribute("enableCompression").trim()));
                                            if (controlObject.isEnableCompression()) {
                                                controlObject.setCompressionQuality(((Element) ControlNode).getAttribute("compressionQuality").trim());
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList videoRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (videoRecValidatorsList != null && videoRecValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < videoRecValidatorsList.getLength(); li++) {
                                                        Node Opton = videoRecValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                                                Log.d("XMLVideoRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLVideoRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableVideoMaximumDuration(true);
                                                                controlObject.setVideoMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                                                Log.d("XMLVideoRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLVideoRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableVideoMinimumDuration(true);
                                                                controlObject.setVideoMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                if (((Element) ControlNode).getElementsByTagName("Options").getLength() > 0) {
                                                    NodeList videoOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                    for (int k = 0; k < videoOptionsList.getLength(); k++) {
                                                        Node Opton = videoOptionsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("VideoFormat")) {
                                                                String[] strVideoFormats = Opton.getTextContent().trim().split("\\$");
                                                                List<String> temp = new ArrayList<>();
                                                                for (int count = 0; count < strVideoFormats.length; count++) {
                                                                    temp.add(strVideoFormats[count]);
                                                                }
                                                                controlObject.setVideoFormatIds(temp);
                                                                controlObject.setVideoFormatNames(temp);
//                                                    controlObject.setAudioFormatIds(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadVideoFile")) {
                                                                controlObject.setEnableUploadVideoFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_AUDIO_PLAYER:

                                            controlObject.setAudioData(((Element) ControlNode).getAttribute("audioData").trim());

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList audioPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < audioPlayerOptionsList.getLength(); k++) {
                                                    Node Opton = audioPlayerOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                                            controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Background")) {
                                                            controlObject.setEnablePlayBackground(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_VIDEO_PLAYER:

                                            controlObject.setVideoData(((Element) ControlNode).getAttribute("videoData").trim());
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList videoPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < videoPlayerOptionsList.getLength(); k++) {
                                                    Node Opton = videoPlayerOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                                            controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_PERCENTAGE:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList percentageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (percentageValidatorsList != null && percentageValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < percentageValidatorsList.getLength(); li++) {
                                                        Node Opton = percentageValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLPercentageMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList percentageOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < percentageOptionsList.getLength(); k++) {
                                                    Node Opton = percentageOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_SIGNATURE:

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList signatureValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (signatureValidatorsList != null && signatureValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < signatureValidatorsList.getLength(); li++) {
                                                        Node Opton = signatureValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList signatureOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < signatureOptionsList.getLength(); k++) {
                                                    Node Opton = signatureOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Upload")) {
                                                            controlObject.setEnableUploadSignature(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("signatureOnScreen")) {
                                                            controlObject.setEnableSignatureOnScreen(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_URL_LINK:
                                            controlObject.setUrl(((Element) ControlNode).getAttribute("value").trim());
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList urlValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (urlValidatorsList != null && urlValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < urlValidatorsList.getLength(); li++) {
                                                        Node Opton = urlValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLURLViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("URlUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList urllinkOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < urllinkOptonsList.getLength(); k++) {
                                                    Node Opton = urllinkOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideUrl")) {
                                                            controlObject.setHideURL(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayURLName")) {
                                                            controlObject.setUrlPlaceholderText(Opton.getTextContent().trim());
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_DECIMAL:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList decimalValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (decimalValidatorsList != null && decimalValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < decimalValidatorsList.getLength(); li++) {
                                                        Node Opton = decimalValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLdecimalViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("DUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList decimalOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < decimalOptonsList.getLength(); k++) {
                                                    Node Opton = decimalOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Precision")) {
                                                            controlObject.setCharactersAfterDecimal((Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_PASSWORD:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList passwordValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (passwordValidatorsList != null && passwordValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < passwordValidatorsList.getLength(); li++) {
                                                        Node Opton = passwordValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("PasswordViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordPolicy")) {
                                                                controlObject.setEnablePasswordPolicy(true);
                                                                String[] passwordPolicyId = eElement.getElementsByTagName("Param").item(1).getTextContent().trim().split("\\$");
                                                                String[] passwordPolicyValue = eElement.getElementsByTagName("Param").item(2).getTextContent().trim().split("2");
                                                                List<String> temppasswordPolicyIds = new ArrayList<>();
                                                                List<String> temppasswordPolicyValues = new ArrayList<>();
                                                                for (int count = 0; count < passwordPolicyId.length; count++) {
                                                                    temppasswordPolicyIds.add(passwordPolicyId[count]);
                                                                }
                                                                for (int count = 0; count < passwordPolicyValue.length; count++) {
                                                                    temppasswordPolicyValues.add(passwordPolicyValue[count]);
                                                                }
                                                                controlObject.setPasswordPolicy(temppasswordPolicyValues);
                                                                controlObject.setPasswordPolicyIds(temppasswordPolicyIds);
                                                                Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordLength")) {
                                                                controlObject.setEnablePasswordLength(true);
                                                                controlObject.setPasswordLength(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setPasswordLengthError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList PasswordOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < PasswordOptonsList.getLength(); k++) {
                                                    Node Opton = PasswordOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowOption")) {
                                                            controlObject.setEnableShowOrHideOption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Encrypt")) {
                                                            controlObject.setEnableEncryption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionType")) {
                                                            controlObject.setEncryptionType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionTypeId")) {
                                                            controlObject.setEncryptionTypeId(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_CURRENCY:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList currencyValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (currencyValidatorsList != null && currencyValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < currencyValidatorsList.getLength(); li++) {
                                                        Node Opton = currencyValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("CurrencyViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                                                Log.d("XMLCurrencyMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCurrencyMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableMaximumAmount(true);
                                                                controlObject.setMaxAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMaxAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                                                Log.d("XMLCurrencyMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCurrencyMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setEnableMinimumAmount(true);
                                                                controlObject.setMinAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setMinAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                List<String> currencyType = new ArrayList<>();
                                                NodeList CurrencyOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < CurrencyOptonsList.getLength(); k++) {
                                                    Node Opton = CurrencyOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrencyType")) {
                                                            currencyType.add(Opton.getTextContent().trim());
                                                            controlObject.setCurrencyListNames(currencyType);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                                            controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_DYNAMIC_LABEL:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            controlObject.setValue(((Element) ControlNode).getAttribute("value").trim());
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList dynamicOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < dynamicOptionsList.getLength(); k++) {
                                                    Node Opton = dynamicOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Section")) {
                                                            controlObject.setMakeAsSection(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BarCode")) {
                                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("QRCode")) {
                                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UniCode")) {
                                                            controlObject.setUnicodeFormat(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
                                                            controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersType")) {
                                                            controlObject.setMaskCharacterType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("NoOfMaskCharactersToMask")) {
                                                            controlObject.setNoOfCharactersToMask(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersDirection")) {
                                                            controlObject.setMaskCharacterDirection(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGround")) {
                                                            controlObject.setLayoutBackGroundEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGroundColor")) {
                                                            controlObject.setLayoutBackGroundColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                                            controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                            controlObject.setBackGroundColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                                            controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UnderlineText")) {
                                                            controlObject.setUnderLineText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_IMAGE:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                                        Node Opton = imageValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList imageOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < imageOptonsList.getLength(); k++) {
                                                    Node Opton = imageOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageDataType")) {
                                                            controlObject.setImageDataType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageData")) {
                                                            controlObject.setImageData(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImage")) {
                                                            controlObject.setEnableMultipleImages(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImageFormat")) {
                                                            controlObject.setImagesArrangementType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomImage")) {
                                                            controlObject.setZoomImageEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_BUTTON:
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                    Node Opton = buttonOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ValidateMandatoryFormControls")) {
                                                            controlObject.setValidateFormFields(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            /*NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                            for (int k = 0; k < buttonDSList.getLength(); k++) {
                                                Node Opton = buttonDSList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                                        controlObject.setShape(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                                        controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                                        controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                                                        controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                                        controlObject.setIconPath(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                        controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                    }
                                                }
                                            }*/


                                            NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                            for (int k = 0; k < buttonDSList.getLength(); k++) {
                                                Node Opton = buttonDSList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                                        controlObject.setShape(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                                        controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                                                        controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                                        controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                                        controlObject.setIconPath(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                        controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
//                                            mButtonDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        // Advanced Controls
                                        case AppConstants.CONTROL_TYPE_GPS:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setGpsType(((Element) ControlNode).getAttribute("gpsType").trim());
                                            controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                                            if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                                                controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                                            }
                                            if (controlObject.getGpsType().equalsIgnoreCase(AppConstants.Multi_points_line) ||
                                                    controlObject.getGpsType().equalsIgnoreCase(AppConstants.Polygon) ||
                                                    controlObject.getGpsType().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
                                                controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                                                if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                                                    controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                                                } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                                                    controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                                                }
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                                        Node Opton = imageValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList gpsOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < gpsOptionsList.getLength(); k++) {
                                                    Node Opton = gpsOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowMap")) {
                                                            controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("SaveInDifferentColumns")) {
                                                            controlObject.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationFormat")) {
                                                            controlObject.setLocationFormat(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_BAR_CODE:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList barCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < barCodeOptonsList.getLength(); k++) {
                                                    Node Opton = barCodeOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_QR_CODE:
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList qrCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < qrCodeOptonsList.getLength(); k++) {
                                                    Node Opton = qrCodeOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_SUBFORM:

                                            controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                                            controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onRowClickEvent").trim()));
                                            controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                                            controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                                                        Node Opton = subFormValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
//                                                                controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
//                                                                controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                                                    Node Opton = subFormOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                                            controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                                            Log.d("SubformOrientation", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("GridWithTwoColumns")) {
                                                            controlObject.setGridWithTwoColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayButton")) {
                                                            controlObject.setDisplayNameOfAddButton(Opton.getTextContent().trim());
                                                            Log.d("SubformDisplayName", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("LazyLoading")) {
                                                            controlObject.setLazyLoadingEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("threshold")) {
                                                            controlObject.setThreshold(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                                            controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                                            if (Opton.getTextContent().trim() != null && Opton.getTextContent().trim().length() > 0) {
                                                                System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                                                String spilt[] = Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1).split(",");
                                                                String itemsId[] = new String[spilt.length];
                                                                for (int z = 0; z < spilt.length; z++) {
                                                                    itemsId[z] = spilt[z].trim();
                                                                }
                                                                controlObject.setSearchItemIds(Arrays.asList(itemsId));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
//
                                       /* if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
                                        } else {
                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                List<ControlObject> controlObjectList = new ArrayList<>();

                                            }
                                        }*/
//                                            mDisplaySettings(ControlNode, controlObject);
                                            if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0) != null && ((Element) ControlNode).getAttribute("controlName").trim().equalsIgnoreCase(controlObject.getControlName()) ) {
                                                NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(((Element) ControlNode).getElementsByTagName("DisplaySettings").getLength()-1).getChildNodes();
                                                if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                                                    for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                                                        Node Opton = DisplaySettingsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                                controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                                controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            /*if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME2")) {
                                controlObject.setTextHexColor("#5D5654"); // Brown
                            }else if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME1")) {
                                controlObject.setTextHexColor("#5a636d"); // bluegray
                            }*/
//                            if (themeNo.equalsIgnoreCase("")) {
//                                    Log.d(TAG, "mDisplaySettingsThemeNo: "+themeNo+" - "+controlObject.getDisplayName());
////                                controlObject.setTextHexColor("#5D5654"); // Brown
//                                controlObject.setTextHexColor("#4CAE4C"); // ev_green
//                            }else {
//                                controlObject.setTextHexColor(Opton.getTextContent().trim());
//                            }
                                                                controlObject.setTextHexColor(Opton.getTextContent().trim());
                                                                Log.d("XMLDisplaySettings_M", Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                                                controlObject.setChartColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ProgressColor")) {
                                                                controlObject.setProgressColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerColor")) {
                                                                controlObject.setTimerColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            layoutBackgroundColor(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);

                                            if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
                                            } else {
                                                Node node = ((Element) ControlNode).getElementsByTagName("SubFormControls").item(0);

                                                controlObject.setSubFormControlList(getSubFormControlList(node, false));
                                            }

                                            break;
                                        case AppConstants.CONTROL_TYPE_GRID_CONTROL:
                                            controlObject.setControlCategory("advanced");

                                            controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                                            controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setEnableFixGridWidth(Boolean.parseBoolean(((Element) ControlNode).getAttribute("fixGridWidth").trim()));
                                            controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                                            controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));

                                           /* if (((Element) ControlNode).getElementsByTagName("ColumnWidths").getLength() == 0) {


                                            } else {
                                                NodeList columnWidths = ((Element) ControlNode).getElementsByTagName("ColumnWidths").item(0).getChildNodes();
                                                List<String> columnWidthsList = new ArrayList<>();
                                                for (int k = 0; k < columnWidths.getLength(); k++) {

                                                    Node width = columnWidths.item(k);

                                                    columnWidthsList.add(width.getTextContent().trim());

                                                }
                                                controlObject.setGridColumnsWidths(columnWidthsList);
                                            }*/

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                                                        Node Opton = subFormValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                                                controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                                                controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }

                                                        }
                                                    }
                                                }
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                                                    Node Opton = subFormOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                                            controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                                            Log.d("SubformOrientation", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideAddButton")) {
                                                            controlObject.setGridControl_HideAddButton(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDeleteButton")) {
                                                            controlObject.setGridControl_HideDeleteButton(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColHeightType")) {
                                                            controlObject.setGridControl_ColHeightType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColHeightSize")) {
                                                            controlObject.setGridControl_ColHeightSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextSize")) {
                                                            controlObject.setGridControl_ColTextSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextStyle")) {
                                                            controlObject.setGridControl_ColTextStyle(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextColor")) {
                                                            controlObject.setGridControl_ColTextColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextAlignment")) {
                                                            controlObject.setGridControl_ColTextAlignment(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColColor")) {
                                                            controlObject.setGridControl_ColColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColBorder")) {
                                                            controlObject.setGridControl_ColBorder(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideColumnNames")) {
                                                            controlObject.setHideColumnNames(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeigthType")) {
                                                            controlObject.setGridControl_rowHeigthType(Opton.getTextContent().trim());
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeightSize")) {
                                                            controlObject.setGridControl_rowHeightSize(Opton.getTextContent().trim());
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColorType")) {
                                                            controlObject.setGridControl_rowColorType(Opton.getTextContent().trim());
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor1")) {
                                                            controlObject.setGridControl_rowColor1(Opton.getTextContent().trim());
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor2")) {
                                                            controlObject.setGridControl_rowColor2(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderType")) {
                                                            controlObject.setGridControl_BorderType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                                                            controlObject.setGridControl_BorderColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderThickness")) {
                                                            controlObject.setGridControl_BorderThickness(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LazyLoading")) {
                                                            controlObject.setGridControl_LazyLoading(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("threshold")) {
                                                            controlObject.setGridControl_threshold(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                                            controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                                            if (Opton.getTextContent().trim().length() > 0) {
                                                                //System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                                                String spilt[] = Opton.getTextContent().trim().split(",");
                                                                String itemsId[] = new String[spilt.length];
                                                                for (int z = 0; z < spilt.length; z++) {
                                                                    itemsId[z] = spilt[z].trim();
                                                                }
                                                                controlObject.setSearchItemIds(Arrays.asList(itemsId));
                                                            }
                                                        }else if(Opton.getNodeName().trim().equalsIgnoreCase("GridColumnSettings")){
                                                            List<GridColumnSettings> gridColumnSettings=new ArrayList<>();
                                                            for (int col = 0; col < Opton.getChildNodes().getLength(); col++) {
                                                                NodeList colItem= Opton.getChildNodes().item(col).getChildNodes();
                                                                GridColumnSettings gridColumnSettings1=new GridColumnSettings();
                                                                for (int l = 0; l < colItem.getLength(); l++) {
                                                                    Node colSetting = colItem.item(l);
                                                                    if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlId")) {
                                                                        gridColumnSettings1.setControlId(colSetting.getTextContent().trim());
                                                                    }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlName")) {
                                                                        gridColumnSettings1.setControlName(colSetting.getTextContent().trim());
                                                                    }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlWidth")) {
                                                                        gridColumnSettings1.setControlWidth(colSetting.getTextContent().trim());
                                                                    }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlColor")) {
                                                                        gridColumnSettings1.setControlColor(colSetting.getTextContent().trim());
                                                                    } else if (colSetting.getNodeName().trim().equalsIgnoreCase("EnabelSorting")) {
                                                                        gridColumnSettings1.setEnableSorting(Boolean.parseBoolean(colSetting.getTextContent().trim()));
                                                                    }

                                                                }
                                                                gridColumnSettings.add(gridColumnSettings1);
                                                            }
                                                            controlObject.setGridColumnSettings(gridColumnSettings);
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode,controlObject);
                                            if (((Element) ControlNode).getElementsByTagName("GridFormControls").getLength() == 0) {
                                            } else {
                                                Node node = ((Element) ControlNode).getElementsByTagName("GridFormControls").item(0);

                                                controlObject.setSubFormControlList(getSubFormControlList(node, true));
                                            }

                                            break;
                                        case AppConstants.CONTROL_TYPE_DATA_VIEWER:
                                            try {
                                                controlObject.setControlCategory("advanced");
                                                controlObject.setDataViewer_UI_Pattern(((Element) ControlNode).getAttribute("UIPattern").trim());
                                                controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                                controlObject.setLazyLoadingEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("LazyLoading").trim()));
                                                if (controlObject.isLazyLoadingEnabled()) {
                                                    controlObject.setThreshold(((Element) ControlNode).getAttribute("Threshold").trim());
                                                }

                                                controlObject.setDataViewer_searchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("searchEnabled").trim()));
                                                controlObject.setDataViewer_HeaderSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("HeaderSearchEnabled").trim()));
                                                controlObject.setDataViewer_SubHeaderSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("SubHeaderSearchEnabled").trim()));
                                                controlObject.setDataViewer_DescriptionSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("DescriptionSearchEnabled").trim()));
                                                controlObject.setDataViewer_CornerSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("CornerSearchEnabled").trim()));

                                                controlObject.setImageSpecificationType(((Element) ControlNode).getAttribute("ImageSpecType").trim());
                                                if (((Element) ControlNode).getAttribute("ImageSpecType").trim().equalsIgnoreCase("Custom width and height in DP")) {
                                                    controlObject.setImageWidth(((Element) ControlNode).getAttribute("ImageWidth").trim());
                                                    controlObject.setImageHeight(((Element) ControlNode).getAttribute("ImageHeight").trim());
                                                }

                                                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                                } else {

                                                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                    if (OptonsList != null && OptonsList.getLength() > 0) {
                                                        for (int k = 0; k < OptonsList.getLength(); k++) {
                                                            Node Opton = OptonsList.item(k);
                                                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                                if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HorizontalScroll")) {
                                                                    controlObject.setEnableHorizontalScroll(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                if (((Element) ControlNode).getElementsByTagName("DisplaySettings").getLength() == 0) {

                                                } else {

                                                    NodeList DisplayList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                                    if (DisplayList != null && DisplayList.getLength() > 0) {
                                                        for (int k = 0; k < DisplayList.getLength(); k++) {
                                                            Node Display = DisplayList.item(k);
                                                            if (Display.getNodeType() == Node.ELEMENT_NODE) {
                                                                if (Display.getNodeName().trim().equalsIgnoreCase("CornerShape")) {
                                                                    controlObject.setDataViewer_Shape(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("DefaultImage")) {
                                                                    controlObject.setDataViewer_DefualtImage_path(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("DefaultProfileImage")) {
                                                                    controlObject.setDataViewer_DefualtImage_path(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("FrameBG_HexColor")) {
                                                                    controlObject.setDataViewer_FrameBG_HexColor(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("Header_HexColor")) {
                                                                    controlObject.setDataViewer_Header_HexColor(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("SubHeader_HexColor")) {
                                                                    controlObject.setDataViewer_SubHeader_HexColor(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("Description_HexColor")) {
                                                                    controlObject.setDataViewer_Description_HexColor(Display.getTextContent().trim());
                                                                } else if (Display.getNodeName().trim().equalsIgnoreCase("DateTime_HexColor")) {
                                                                    controlObject.setDataViewer_DateTime_HexColor(Display.getTextContent().trim());
                                                                }else if (Display.getNodeName().trim().equalsIgnoreCase("FrameBG_HexColor")) {
                                                                    controlObject.setDataViewer_FrameBG_HexColor(Display.getTextContent().trim());
                                                                }else if (Display.getNodeName().trim().equalsIgnoreCase("FrameBG_HexColorTwo")) {
                                                                    controlObject.setDataViewer_FrameBG_HexColorTwo(Display.getTextContent().trim());
                                                                }else if (Display.getNodeName().trim().equalsIgnoreCase("Item_HexColor")) {
                                                                    controlObject.setDataViewer_Item_HexColor(Display.getTextContent().trim());
                                                                }else if (Display.getNodeName().trim().equalsIgnoreCase("Item_BGHexColor")) {
                                                                    controlObject.setDataViewer_Item_BGHexColor(Display.getTextContent().trim());
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                setLangauge(ControlNode, controlObject);
                                            } catch (Exception e) {
                                                System.out.println("Error At Dataviewer==" + e.toString());
                                            }
                                            break;
                                        // Data Controls
                                        case AppConstants.CONTROL_TYPE_DATA_CONTROL:

                                            controlObject.setDataControlStatus(((Element) ControlNode).getAttribute("type").trim());
                                            controlObject.setDependentControl(((Element) ControlNode).getAttribute("dependentName").trim());
                                            controlObject.setDataControlName(((Element) ControlNode).getAttribute("dataControllName").trim());
                                            controlObject.setDataControlLocationType(((Element) ControlNode).getAttribute("locationType").trim());
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChange").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList datacontrolValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (datacontrolValidatorsList != null && datacontrolValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < datacontrolValidatorsList.getLength(); li++) {
                                                        Node Opton = datacontrolValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                                    Node Opton = dataControlOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UserControlBinding")) {
                                                            controlObject.setEnableUserControlBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("PostLocationBinding")) {
                                                            controlObject.setEnablePostLocationBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }  else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;


                                        case AppConstants.CONTROL_TYPE_MENU:

                                            controlObject.setControlCategory("advanced");
                                            controlObject.setTypeOfMenu(((Element) ControlNode).getAttribute("menuType").trim());
                                            controlObject.setNoOfRows(((Element) ControlNode).getAttribute("rows").trim());
                                            controlObject.setNoofColumns(((Element) ControlNode).getAttribute("columns").trim());
                                            controlObject.setTypeOfButton(((Element) ControlNode).getAttribute("buttonType").trim());

                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                                for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                                    Node Opton = menuOptionsList.item(k);

                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("FitHeight")) {
                                                            controlObject.setFitToScreenHeight(Boolean.valueOf(Opton.getTextContent().trim()));

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FitWidth")) {
                                                            controlObject.setFitToScreenWidth(Boolean.valueOf(Opton.getTextContent().trim()));

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            Node menuControlsNode1 = ControlNode.getChildNodes().item(3);
                                            menuDisplaySettings(menuControlsNode1, controlObject);
                                            Log.d(TAG, "menuControlsNodeName1: " + menuControlsNode1.getNodeName());
                                            Node menuControlsNode = ControlNode.getChildNodes().item(2);
                                            Log.d(TAG, "menuControlsNodeName: " + menuControlsNode.getNodeName());
                                            controlObject.setMenuControlObjectList(getMenuControlList(menuControlsNode));
                                            break;
                                        case AppConstants.CONTROL_TYPE_SECTION:

                                            controlObject.setControlCategory("advanced");

                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList sectionOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                                for (int k = 0; k < sectionOptionsList.getLength(); k++) {
                                                    Node Opton = sectionOptionsList.item(k);

                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Panel")) {
                                                            controlObject.setPanelType(Opton.getTextContent().trim());

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                                            controlObject.setGpsType(Opton.getTextContent().trim());

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                                            controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                                            controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                            controlObject.setSectionBGHexColor(Opton.getTextContent().trim());

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Mapheight")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("enableCollapseOrExpand")) {
                                                            controlObject.setEnableCollapseOrExpand(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("MakeItAsPopup")) {
                                                            controlObject.setMakeItAsPopup(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            Controls_list.add(controlObject);

                                            Node sectionNode = ControlNode.getChildNodes().item(2);
                                            Log.d(TAG, "sectionControlsNodeName: " + sectionNode.getNodeName());
                                            if (sectionNode != null) {
//                                                controlObject.setSubFormControlList(getSubFormControlList(sectionNode));
                                                controlObject.setSubFormControlList(getSectionControlsList(sectionNode));
//                                                getSectionControlsList(sectionNode,Controls_list);
                                            }
                                            break;

                                        case AppConstants.CONTROL_TYPE_MAP:
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onMapClickEvent").trim()));
                                            controlObject.setMapView(((Element) ControlNode).getAttribute("mapView").trim());
                                            controlObject.setOnMapMarkerClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onMapMarkerClickEvent").trim()));

                                            if (((Element) ControlNode).hasAttribute("mapViewType")) {
                                                controlObject.setMapViewType(((Element) ControlNode).getAttribute("mapViewType").trim());
                                            }

                                            if (((Element) ControlNode).getElementsByTagName("ItemsList").getLength() == 0) {

                                            } else {

                                                NodeList itemsList = ((Element) ControlNode).getElementsByTagName("ItemsList").item(0).getChildNodes();

                                                List<RenderingType> renderingTypeList = new ArrayList<RenderingType>();

                                                for (int k = 0; k < itemsList.getLength(); k++) {
                                                    Node Items = itemsList.item(k);

                                                    RenderingType renderingType = new RenderingType();

                                                    String type = ((Element) Items).getAttribute("type");

                                                    renderingType.setType(type);

                                                    List<String> itemValues = new ArrayList<String>();

                                                    if (Items.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Items.getNodeName().trim().equalsIgnoreCase("Items")) {
                                                            NodeList itemList = Items.getChildNodes();

                                                            for (int p = 0; p < itemList.getLength(); p++) {
                                                                Node item = itemList.item(p);

                                                                if (item.getNodeType() == Node.ELEMENT_NODE) {
                                                                    if (item.getNodeName().trim().equalsIgnoreCase("Item")) {
                                                                        itemValues.add(item.getTextContent().trim());
//                                                                    itemValues.add("17.7340891,83.3183981");
                                                                    }

                                                                }

                                                            }

                                                        }
                                                    }

                                                    renderingType.setItem(itemValues);

                                                    renderingTypeList.add(renderingType);
                                                }

                                                controlObject.setRenderingTypeList(renderingTypeList);
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                                for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                                    Node Opton = menuOptionsList.item(k);

                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomControls")) {
                                                            controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                                            controlObject.setMapIcon(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                                            controlObject.setBaseMap(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                                            controlObject.setShowCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapHeight")) {
                                                            controlObject.setMapHeight(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        // asdf
                                        case AppConstants.CONTROL_TYPE_CALENDAR_EVENT:
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("CalendarEvents").getLength() == 0) {

                                            } else {
                                                NodeList calendarEventsList = ((Element) ControlNode).getElementsByTagName("CalendarEvents").item(0).getChildNodes();

                                                List<CalendarEvent> calendarEventList = new ArrayList<CalendarEvent>();

                                                for (int k = 0; k < calendarEventsList.getLength(); k++) {
                                                    Node calendarEvent = calendarEventsList.item(k);

                                                    CalendarEvent calendarEventObj = new CalendarEvent();

                                                    if (calendarEvent.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (calendarEvent.getNodeName().trim().equalsIgnoreCase("CalendarEvent")) {
                                                            Element calendarEventElement = ((Element) calendarEvent);

                                                            String eventType = calendarEventElement.getAttribute("multipleDays");

                                                            calendarEventObj.setEventType(eventType);

//                                                        if(eventType.equalsIgnoreCase("true"))
                                                            if (eventType.equalsIgnoreCase("Multiple Dates")) {

                                                                NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                                                Element paramOne = (Element) paramOneList.item(0);
                                                                String startDate = getCharacterDataFromElement(paramOne);

                                                                NodeList paramTwoList = calendarEventElement.getElementsByTagName("Param");
                                                                Element paramTwo = (Element) paramTwoList.item(1);
                                                                String endDate = getCharacterDataFromElement(paramTwo);

                                                                NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                                                Element paramThree = (Element) paramThreeList.item(0);

                                                                String message = getCharacterDataFromElement(paramThree);

                                                                calendarEventObj.setEventDates(startDate + "$" + endDate);
                                                                calendarEventObj.setEventMessage(message);

                                                            }

                                                            if (eventType.equalsIgnoreCase("Single Date")) {
                                                                NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                                                Element paramOne = (Element) paramOneList.item(0);
                                                                String startDate = getCharacterDataFromElement(paramOne);

                                                                NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                                                Element paramThree = (Element) paramThreeList.item(0);
                                                                String message = getCharacterDataFromElement(paramThree);

                                                                calendarEventObj.setEventDates(startDate);
                                                                calendarEventObj.setEventMessage(message);

                                                            }

                                                        }

                                                    }

                                                    calendarEventList.add(calendarEventObj);

                                                }

                                                controlObject.setCalendarEventType(calendarEventList);
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                                for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                                    Node Opton = dataControlOptonsList.item(k);

                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("WeekDays")) {
                                                            controlObject.setWeekDays(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_LiveTracking:
                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                            controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                                            if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                                                controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                                            }
                                            controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                                            if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                                                controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                                            } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                                                controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                                        Node Opton = imageValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                                for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                                    Node Opton = menuOptionsList.item(k);

                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomControls")) {
                                                            controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                                            controlObject.setMapIcon(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                                            controlObject.setBaseMap(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                                            controlObject.setShowCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapHeight")) {
                                                            controlObject.setMapHeight(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                                controlObject.setBaseMap("Google");
                                                controlObject.setZoomControl(Boolean.parseBoolean("true"));
                                                controlObject.setShowCurrentLocation(Boolean.parseBoolean("true"));
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_USER:

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setControlCategory("advanced");

                                            Node userTypeNode = ((Element) ControlNode).getElementsByTagName("UserType").item(0);
                                            controlObject.setUserType(userTypeNode.getTextContent());

                                            if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                                                Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                                                NodeList groupNodes = Groups.getChildNodes();
                                                List<UserGroup> groupList = new ArrayList<>();

                                                for (int k = 0; k < groupNodes.getLength(); k++) {

                                                    Node group = groupNodes.item(k);

                                                    UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                                    groupList.add(userGroup);

                                                }

                                                controlObject.setGroups(groupList);
                                            }

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (validatorsList != null && validatorsList.getLength() > 0) {
                                                    for (int k = 0; k < validatorsList.getLength(); k++) {
                                                        Node Opton = validatorsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                                controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                                        }
                                                    }
                                                }
                                            }
//
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("ShowUsersWithPostName")) {
                                                                controlObject.setShowUsersWithPostName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_POST:

                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setControlCategory("advanced");

                                            Node postTypeNode = ((Element) ControlNode).getElementsByTagName("PostType").item(0);
                                            controlObject.setUserType(postTypeNode.getTextContent());

                                            if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                                                Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                                                NodeList groupNodes = Groups.getChildNodes();
                                                List<UserGroup> groupList = new ArrayList<>();

                                                for (int k = 0; k < groupNodes.getLength(); k++) {

                                                    Node group = groupNodes.item(k);

                                                    UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                                    groupList.add(userGroup);


                                                }

                                                controlObject.setGroups(groupList);
                                            }


                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (validatorsList != null && validatorsList.getLength() > 0) {
                                                    for (int k = 0; k < validatorsList.getLength(); k++) {
                                                        Node Opton = validatorsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                                controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                                        }
                                                    }
                                                }
                                            }
//
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_CHART:

                                            controlObject.setControlCategory("advanced");
                                            controlObject.setChartType(((Element) ControlNode).getAttribute("chartType").trim());

                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideLegends")) {
                                                                controlObject.setHideLegends(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            if (((Element) ControlNode).getElementsByTagName("ChartColors").getLength() == 0) {

                                            } else {
                                                NodeList chartColorsList = ((Element) ControlNode).getElementsByTagName("ChartColors").item(0).getChildNodes();
                                                List<String> colors = new ArrayList<>();

                                                if (chartColorsList != null && chartColorsList.getLength() > 0) {
                                                    for (int k = 0; k < chartColorsList.getLength(); k++) {
                                                        Node Opton = chartColorsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                                                colors.add(Opton.getTextContent().trim());
                                                            }
                                                        }
                                                    }
                                                    controlObject.setChartColors(colors);
                                                }

                                            }

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_VIEWFILE:

                                            controlObject.setControlCategory("standard");
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            controlObject.setFilelink(((Element) ControlNode).getAttribute("Filelink").trim());


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_filelink")) {
                                                                controlObject.setHide_filelink(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadFile")) {
                                                                controlObject.setDownloadFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_PROGRESS:
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            controlObject.setControlCategory("visualization");
                                            controlObject.setProgress_maxvalue(((Element) ControlNode).getAttribute("maxValue").trim());
                                            controlObject.setProgress_actualvalue(((Element) ControlNode).getAttribute("actualValue").trim());


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_progress_actualvalue")) {
                                                                controlObject.setHide_progress_actualvalue(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_progress_maxvalue")) {
                                                                controlObject.setHide_progress_maxvalue(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_COUNT_DOWN_TIMER:
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onTimeElapsedEvent").trim()));////onClickEvent//onTimeElapsedEvent
                                            controlObject.setControlCategory("standard");
                                            controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                                            controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                                            controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                                                controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                                                controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_COUNT_UP_TIMER:

                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onTimeElapsedEvent").trim()));//onClickEvent//onTimeElapsedEvent
                                            controlObject.setControlCategory("standard");
                                            controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                                            controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                                            controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                                                controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                                                controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_AUTO_GENERATION:

                                            controlObject.setControlCategory("standard");

                                            NodeList ControlNodeList = ControlNode.getChildNodes();
                                            for (int n = 0; n < ControlNodeList.getLength(); n++) {

                                                Node item = ControlNodeList.item(n);
                                                if (item.getNodeName().equalsIgnoreCase("Prefix")) {
                                                    controlObject.setPreFixValue(((Element) item).getAttribute("name").trim());
                                                } else if (item.getNodeName().equalsIgnoreCase("Suffix")) {
                                                    controlObject.setSuffixValue(((Element) item).getAttribute("name").trim());
                                                } else if (item.getNodeName().equalsIgnoreCase("Suffix1")) {
                                                    controlObject.setSuffix1Value(((Element) item).getAttribute("name").trim());
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_TIME:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                            controlObject.setControlCategory("standard");
                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                                    for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                                        Node Opton = calendarValidatorsList.item(li);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                Log.d("XMLTimeMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                controlObject.setMandatoryTime(true);
                                                                controlObject.setMandatoryTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenTimes")) {
                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setBetweenStartEndTime(true);
                                                                controlObject.setBetweenStartTime(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                                controlObject.setBetweenEndTime(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                                controlObject.setBetweenStartEndTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("beforeCurrentTime")) {

                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                                controlObject.setBeforeCurrentTime(true);
                                                                controlObject.setBeforeCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            } else if (eElement.getAttribute("type").equalsIgnoreCase("afterCurrentTime")) {

                                                                Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setAfterCurrentTime(true);
                                                                controlObject.setAfterCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {
                                                NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                                    Node Opton = DateOptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentTime")) {
                                                            controlObject.setCurrentTime(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatEnable")) {
                                                            controlObject.setTimeFormat(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormat")) {
                                                            controlObject.setTimeFormat(Opton.getTextContent().trim());
//                                                    controlObject.setGetMonthFromSelection(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatOptions")) {
                                                            controlObject.setTimeFormatOptions(Opton.getTextContent().trim());
//                                                    controlObject.setGetDayFromSelection(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadOnly")) {
                                                            controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;

                                        case AppConstants.CONTROL_TYPE_DATA_TABLE:
                                            controlObject.setControlCategory("advanced");
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            NodeList collumnHeadersNodeLIst = ((Element) ControlNode).getElementsByTagName("ColumnHeaders").item(0).getChildNodes();
                                            List<String> columnHeaders = new ArrayList<>();
                                            for (int c = 0; c < collumnHeadersNodeLIst.getLength(); c++) {
                                                Node cNode = collumnHeadersNodeLIst.item(c);
                                                if (cNode.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (cNode.getNodeName().trim().equalsIgnoreCase("ColumnHeaderId")) {

                                                        columnHeaders.add(cNode.getTextContent().trim());

                                                    }
                                                }

                                            }
                                            controlObject.setColumnHeaders(columnHeaders);
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableSearch")) {
                                                                controlObject.setDataTable_EnableSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadExcel")) {
                                                                controlObject.setDownloadExcel(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadPDF")) {
                                                                controlObject.setDownloadPDF(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                            //row & col
                                                            else if (Opton.getNodeName().trim().equalsIgnoreCase("colWidthType")) {
                                                                controlObject.setDataTable_colWidthType(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colWidthSize")) {
                                                                controlObject.setDataTable_colWidthSize(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colHeightType")) {
                                                                controlObject.setDataTable_colHeightType(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colHeightSize")) {
                                                                controlObject.setDataTable_colHeightSize(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextSize")) {
                                                                controlObject.setDataTable_colTextSize(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextStyle")) {
                                                                controlObject.setDataTable_colTextStyle(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextColor")) {
                                                                controlObject.setDataTable_colTextColor(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colAlignment")) {
                                                                controlObject.setDataTable_colAlignment(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colColor")) {
                                                                controlObject.setDataTable_colColor(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("colBorder")) {
                                                                controlObject.setDataTable_colBorder(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideColumnNames")) {
                                                                controlObject.setHideColumnNames(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeigthType")) {
                                                                controlObject.setDataTable_rowHeigthType(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeightSize")) {
                                                                controlObject.setDataTable_rowHeightSize(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextSize")) {
                                                                controlObject.setDataTable_rowTextSize(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextStyle")) {
                                                                controlObject.setDataTable_rowTextStyle(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextColor")) {
                                                                controlObject.setDataTable_rowTextColor(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowAlignment")) {
                                                                controlObject.setDataTable_rowAlignment(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColorType")) {
                                                                controlObject.setDataTable_rowColorType(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor1")) {
                                                                controlObject.setDataTable_rowColor1(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor2")) {
                                                                controlObject.setDataTable_rowColor2(Opton.getTextContent().trim());
                                                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowsColoring")) {
                                                                controlObject.setDataTable_ParticularRowsColoring(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowsColoringIds")) {
                                                                controlObject.setDataTable_ParticularRowsColoringIds(Opton.getTextContent().trim());
                                                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowColor")) {
                                                                controlObject.setDataTable_ParticularRowColor(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderType")) {
                                                                controlObject.setDataTable_BorderType(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                                                                controlObject.setDataTable_BorderColor(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderThickness")) {
                                                                controlObject.setDataTable_BorderThickness(Opton.getTextContent().trim());
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("isPaging")) {
                                                                controlObject.setDataTable_isPaging(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        case AppConstants.CONTROL_TYPE_SUBMIT_BUTTON:
                                            AppObject.setApp_OnSubmitEvent(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSubmitEvent").trim()));
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                            } else {
                                                NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                    Node Opton = buttonOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }


                                                }
                                            }
                                            NodeList subbuttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                            for (int k = 0; k < subbuttonDSList.getLength(); k++) {
                                                Node Opton = subbuttonDSList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                                        Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                                        controlObject.setShape(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                                        controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                                        controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                                        controlObject.setIconPath(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                        controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontBackgroundColorRequired")) {
                                                        controlObject.setEnableChangeButtonColor(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                        controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BGColorRequired")) {
                                                        controlObject.setEnableChangeButtonColorBG(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SubmitButtonBGColor")) {
                                                        controlObject.setTextHexColorBG(Opton.getTextContent().trim());
                                                    }
                                                }
                                            }


                                            NodeList chaildnodes = ControlNode.getChildNodes();
                                            for (int x = 0; x < chaildnodes.getLength(); x++) {
                                                if (chaildnodes.item(x).getNodeName().equalsIgnoreCase("MessageSettings")) {
                                                    if (chaildnodes.item(x).getChildNodes().getLength() != 0) {
                                                        NodeList MessageSettingsList = chaildnodes.item(x).getChildNodes();

                                                        for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                                                            Node MessageSettings = MessageSettingsList.item(k);
                                                            if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                                                                if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                                                                    boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                                    AppObject.setSubmitButtonSuccessMessageIsEnable(SuccessEnable);

                                                                    if (SuccessEnable) {
                                                                        String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                        AppObject.setSubmitButtonMessageSuccess_DisplayType(MessageSuccess_DisplayType);
                                                                        AppObject.setSubmitButtonSuccessMessage(MessageSettings.getTextContent().trim());
                                                                    }

                                                                } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                                                                    boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                                    AppObject.setSubmitButtonFailMessageIsEnable(FailEnable);

                                                                    if (FailEnable) {
                                                                        String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                        AppObject.setSubmitButtonMessageFail_DisplayType(MessageDisplayType);
                                                                        AppObject.setSubmitButtonFailMessage(MessageSettings.getTextContent().trim());
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }
                                                    break;
                                                }
                                            }

                                           /* if (((Element) ControlNode).getElementsByTagName("MessageSettings").getLength() == 0) {

                                            }else {
                                                NodeList MessageSettingsList = ((Element) ControlNode).getElementsByTagName("MessageSettings");
                                                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                                                    Node MessageSettings = MessageSettingsList.item(k);
                                                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                                                            boolean SuccessEnable=Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                            AppObject.setSubmitButtonSuccessMessageIsEnable(SuccessEnable);

                                                            if(SuccessEnable){
                                                                String MessageSuccess_DisplayType =((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                AppObject.setSubmitButtonMessageSuccess_DisplayType(MessageSuccess_DisplayType);
                                                                AppObject.setSubmitButtonSuccessMessage(MessageSettings.getTextContent().trim());
                                                            }

                                                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                                                            boolean FailEnable=Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                            AppObject.setSubmitButtonFailMessageIsEnable(FailEnable);

                                                            if(FailEnable){
                                                                String MessageDisplayType =((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                AppObject.setSubmitButtonMessageFail_DisplayType(MessageDisplayType);
                                                                AppObject.setSubmitButtonFailMessage(MessageSettings.getTextContent().trim());
                                                            }
                                                        }
                                                    }
                                                }
                                            }*/

                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            if (AppObject.getApp_OnSubmitEvent()) {
                                                setEvents_submit(AppObject, ControlNode);
                                            } else {
                                                AppObject.setDefaultActionForSubmit(true);
                                            }

                                            break;
                                        case AppConstants.CONTROL_TYPE_AUTO_COMPLETION:

                                            controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onKeyEvent").trim()));
                                            controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSelectEvent").trim()));
                                            controlObject.setControlCategory("advanced");
                                            Node MinCharacterNode = ((Element) ControlNode).getElementsByTagName("MinCharacter").item(0);
                                            //controlObject.setMinChartoSeearch(Integer.parseInt(MinCharacterNode.getTextContent()));

                                            Node SearchKeyAtNode = ((Element) ControlNode).getElementsByTagName("SearchKeyAt").item(0);
                                            controlObject.setSearchKeyAt(SearchKeyAtNode.getTextContent());

                                            if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                                controlObject.setNullAllowed(false);
                                            } else {
                                                NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                                if (validatorsList != null && validatorsList.getLength() > 0) {
                                                    for (int k = 0; k < validatorsList.getLength(); k++) {
                                                        Node Opton = validatorsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            Element eElement = (Element) Opton;
                                                            Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                            if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                                controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                                controlObject.setNullAllowed(true);
                                                                Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                                controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            }
                                                        }
                                                    }
                                                }
                                            }
//
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                                                controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            setLangauge(ControlNode, controlObject);
                                            mDisplaySettings(ControlNode, controlObject);
                                            setRequiredUI(ControlNode, controlObject);
                                            break;
                                        default:

                                    }

                                    if (controlObject.isOnFocusEventExists() || controlObject.isOnChangeEventExists() || controlObject.isOnClickEventExists() || controlObject.isOnAddRowEventExists() || controlObject.isOnDeleteRowEventExists() || controlObject.isOnMapMarkerClickEventExists()) {
                                        setEvents(controlObject, ControlNode);
                                    }
                                    if (!AppConstants.CONTROL_TYPE_SECTION.equalsIgnoreCase(controlObject.getControlType())) {
                                        Controls_list.add(controlObject);
                                    }
                                } else if (ControlNode.getNodeName().contentEquals("RTL")) {

                                    //LinkedHashMap<String, String> languageMap = new LinkedHashMap<>();

                                    setAppLevelLangauge(nNode, AppObject);

                                   /* if (((Element) nNode).getElementsByTagName("RTL").getLength() != 0) {
                                        NodeList languageList = ((Element) nNode).getElementsByTagName("RTL").item(((Element) nNode).getElementsByTagName("RTL").getLength()-1).getChildNodes();
                                        for (int k = 0; k <languageList.getLength() ; k++) {

                                            if (languageList != null && languageList.getLength() > 0) {

                                                LinkedHashMap<String, String> languageMap = new LinkedHashMap<>();

                                                for (int l = 0; l <languageList.getLength() ; l++) {

                                                    Node language = languageList.item(l);

                                                    String langCode = ((Element) language).getAttribute("code").trim();

                                                    NodeList innerNodeList = language.getChildNodes();

                                                    if(langCode.contentEquals("te")){
                                                        languageMap.put(langCode,language.getChildNodes().item(0).getTextContent());
                                                    }else if(langCode.contentEquals("hi")){
                                                        languageMap.put(langCode,language.getChildNodes().item(0).getTextContent());
                                                    }
                                                }
                                                AppObject.setTranslatedAppTitleMap(languageMap);
                                            }

                                        }
                                    }*/
                                }

                            }
                        }
                        AppObject.setList_Columns(IndexColums);
                        AppObject.setList_Control_Types(ControlTypesList);

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Events")) {
//                        if (AppObject.getApp_OnLoadEvent() || AppObject.getApp_OnSubmitEvent()) {
                        if (AppObject.getApp_OnPreLoadEvent()) {
                            setEventsForPreLoad(AppObject, nNode);
                        }
                        if (AppObject.getApp_OnLoadEvent()) {
                            setEventsForLoad(AppObject, nNode);
                        }
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("TableSettings")) {

                        NodeList ControlNodeList = nNode.getChildNodes();
                        if (ControlNodeList.getLength() > 0) {


                            for (int j = 0; j < ControlNodeList.getLength(); j++) {
                                Node ControlNode = ControlNodeList.item(j);
                                if (ControlNode.getNodeName().equalsIgnoreCase("MainTableSettings")) {
                                    setTableSettingsObject(AppObject, null, ControlNode, 0, filterSubFormColumnsList);
                                } else if (ControlNode.getNodeName().equalsIgnoreCase("SubFormTableSettings")) {
                                    for (ControlObject controlObject : AppObject.getControls_list()) {

                                        if(controlObject.getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_SECTION)){
                                            for (ControlObject controlObjectSection : controlObject.getSubFormControlList()) {
                                                String subFormNameInSection = ((Element) ControlNode).getAttribute("name").trim();
                                                if (controlObjectSection.getControlName().equalsIgnoreCase(subFormNameInSection))
                                                    setTableSettingsObject(null, controlObjectSection, ControlNode, 1, filterSubFormColumnsList);
                                            }
                                        }else{
                                        String subFormName = ((Element) ControlNode).getAttribute("name").trim();
                                        if (controlObject.getControlName().equalsIgnoreCase(subFormName))
                                            setTableSettingsObject(null, controlObject, ControlNode, 1, filterSubFormColumnsList);
                                        }
                                    }

                                }

                            }
                        }

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("TableColumns")) {
                        NodeList settingsChildList = nNode.getChildNodes();
                        List<String> TableColumnNames = new ArrayList<>();
                        for (int settingsFieldsCnt = 0; settingsFieldsCnt < settingsChildList.getLength(); settingsFieldsCnt++) {
                            Element settingFieldsElement = (Element) settingsChildList.item(settingsFieldsCnt);

                            if (settingFieldsElement.getNodeName().equals("ColumnName")) {
                                String TableColumnName = getCharacterDataFromElement(settingFieldsElement);
                                TableColumnNames.add(TableColumnName);
                            }
                        }
                        AppObject.setDefault_Table_Columns(TableColumnNames);
                    }  else if (nNode.getNodeName().trim().equalsIgnoreCase("ImageColumn")) {
                        AppObject.setImagePreviewColumn(nNode.getChildNodes().item(0).getTextContent());
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("EditColumns")) {
                        DataManagementOptions dataManagementOptions = AppObject.getDataManagementOptions();
                        if (dataManagementOptions == null) {
                            dataManagementOptions = new DataManagementOptions();
                        }
                        NodeList columnsChildList = nNode.getChildNodes();
                        List<EditOrViewColumns> editOrViewColumnsList = new ArrayList<>();
                        for (int childCnt = 0; childCnt < columnsChildList.getLength(); childCnt++) {
                            EditOrViewColumns editOrViewColumns = new EditOrViewColumns();
                            Element settingFieldsElement = (Element) columnsChildList.item(childCnt);
                            if (settingFieldsElement.getNodeName().equals("ColumnName")) {
                                String TableColumnName = getCharacterDataFromElement(settingFieldsElement);
                                editOrViewColumns.setColumnName(TableColumnName);
                            }
                            editOrViewColumns.setColumnType(settingFieldsElement.getAttribute("type"));
                            editOrViewColumns.setFormName(settingFieldsElement.getAttribute("subformName"));
                            editOrViewColumnsList.add(editOrViewColumns);
                        }
                        dataManagementOptions.setEditColumns(editOrViewColumnsList);
                        AppObject.setDataManagementOptions(dataManagementOptions);

                    }
                   /* else if (nNode.getNodeName().trim().equalsIgnoreCase("Settings")) {
                        TableSettingSObject_Bean tableSettingSObject_Bean = new TableSettingSObject_Bean();

                        NodeList settingsChildList = nNode.getChildNodes();

                        for (int settingsFieldsCnt = 0; settingsFieldsCnt < settingsChildList.getLength(); settingsFieldsCnt++) {

                            Element settingFieldsElement = (Element) settingsChildList.item(settingsFieldsCnt);


                            if (settingFieldsElement.getNodeName().equals("AppIcon")) {
                                String appIcon = getCharacterDataFromElement(settingFieldsElement);

                            } else if (settingFieldsElement.getNodeName().equals("PrimaryKey")) {
                                String primaryKey = getCharacterDataFromElement(settingFieldsElement);
                                tableSettingSObject_Bean.setPrimaryKey(primaryKey);


                            } else if (settingFieldsElement.getNodeName().equals("ForeignKeys")) {
                                NodeList foreignKeysList = settingFieldsElement.getChildNodes();

                                List<ForeignKey_Bean> foreignKeys = new ArrayList<ForeignKey_Bean>();

                                for (int foreignKeysCnt = 0; foreignKeysCnt < foreignKeysList.getLength(); foreignKeysCnt++) {
                                    Element foreignKeyElement = (Element) foreignKeysList.item(foreignKeysCnt);

                                    ForeignKey_Bean foreignKeyBean = new ForeignKey_Bean();

                                    NodeList paramOneList = foreignKeyElement.getElementsByTagName("ControlName");
                                    Element paramOne = (Element) paramOneList.item(0);
                                    String controlName = getCharacterDataFromElement(paramOne);

                                    NodeList paramTwoList = foreignKeyElement.getElementsByTagName("FKTable");
                                    Element paramTwo = (Element) paramTwoList.item(0);
                                    String fkTable = getCharacterDataFromElement(paramTwo);

                                    NodeList paramThreeList = foreignKeyElement.getElementsByTagName("FKColumn");
                                    Element paramThree = (Element) paramThreeList.item(0);
                                    String fkColumn = getCharacterDataFromElement(paramThree);

                                    foreignKeyBean.setControl(controlName);
                                    foreignKeyBean.setTable(fkTable);
                                    foreignKeyBean.setColumn(fkColumn);

                                    foreignKeys.add(foreignKeyBean);
                                }

                                tableSettingSObject_Bean.setForeignKeys(foreignKeys);


                            } else if (settingFieldsElement.getNodeName().equals("CompositeKey")) {
                                NodeList compositeKeysList = settingFieldsElement.getChildNodes();

                                List<String> compositeKeys = new ArrayList<String>();

                                for (int compositeKeysCnt = 0; compositeKeysCnt < compositeKeysList.getLength(); compositeKeysCnt++) {
                                    Element controlNameElement = (Element) compositeKeysList.item(compositeKeysCnt);
                                    String controlName = getCharacterDataFromElement(controlNameElement);

                                    compositeKeys.add(controlName);

                                }

                                tableSettingSObject_Bean.setCompositeKeys(compositeKeys);

                            }

                        }

                        AppObject.setTableSettingsObject(tableSettingSObject_Bean);

                    }*/
                    else if (nNode.getNodeName().trim().equalsIgnoreCase("AdvanceManagement")) {

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Variables")) {
                        NodeList variablesChildList = nNode.getChildNodes();
                        List<Variable_Bean> listVaribles = new ArrayList<Variable_Bean>();
                        for (int variablesChildCnt = 0; variablesChildCnt < variablesChildList.getLength(); variablesChildCnt++) {
                            Variable_Bean variable_Bean = new Variable_Bean("", "", "");
                            Element variableElement = (Element) variablesChildList.item(variablesChildCnt);
                            NodeList paramOneList = variableElement.getElementsByTagName("Param");
                            Element paramOne = (Element) paramOneList.item(0);
                            String variableName = getCharacterDataFromElement(paramOne);
                            NodeList paramTwoList = variableElement.getElementsByTagName("Param");
                            Element paramTwo = (Element) paramTwoList.item(1);
                            String variableType = getCharacterDataFromElement(paramTwo);

                            NodeList paramThreeList = variableElement.getElementsByTagName("Param");
                            Element paramThree = (Element) paramThreeList.item(2);
                            String offlineVariable = getCharacterDataFromElement(paramThree);
                            variable_Bean.setOffline_Variable(Boolean.parseBoolean(offlineVariable));
                            variable_Bean.setVariable_Name(variableName);
                            variable_Bean.setVariable_Type(variableType);
                            listVaribles.add(variable_Bean);
                        }
                        AppObject.setList_Varibles(listVaribles);
                    }
/*                    else if (nNode.getNodeName().trim().equalsIgnoreCase("SubmitButton")) {
                        NodeList ControleNodeList = nNode.getChildNodes();

                        if (ControleNodeList.item(0).getNodeName().trim().equalsIgnoreCase("SubmitButtonName")) {
                            AppObject.setSubmit_ButtonName(ControleNodeList.item(0).getTextContent());
                        }

                        if (ControleNodeList.item(1).getNodeName().trim().equalsIgnoreCase("SubmitButtonColor")) {
                            Element buttoncolorElement = (Element) ControleNodeList.item(1);
                            AppObject.setSubmit_ButtonColorEnabel(Boolean.parseBoolean(buttoncolorElement.getAttribute("Enable")));
                            if (AppObject.isSubmit_ButtonColorEnabel()) {
                                AppObject.setSubmit_ButtonColor(ControleNodeList.item(1).getTextContent());
                            }
                        }

                        if (ControleNodeList.item(2).getNodeName().trim().equalsIgnoreCase("SubmitButtonFontSize")) {
                            Element buttonfontElement = (Element) ControleNodeList.item(2);
                            AppObject.setSubmit_ButtonFontSizeEnabel(Boolean.parseBoolean(buttonfontElement.getAttribute("Enable")));
                            if (AppObject.isSubmit_ButtonFontSizeEnabel()) {
                                AppObject.setSubmit_ButtonFontSize(ControleNodeList.item(2).getTextContent());
                            }
                        }
                    }*/
                    // Working UI Main Start
//                    else if (nNode.getNodeName().trim().equalsIgnoreCase("PrimaryLayout")) {
//                            PrimaryLayoutModelClass primaryLayoutModelClass = new PrimaryLayoutModelClass();
//
//                            if (nNode.getNodeType() == Node.ELEMENT_NODE) {
//                                primaryLayoutModelClass.setAliasName(((Element) nNode).getAttribute("name").trim());
//                                primaryLayoutModelClass.setParentLayoutId(((Element) nNode).getAttribute("id").trim());
//                                primaryLayoutModelClass.setStandardOverlap(((Element) nNode).getAttribute("type").trim());
//                                primaryLayoutModelClass.setScreenType(((Element) nNode).getAttribute("screen").trim());
//                                primaryLayoutModelClass.setScreenTypeDataAppearance(((Element) nNode).getAttribute("screen_data_appearance").trim());
//                                primaryLayoutModelClass.setPrimaryLayoutAlignment(((Element) nNode).getAttribute("layout_alignment").trim());
//                                primaryLayoutModelClass.setBackgroundType(((Element) nNode).getAttribute("backgroundType").trim());
//                                if (primaryLayoutModelClass.getBackgroundType() != null && primaryLayoutModelClass.getBackgroundType().equalsIgnoreCase("Image")) {
//                                    primaryLayoutModelClass.setBackgroundImage(((Element) nNode).getAttribute("backgroundValue").trim());
//                                } else {
//                                    primaryLayoutModelClass.setBackgroundColorHex(((Element) nNode).getAttribute("backgroundValue").trim());
//                                }
//                                Log.d(TAG, "XML_To_PrimaryLayout: " + "Name: " + ((Element) nNode).getAttribute("name").trim() + "\n"
//                                        + "Id: " + ((Element) nNode).getAttribute("id").trim() + "\n"
//                                        + "Type: " + ((Element) nNode).getAttribute("type").trim() + "\n"
//                                        + "Screen: " + ((Element) nNode).getAttribute("screen").trim() + "\n"
//                                        + "PaddingLeft: " + Integer.parseInt(((Element) nNode).getAttribute("paddingLeft").trim()) + "\n"
//                                );
//                                primaryLayoutModelClass.setGradientType(((Element) nNode).getAttribute("gradient_type").trim());
//                                primaryLayoutModelClass.setGradientOneColorHex(((Element) nNode).getAttribute("gradient_color_one").trim());
//                                primaryLayoutModelClass.setGradientTwoColorHex(((Element) nNode).getAttribute("gradient_color_two").trim());
//                                primaryLayoutModelClass.setPaddingLeft(Integer.parseInt(((Element) nNode).getAttribute("paddingLeft").trim()));
//                                primaryLayoutModelClass.setPaddingRight(Integer.parseInt(((Element) nNode).getAttribute("paddingRight").trim()));
//                                primaryLayoutModelClass.setPaddingTop(Integer.parseInt(((Element) nNode).getAttribute("paddingTop").trim()));
//                                primaryLayoutModelClass.setPaddingBottom(Integer.parseInt(((Element) nNode).getAttribute("paddingBottom").trim()));
//                                primaryLayoutModelClass.setMarginLeft(Integer.parseInt(((Element) nNode).getAttribute("marginLeft").trim()));
//                                primaryLayoutModelClass.setMarginRight(Integer.parseInt(((Element) nNode).getAttribute("marginRight").trim()));
//                                primaryLayoutModelClass.setMarginTop(Integer.parseInt(((Element) nNode).getAttribute("marginTop").trim()));
//                                primaryLayoutModelClass.setMarginBottom(Integer.parseInt(((Element) nNode).getAttribute("marginBottom").trim()));
//                                primaryLayoutModelClass.setGradientCornerRadius(Integer.parseInt(((Element) nNode).getAttribute("boarder_radius").trim()));
//                                primaryLayoutModelClass.setStroke(Integer.parseInt(((Element) nNode).getAttribute("boarder_stroke").trim()));
//                                primaryLayoutModelClass.setStrokeColor(((Element) nNode).getAttribute("boarder_stroke_color").trim());
//
//                                NodeList subLayoutList = nNode.getChildNodes();
//                                HashMap<Integer, SubLayoutsModelClass> integerSubLayoutModelHashMap = new HashMap<>();
//
//                                Log.d(TAG, "XML_To_SubLayout: " + nNode.getNodeName() + "");
//                                if (subLayoutList != null && subLayoutList.getLength() > 0) { // SubLayout
//                                    for (int j = 0; j < subLayoutList.getLength(); j++) {
//                                        SubLayoutsModelClass subLayoutsModelClass = new SubLayoutsModelClass();
//                                        Node node = subLayoutList.item(j);
//                                        if (node.getNodeType() == Node.ELEMENT_NODE) {
//                                            Element element = (Element) node;
//
//                                            String strwidth = element.getAttribute("width");
//                                            subLayoutsModelClass.setLayoutWidth(Integer.parseInt(strwidth));
//                                            subLayoutsModelClass.setAliasName(element.getAttribute("name").trim());
//                                            subLayoutsModelClass.setSubLayoutId(Integer.parseInt(element.getAttribute("id").trim()));
//                                            subLayoutsModelClass.setLayoutWidth(Integer.parseInt(element.getAttribute("width").trim()));
//                                            subLayoutsModelClass.setLayoutWidthPreView(Integer.parseInt((element.getAttribute("width").trim())));
//                                            subLayoutsModelClass.setLayoutHeight(Integer.parseInt((element.getAttribute("height").trim())));
//                                            subLayoutsModelClass.setLayoutHeightPreView(Integer.parseInt((element.getAttribute("height").trim())));
//                                            subLayoutsModelClass.setNooFColumns(Integer.parseInt((element.getAttribute("columnsNo").trim())));
//                                            subLayoutsModelClass.setfWidth(Float.parseFloat((!element.getAttribute("widthFloat").trim().equalsIgnoreCase("") ? element.getAttribute("widthFloat").trim() : "0.0")));
//                                            subLayoutsModelClass.setBackgroundType(element.getAttribute("backgroundType").trim());
//                                            if (subLayoutsModelClass.getBackgroundType() != null && subLayoutsModelClass.getBackgroundType().equalsIgnoreCase("Image")) {
//                                                subLayoutsModelClass.setBackgroundImage(element.getAttribute("backgroundValue").trim());
//                                            } else {
//                                                subLayoutsModelClass.setBackgroundColorHex(element.getAttribute("backgroundValue").trim());
//                                            }
//                                            Log.d(TAG, "XML_To_SubLayout1: " + element.getNodeType() + ", " + Integer.parseInt(element.getAttribute("id").trim()));
//                                            subLayoutsModelClass.setPaddingLeft(Integer.parseInt(!element.getAttribute("paddingLeft").trim().equalsIgnoreCase("") ? element.getAttribute("paddingLeft").trim() : "0"));
//                                            subLayoutsModelClass.setPaddingRight(Integer.parseInt(!element.getAttribute("paddingRight").trim().equalsIgnoreCase("") ? element.getAttribute("paddingRight").trim() :"0"));
//                                            subLayoutsModelClass.setPaddingTop(Integer.parseInt(!element.getAttribute("paddingTop").trim().equalsIgnoreCase("")? element.getAttribute("paddingTop").trim() : "0"));
//                                            subLayoutsModelClass.setPaddingBottom(Integer.parseInt(!element.getAttribute("paddingBottom").trim().equalsIgnoreCase("")? element.getAttribute("paddingRight").trim() :"0"));
//
//                                            subLayoutsModelClass.setMarginLeft(Integer.parseInt(!element.getAttribute("marginLeft").trim().equalsIgnoreCase("") ? element.getAttribute("marginLeft").trim() : "0"));
//                                            subLayoutsModelClass.setMarginRight(Integer.parseInt(!element.getAttribute("marginRight").trim().equalsIgnoreCase("") ? element.getAttribute("marginRight").trim() : "0"));
//                                            subLayoutsModelClass.setMarginTop(Integer.parseInt(!element.getAttribute("marginTop").trim().equalsIgnoreCase("") ? element.getAttribute("marginTop").trim() : "0"));
//                                            subLayoutsModelClass.setMarginBottom(Integer.parseInt(!element.getAttribute("marginBottom").trim().equalsIgnoreCase("") ? element.getAttribute("marginBottom").trim() : "0"));
//
//                                            subLayoutsModelClass.setSubLayoutAlignment(element.getAttribute("layout_alignment"));
//                                            subLayoutsModelClass.setGradientType(element.getAttribute("gradient_type").trim());
//                                            subLayoutsModelClass.setGradientOneColorHex(element.getAttribute("gradient_color_one").trim());
//                                            subLayoutsModelClass.setGradientTwoColorHex(element.getAttribute("gradient_color_two").trim());
//                                            subLayoutsModelClass.setGradientCornerRadius(Float.parseFloat(!element.getAttribute("boarder_radius").equalsIgnoreCase("") ? element.getAttribute("boarder_radius") : "0.0"));
//                                            subLayoutsModelClass.setStroke(Integer.parseInt(!element.getAttribute("boarder_stroke").trim().equalsIgnoreCase("") ? element.getAttribute("boarder_stroke").trim() : "0"));
//                                            subLayoutsModelClass.setStrokeColor(element.getAttribute("boarder_stroke_color").trim());
//
//
//                                            NodeList nodeListC = element.getChildNodes();
//                                            Log.d(TAG, "XML_To_ColumnsSize: " + nodeListC.getLength());
//                                            if (nodeListC != null && nodeListC.getLength() > 0) {
//                                                List<SubLayoutsModelClass> columnsModelList = new ArrayList<>();
//                                                for (int k = 0; k < nodeListC.getLength(); k++) { // column
//                                                    Log.d(TAG, "XML_To_Columns: " + nodeListC.item(k).getNodeName());
//                                                    Element elementCol = (Element) nodeListC.item(k);
//                                                    if (elementCol.getNodeName().equalsIgnoreCase("Param")) {
//                                                        String strCtrlName = elementCol.getAttribute("Control_name");
//                                                        String strCtrlType = elementCol.getAttribute("Control_type");
//                                                        List<MappingControlModel> mappingControlModels = new ArrayList<>();
//                                                        mappingControlModels.add(new MappingControlModel(strCtrlName, strCtrlType));
//                                                        subLayoutsModelClass.setSubMappedControlsList(mappingControlModels);
//
//                                                        Log.d(TAG, "XML_To_ControlParams: " + strCtrlName + "- " + strCtrlType);
//                                                    } else if (elementCol.getNodeName().equalsIgnoreCase("Column")) { // Column
//                                                        SubLayoutsModelClass selectedColumnObject = new SubLayoutsModelClass();
//                                                        selectedColumnObject.setPosition(k);
//                                                        selectedColumnObject.setParentPosition(subLayoutsModelClass.getSubLayoutId());
//
//                                                        NodeList paramNode = elementCol.getElementsByTagName("Param");
//                                                        Element param = (Element) paramNode.item(0);
//                                                        Log.d(TAG, "XML_To_ParamNodeName: " + param.getNodeName());
//                                                        String strCtrlName = param.getAttribute("Control_name");
//                                                        String strCtrlType = param.getAttribute("Control_type");
//                                                        List<MappingControlModel> subMappedControlsList = new ArrayList<>();
//                                                        subMappedControlsList.add(new MappingControlModel(strCtrlName, strCtrlType));
//                                                        selectedColumnObject.setSubMappedControlsList(subMappedControlsList);
//
//                                                        String strDefault = elementCol.getAttribute("defaultColor");
//                                                        selectedColumnObject.setColumnDefaultColor(Boolean.parseBoolean(strDefault));
//                                                        selectedColumnObject.setColumnBackgroundType(elementCol.getAttribute("backgroundType"));
//                                                        if (selectedColumnObject.getColumnBackgroundType() != null && selectedColumnObject.getColumnBackgroundType().equalsIgnoreCase("Image")) {
//                                                            selectedColumnObject.setColumnBackgroundImage(element.getAttribute("backgroundValue").trim());
//                                                        } else if (selectedColumnObject.getColumnBackgroundType() != null && selectedColumnObject.getColumnBackgroundType().equalsIgnoreCase("Color")) {
//                                                            selectedColumnObject.setColumnBackgroundColorHex(element.getAttribute("backgroundValue").trim());
//                                                        }
//                                                        selectedColumnObject.setPaddingLeftColumn(Integer.parseInt(elementCol.getAttribute("paddingLeft")));
//                                                        selectedColumnObject.setPaddingRightColumn(Integer.parseInt(elementCol.getAttribute("paddingRight")));
//                                                        selectedColumnObject.setPaddingTopColumn(Integer.parseInt(elementCol.getAttribute("paddingTop")));
//                                                        selectedColumnObject.setPaddingBottomColumn(Integer.parseInt(elementCol.getAttribute("paddingBottom")));
//
//                                                        selectedColumnObject.setMarginLeftColumn(Integer.parseInt(elementCol.getAttribute("marginLeft")));
//                                                        selectedColumnObject.setMarginRightColumn(Integer.parseInt(elementCol.getAttribute("marginRight")));
//                                                        selectedColumnObject.setMarginTopColumn(Integer.parseInt(elementCol.getAttribute("marginTop")));
//                                                        selectedColumnObject.setMarginBottomColumn(Integer.parseInt(elementCol.getAttribute("marginBottom")));
//
//                                                        selectedColumnObject.setColumnLayoutAlignment(elementCol.getAttribute("layout_alignment"));
//                                                        selectedColumnObject.setGradientTypeColumn(elementCol.getAttribute("gradient_type"));
//                                                        selectedColumnObject.setGradientOneColorHexColumn(elementCol.getAttribute("gradient_color_one"));
//                                                        selectedColumnObject.setGradientTwoColorHexColumn(elementCol.getAttribute("gradient_color_two"));
//                                                        selectedColumnObject.setGradientCornerRadiusColumn(Float.parseFloat(!elementCol.getAttribute("boarder_radius").equalsIgnoreCase("") ? elementCol.getAttribute("boarder_radius") : "0.0"));
//                                                        selectedColumnObject.setStrokeColumn(Integer.parseInt(elementCol.getAttribute("boarder_stroke")));
//                                                        selectedColumnObject.setStrokeColorColumn(elementCol.getAttribute("boarder_stroke_color"));
//                                                        columnsModelList.add(selectedColumnObject);
////                                                    String strCtrlType = elementCol.getAttribute("Control_type");
//                                                        Log.d(TAG, "XML_To_ControlParamsCol: " + strDefault + " - " + strCtrlName + "- " + strCtrlType);
//                                                    }
//                                                }
//                                                subLayoutsModelClass.setColumnsModelList(columnsModelList);
//                                            }
//
//                                        }
//                                        integerSubLayoutModelHashMap.put((j + 1), subLayoutsModelClass);
//
//
//                                    }
//                                    primaryLayoutModelClass.setSubLayoutsModelClassHashMap(integerSubLayoutModelHashMap);
//
//
//                                }
//
//
//                            }
//
//                            AppObject.setPrimaryLayoutModelClass(primaryLayoutModelClass);
//
//                        }
                    // Working Ui Main End
                    // New Working UI MainForm, Section,  SubForm Start
                    else if (nNode.getNodeName().trim().equalsIgnoreCase("UIFormSettings")) {
                        AppObject.setUiType(((Element) nNode).getAttribute("uiType").trim());
                        if (AppObject.getUiType().equalsIgnoreCase("Default UI")) {
                            AppObject.setUIFormNeeded(false);
                        }
                        NodeList ControlNodeList = nNode.getChildNodes();
                        for (int j = 0; j < ControlNodeList.getLength(); j++) {
                            Node ControlNode = ControlNodeList.item(j);
                            if (ControlNode.getNodeName().equalsIgnoreCase("PrimaryLayout")) {
                                setUiFromDesignObject(AppObject, null, ControlNode, 0);
                            }
                        }
                    }
                    else if (nNode.getNodeName().trim().equalsIgnoreCase("UISubFormSettings")) {
                        NodeList ControlNodeList = nNode.getChildNodes();
                        for (int j = 0; j < ControlNodeList.getLength(); j++) {
                            Node ControlNode = ControlNodeList.item(j);
                            if (ControlNode.getNodeName().equalsIgnoreCase("PrimaryLayout")) {
                                List<ControlObject> finalControlObjectList = new ArrayList<>();
                                List<ControlObject> mainFormControlObjectList = new ArrayList<>();
                                if(AppObject.getControls_list() != null){
                                    boolean isSubFromInSection = false;
                                    mainFormControlObjectList = AppObject.getControls_list();
                                    if(mainFormControlObjectList  != null){
                                        for (int k = 0; k <mainFormControlObjectList.size(); k++) {
                                            if(mainFormControlObjectList.get(k).getControlType().equalsIgnoreCase(AppConstants.CONTROL_TYPE_SECTION)){
                                                ControlObject sectionControlObject = new ControlObject();
                                                sectionControlObject = mainFormControlObjectList.get(k);
                                                List<ControlObject> sectionControlObjectsList = new ArrayList<>();
                                                sectionControlObjectsList = sectionControlObject.getSubFormControlList();
                                                finalControlObjectList = sectionControlObjectsList;
                                                isSubFromInSection = true;
                                            }

                                            if(!isSubFromInSection){
                                                finalControlObjectList = AppObject.getControls_list();
                                            }
                                        }
                                    }
                                }


                                for (ControlObject controlObject : finalControlObjectList) {
                                    controlObject.setUiType(((Element) nNode).getAttribute("uiType").trim());
                                    controlObject.setUIFormNeededSubForm(Boolean.parseBoolean(((Element) nNode).getAttribute("isSubFormUINeeded").trim()));
                                    if (controlObject.getUiType().equalsIgnoreCase("Default UI")) {
                                        controlObject.setUIFormNeededSubForm(false);
                                    }
                                    String subFormName = ((Element) ControlNode).getAttribute("sub_form_name").trim();
//                                    String subFormName = "subform_in_section";
                                    if (controlObject.getControlName().equalsIgnoreCase(subFormName)) {
                                        setUiFromDesignObject(null, controlObject, ControlNode, 1);
                                    }
                                }
                            }
                        }
                    }
                    else if (nNode.getNodeName().trim().equalsIgnoreCase("UISectionSettings")) {
                        NodeList ControlNodeList = nNode.getChildNodes();
                        for (int j = 0; j < ControlNodeList.getLength(); j++) {
                            Node ControlNode = ControlNodeList.item(j);
                            if (ControlNode.getNodeName().equalsIgnoreCase("PrimaryLayout")) {
                                for (ControlObject controlObject : AppObject.getControls_list()) {
                                    controlObject.setSectionUIFormNeeded(Boolean.parseBoolean(((Element) nNode).getAttribute("isSectionUINeeded").trim()));
//                                    controlObject.setSectionUIFormNeeded(true);
                                    String sectionCtrlName = ((Element) ControlNode).getAttribute("section_name").trim();
//                                    String sectionCtrlName = "section_main";
                                    if (controlObject.getControlName().equalsIgnoreCase(sectionCtrlName)) {
                                        setUiFromDesignObject(null, controlObject, ControlNode, 1);
                                    }
                                }
                            }
                        }
                    }

                    // New Working UI MainForm,Section, SuForm End
                }

//                }
            }


            AppObject.setFilterSubFormColumnsList(filterSubFormColumnsList);

        } catch (ParserConfigurationException | IOException | SAXException e) {
            System.out.println("Error at parse==" + e.toString());
        }catch (Exception e){
            Log.getStackTraceString(e);
            Log.d(TAG, "XML_To_DataCollectionObject: "+e.toString());

        }
        AppConstants.controlPositionInUIAllApps.put(AppObject.getApp_Name(), controlPositionInUI);
        return AppObject;
    }

    private void setUiFromDesignObject(DataCollectionObject dataCollectionObject, ControlObject controlObject, Node nNode, int flag) {
        try {
            String subformName = null;
            UIPrimaryLayoutModelClass primaryLayoutModelClass = new UIPrimaryLayoutModelClass();
            UILayoutProperties uiLayoutProperties = new UILayoutProperties();
            if (nNode.getNodeType() == Node.ELEMENT_NODE) {

                if (((Element) nNode).getAttribute("sub_form_name") != null) {
                    primaryLayoutModelClass.setSubformName(((Element) nNode).getAttribute("sub_form_name").trim());
                    if (!AppConstants.subformWithUI.contains(primaryLayoutModelClass.getSubformName())) {
                        AppConstants.subformWithUI.add(primaryLayoutModelClass.getSubformName());
                    }
                }
                if (((Element) nNode).getAttribute("section_name") != null) {
                    primaryLayoutModelClass.setSectionName(((Element) nNode).getAttribute("section_name").trim());
                    if (!AppConstants.sectionWithUI.contains(primaryLayoutModelClass.getSectionName())) {
                        AppConstants.sectionWithUI.add(primaryLayoutModelClass.getSectionName());
                    }
                }
                primaryLayoutModelClass.setPrimaryLayoutAliasName(((Element) nNode).getAttribute("name").trim());
                primaryLayoutModelClass.setScreenType(((Element) nNode).getAttribute("screen").trim());
                uiLayoutProperties.setHideDefaultToolbar(Boolean.parseBoolean((((Element) nNode).getAttribute("isHideDefaultToolbar").trim())));
                uiLayoutProperties.setMarginLeft(Integer.parseInt(((Element) nNode).getAttribute("margin_left").trim()));
                uiLayoutProperties.setMarginRight(Integer.parseInt(((Element) nNode).getAttribute("margin_right").trim()));
                uiLayoutProperties.setMarginTop(Integer.parseInt(((Element) nNode).getAttribute("margin_top").trim()));
                uiLayoutProperties.setMarginBottom(Integer.parseInt(((Element) nNode).getAttribute("margin_bottom").trim()));
                uiLayoutProperties.setPaddingLeft(Integer.parseInt(((Element) nNode).getAttribute("padding_left").trim()));
                uiLayoutProperties.setPaddingRight(Integer.parseInt(((Element) nNode).getAttribute("padding_right").trim()));
                uiLayoutProperties.setPaddingTop(Integer.parseInt(((Element) nNode).getAttribute("padding_top").trim()));
                uiLayoutProperties.setPaddingBottom(Integer.parseInt(((Element) nNode).getAttribute("padding_bottom").trim()));
                uiLayoutProperties.setOrientation(((Element) nNode).getAttribute("orientation").trim());
                uiLayoutProperties.setInsideAlignment(((Element) nNode).getAttribute("inside_alignment").trim());
                uiLayoutProperties.setBackgroundType(((Element) nNode).getAttribute("background_type").trim());
                if (uiLayoutProperties.getBackgroundType().equalsIgnoreCase("Image")) {
                    uiLayoutProperties.setBackGroundImage(((Element) nNode).getAttribute("background_image").trim());
                } else if (uiLayoutProperties.getBackgroundType().equalsIgnoreCase("Color")) {
                    uiLayoutProperties.setColorType(((Element) nNode).getAttribute("background_color_type").trim());
                    if (uiLayoutProperties.getColorType().equalsIgnoreCase("Transparent")) {
                        uiLayoutProperties.setBackGroundColorHex(((Element) nNode).getAttribute("background_color").trim());
                    } else if (uiLayoutProperties.getColorType().equalsIgnoreCase("Plain")) {
                        uiLayoutProperties.setBackGroundColorHex(((Element) nNode).getAttribute("background_color").trim());
                    } else if (uiLayoutProperties.getColorType().equalsIgnoreCase("Gradient")) {
                        uiLayoutProperties.setGradientType(((Element) nNode).getAttribute("gradient_type").trim());
                        uiLayoutProperties.setGradientOneColorHex(((Element) nNode).getAttribute("gradient_color_one").trim());
                        uiLayoutProperties.setGradientTwoColorHex(((Element) nNode).getAttribute("gradient_color_two").trim());
                        uiLayoutProperties.setBorderColorHex(((Element) nNode).getAttribute("boarder_color").trim());
                        uiLayoutProperties.setBorderRadius(((Element) nNode).getAttribute("boarder_radius").trim());
                        uiLayoutProperties.setBorderStroke(((Element) nNode).getAttribute("boarder_stroke").trim());
                    }
                }
                primaryLayoutModelClass.setPrimaryLayoutProperties(uiLayoutProperties);
                NodeList layoutList = nNode.getChildNodes();
                List<LayoutProperties> layoutPropertiesList = new ArrayList<>();
                if (layoutList != null && layoutList.getLength() > 0) {
                    for (int j = 0; j < layoutList.getLength(); j++) {
                        LayoutProperties layoutProperties = new LayoutProperties();
                        UILayoutProperties uiLayoutProperties_layout = new UILayoutProperties();

                        Node node = layoutList.item(j);
                        if (node.getNodeType() == Node.ELEMENT_NODE) {
                            Element element = (Element) node;
                            layoutProperties.setPosition(Integer.parseInt(element.getAttribute("LayoutId").trim()));
                            layoutProperties.setLayoutName(element.getAttribute("layout_name").trim());
                            layoutProperties.setLayoutPropertiesType(element.getAttribute("property_type").trim());
                            layoutProperties.setLayoutToolBar(Boolean.parseBoolean(element.getAttribute("layout_tool_bar").trim()));
                            uiLayoutProperties_layout.setAliasName(element.getAttribute("alias_name").trim());
                            uiLayoutProperties_layout.setWidth(Integer.parseInt(element.getAttribute("width").trim()));
                            uiLayoutProperties_layout.setHeight(Integer.parseInt((element.getAttribute("height").trim())));
                            uiLayoutProperties_layout.setWrap_or_dp((element.getAttribute("data_appearance").trim()));
                            uiLayoutProperties_layout.setMarginLeft(Integer.parseInt((element.getAttribute("margin_left").trim())));
                            uiLayoutProperties_layout.setMarginRight(Integer.parseInt((element.getAttribute("margin_right").trim())));
                            uiLayoutProperties_layout.setMarginTop(Integer.parseInt((element.getAttribute("margin_top").trim())));
                            uiLayoutProperties_layout.setMarginBottom(Integer.parseInt((element.getAttribute("margin_bottom").trim())));
                            uiLayoutProperties_layout.setPaddingLeft(Integer.parseInt((element.getAttribute("padding_left").trim())));
                            uiLayoutProperties_layout.setPaddingRight(Integer.parseInt((element.getAttribute("padding_right").trim())));
                            uiLayoutProperties_layout.setPaddingTop(Integer.parseInt((element.getAttribute("padding_top").trim())));
                            uiLayoutProperties_layout.setPaddingBottom(Integer.parseInt((element.getAttribute("padding_bottom").trim())));
                            uiLayoutProperties_layout.setOrientation((element.getAttribute("orientation").trim()));
                            uiLayoutProperties_layout.setOverflow(Boolean.parseBoolean((element.getAttribute("overflow").trim())));
                            uiLayoutProperties_layout.setInsideAlignment((element.getAttribute("inside_alignment").trim()));
                            uiLayoutProperties_layout.setControlVerticalAlignment(element.getAttribute("control_vertical_alignment").trim());
                            uiLayoutProperties_layout.setControlHorizontalAlignment(element.getAttribute("control_horizontal_alignment").trim());
                            uiLayoutProperties_layout.setWidthFixedVariable(element.getAttribute("width_type").trim());
                            uiLayoutProperties_layout.setBackgroundType((element.getAttribute("background_type").trim()));
                            if (uiLayoutProperties_layout.getBackgroundType().equalsIgnoreCase("Image")) {
                                uiLayoutProperties_layout.setBackGroundImage(((Element) node).getAttribute("background_image").trim());
                            } else if (uiLayoutProperties_layout.getBackgroundType().equalsIgnoreCase("Color")) {
                                uiLayoutProperties_layout.setColorType(((Element) node).getAttribute("background_color_type").trim());
                                if (uiLayoutProperties_layout.getColorType().equalsIgnoreCase("Transparent")) {
                                    uiLayoutProperties_layout.setBackGroundColorHex(((Element) node).getAttribute("background_color").trim());
                                } else if (uiLayoutProperties_layout.getColorType().equalsIgnoreCase("Plain")) {
                                    uiLayoutProperties_layout.setBackGroundColorHex(((Element) node).getAttribute("background_color").trim());
                                } else if (uiLayoutProperties_layout.getColorType().equalsIgnoreCase("Gradient")) {
                                    uiLayoutProperties_layout.setGradientType(((Element) node).getAttribute("gradient_type").trim());
                                    uiLayoutProperties_layout.setGradientOneColorHex(((Element) node).getAttribute("gradient_color_one").trim());
                                    uiLayoutProperties_layout.setGradientTwoColorHex(((Element) node).getAttribute("gradient_color_two").trim());
                                    uiLayoutProperties_layout.setBorderColorHex(((Element) node).getAttribute("boarder_color").trim());
                                    uiLayoutProperties_layout.setBorderRadius(((Element) node).getAttribute("boarder_radius").trim());
                                    uiLayoutProperties_layout.setBorderStroke(((Element) node).getAttribute("boarder_stroke").trim());
                                }
                            }
                            layoutProperties.setUiLayoutProperties(uiLayoutProperties_layout);

                            NodeList nodeListC = element.getChildNodes();
                            List<LayoutProperties> subLayoutPropertiesList = new ArrayList<>();

                            if (nodeListC != null && nodeListC.getLength() > 0) { //SubLayout
                                for (int k = 0; k < nodeListC.getLength(); k++) { // column
                                    Element elementCol = (Element) nodeListC.item(k);
                                    if (elementCol.getNodeName().equalsIgnoreCase("Param")) {
                                        String strCtrlName = elementCol.getAttribute("control_name");
                                        String strCtrlType = elementCol.getAttribute("control_type");
                                        String strDisplayName = elementCol.getAttribute("display_name");
                                        MappingControlModel mappingControlModels = new MappingControlModel();
                                        mappingControlModels.setControlName(strCtrlName);
                                        mappingControlModels.setControlType(strCtrlType);
                                        mappingControlModels.setDisplayName(strDisplayName);
                                        ControlUIProperties controlUIProperties_layout = new ControlUIProperties();
                                        controlUIProperties_layout.setTypeOfWidth(elementCol.getAttribute("control_type_of_width").trim());
                                        controlUIProperties_layout.setCustomWidthInDP(elementCol.getAttribute("control_custom_width").trim());
                                        controlUIProperties_layout.setTypeOfHeight(elementCol.getAttribute("control_type_of_height").trim());
                                        controlUIProperties_layout.setCustomHeightInDP(elementCol.getAttribute("control_custom_height").trim());
                                        controlUIProperties_layout.setFontStyle(elementCol.getAttribute("control_font_style").trim());
                                        controlUIProperties_layout.setFontSize(elementCol.getAttribute("control_font_size").trim());
                                        controlUIProperties_layout.setFontColorHex(elementCol.getAttribute("control_font_color").trim());
                                        controlUIProperties_layout.setTintColorHex(elementCol.getAttribute("tint_color").trim());
                                        controlUIProperties_layout.setCustomImageFit(elementCol.getAttribute("imageFit").trim());
                                        controlUIProperties_layout.setCustomImageRadius(elementCol.getAttribute("imageRadius").trim());
                                        controlUIProperties_layout.setCustomImageURL(elementCol.getAttribute("imageURL").trim());
                                        mappingControlModels.setControlUIProperties(controlUIProperties_layout);
                                        layoutProperties.setLayoutControl(mappingControlModels);
                                        layoutProperties.setAddControl(false);
                                        layoutProperties.setAddLayout(false);
                                        controlPositionInUI.put(strCtrlName, String.valueOf(layoutProperties.getPosition()));
                                        Log.d(TAG, "XML_To_ControlParams: " + strCtrlName + "- " + strCtrlType);
                                    } else if (elementCol.getNodeName().equalsIgnoreCase("SubLayout")) {// Column
                                        layoutProperties.setAddControl(false);
                                        layoutProperties.setAddLayout(true);
                                        LayoutProperties subLayoutProperties = new LayoutProperties();
                                        UILayoutProperties uiLayoutProperties_subLayout = new UILayoutProperties();

//                                    Node sub_node = layoutList.item(j);
                                        Node sub_node = nodeListC.item(k);
                                        if (sub_node.getNodeType() == Node.ELEMENT_NODE) {
                                            Element sub_element = (Element) sub_node;

                                            subLayoutProperties.setPosition(Integer.parseInt(sub_element.getAttribute("LayoutId").trim()));
                                            subLayoutProperties.setLayoutName(sub_element.getAttribute("layout_name").trim());
                                            subLayoutProperties.setLayoutPropertiesType(sub_element.getAttribute("property_type").trim());
                                            uiLayoutProperties_subLayout.setAliasName(sub_element.getAttribute("alias_name").trim());
                                            uiLayoutProperties_subLayout.setWidth(Integer.parseInt(sub_element.getAttribute("width").trim()));
                                            uiLayoutProperties_subLayout.setHeight(Integer.parseInt((sub_element.getAttribute("height").trim())));
                                            uiLayoutProperties_subLayout.setWrap_or_dp((sub_element.getAttribute("data_appearance").trim()));
                                            uiLayoutProperties_subLayout.setMarginLeft(Integer.parseInt((sub_element.getAttribute("margin_left").trim())));
                                            uiLayoutProperties_subLayout.setMarginRight(Integer.parseInt((sub_element.getAttribute("margin_right").trim())));
                                            uiLayoutProperties_subLayout.setMarginTop(Integer.parseInt((sub_element.getAttribute("margin_top").trim())));
                                            uiLayoutProperties_subLayout.setMarginBottom(Integer.parseInt((sub_element.getAttribute("margin_bottom").trim())));
                                            uiLayoutProperties_subLayout.setPaddingLeft(Integer.parseInt((sub_element.getAttribute("padding_left").trim())));
                                            uiLayoutProperties_subLayout.setPaddingRight(Integer.parseInt((sub_element.getAttribute("padding_right").trim())));
                                            uiLayoutProperties_subLayout.setPaddingTop(Integer.parseInt((sub_element.getAttribute("padding_top").trim())));
                                            uiLayoutProperties_subLayout.setPaddingBottom(Integer.parseInt((sub_element.getAttribute("padding_bottom").trim())));
                                            uiLayoutProperties_subLayout.setOrientation((sub_element.getAttribute("orientation").trim()));
                                            uiLayoutProperties_subLayout.setInsideAlignment((sub_element.getAttribute("inside_alignment").trim()));
                                            uiLayoutProperties_subLayout.setControlVerticalAlignment(sub_element.getAttribute("control_vertical_alignment").trim());
                                            uiLayoutProperties_subLayout.setControlHorizontalAlignment(sub_element.getAttribute("control_horizontal_alignment").trim());
                                            uiLayoutProperties_subLayout.setBackgroundType((sub_element.getAttribute("background_type").trim()));
                                            if (uiLayoutProperties_subLayout.getBackgroundType().equalsIgnoreCase("Image")) {
                                                uiLayoutProperties_subLayout.setBackGroundImage(((Element) sub_node).getAttribute("background_image").trim());
                                            } else if (uiLayoutProperties_subLayout.getBackgroundType().equalsIgnoreCase("Color")) {
                                                uiLayoutProperties_subLayout.setColorType(((Element) sub_node).getAttribute("background_color_type").trim());
                                                if (uiLayoutProperties_subLayout.getColorType().equalsIgnoreCase("Transparent")) {
                                                    uiLayoutProperties_subLayout.setBackGroundColorHex(((Element) sub_node).getAttribute("background_color").trim());
                                                } else if (uiLayoutProperties_subLayout.getColorType().equalsIgnoreCase("Plain")) {
                                                    uiLayoutProperties_subLayout.setBackGroundColorHex(((Element) sub_node).getAttribute("background_color").trim());
                                                } else if (uiLayoutProperties_subLayout.getColorType().equalsIgnoreCase("Gradient")) {
                                                    uiLayoutProperties_subLayout.setGradientType(((Element) sub_node).getAttribute("gradient_type").trim());
                                                    uiLayoutProperties_subLayout.setGradientOneColorHex(((Element) sub_node).getAttribute("gradient_color_one").trim());
                                                    uiLayoutProperties_subLayout.setGradientTwoColorHex(((Element) sub_node).getAttribute("gradient_color_two").trim());
                                                    uiLayoutProperties_subLayout.setBorderColorHex(((Element) sub_node).getAttribute("boarder_color").trim());
                                                    uiLayoutProperties_subLayout.setBorderRadius(((Element) sub_node).getAttribute("boarder_radius").trim());
                                                    uiLayoutProperties_subLayout.setBorderStroke(((Element) sub_node).getAttribute("boarder_stroke").trim());
                                                }
                                            }
                                            NodeList subNodeListC = sub_element.getChildNodes();
                                            Log.d(TAG, "XML_To_ColumnsSize: " + subNodeListC.getLength());

                                            if (subNodeListC != null && subNodeListC.getLength() > 0) {
                                                for (int l = 0; l < subNodeListC.getLength(); l++) { // column
                                                    Log.d(TAG, "XML_To_Columns: " + subNodeListC.item(l).getNodeName());
                                                    Element elementControl = (Element) subNodeListC.item(l);
                                                    if (elementControl.getNodeName().equalsIgnoreCase("Param")) {
                                                        String strCtrlName = elementControl.getAttribute("control_name");
                                                        String strCtrlType = elementControl.getAttribute("control_type");
                                                        String strDisplayName = elementControl.getAttribute("display_name");
                                                        String strTypeOfWidth = elementControl.getAttribute("control_type_of_width").trim();
                                                        String strCtrlWidthInDP = elementControl.getAttribute("control_custom_width").trim();
                                                        String strTypeOfHeight = elementControl.getAttribute("control_type_of_height").trim();
                                                        String strCtrlHeightInDP = elementControl.getAttribute("control_custom_height").trim();
                                                        String strCtrlUIFontStyle = elementControl.getAttribute("control_font_style").trim();
                                                        String strCtrlUIFontSize = elementControl.getAttribute("control_font_size").trim();
                                                        String strCtrlUIFontColor = elementControl.getAttribute("control_font_color").trim();
                                                        String strCtrlUITintColor = elementControl.getAttribute("tint_color").trim();
                                                        MappingControlModel mappingControlModelsSub = new MappingControlModel();
                                                        mappingControlModelsSub.setControlName(strCtrlName);
                                                        mappingControlModelsSub.setControlType(strCtrlType);
                                                        mappingControlModelsSub.setDisplayName(strDisplayName);
                                                        ControlUIProperties controlUIProperties_subLayout = new ControlUIProperties();
                                                        controlUIProperties_subLayout.setTypeOfWidth(strTypeOfWidth);
                                                        controlUIProperties_subLayout.setCustomWidthInDP(strCtrlWidthInDP);
                                                        controlUIProperties_subLayout.setTypeOfHeight(strTypeOfHeight);
                                                        controlUIProperties_subLayout.setCustomHeightInDP(strCtrlHeightInDP);
                                                        controlUIProperties_subLayout.setFontStyle(strCtrlUIFontStyle);
                                                        controlUIProperties_subLayout.setFontSize(strCtrlUIFontSize);
                                                        controlUIProperties_subLayout.setFontColorHex(strCtrlUIFontColor);
                                                        controlUIProperties_subLayout.setTintColorHex(strCtrlUITintColor);
                                                        controlUIProperties_subLayout.setCustomImageFit(elementControl.getAttribute("imageFit").trim());
                                                        controlUIProperties_subLayout.setCustomImageRadius(elementControl.getAttribute("imageRadius").trim());
                                                        controlUIProperties_subLayout.setCustomImageURL(elementControl.getAttribute("imageURL").trim());
                                                        mappingControlModelsSub.setControlUIProperties(controlUIProperties_subLayout);
                                                        subLayoutProperties.setLayoutControl(mappingControlModelsSub);
                                                        subLayoutProperties.setAddControl(false);
                                                        subLayoutProperties.setAddLayout(false);
                                                        controlPositionInUI.put(strCtrlName, layoutProperties.getPosition() + "$" + subLayoutProperties.getPosition());

                                                    }
                                                }
                                            }
                                            subLayoutProperties.setUiLayoutProperties(uiLayoutProperties_subLayout);
                                            subLayoutPropertiesList.add(subLayoutProperties);
                                        }
                                    }
                                }
                            }
                            layoutProperties.setSubLayoutPropertiesList(subLayoutPropertiesList);
                            layoutPropertiesList.add(layoutProperties);
                        }
                    }
                    primaryLayoutModelClass.setLayoutPropertiesList(layoutPropertiesList);
                }
            }
            if (flag == 0) {
                dataCollectionObject.setUiPrimaryLayoutModelClass(primaryLayoutModelClass);
            } else if (flag == 1) {
                controlObject.setUiPrimaryLayoutModelClass(primaryLayoutModelClass);
            }
        }catch (Exception e){
            Log.getStackTraceString(e);
        }

    }

    private void setItems(NodeList RBItemsList, ControlObject controlObject) {
        List<String> rbItems = new ArrayList<>();
        List<Item> rbItemsList = new ArrayList<>();
//        NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
        for (int l = 0; l < RBItemsList.getLength(); l++) {
            Node Opton1 = RBItemsList.item(l);

            Item item = new Item();
            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                    String defaultValue = ((Element) Opton1).getAttribute("default");
                    if (defaultValue.equalsIgnoreCase("true")) {
                        controlObject.setDefaultItemIndex(l);
                        controlObject.setDefaultItem(((Element) Opton1).getAttribute("id"));
                    }
                    rbItems.add(Opton1.getTextContent().trim());
                    item.setId(((Element) Opton1).getAttribute("id"));
                    item.setValue(Opton1.getTextContent().trim());

                    rbItemsList.add(item);

                }
            }
        }

        controlObject.setItems(rbItems);
        controlObject.setItemsList(rbItemsList);
    }

    private void setLangauge(Node ControlNode, ControlObject controlObject) {
//        ControlObject langObject = new ControlObject();
        List<Item> langItems = new ArrayList<>();

        if (((Element) ControlNode).getElementsByTagName("RTL").getLength() != 0) {
            NodeList languageList = ((Element) ControlNode).getElementsByTagName("RTL").item(0).getChildNodes();
            if (languageList != null && languageList.getLength() > 0) {

                LinkedHashMap<String, ControlObject> languageMap = new LinkedHashMap<>();

                for (int k = 0; k < languageList.getLength(); k++) {

                    Node language = languageList.item(k);
                    if (language.getNodeType() == Node.ELEMENT_NODE) {
                        ControlObject langObject = new ControlObject();

                        String langCode = ((Element) language).getAttribute("code").trim();

                        NodeList innerNodeList = language.getChildNodes();

                        for (int i = 0; i < innerNodeList.getLength(); i++) {
                            Node iNode = language.getChildNodes().item(i);
                            switch (iNode.getNodeName().trim()) {
                                case "DisplayName":
                                    langObject.setDisplayName(iNode.getTextContent().trim());

                                    break;
                                case "Hint":
                                    langObject.setHint(iNode.getTextContent().trim());

                                    break;
                                case "DefaultValue":
                                    langObject.setDefaultValue(iNode.getTextContent().trim());

                                    break;
                                case "NullError":
                                    langObject.setMandatoryFieldError(iNode.getTextContent().trim());

                                    break;
                                case "UniqueFieldError":
                                    langObject.setUniqueFieldError(iNode.getTextContent().trim());

                                    break;
                                case "UpperLimitError":
                                    langObject.setUpperLimitErrorMesage(iNode.getTextContent().trim());

                                    break;
                                case "LowerLimitError":
                                    langObject.setLowerLimitErrorMesage(iNode.getTextContent().trim());

                                    break;
                                case "CappingDigitsError":
                                    langObject.setCappingError(iNode.getTextContent().trim());

                                    break;
                                case "MaxCharError":
                                    langObject.setMaxCharError(iNode.getTextContent().trim());

                                    break;
                                case "MinCharError":
                                    langObject.setMinCharError(iNode.getTextContent().trim());

                                    break;
                                case "MaxUploadError":
                                    langObject.setMaxUploadError(iNode.getTextContent().trim());

                                    break;
                                case "MinUploadError":
                                    langObject.setMinUploadError(iNode.getTextContent().trim());

                                    break;
                                case "BetweenDatesError":
                                    langObject.setBetweenStartAndEndDateError(iNode.getTextContent().trim());

                                    break;
                                case "BeforeCurrentDateError":
                                    langObject.setBeforeCurrentDateError(iNode.getTextContent().trim());

                                    break;
                                case "AfterCurrentDateError":
                                    langObject.setAfterCurrentDateError(iNode.getTextContent().trim());

                                    break;
                                case "MaxDurationError":
                                    langObject.setMaximumDurationError(iNode.getTextContent().trim());

                                    break;
                                case "MinDurationError":
                                    langObject.setMinimumDurationError(iNode.getTextContent().trim());

                                    break;
                                case "MinValueError":
                                    langObject.setMinAmountError(iNode.getTextContent().trim());

                                    break;
                                case "MaxValueError":
                                    langObject.setMaxAmountError(iNode.getTextContent().trim());

                                    break;
                                case "MaxRowsError":
                                    langObject.setMaximumRowsError(iNode.getTextContent().trim());

                                    break;
                                case "MinRowsError":
                                    langObject.setMinimumRowsError(iNode.getTextContent().trim());

                                    break;
                                case "Items":

                                    NodeList itemNodeList = iNode.getChildNodes();
                                    for (int j = 0; j < itemNodeList.getLength(); j++) {
                                        Node itemNode = itemNodeList.item(j);
                                        Item item = new Item();
                                        item.setValue(itemNode.getTextContent().trim());
                                        item.setId(((Element) itemNode).getAttribute("id").trim());
                                        langItems.add(item);

                                    }
                                    langObject.setItemsList(langItems);


                                    break;

                            }

                        }
                        languageMap.put(langCode, langObject);



                    }
                }

                controlObject.setTranslationsMappingObject(languageMap);
            }

        }
    }

    private void setAppLevelLangauge(Node ControlNode, DataCollectionObject AppObject) {
        LinkedHashMap<String, String> headerMap = new LinkedHashMap<>();
        LinkedHashMap<String, String> appNamesMap = new LinkedHashMap<>();
        LinkedHashMap<String, String> appDescriptionMap = new LinkedHashMap<>();
        if (((Element) ControlNode).getElementsByTagName("RTL").getLength() != 0) {
            NodeList languageList = ((Element) ControlNode).getElementsByTagName("RTL").item(((Element) ControlNode).getElementsByTagName("RTL").getLength() - 1).getChildNodes();
            if (languageList != null && languageList.getLength() > 0) {
                for (int k = 0; k < languageList.getLength(); k++) {

                    Node language = languageList.item(k);

                    String langCode = ((Element) language).getAttribute("code").trim();

                    NodeList innerNodeList = language.getChildNodes();
                    for (int i = 0; i < innerNodeList.getLength(); i++) {
                        Node iNode = language.getChildNodes().item(i);
                        switch (iNode.getNodeName().trim()) {
                            case "HeaderName":
                                headerMap.put(langCode, iNode.getTextContent().trim());
                                break;
                            case "AppName":
                                appNamesMap.put(langCode, iNode.getTextContent().trim());
                                break;
                            case "AppDescription":
                                appDescriptionMap.put(langCode, iNode.getTextContent().trim());
                                break;
                        }

                    }
                }
                AppObject.setTranslatedAppNames(appNamesMap);
                AppObject.setTranslatedAppDescriptions(appDescriptionMap);
                AppObject.setTranslatedAppTitleMap(headerMap);
            }

        }
    }

    private void setQueryAppLevelLangauge(Node ControlNode, Create_Query_Object create_query_object) {
        LinkedHashMap<String, String> headerMap = new LinkedHashMap<>();
        LinkedHashMap<String, String> appNamesMap = new LinkedHashMap<>();
        LinkedHashMap<String, String> appDescriptionMap = new LinkedHashMap<>();
        if (((Element) ControlNode).getElementsByTagName("RTL").getLength() != 0) {
            NodeList languageList = ((Element) ControlNode).getElementsByTagName("RTL").item(((Element) ControlNode).getElementsByTagName("RTL").getLength() - 1).getChildNodes();
            if (languageList != null && languageList.getLength() > 0) {
                for (int k = 0; k < languageList.getLength(); k++) {

                    Node language = languageList.item(k);

                    String langCode = ((Element) language).getAttribute("code").trim();

                    NodeList innerNodeList = language.getChildNodes();

                    for (int i = 0; i < innerNodeList.getLength(); i++) {
                        Node iNode = language.getChildNodes().item(i);
                        if (iNode.getNodeType() == Node.ELEMENT_NODE) {
                            switch (iNode.getNodeName().trim()) {
                                case "HeaderName":
                                    headerMap.put(langCode, getCharacterDataFromElement(((Element) iNode)));
                                    break;
                                case "AppName":
                                    appNamesMap.put(langCode, getCharacterDataFromElement(((Element) iNode)));
                                    break;
                                case "AppDescription":
                                    appDescriptionMap.put(langCode, getCharacterDataFromElement(((Element) iNode)));
                                    break;
                            }
                        }
                    }
                }
                create_query_object.setTranslatedAppNamesMap(appNamesMap);
                create_query_object.setTranslatedAppDescriptionsMap(appDescriptionMap);
                create_query_object.setTranslatedAppTitleMap(headerMap);
            }

        }
    }

    public WebLinkObject XML_To_WebLinkObject(String XMLString) {
        System.out.println("=======Step WebLinkObject===============");
        WebLinkObject webLinkObject = new WebLinkObject();
        try {
            String response = XMLString;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;
            builder = factory.newDocumentBuilder();
            doc = builder.parse(new InputSource(new StringReader(response)));
            doc.getDocumentElement().normalize();

            NodeList nList = doc.getChildNodes().item(0).getChildNodes();
            webLinkObject.setWebLink_Name(((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    if (nNode.getNodeName().trim().equalsIgnoreCase("URL")) {
                        webLinkObject.setWebLink_Url(nNode.getTextContent());
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("TypeOfParameter")) {
                        webLinkObject.setWebLink_TypeofParameter(nNode.getTextContent());
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Description")) {
                        webLinkObject.setWebLink_DESC(nNode.getTextContent());
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("QueryStrings")) {
                        NodeList QueryStringsList = nNode.getChildNodes();
                        LinkedHashMap<String, String> hash_qs = new LinkedHashMap<String, String>();
                        for (int j = 0; j < QueryStringsList.getLength(); j++) {
                            Element ParameterElement = (Element) QueryStringsList.item(j);

                            if (ParameterElement.getNodeName().equals("Parameter")) {
                                String Keyname = ((Element) QueryStringsList.item(j)).getAttribute("Key");
                                hash_qs.put(Keyname, QueryStringsList.item(j).getTextContent());
                            }
                        }
                        webLinkObject.setHash_QueryStrings(hash_qs);


                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Delimiter")) {
                        NodeList DelimiterList = nNode.getChildNodes();
                        List<String> list_Delimiter = new ArrayList<String>();

                        for (int j = 0; j < DelimiterList.getLength(); j++) {
                            Element ParameterElement = (Element) DelimiterList.item(j);

                            if (ParameterElement.getNodeName().equals("Parameter")) {
                                list_Delimiter.add(DelimiterList.item(j).getTextContent());
                            }
                        }
                        webLinkObject.setList_Delimiters(list_Delimiter);
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("RTL")) {

                        setWebLinklLangauge(doc.getChildNodes().item(0), webLinkObject);

                    }


                }
            }


        } catch (Exception E) {

        }
        return webLinkObject;
    }

    private void setWebLinklLangauge(Node ControlNode, WebLinkObject webLinkObject) {
        LinkedHashMap<String, String> appNamesMap = new LinkedHashMap<>();
        LinkedHashMap<String, String> appDescriptionMap = new LinkedHashMap<>();

        if (((Element) ControlNode).getElementsByTagName("RTL").getLength() != 0) {
            NodeList languageList = ((Element) ControlNode).getElementsByTagName("RTL").item(((Element) ControlNode).getElementsByTagName("RTL").getLength() - 1).getChildNodes();
            if (languageList != null && languageList.getLength() > 0) {
                for (int k = 0; k < languageList.getLength(); k++) {
                    Node language = languageList.item(k);
                    String langCode = ((Element) language).getAttribute("code").trim();
                    NodeList innerNodeList = language.getChildNodes();

                    for (int i = 0; i < innerNodeList.getLength(); i++) {
                        Node iNode = language.getChildNodes().item(i);
                        switch (iNode.getNodeName().trim()) {
                            case "AppName":
                                if (langCode.contentEquals("te")) {
                                    appNamesMap.put(langCode, iNode.getTextContent().trim());
                                } else if (langCode.contentEquals("hi")) {
                                    appNamesMap.put(langCode, iNode.getTextContent().trim());
                                }
                                break;
                            case "AppDescription":
                                if (langCode.contentEquals("te")) {
                                    appDescriptionMap.put(langCode, iNode.getTextContent().trim());
                                } else if (langCode.contentEquals("hi")) {
                                    appDescriptionMap.put(langCode, iNode.getTextContent().trim());
                                }
                                break;

                        }
                    }

                }
                webLinkObject.setTranslatedAppNames(appNamesMap);
                webLinkObject.setTranslatedAppDescriptions(appDescriptionMap);
            }
        }
    }

    private List<RenderingType> mGetRenderingTypeList(Node mapControlsNode) {
        return null;
    }

    private List<ControlObject> getSectionControlsList(Node nNode) {
        List<ControlObject> controlObjectList = new ArrayList<>();
        List<ControlObject> sectionControlObjectList = new ArrayList<>();

        NodeList ControleNodeList = nNode.getChildNodes();

        for (int j = 0; j < ControleNodeList.getLength(); j++) {
            Node ControlNode = ControleNodeList.item(j);


            if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {

                ControlObject controlObject = new ControlObject();
                controlObject.setSectionControl(true);
                controlObject.setControlCategory(ControlNode.getNodeName());
                controlObject.setControlTitle(ControlNode.getNodeName());
                controlObject.setControlID(((Element) ControlNode).getAttribute("controlName").trim());
                controlObject.setControlType(ControlNode.getNodeName());
                controlObject.setDisplayName(((Element) ControlNode).getAttribute("displayName").trim());
                controlObject.setControlName(((Element) ControlNode).getAttribute("controlName").trim());
                controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                controlObject.setHint(((Element) ControlNode).getAttribute("hint").trim());
                Log.d("XMLHELPER_DisplayName", ((Element) ControlNode).getAttribute("displayName").trim());
                Log.d("XMLHELPER_DefaultValue", ((Element) ControlNode).getAttribute("defaultValue").trim());
                Log.d("XMLHELPER_Hint", ((Element) ControlNode).getAttribute("hint").trim());

                switch (ControlNode.getNodeName().trim()) {
                    case AppConstants.CONTROL_TYPE_CALENDAR_EVENT:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("CalendarEvents").getLength() == 0) {

                        } else {
                            NodeList calendarEventsList = ((Element) ControlNode).getElementsByTagName("CalendarEvents").item(0).getChildNodes();

                            List<CalendarEvent> calendarEventList = new ArrayList<CalendarEvent>();

                            for (int k = 0; k < calendarEventsList.getLength(); k++) {
                                Node calendarEvent = calendarEventsList.item(k);

                                CalendarEvent calendarEventObj = new CalendarEvent();

                                if (calendarEvent.getNodeType() == Node.ELEMENT_NODE) {
                                    if (calendarEvent.getNodeName().trim().equalsIgnoreCase("CalendarEvent")) {
                                        Element calendarEventElement = ((Element) calendarEvent);

                                        String eventType = calendarEventElement.getAttribute("multipleDays");

                                        calendarEventObj.setEventType(eventType);

//                                                        if(eventType.equalsIgnoreCase("true"))
                                        if (eventType.equalsIgnoreCase("Multiple Dates")) {

                                            NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                            Element paramOne = (Element) paramOneList.item(0);
                                            String startDate = getCharacterDataFromElement(paramOne);

                                            NodeList paramTwoList = calendarEventElement.getElementsByTagName("Param");
                                            Element paramTwo = (Element) paramTwoList.item(1);
                                            String endDate = getCharacterDataFromElement(paramTwo);

                                            NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                            Element paramThree = (Element) paramThreeList.item(0);

                                            String message = getCharacterDataFromElement(paramThree);

                                            calendarEventObj.setEventDates(startDate + "$" + endDate);
                                            calendarEventObj.setEventMessage(message);

                                        }

                                        if (eventType.equalsIgnoreCase("Single Date")) {
                                            NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                            Element paramOne = (Element) paramOneList.item(0);
                                            String startDate = getCharacterDataFromElement(paramOne);

                                            NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                            Element paramThree = (Element) paramThreeList.item(0);
                                            String message = getCharacterDataFromElement(paramThree);

                                            calendarEventObj.setEventDates(startDate);
                                            calendarEventObj.setEventMessage(message);

                                        }

                                    }

                                }

                                calendarEventList.add(calendarEventObj);

                            }

                            controlObject.setCalendarEventType(calendarEventList);
                        }


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                            for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                Node Opton = dataControlOptonsList.item(k);

                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("WeekDays")) {
                                        controlObject.setWeekDays(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_PROGRESS:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setControlCategory("visualization");
                        controlObject.setProgress_maxvalue(((Element) ControlNode).getAttribute("maxValue").trim());
                        controlObject.setProgress_actualvalue(((Element) ControlNode).getAttribute("actualValue").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_progress_actualvalue")) {
                                            controlObject.setHide_progress_actualvalue(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_progress_maxvalue")) {
                                            controlObject.setHide_progress_maxvalue(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_MAP:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onMapClickEvent").trim()));
                        controlObject.setMapView(((Element) ControlNode).getAttribute("mapView").trim());
                        controlObject.setOnMapMarkerClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onMapMarkerClickEvent").trim()));

                        if (((Element) ControlNode).hasAttribute("mapViewType")) {
                            controlObject.setMapViewType(((Element) ControlNode).getAttribute("mapViewType").trim());
                        }

                        if (((Element) ControlNode).getElementsByTagName("ItemsList").getLength() == 0) {

                        } else {

                            NodeList itemsList = ((Element) ControlNode).getElementsByTagName("ItemsList").item(0).getChildNodes();

                            List<RenderingType> renderingTypeList = new ArrayList<RenderingType>();

                            for (int k = 0; k < itemsList.getLength(); k++) {
                                Node Items = itemsList.item(k);

                                RenderingType renderingType = new RenderingType();

                                String type = ((Element) Items).getAttribute("type");

                                renderingType.setType(type);

                                List<String> itemValues = new ArrayList<String>();

                                if (Items.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Items.getNodeName().trim().equalsIgnoreCase("Items")) {
                                        NodeList itemList = Items.getChildNodes();

                                        for (int p = 0; p < itemList.getLength(); p++) {
                                            Node item = itemList.item(p);

                                            if (item.getNodeType() == Node.ELEMENT_NODE) {
                                                if (item.getNodeName().trim().equalsIgnoreCase("Item")) {
                                                    itemValues.add(item.getTextContent().trim());
//                                                                    itemValues.add("17.7340891,83.3183981");
                                                }

                                            }

                                        }

                                    }
                                }

                                renderingType.setItem(itemValues);

                                renderingTypeList.add(renderingType);
                            }

                            controlObject.setRenderingTypeList(renderingTypeList);
                        }
                        if (((Element) ControlNode).getElementsByTagName("PointsList").getLength() == 0) {

                        } else {

//                            NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
//                            setItems(CheckboxItemsList, controlObject);


                            NodeList mapPointsList = ((Element) ControlNode).getElementsByTagName("PointsList").item(0).getChildNodes();

                            List<String> point = new ArrayList<>();
                            List<RenderingType> renderingTypeList = new ArrayList<>();
                            for (int p = 0; p < mapPointsList.getLength(); p++) {
                                Node node = mapPointsList.item(p);

                                RenderingType renderingTypeItem = new RenderingType();
                                if (node.getNodeType() == Node.ELEMENT_NODE) {
                                    if (node.getNodeName().trim().equalsIgnoreCase("Point")) {
                                        point.add(node.getTextContent().trim());
                                    }
                                }
                                renderingTypeItem.setItem(point);
                                renderingTypeList.add(renderingTypeItem);
                            }
                            controlObject.setRenderingTypeList(renderingTypeList);
                        }

                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                            for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                Node Opton = menuOptionsList.item(k);

                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomControls")) {
                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                        controlObject.setMapIcon(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                        controlObject.setBaseMap(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                        controlObject.setShowCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapHeight")) {
                                        controlObject.setMapHeight(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_DATA_TABLE:
                        controlObject.setControlCategory("advanced");
                        //controlObject.setDataTableRowHeight(((Element) ControlNode).getAttribute("rowHeight").trim());
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        NodeList collumnHeadersNodeLIst = ((Element) ControlNode).getElementsByTagName("ColumnHeaders").item(0).getChildNodes();
                        List<String> columnHeaders = new ArrayList<>();
                        for (int c = 0; c < collumnHeadersNodeLIst.getLength(); c++) {
                            Node cNode = collumnHeadersNodeLIst.item(c);
                            if (cNode.getNodeType() == Node.ELEMENT_NODE) {
                                if (cNode.getNodeName().trim().equalsIgnoreCase("ColumnHeaderId")) {

                                    columnHeaders.add(cNode.getTextContent().trim());

                                }
                            }

                        }
                        controlObject.setColumnHeaders(columnHeaders);
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableSearch")) {
                                            controlObject.setDataTable_EnableSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadExcel")) {
                                            controlObject.setDownloadExcel(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadPDF")) {
                                            controlObject.setDownloadPDF(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                        //row & col
                                        else if (Opton.getNodeName().trim().equalsIgnoreCase("colWidthType")) {
                                            controlObject.setDataTable_colWidthType(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colWidthSize")) {
                                            controlObject.setDataTable_colWidthSize(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colHeightType")) {
                                            controlObject.setDataTable_colHeightType(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colHeightSize")) {
                                            controlObject.setDataTable_colHeightSize(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextSize")) {
                                            controlObject.setDataTable_colTextSize(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextStyle")) {
                                            controlObject.setDataTable_colTextStyle(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextColor")) {
                                            controlObject.setDataTable_colTextColor(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colAlignment")) {
                                            controlObject.setDataTable_colAlignment(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colColor")) {
                                            controlObject.setDataTable_colColor(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colBorder")) {
                                            controlObject.setDataTable_colBorder(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideColumnNames")) {
                                            controlObject.setHideColumnNames(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeigthType")) {
                                            controlObject.setDataTable_rowHeigthType(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeightSize")) {
                                            controlObject.setDataTable_rowHeightSize(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextSize")) {
                                            controlObject.setDataTable_rowTextSize(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextStyle")) {
                                            controlObject.setDataTable_rowTextStyle(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextColor")) {
                                            controlObject.setDataTable_rowTextColor(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowAlignment")) {
                                            controlObject.setDataTable_rowAlignment(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColorType")) {
                                            controlObject.setDataTable_rowColorType(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor1")) {
                                            controlObject.setDataTable_rowColor1(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor2")) {
                                            controlObject.setDataTable_rowColor2(Opton.getTextContent().trim());
                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowsColoring")) {
                                            controlObject.setDataTable_ParticularRowsColoring(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowsColoringIds")) {
                                            controlObject.setDataTable_ParticularRowsColoringIds(Opton.getTextContent().trim());
                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowColor")) {
                                            controlObject.setDataTable_ParticularRowColor(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderType")) {
                                            controlObject.setDataTable_BorderType(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                                            controlObject.setDataTable_BorderColor(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderThickness")) {
                                            controlObject.setDataTable_BorderThickness(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("isPaging")) {
                                            controlObject.setDataTable_isPaging(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_CHART:

                        controlObject.setControlCategory("advanced");
                        controlObject.setChartType(((Element) ControlNode).getAttribute("chartType").trim());

                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideLegends")) {
                                            controlObject.setHideLegends(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }

                        if (((Element) ControlNode).getElementsByTagName("ChartColors").getLength() == 0) {

                        } else {
                            NodeList chartColorsList = ((Element) ControlNode).getElementsByTagName("ChartColors").item(0).getChildNodes();
                            List<String> colors = new ArrayList<>();

                            if (chartColorsList != null && chartColorsList.getLength() > 0) {
                                for (int k = 0; k < chartColorsList.getLength(); k++) {
                                    Node Opton = chartColorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                            colors.add(Opton.getTextContent().trim());
                                        }
                                    }
                                }
                                controlObject.setChartColors(colors);
                            }

                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_AUTO_COMPLETION:

                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onKeyEvent").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSelectEvent").trim()));
                        controlObject.setControlCategory("advanced");

                        Node MinCharacterNode = ((Element) ControlNode).getElementsByTagName("MinCharacter").item(0);
                        //controlObject.setMinChartoSeearch(Integer.parseInt(MinCharacterNode.getTextContent()));

                        Node SearchKeyAtNode = ((Element) ControlNode).getElementsByTagName("SearchKeyAt").item(0);
                        controlObject.setSearchKeyAt(SearchKeyAtNode.getTextContent());

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                            controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_POST:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setControlCategory("advanced");

                        Node postTypeNode = ((Element) ControlNode).getElementsByTagName("PostType").item(0);
                        controlObject.setUserType(postTypeNode.getTextContent());

                        if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                            Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                            NodeList groupNodes = Groups.getChildNodes();
                            List<UserGroup> groupList = new ArrayList<>();

                            for (int k = 0; k < groupNodes.getLength(); k++) {

                                Node group = groupNodes.item(k);

                                UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                groupList.add(userGroup);


                            }

                            controlObject.setGroups(groupList);
                        }


                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                                controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_USER:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setControlCategory("advanced");

                        Node userTypeNode = ((Element) ControlNode).getElementsByTagName("UserType").item(0);
                        controlObject.setUserType(userTypeNode.getTextContent());

                        if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                            Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                            NodeList groupNodes = Groups.getChildNodes();
                            List<UserGroup> groupList = new ArrayList<>();

                            for (int k = 0; k < groupNodes.getLength(); k++) {

                                Node group = groupNodes.item(k);

                                UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                groupList.add(userGroup);

                            }

                            controlObject.setGroups(groupList);
                        }

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_VIEWFILE:

                        controlObject.setControlCategory("standard");
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setFilelink(((Element) ControlNode).getAttribute("Filelink").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_filelink")) {
                                            controlObject.setHide_filelink(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_TEXT_INPUT:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                                        AppConstants.ValidatorsForControls(ControlNode,controlObject);
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxCharacters(true);
                                            controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinCharacters(true);
                                            controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromBarcode(true);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromQRCode(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                            controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setGoogleLocationSearch(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentLocation")) {
                                            controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setCurrentLocation(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("VoiceInput")) {
                                            controlObject.setVoiceText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setVoiceText(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {

                                            controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("AllowOnlyAlphabets")) {
                                            controlObject.setAllowOnlyAlphabets(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;
                    case AppConstants.CONTROL_TYPE_NUMERIC_INPUT:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList numericValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (numericValidatorsList != null && numericValidatorsList.getLength() > 0) {
                                for (int k = 0; k < numericValidatorsList.getLength(); k++) {
                                    Node Opton = numericValidatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                            Log.d("XMLMaxValue", Opton.getChildNodes().item(2).getTextContent().trim());
                                            Log.d("XMLMaxValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableUpperLimit(true);
                                            controlObject.setUpperLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setUpperLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                            Log.d("XMLMinValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMinValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

//                                                        NodeList sdfds = ((Element) ControlNode).getElementsByTagName("Param").item(0).getChildNodes();
//
//                                                        for (int l = 0; l <sdfds.getLength() ; l++) {
//                                                            Node Opton1 = numericValidatorsList.item(l);
//                                                            Element eElement1 = (Element) Opton1;
//                                                            if( eElement1.getAttribute("name").equalsIgnoreCase("value")){
//                                                                Log.d("XMLMinValues", eElement1.getTextContent());
//                                                            }
//                                                        }
                                            controlObject.setEnableLowerLimit(true);
                                            controlObject.setLowerLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setLowerLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                            Log.d("XMLCapValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCapValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableCappingDigits(true);
                                            controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList numberOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < numberOptonsList.getLength(); k++) {
                                Node Opton = numberOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromBarcode(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromQRCode(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_PHONE:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList phoneValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (phoneValidatorsList != null && phoneValidatorsList.getLength() > 0) {
                                for (int p = 0; p < phoneValidatorsList.getLength(); p++) {
                                    Node Opton = phoneValidatorsList.item(p);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableCappingDigits(true);
                                            controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList phoneOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < phoneOptonsList.getLength(); k++) {
                                Node Opton = phoneOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_EMAIL:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {

                            NodeList emailValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (emailValidatorsList != null && emailValidatorsList.getLength() > 0) {
                                for (int e = 0; e < emailValidatorsList.getLength(); e++) {
                                    Node Opton = emailValidatorsList.item(e);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList EmailOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < EmailOptonsList.getLength(); k++) {
                                Node Opton = EmailOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")
                                            || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_LARGE_INPUT:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {

                            NodeList largeInputValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (largeInputValidatorsList != null && largeInputValidatorsList.getLength() > 0) {
                                for (int li = 0; li < largeInputValidatorsList.getLength(); li++) {
                                    Node Opton = largeInputValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")
                                                || eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxCharacters(true);
                                            controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")
                                                || eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinCharacters(true);
                                            controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList largeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < largeOptonsList.getLength(); k++) {
                                Node Opton = largeOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLEditor")) {
                                        controlObject.setHtmlEditorEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                        controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CAMERA:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList cameraValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (cameraValidatorsList != null && cameraValidatorsList.getLength() > 0) {
                                for (int li = 0; li < cameraValidatorsList.getLength(); li++) {
                                    Node Opton = cameraValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxSize")) {
                                            Log.d("XMLCamMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCamMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxUploadSize(true);
                                            controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minSize")) {
                                            Log.d("XMLCamMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCamMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinUploadSize(true);
                                            controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList cameraOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < cameraOptionsList.getLength(); k++) {
                                Node Opton = cameraOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("AspectRatio")) {
                                        controlObject.setEnableAspectRatio(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageGPS")) {
                                        controlObject.setEnableImageWithGps(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableZoomControl")) {
                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setZoomControl(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableFlash")) {
                                        controlObject.setFlash(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setFlash(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Capture")) {
                                        controlObject.setCaptureFromCamera(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FilePhoto")) {
//                                                        controlObject.setEnableFilePhoto(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableFilePhoto(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("fileUpload")) {
                                        controlObject.setCaptureFromFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Capture")) {
                                        controlObject.setCaptureFromCamera(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("CaptureOrientation")) {
                                        controlObject.setCaptureOrientation(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_FILE_BROWSING:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {

                            NodeList fileBrowserValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (fileBrowserValidatorsList != null && fileBrowserValidatorsList.getLength() > 0) {
                                for (int li = 0; li < fileBrowserValidatorsList.getLength(); li++) {
                                    Node Opton = fileBrowserValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLFbMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("FbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("extensionCheck")) {
                                            Log.d("XMLFBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableExtensions(true);
                                            String extensions = eElement.getElementsByTagName("Param").item(1).getTextContent();
                                            List<String> names = new ArrayList<>();
                                            names.addAll(Arrays.asList(extensions.split("\\$")));
                                            controlObject.setExtensionsListNames(names);
                                            controlObject.setFileExtensionError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("FbExtensionCheck", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxUpload")) {
                                            Log.d("XMLFileMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLFileMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxUploadSize(true);
                                            controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("minUpload")) {
                                            Log.d("XMLFileMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLFileMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinUploadSize(true);
                                            controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList FileuploadOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < FileuploadOptonsList.getLength(); k++) {
                                Node Opton = FileuploadOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ScanEnabled")) {
                                        controlObject.setEnableScan(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CALENDER:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                        }
                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                        }
                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                        }
                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                        }
                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                        }
                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                        }
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                    Node Opton = calendarValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenDates")) {
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableBetweenStartAndEndDate(true);
                                            controlObject.setStartDate(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setEndDate(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            controlObject.setBetweenStartAndEndDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("preDate")) {

                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableBeforeCurrentDate(true);
                                            controlObject.setBeforeCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("postDate")) {

                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableAfterCurrentDate(true);
                                            controlObject.setAfterCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                Node Opton = DateOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("GetYear")) {
                                        controlObject.setGetYearFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetMonth")) {
                                        controlObject.setGetMonthFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetMonthFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDay")) {
                                        controlObject.setGetDayFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDayFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDate")) {
                                        controlObject.setGetDateFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CHECKBOX:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        String valueType=((Element) ControlNode).getAttribute("ValueType").trim();
                        controlObject.setCheckbox_ValueType(valueType);

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList checkBoxValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (checkBoxValidatorsList != null && checkBoxValidatorsList.getLength() > 0) {
                                for (int li = 0; li < checkBoxValidatorsList.getLength(); li++) {
                                    Node Opton = checkBoxValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("CbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList CheckboxOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < CheckboxOptonsList.getLength(); k++) {
                                Node Opton = CheckboxOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        if(valueType.equals("Value")){
                            NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                            setItems(CheckboxItemsList, controlObject);
                        }else if(valueType.equals("Boolean")){
                            String checkedValue=((Element) ControlNode).getAttribute("CheckedValue").trim();
                            String unCheckedValue=((Element) ControlNode).getAttribute("unCheckedValue").trim();
                            controlObject.setCheckbox_CheckedValue(checkedValue);
                            controlObject.setCheckbox_unCheckedValue(unCheckedValue);
                        }
                        /*List<String> cbItems = new ArrayList<>();
                        NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        for (int l = 0; l < CheckboxItemsList.getLength(); l++) {
                            Node Opton1 = CheckboxItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }
                                    cbItems.add(Opton1.getTextContent().trim());
                                }
                            }
                        }

                        controlObject.setItems(cbItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_RADIO_BUTTON:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList radioButtonValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (radioButtonValidatorsList != null && radioButtonValidatorsList.getLength() > 0) {
                                for (int li = 0; li < radioButtonValidatorsList.getLength(); li++) {
                                    Node Opton = radioButtonValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLRBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("RBUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList RadioOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < RadioOptonsList.getLength(); k++) {
                                Node Opton = RadioOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Horizontal")) {
                                        controlObject.setEnableHorizontalAlignment(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();

                        setItems(RBItemsList, controlObject);
                       /* List<String> rbItems = new ArrayList<>();
                        NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        for (int l = 0; l < RBItemsList.getLength(); l++) {
                            Node Opton1 = RBItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                                    String defaultValue = ((Element) Opton1).getAttribute("detault");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }
                                    rbItems.add(Opton1.getTextContent().trim());
                                }
                            }
                        }

                        controlObject.setItems(rbItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;
                    case AppConstants.CONTROL_TYPE_DROP_DOWN:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList dropDownValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (dropDownValidatorsList != null && dropDownValidatorsList.getLength() > 0) {
                                for (int li = 0; li < dropDownValidatorsList.getLength(); li++) {
                                    Node Opton = dropDownValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLDDMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("DDUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DropdownOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DropdownOptonsList.getLength(); k++) {
                                Node Opton = DropdownOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

//                        List<String> ddItems = new ArrayList<>();
                        NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        setItems(DDItemsList, controlObject);
                        /*  for (int l = 0; l < DDItemsList.getLength(); l++) {
                            Node Opton1 = DDItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }

                                    ddItems.add(Opton1.getTextContent().trim());
                                }
                            }
                        }

                        controlObject.setItems(ddItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;
                    case AppConstants.CONTROL_TYPE_CHECK_LIST:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList checkListValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (checkListValidatorsList != null && checkListValidatorsList.getLength() > 0) {
                                for (int li = 0; li < checkListValidatorsList.getLength(); li++) {
                                    Node Opton = checkListValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("CbLUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList MultiSelectOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < MultiSelectOptonsList.getLength(); k++) {
                                Node Opton = MultiSelectOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("AscendingOrder")) {
                                        controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }  else if (Opton.getNodeName().trim().equalsIgnoreCase("DescendingOrder")) {
                                        controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);u
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RowSelectionType")) {
                                        controlObject.setRowSelectionType(Opton.getTextContent().trim());
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        setItems(CLItemsList, controlObject);
                       /* List<String> CLItems = new ArrayList<>();
                        NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        for (int l = 0; l < CLItemsList.getLength(); l++) {
                            Node Opton1 = CLItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                    CLItems.add(Opton1.getTextContent().trim());
                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }
                                }
                            }
                        }

                        controlObject.setItems(CLItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_RATING:

                        controlObject.setRatingItemCount(((Element) ControlNode).getAttribute("noOfItems").trim());

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList ratingValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (ratingValidatorsList != null && ratingValidatorsList.getLength() > 0) {
                                for (int li = 0; li < ratingValidatorsList.getLength(); li++) {
                                    Node Opton = ratingValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLRatingMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("RUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList RatingOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < RatingOptionsList.getLength(); k++) {
                                Node Opton = RatingOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("DisableCount")) {
                                        controlObject.setDisableRatingCount(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisableRatingCount(false);
                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RatingType")) {

//                                                    controlObject.setSelectRatingItemType(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        controlObject.setRatingType(Opton.getTextContent().trim());

                                        Log.d("MainRatingCountTType", Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_VOICE_RECORDING:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList voiceRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (voiceRecValidatorsList != null && voiceRecValidatorsList.getLength() > 0) {
                                for (int li = 0; li < voiceRecValidatorsList.getLength(); li++) {
                                    Node Opton = voiceRecValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                            Log.d("XMLVoiceRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVoiceRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVoiceMaximumDuration(true);
                                            controlObject.setVoiceMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                            Log.d("XMLVoiceRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVoiceRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVoiceMinimumDuration(true);
                                            controlObject.setVoiceMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList voiceOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < voiceOptionsList.getLength(); k++) {
                                Node Opton = voiceOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        Log.d("XML_VoiceRecDisable ", Opton.getTextContent().trim());
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("AudioFormat")) {
                                        Log.d("XML_VoiceRec ", Opton.getTextContent().trim());
                                        if(!Opton.getTextContent().isEmpty()){
                                        String[] strAudioFormats = Opton.getTextContent().trim().split("\\$");
                                        List<String> temp = new ArrayList<>();
                                        for (int count = 0; count < strAudioFormats.length; count++) {
                                            temp.add(strAudioFormats[count]);
                                        }
                                        controlObject.setAudioFormatIds(temp);
                                        controlObject.setAudioFormatNames(temp);}
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadAudioFile")) {
                                        controlObject.setEnableUploadAudioFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableUploadAudioFile(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode,controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_VIDEO_RECORDING:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setEnableCompression(Boolean.parseBoolean(((Element) ControlNode).getAttribute("enableCompression").trim()));
                        if (controlObject.isEnableCompression()) {
                            controlObject.setCompressionQuality(((Element) ControlNode).getAttribute("compressionQuality").trim());
                        }
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList videoRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (videoRecValidatorsList != null && videoRecValidatorsList.getLength() > 0) {
                                for (int li = 0; li < videoRecValidatorsList.getLength(); li++) {
                                    Node Opton = videoRecValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                            Log.d("XMLVideoRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVideoRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVideoMaximumDuration(true);
                                            controlObject.setVideoMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                            Log.d("XMLVideoRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVideoRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVideoMinimumDuration(true);
                                            controlObject.setVideoMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() > 0) {
                                NodeList videoOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                for (int k = 0; k < videoOptionsList.getLength(); k++) {
                                    Node Opton = videoOptionsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("VideoFormat")) {
                                            String[] strVideoFormats = Opton.getTextContent().trim().split("\\$");
                                            List<String> temp = new ArrayList<>();
                                            for (int count = 0; count < strVideoFormats.length; count++) {
                                                temp.add(strVideoFormats[count]);
                                            }
                                            controlObject.setVideoFormatIds(temp);
                                            controlObject.setVideoFormatNames(temp);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadVideoFile")) {
                                            controlObject.setEnableUploadVideoFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode,controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_AUDIO_PLAYER:
                        controlObject.setAudioData(((Element) ControlNode).getAttribute("audioData").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList audioPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < audioPlayerOptionsList.getLength(); k++) {
                                Node Opton = audioPlayerOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                        controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Background")) {
                                        controlObject.setEnablePlayBackground(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode,controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_VIDEO_PLAYER:
                        controlObject.setVideoData(((Element) ControlNode).getAttribute("videoData").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList videoPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < videoPlayerOptionsList.getLength(); k++) {
                                Node Opton = videoPlayerOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                        controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_PERCENTAGE:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList percentageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (percentageValidatorsList != null && percentageValidatorsList.getLength() > 0) {
                                for (int li = 0; li < percentageValidatorsList.getLength(); li++) {
                                    Node Opton = percentageValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLPercentageMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList percentageOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < percentageOptionsList.getLength(); k++) {
                                Node Opton = percentageOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;
                    case AppConstants.CONTROL_TYPE_SIGNATURE:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList signatureValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (signatureValidatorsList != null && signatureValidatorsList.getLength() > 0) {
                                for (int li = 0; li < signatureValidatorsList.getLength(); li++) {
                                    Node Opton = signatureValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList signatureOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < signatureOptionsList.getLength(); k++) {
                                Node Opton = signatureOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Upload")) {
                                        controlObject.setEnableUploadSignature(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("signatureOnScreen")) {
                                        controlObject.setEnableSignatureOnScreen(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_URL_LINK:
                        controlObject.setUrl(((Element) ControlNode).getAttribute("value").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList urlValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (urlValidatorsList != null && urlValidatorsList.getLength() > 0) {
                                for (int li = 0; li < urlValidatorsList.getLength(); li++) {
                                    Node Opton = urlValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLURLViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("URlUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList urllinkOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < urllinkOptonsList.getLength(); k++) {
                                Node Opton = urllinkOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideUrl")) {
                                        controlObject.setHideURL(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayURLName")) {
                                        controlObject.setUrlPlaceholderText(Opton.getTextContent().trim());
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_DECIMAL:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList decimalValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (decimalValidatorsList != null && decimalValidatorsList.getLength() > 0) {
                                for (int li = 0; li < decimalValidatorsList.getLength(); li++) {
                                    Node Opton = decimalValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLdecimalViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("DUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList decimalOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < decimalOptonsList.getLength(); k++) {
                                Node Opton = decimalOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Precision")) {
                                        controlObject.setCharactersAfterDecimal((Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_PASSWORD:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList passwordValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (passwordValidatorsList != null && passwordValidatorsList.getLength() > 0) {
                                for (int li = 0; li < passwordValidatorsList.getLength(); li++) {
                                    Node Opton = passwordValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("PasswordViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordPolicy")) {
                                            controlObject.setEnablePasswordPolicy(true);
                                            String[] passwordPolicyId = eElement.getElementsByTagName("Param").item(1).getTextContent().trim().split("\\$");
                                            String[] passwordPolicyValue = eElement.getElementsByTagName("Param").item(2).getTextContent().trim().split("2");
                                            List<String> temppasswordPolicyIds = new ArrayList<>();
                                            List<String> temppasswordPolicyValues = new ArrayList<>();
                                            for (int count = 0; count < passwordPolicyId.length; count++) {
                                                temppasswordPolicyIds.add(passwordPolicyId[count]);
                                            }
                                            for (int count = 0; count < passwordPolicyValue.length; count++) {
                                                temppasswordPolicyValues.add(passwordPolicyValue[count]);
                                            }
                                            controlObject.setPasswordPolicy(temppasswordPolicyValues);
                                            controlObject.setPasswordPolicyIds(temppasswordPolicyIds);
                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordLength")) {
                                            controlObject.setEnablePasswordLength(true);
                                            controlObject.setPasswordLength(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setPasswordLengthError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList PasswordOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < PasswordOptonsList.getLength(); k++) {
                                Node Opton = PasswordOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowOption")) {
                                        controlObject.setEnableShowOrHideOption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Encrypt")) {
                                        controlObject.setEnableEncryption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionType")) {
                                        controlObject.setEncryptionType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionTypeId")) {
                                        controlObject.setEncryptionTypeId(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_CURRENCY:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList currencyValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (currencyValidatorsList != null && currencyValidatorsList.getLength() > 0) {
                                for (int li = 0; li < currencyValidatorsList.getLength(); li++) {
                                    Node Opton = currencyValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("CurrencyViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                            Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                            Log.d("XMLCurrencyMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCurrencyMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableMaximumAmount(true);
                                            controlObject.setMaxAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                            Log.d("XMLCurrencyMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCurrencyMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableMinimumAmount(true);
                                            controlObject.setMinAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            List<String> currencyType = new ArrayList<>();
                            NodeList CurrencyOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < CurrencyOptonsList.getLength(); k++) {
                                Node Opton = CurrencyOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrencyType")) {
                                        currencyType.add(Opton.getTextContent().trim());
                                        controlObject.setCurrencyListNames(currencyType);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                        controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_DYNAMIC_LABEL:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setValue(((Element) ControlNode).getAttribute("value").trim());
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList dynamicOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < dynamicOptionsList.getLength(); k++) {
                                Node Opton = dynamicOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Section")) {
                                        controlObject.setMakeAsSection(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("QRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UniCode")) {
                                        controlObject.setUnicodeFormat(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersType")) {
                                        controlObject.setMaskCharacterType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("NoOfMaskCharactersToMask")) {
                                        controlObject.setNoOfCharactersToMask(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersDirection")) {
                                        controlObject.setMaskCharacterDirection(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGround")) {
                                        controlObject.setLayoutBackGroundEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGroundColor")) {
                                        controlObject.setLayoutBackGroundColor(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                        controlObject.setBackGroundColor(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                        controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UnderlineText")) {
                                        controlObject.setUnderLineText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;
                    case AppConstants.CONTROL_TYPE_IMAGE:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                    Node Opton = imageValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList imageOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < imageOptonsList.getLength(); k++) {
                                Node Opton = imageOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageDataType")) {
                                        controlObject.setImageDataType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageData")) {
                                        controlObject.setImageData(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImage")) {
                                        controlObject.setEnableMultipleImages(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImageFormat")) {
                                        controlObject.setImagesArrangementType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomImage")) {
                                        controlObject.setZoomImageEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_BUTTON:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                Node Opton = buttonOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
/*
                        NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                        for (int k = 0; k < buttonDSList.getLength(); k++) {
                            Node Opton = buttonDSList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                }
                            }
                        }
*/
                        NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                        for (int k = 0; k < buttonDSList.getLength(); k++) {
                            Node Opton = buttonDSList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                    controlObject.setShape(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                    controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                    controlObject.setIconPath(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
//                        mButtonDisplaySettings(ControlNode, controlObject);
                        break;
                    // Advanced Controls
                    case AppConstants.CONTROL_TYPE_TIME:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setControlCategory("standard");
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                    Node Opton = calendarValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryTime(true);
                                            controlObject.setMandatoryTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenTimes")) {
                                            controlObject.setBetweenStartEndTime(true);
                                            controlObject.setBetweenStartTime(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setBetweenEndTime(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            controlObject.setBetweenStartEndTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("beforeCurrentTime")) {
                                            controlObject.setBeforeCurrentTime(true);
                                            controlObject.setBeforeCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("afterCurrentTime")) {
                                            controlObject.setAfterCurrentTime(true);
                                            controlObject.setAfterCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                Node Opton = DateOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentTime")) {
                                        controlObject.setCurrentTime(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormat")) {
                                        controlObject.setTimeFormat(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatOptions")) {
                                        controlObject.setTimeFormatOptions(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadOnly")) {
                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_COUNT_DOWN_TIMER:

                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setControlCategory("standard");
                        controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                        controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                        controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                            controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                            controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_COUNT_UP_TIMER:

                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onTimeElapsedEvent").trim()));//onClickEvent//onTimeElapsedEvent
                        controlObject.setControlCategory("standard");
                        controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                        controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                        controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                            controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                            controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_GPS:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setGpsType(((Element) ControlNode).getAttribute("gpsType").trim());
                        controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                        if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                            controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                        }
                        if (controlObject.getGpsType().equalsIgnoreCase(AppConstants.Multi_points_line) ||
                                controlObject.getGpsType().equalsIgnoreCase(AppConstants.Polygon) ||
                                controlObject.getGpsType().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
                            controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                            if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                                controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                            } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                                controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                            }
                        }


                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                    Node Opton = imageValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList gpsOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < gpsOptionsList.getLength(); k++) {
                                Node Opton = gpsOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowMap")) {
                                        controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SaveInDifferentColumns")) {
                                        controlObject.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationFormat")) {
                                        controlObject.setLocationFormat(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_BAR_CODE:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList barCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < barCodeOptonsList.getLength(); k++) {
                                Node Opton = barCodeOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_QR_CODE:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList qrCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < qrCodeOptonsList.getLength(); k++) {
                                Node Opton = qrCodeOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_SUBFORM:

                        controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                        controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onRowClickEvent").trim()));
                        controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                        controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                                for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                                    Node Opton = subFormValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                            controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                            controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                        }

                                    }
                                }
                            }
                        }


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                                Node Opton = subFormOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                        controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                        Log.d("SubformOrientation", Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayButton")) {
                                        controlObject.setDisplayNameOfAddButton(Opton.getTextContent().trim());
                                        Log.d("SubformDisplayName", Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                        controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                        System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                        String spilt[] = Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1).split(",");
                                        String itemsId[] = new String[spilt.length];
                                        for (int z = 0; z < spilt.length; z++) {
                                            itemsId[z] = spilt[z].trim();
                                        }
                                        controlObject.setSearchItemIds(Arrays.asList(itemsId));
                                    }
                                }
                            }
                        }
//
                                       /* if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
                                        } else {
                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                List<ControlObject> controlObjectList = new ArrayList<>();

                                            }
                                        }*/
                        setLangauge(ControlNode, controlObject);
//                        mDisplaySettings(ControlNode, controlObject);
                        if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0) != null && ((Element) ControlNode).getAttribute("controlName").trim().equalsIgnoreCase(controlObject.getControlName()) ) {
                            NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(((Element) ControlNode).getElementsByTagName("DisplaySettings").getLength()-1).getChildNodes();
                            if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                                for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                                    Node Opton = DisplaySettingsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                            controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                            controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            /*if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME2")) {
                                controlObject.setTextHexColor("#5D5654"); // Brown
                            }else if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME1")) {
                                controlObject.setTextHexColor("#5a636d"); // bluegray
                            }*/
//                            if (themeNo.equalsIgnoreCase("")) {
//                                    Log.d(TAG, "mDisplaySettingsThemeNo: "+themeNo+" - "+controlObject.getDisplayName());
////                                controlObject.setTextHexColor("#5D5654"); // Brown
//                                controlObject.setTextHexColor("#4CAE4C"); // ev_green
//                            }else {
//                                controlObject.setTextHexColor(Opton.getTextContent().trim());
//                            }
                                            controlObject.setTextHexColor(Opton.getTextContent().trim());
                                            Log.d("XMLDisplaySettings_M", Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                            controlObject.setChartColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ProgressColor")) {
                                            controlObject.setProgressColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerColor")) {
                                            controlObject.setTimerColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                        }
                                    }
                                }
                            }
                        }

                        setRequiredUI(ControlNode, controlObject);
                        Node node = ControlNode.getChildNodes().item(3);

                        controlObject.setSubFormControlList(getSubFormControlList(node, false));

                        break;
                    case AppConstants.CONTROL_TYPE_GRID_CONTROL:
                        controlObject.setControlCategory("advanced");

                        controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                        controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setEnableFixGridWidth(Boolean.parseBoolean(((Element) ControlNode).getAttribute("fixGridWidth").trim()));
                        controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                        controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));

                                           /* if (((Element) ControlNode).getElementsByTagName("ColumnWidths").getLength() == 0) {


                                            } else {
                                                NodeList columnWidths = ((Element) ControlNode).getElementsByTagName("ColumnWidths").item(0).getChildNodes();
                                                List<String> columnWidthsList = new ArrayList<>();
                                                for (int k = 0; k < columnWidths.getLength(); k++) {

                                                    Node width = columnWidths.item(k);

                                                    columnWidthsList.add(width.getTextContent().trim());

                                                }
                                                controlObject.setGridColumnsWidths(columnWidthsList);
                                            }*/

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                                for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                                    Node Opton = subFormValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                            controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                            controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                        }

                                    }
                                }
                            }
                        }


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                                Node Opton = subFormOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                        controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                        Log.d("SubformOrientation", Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideAddButton")) {
                                        controlObject.setGridControl_HideAddButton(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDeleteButton")) {
                                        controlObject.setGridControl_HideDeleteButton(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColHeightType")) {
                                        controlObject.setGridControl_ColHeightType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColHeightSize")) {
                                        controlObject.setGridControl_ColHeightSize(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextSize")) {
                                        controlObject.setGridControl_ColTextSize(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextStyle")) {
                                        controlObject.setGridControl_ColTextStyle(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextColor")) {
                                        controlObject.setGridControl_ColTextColor(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextAlignment")) {
                                        controlObject.setGridControl_ColTextAlignment(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColColor")) {
                                        controlObject.setGridControl_ColColor(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColBorder")) {
                                        controlObject.setGridControl_ColBorder(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideColumnNames")) {
                                        controlObject.setHideColumnNames(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeigthType")) {
                                        controlObject.setGridControl_rowHeigthType(Opton.getTextContent().trim());
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeightSize")) {
                                        controlObject.setGridControl_rowHeightSize(Opton.getTextContent().trim());
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColorType")) {
                                        controlObject.setGridControl_rowColorType(Opton.getTextContent().trim());
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor1")) {
                                        controlObject.setGridControl_rowColor1(Opton.getTextContent().trim());
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor2")) {
                                        controlObject.setGridControl_rowColor2(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderType")) {
                                        controlObject.setGridControl_BorderType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                                        controlObject.setGridControl_BorderColor(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderThickness")) {
                                        controlObject.setGridControl_BorderThickness(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LazyLoading")) {
                                        controlObject.setGridControl_LazyLoading(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("threshold")) {
                                        controlObject.setGridControl_threshold(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                        controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                        if (Opton.getTextContent().trim().length() > 0) {
                                            //System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                            String spilt[] = Opton.getTextContent().trim().split(",");
                                            String itemsId[] = new String[spilt.length];
                                            for (int z = 0; z < spilt.length; z++) {
                                                itemsId[z] = spilt[z].trim();
                                            }
                                            controlObject.setSearchItemIds(Arrays.asList(itemsId));
                                        }
                                    }else if(Opton.getNodeName().trim().equalsIgnoreCase("GridColumnSettings")){
                                        List<GridColumnSettings> gridColumnSettings=new ArrayList<>();
                                        for (int col = 0; col < Opton.getChildNodes().getLength(); col++) {
                                            NodeList colItem= Opton.getChildNodes().item(col).getChildNodes();
                                            GridColumnSettings gridColumnSettings1=new GridColumnSettings();
                                            for (int l = 0; l < colItem.getLength(); l++) {
                                                Node colSetting = colItem.item(l);
                                                if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlId")) {
                                                    gridColumnSettings1.setControlId(colSetting.getTextContent().trim());
                                                }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlName")) {
                                                    gridColumnSettings1.setControlName(colSetting.getTextContent().trim());
                                                }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlWidth")) {
                                                    gridColumnSettings1.setControlWidth(colSetting.getTextContent().trim());
                                                }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlColor")) {
                                                    gridColumnSettings1.setControlColor(colSetting.getTextContent().trim());
                                                } else if (colSetting.getNodeName().trim().equalsIgnoreCase("EnabelSorting")) {
                                                    gridColumnSettings1.setEnableSorting(Boolean.parseBoolean(colSetting.getTextContent().trim()));
                                                }

                                            }
                                            gridColumnSettings.add(gridColumnSettings1);
                                        }
                                        controlObject.setGridColumnSettings(gridColumnSettings);
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode,controlObject);
                        if (((Element) ControlNode).getElementsByTagName("GridFormControls").getLength() == 0) {
                        } else {
//                            Node node = ((Element) ControlNode).getElementsByTagName("GridFormControls").item(0);
                            Node nodeG = ControlNode.getChildNodes().item(3);
                            controlObject.setSubFormControlList(getSubFormControlList(nodeG, true));
                        }

                        break;

                    // Data Controls
                    case AppConstants.CONTROL_TYPE_DATA_CONTROL:

                        controlObject.setDataControlStatus(((Element) ControlNode).getAttribute("type").trim());
                        controlObject.setDependentControl(((Element) ControlNode).getAttribute("dependentName").trim());
                        controlObject.setDataControlName(((Element) ControlNode).getAttribute("dataControllName").trim());
                        controlObject.setDataControlLocationType(((Element) ControlNode).getAttribute("locationType").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChange").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList datacontrolValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (datacontrolValidatorsList != null && datacontrolValidatorsList.getLength() > 0) {
                                for (int li = 0; li < datacontrolValidatorsList.getLength(); li++) {
                                    Node Opton = datacontrolValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                Node Opton = dataControlOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("UserControlBinding")) {
                                        controlObject.setEnableUserControlBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                      controlObject.setUserControlBind(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("PostLocationBinding")) {
                                        controlObject.setEnablePostLocationBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }  else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;
                    case AppConstants.CONTROL_TYPE_AUTO_GENERATION:
                        controlObject.setControlCategory("standard");

                        NodeList ControlNodeList = ControlNode.getChildNodes();
                        for (int n = 0; n < ControlNodeList.getLength(); n++) {

                            Node item = ControlNodeList.item(n);
                            if (item.getNodeName().equalsIgnoreCase("Prefix")) {
                                controlObject.setPreFixValue(((Element) item).getAttribute("name").trim());
                            } else if (item.getNodeName().equalsIgnoreCase("Suffix")) {
                                controlObject.setSuffixValue(((Element) item).getAttribute("name").trim());
                            } else if (item.getNodeName().equalsIgnoreCase("Suffix1")) {
                                controlObject.setSuffix1Value(((Element) item).getAttribute("name").trim());
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);


                    default:

                }


                if (controlObject.isOnFocusEventExists() || controlObject.isOnChangeEventExists() || controlObject.isOnClickEventExists() || controlObject.isOnAddRowEventExists() || controlObject.isOnDeleteRowEventExists() || controlObject.isOnMapMarkerClickEventExists()) {
                    setEvents(controlObject, ControlNode);
                }

                sectionControlObjectList.add(controlObject);
            }

            if (j == (ControleNodeList.getLength() - 1)) {
                ControlObject controlObject = new ControlObject();
                controlObject.setControlCategory("SectionEnd");
                controlObject.setControlTitle("SectionEnd");
                controlObject.setControlID("SectionEnd");
                controlObject.setControlType("SectionEnd");
                controlObject.setDisplayName("SectionEnd");
                controlObject.setControlName("SectionEnd");
                controlObject.setDefaultValue("SectionEnd");
                controlObject.setHint("SectionEnd");
                controlObjectList.add(controlObject);

            }

        }

        return sectionControlObjectList;
    }

    /* For SubForm DataCollectionControls*/
    private List<ControlObject> getSubFormControlList(Node nNode, boolean isGrid) {

        List<ControlObject> Controls_list = new ArrayList<ControlObject>();


        NodeList ControleNodeList = nNode.getChildNodes();

        for (int j = 0; j < ControleNodeList.getLength(); j++) {
            Node ControlNode = ControleNodeList.item(j);


            if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {

                ControlObject controlObject = new ControlObject();
                controlObject.setGridControl(true);
                controlObject.setControlCategory(ControlNode.getNodeName());
                controlObject.setControlTitle(ControlNode.getNodeName());
                controlObject.setControlID(((Element) ControlNode).getAttribute("controlName").trim());
                controlObject.setControlType(ControlNode.getNodeName());
                controlObject.setDisplayName(((Element) ControlNode).getAttribute("displayName").trim());
                controlObject.setControlName(((Element) ControlNode).getAttribute("controlName").trim());
                controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                controlObject.setHint(((Element) ControlNode).getAttribute("hint").trim());
                Log.d("XMLHELPER_DisplayName", ((Element) ControlNode).getAttribute("displayName").trim());
                Log.d("XMLHELPER_DefaultValue", ((Element) ControlNode).getAttribute("defaultValue").trim());
                Log.d("XMLHELPER_Hint", ((Element) ControlNode).getAttribute("hint").trim());

                switch (ControlNode.getNodeName().trim()) {
                    case AppConstants.CONTROL_TYPE_AUTO_COMPLETION:

                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onKeyEvent").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSelectEvent").trim()));
                        controlObject.setControlCategory("advanced");
                        Node MinCharacterNode = ((Element) ControlNode).getElementsByTagName("MinCharacter").item(0);
                        //controlObject.setMinChartoSeearch(Integer.parseInt(MinCharacterNode.getTextContent()));

                        Node SearchKeyAtNode = ((Element) ControlNode).getElementsByTagName("SearchKeyAt").item(0);
                        controlObject.setSearchKeyAt(SearchKeyAtNode.getTextContent());

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                            controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_VIEWFILE:

                        controlObject.setControlCategory("standard");
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setFilelink(((Element) ControlNode).getAttribute("Filelink").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_filelink")) {
                                            controlObject.setHide_filelink(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_TEXT_INPUT:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                                        AppConstants.ValidatorsForControls(ControlNode,controlObject);
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxCharacters(true);
                                            controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinCharacters(true);
                                            controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromBarcode(true);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromQRCode(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                            controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setGoogleLocationSearch(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentLocation")) {
                                            controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setCurrentLocation(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("VoiceInput")) {
                                            controlObject.setVoiceText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setVoiceText(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {

                                            controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("AllowOnlyAlphabets")) {
                                            controlObject.setAllowOnlyAlphabets(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_NUMERIC_INPUT:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList numericValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (numericValidatorsList != null && numericValidatorsList.getLength() > 0) {
                                for (int k = 0; k < numericValidatorsList.getLength(); k++) {
                                    Node Opton = numericValidatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                            Log.d("XMLMaxValue", Opton.getChildNodes().item(2).getTextContent().trim());
                                            Log.d("XMLMaxValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableUpperLimit(true);
                                            controlObject.setUpperLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setUpperLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                            Log.d("XMLMinValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMinValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

//                                                        NodeList sdfds = ((Element) ControlNode).getElementsByTagName("Param").item(0).getChildNodes();
//
//                                                        for (int l = 0; l <sdfds.getLength() ; l++) {
//                                                            Node Opton1 = numericValidatorsList.item(l);
//                                                            Element eElement1 = (Element) Opton1;
//                                                            if( eElement1.getAttribute("name").equalsIgnoreCase("value")){
//                                                                Log.d("XMLMinValues", eElement1.getTextContent());
//                                                            }
//                                                        }
                                            controlObject.setEnableLowerLimit(true);
                                            controlObject.setLowerLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setLowerLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                            Log.d("XMLCapValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCapValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableCappingDigits(true);
                                            controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList numberOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < numberOptonsList.getLength(); k++) {
                                Node Opton = numberOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromBarcode(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromQRCode(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_PHONE:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList phoneValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (phoneValidatorsList != null && phoneValidatorsList.getLength() > 0) {
                                for (int p = 0; p < phoneValidatorsList.getLength(); p++) {
                                    Node Opton = phoneValidatorsList.item(p);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableCappingDigits(true);
                                            controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList phoneOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < phoneOptonsList.getLength(); k++) {
                                Node Opton = phoneOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_EMAIL:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {

                            NodeList emailValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (emailValidatorsList != null && emailValidatorsList.getLength() > 0) {
                                for (int e = 0; e < emailValidatorsList.getLength(); e++) {
                                    Node Opton = emailValidatorsList.item(e);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList EmailOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < EmailOptonsList.getLength(); k++) {
                                Node Opton = EmailOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")
                                            || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        mDisplaySettings(ControlNode, controlObject);
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_LARGE_INPUT:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {

                            NodeList largeInputValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (largeInputValidatorsList != null && largeInputValidatorsList.getLength() > 0) {
                                for (int li = 0; li < largeInputValidatorsList.getLength(); li++) {
                                    Node Opton = largeInputValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setUniqueField(true);
                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")
                                                || eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxCharacters(true);
                                            controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")
                                                ||eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinCharacters(true);
                                            controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList largeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < largeOptonsList.getLength(); k++) {
                                Node Opton = largeOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLEditor")) {
                                        controlObject.setHtmlEditorEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                        controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CAMERA:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList cameraValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (cameraValidatorsList != null && cameraValidatorsList.getLength() > 0) {
                                for (int li = 0; li < cameraValidatorsList.getLength(); li++) {
                                    Node Opton = cameraValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxSize")) {
                                            Log.d("XMLCamMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCamMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxUploadSize(true);
                                            controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minSize")) {
                                            Log.d("XMLCamMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCamMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinUploadSize(true);
                                            controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList cameraOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < cameraOptionsList.getLength(); k++) {
                                Node Opton = cameraOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("AspectRatio")) {
                                        controlObject.setEnableAspectRatio(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageGPS")) {
                                        controlObject.setEnableImageWithGps(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableZoomControl")) {
                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setZoomControl(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableFlash")) {
                                        controlObject.setFlash(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setFlash(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FilePhoto")) {
//                                                        controlObject.setEnableFilePhoto(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableFilePhoto(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("fileUpload")) {
                                        controlObject.setCaptureFromFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Capture")) {
                                        controlObject.setCaptureFromCamera(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("CaptureOrientation")) {
                                        controlObject.setCaptureOrientation(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_FILE_BROWSING:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {

                            NodeList fileBrowserValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (fileBrowserValidatorsList != null && fileBrowserValidatorsList.getLength() > 0) {
                                for (int li = 0; li < fileBrowserValidatorsList.getLength(); li++) {
                                    Node Opton = fileBrowserValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLFbMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("FbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("extensionCheck")) {
                                            Log.d("XMLFBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableExtensions(true);
                                            String extensions = eElement.getElementsByTagName("Param").item(1).getTextContent();
                                            List<String> names = new ArrayList<>();
                                            names.addAll(Arrays.asList(extensions.split("\\$")));
                                            controlObject.setExtensionsListNames(names);
                                            controlObject.setFileExtensionError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("FbExtensionCheck", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxUpload")) {
                                            Log.d("XMLFileMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLFileMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMaxUploadSize(true);
                                            controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                        if (eElement.getAttribute("type").equalsIgnoreCase("minUpload")) {
                                            Log.d("XMLFileMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLFileMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableMinUploadSize(true);
                                            controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList FileuploadOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < FileuploadOptonsList.getLength(); k++) {
                                Node Opton = FileuploadOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ScanEnabled")) {
                                        controlObject.setEnableScan(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CALENDER:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                        }
                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                        }
                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                        }
                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                        }
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                    Node Opton = calendarValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenDates")) {
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableBetweenStartAndEndDate(true);
                                            controlObject.setStartDate(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setEndDate(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            controlObject.setBetweenStartAndEndDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("preDate")) {

                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setEnableBeforeCurrentDate(true);
                                            controlObject.setBeforeCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("postDate")) {

                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableAfterCurrentDate(true);
                                            controlObject.setAfterCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                Node Opton = DateOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("GetYear")) {
                                        controlObject.setGetYearFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetMonth")) {
                                        controlObject.setGetMonthFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetMonthFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDay")) {
                                        controlObject.setGetDayFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDayFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDate")) {
                                        controlObject.setGetDateFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CHECKBOX:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        //ValueType
                        String valueType=((Element) ControlNode).getAttribute("ValueType").trim();
                        controlObject.setCheckbox_ValueType(valueType);
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList checkBoxValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (checkBoxValidatorsList != null && checkBoxValidatorsList.getLength() > 0) {
                                for (int li = 0; li < checkBoxValidatorsList.getLength(); li++) {
                                    Node Opton = checkBoxValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("CbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList CheckboxOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < CheckboxOptonsList.getLength(); k++) {
                                Node Opton = CheckboxOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        if(valueType.equals("Value")){
                            NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                            setItems(CheckboxItemsList, controlObject);
                        }else if(valueType.equals("Boolean")){
                            String checkedValue=((Element) ControlNode).getAttribute("CheckedValue").trim();
                            String unCheckedValue=((Element) ControlNode).getAttribute("unCheckedValue").trim();
                            controlObject.setCheckbox_CheckedValue(checkedValue);
                            controlObject.setCheckbox_unCheckedValue(unCheckedValue);
                        }
                       /*      for (int l = 0; l < CheckboxItemsList.getLength(); l++) {
                            Node Opton1 = CheckboxItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }
                                    cbItems.add(Opton1.getTextContent().trim());
                                }
                            }
                        }

                        controlObject.setItems(cbItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_RADIO_BUTTON:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList radioButtonValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (radioButtonValidatorsList != null && radioButtonValidatorsList.getLength() > 0) {
                                for (int li = 0; li < radioButtonValidatorsList.getLength(); li++) {
                                    Node Opton = radioButtonValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLRBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("RBUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList RadioOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < RadioOptonsList.getLength(); k++) {
                                Node Opton = RadioOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Horizontal")) {
                                        controlObject.setEnableHorizontalAlignment(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();

                        setItems(RBItemsList, controlObject);
                        /*List<String> rbItems = new ArrayList<>();
                        NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        for (int l = 0; l < RBItemsList.getLength(); l++) {
                            Node Opton1 = RBItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                                    String defaultValue = ((Element) Opton1).getAttribute("detault");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }
                                    rbItems.add(Opton1.getTextContent().trim());
                                }
                            }
                        }

                        controlObject.setItems(rbItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_DROP_DOWN:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList dropDownValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (dropDownValidatorsList != null && dropDownValidatorsList.getLength() > 0) {
                                for (int li = 0; li < dropDownValidatorsList.getLength(); li++) {
                                    Node Opton = dropDownValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLDDMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("DDUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DropdownOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DropdownOptonsList.getLength(); k++) {
                                Node Opton = DropdownOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("RemoveSelectedItemInNewRow")) {
                                        controlObject.setRemoveSelectedItemInNewRow(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Items").getLength() == 0) {

                        } else {
                            NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                            setItems(DDItemsList, controlObject);
                        }

                        /*List<String> ddItems = new ArrayList<>();
                        NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        for (int l = 0; l < DDItemsList.getLength(); l++) {
                            Node Opton1 = DDItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }

                                    ddItems.add(Opton1.getTextContent().trim());
                                }
                            }
                        }

                        controlObject.setItems(ddItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_CHECK_LIST:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList checkListValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (checkListValidatorsList != null && checkListValidatorsList.getLength() > 0) {
                                for (int li = 0; li < checkListValidatorsList.getLength(); li++) {
                                    Node Opton = checkListValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLCLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("CbLUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList MultiSelectOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < MultiSelectOptonsList.getLength(); k++) {
                                Node Opton = MultiSelectOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("AscendingOrder")) {
                                        controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }  else if (Opton.getNodeName().trim().equalsIgnoreCase("DescendingOrder")) {
                                        controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RowSelectionType")) {
                                        controlObject.setRowSelectionType(Opton.getTextContent().trim());
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

//                        List<String> CLItems = new ArrayList<>();
                        NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                        setItems(CLItemsList, controlObject);
                        /* for (int l = 0; l < CLItemsList.getLength(); l++) {
                            Node Opton1 = CLItemsList.item(l);

                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                    CLItems.add(Opton1.getTextContent().trim());
                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                    if (defaultValue.equalsIgnoreCase("true")) {
                                        controlObject.setDefaultItemIndex(l);
                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                    }
                                }
                            }
                        }

                        controlObject.setItems(CLItems);*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_RATING:

                        controlObject.setRatingItemCount(((Element) ControlNode).getAttribute("noOfItems").trim());

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList ratingValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (ratingValidatorsList != null && ratingValidatorsList.getLength() > 0) {
                                for (int li = 0; li < ratingValidatorsList.getLength(); li++) {
                                    Node Opton = ratingValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLRatingMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("RUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList RatingOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < RatingOptionsList.getLength(); k++) {
                                Node Opton = RatingOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("DisableCount")) {
                                        controlObject.setDisableRatingCount(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisableRatingCount(false);
                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RatingType")) {

//                                                    controlObject.setSelectRatingItemType(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        if (!Opton.getTextContent().equalsIgnoreCase("")) {
                                            controlObject.setRatingType(Opton.getTextContent().trim());
                                        } else {
                                            controlObject.setRatingType("Star");
                                        }
                                        Log.d("MainRatingCountTType", Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_VOICE_RECORDING:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList voiceRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (voiceRecValidatorsList != null && voiceRecValidatorsList.getLength() > 0) {
                                for (int li = 0; li < voiceRecValidatorsList.getLength(); li++) {
                                    Node Opton = voiceRecValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                            Log.d("XMLVoiceRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVoiceRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVoiceMaximumDuration(true);
                                            controlObject.setVoiceMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                            Log.d("XMLVoiceRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVoiceRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVoiceMinimumDuration(true);
                                            controlObject.setVoiceMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList voiceOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < voiceOptionsList.getLength(); k++) {
                                Node Opton = voiceOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        Log.d("XML_VoiceRecDisable ", Opton.getTextContent().trim());
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("AudioFormat")) {
                                        Log.d("XML_VoiceRec ", Opton.getTextContent().trim());
                                        if(!Opton.getTextContent().isEmpty()){
                                        String[] strAudioFormats = Opton.getTextContent().trim().split("\\$");
                                        List<String> temp = new ArrayList<>();
                                        for (int count = 0; count < strAudioFormats.length; count++) {
                                            temp.add(strAudioFormats[count]);
                                        }
                                        controlObject.setAudioFormatIds(temp);
                                        controlObject.setAudioFormatNames(temp);}
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadAudioFile")) {
                                        controlObject.setEnableUploadAudioFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableUploadAudioFile(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_VIDEO_RECORDING:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setEnableCompression(Boolean.parseBoolean(((Element) ControlNode).getAttribute("enableCompression").trim()));
                        if (controlObject.isEnableCompression()) {
                            controlObject.setCompressionQuality(((Element) ControlNode).getAttribute("compressionQuality").trim());
                        }
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList videoRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (videoRecValidatorsList != null && videoRecValidatorsList.getLength() > 0) {
                                for (int li = 0; li < videoRecValidatorsList.getLength(); li++) {
                                    Node Opton = videoRecValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                            Log.d("XMLVideoRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVideoRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVideoMaximumDuration(true);
                                            controlObject.setVideoMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                            Log.d("XMLVideoRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLVideoRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableVideoMinimumDuration(true);
                                            controlObject.setVideoMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() > 0) {
                                NodeList videoOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                for (int k = 0; k < videoOptionsList.getLength(); k++) {
                                    Node Opton = videoOptionsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("VideoFormat")) {
                                            String[] strVideoFormats = Opton.getTextContent().trim().split("\\$");
                                            List<String> temp = new ArrayList<>();
                                            for (int count = 0; count < strVideoFormats.length; count++) {
                                                temp.add(strVideoFormats[count]);
                                            }
                                            controlObject.setVideoFormatIds(temp);
                                            controlObject.setVideoFormatNames(temp);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadVideoFile")) {
                                            controlObject.setEnableUploadVideoFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_AUDIO_PLAYER:
                        controlObject.setAudioData(((Element) ControlNode).getAttribute("audioData").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList audioPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < audioPlayerOptionsList.getLength(); k++) {
                                Node Opton = audioPlayerOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                        controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Background")) {
                                        controlObject.setEnablePlayBackground(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_VIDEO_PLAYER:
                        controlObject.setVideoData(((Element) ControlNode).getAttribute("videoData").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList videoPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < videoPlayerOptionsList.getLength(); k++) {
                                Node Opton = videoPlayerOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                        controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_PERCENTAGE:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList percentageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (percentageValidatorsList != null && percentageValidatorsList.getLength() > 0) {
                                for (int li = 0; li < percentageValidatorsList.getLength(); li++) {
                                    Node Opton = percentageValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLPercentageMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList percentageOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < percentageOptionsList.getLength(); k++) {
                                Node Opton = percentageOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_SIGNATURE:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList signatureValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (signatureValidatorsList != null && signatureValidatorsList.getLength() > 0) {
                                for (int li = 0; li < signatureValidatorsList.getLength(); li++) {
                                    Node Opton = signatureValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList signatureOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < signatureOptionsList.getLength(); k++) {
                                Node Opton = signatureOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Upload")) {
                                        controlObject.setEnableUploadSignature(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("signatureOnScreen")) {
                                        controlObject.setEnableSignatureOnScreen(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_URL_LINK:
                        controlObject.setUrl(((Element) ControlNode).getAttribute("value").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList urlValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (urlValidatorsList != null && urlValidatorsList.getLength() > 0) {
                                for (int li = 0; li < urlValidatorsList.getLength(); li++) {
                                    Node Opton = urlValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLURLViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("URlUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList urllinkOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < urllinkOptonsList.getLength(); k++) {
                                Node Opton = urllinkOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideUrl")) {
                                        controlObject.setHideURL(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayURLName")) {
                                        controlObject.setUrlPlaceholderText(Opton.getTextContent().trim());
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_DECIMAL:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList decimalValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (decimalValidatorsList != null && decimalValidatorsList.getLength() > 0) {
                                for (int li = 0; li < decimalValidatorsList.getLength(); li++) {
                                    Node Opton = decimalValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLdecimalViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("DUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList decimalOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < decimalOptonsList.getLength(); k++) {
                                Node Opton = decimalOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Precision")) {
                                        controlObject.setCharactersAfterDecimal((Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_PASSWORD:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList passwordValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (passwordValidatorsList != null && passwordValidatorsList.getLength() > 0) {
                                for (int li = 0; li < passwordValidatorsList.getLength(); li++) {
                                    Node Opton = passwordValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("PasswordViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordPolicy")) {
                                            controlObject.setEnablePasswordPolicy(true);
                                            String[] passwordPolicyId = eElement.getElementsByTagName("Param").item(1).getTextContent().trim().split("\\$");
                                            String[] passwordPolicyValue = eElement.getElementsByTagName("Param").item(2).getTextContent().trim().split("2");
                                            List<String> temppasswordPolicyIds = new ArrayList<>();
                                            List<String> temppasswordPolicyValues = new ArrayList<>();
                                            for (int count = 0; count < passwordPolicyId.length; count++) {
                                                temppasswordPolicyIds.add(passwordPolicyId[count]);
                                            }
                                            for (int count = 0; count < passwordPolicyValue.length; count++) {
                                                temppasswordPolicyValues.add(passwordPolicyValue[count]);
                                            }
                                            controlObject.setPasswordPolicy(temppasswordPolicyValues);
                                            controlObject.setPasswordPolicyIds(temppasswordPolicyIds);
                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordLength")) {
                                            controlObject.setEnablePasswordLength(true);
                                            controlObject.setPasswordLength(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setPasswordLengthError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList PasswordOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < PasswordOptonsList.getLength(); k++) {
                                Node Opton = PasswordOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowOption")) {
                                        controlObject.setEnableShowOrHideOption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Encrypt")) {
                                        controlObject.setEnableEncryption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionType")) {
                                        controlObject.setEncryptionType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionTypeId")) {
                                        controlObject.setEncryptionTypeId(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_CURRENCY:
                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList currencyValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (currencyValidatorsList != null && currencyValidatorsList.getLength() > 0) {
                                for (int li = 0; li < currencyValidatorsList.getLength(); li++) {
                                    Node Opton = currencyValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("CurrencyViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                            Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                            Log.d("XMLCurrencyMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCurrencyMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableMaximumAmount(true);
                                            controlObject.setMaxAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMaxAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                            Log.d("XMLCurrencyMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCurrencyMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setEnableMinimumAmount(true);
                                            controlObject.setMinAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setMinAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            List<String> currencyType = new ArrayList<>();
                            NodeList CurrencyOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < CurrencyOptonsList.getLength(); k++) {
                                Node Opton = CurrencyOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrencyType")) {
                                        currencyType.add(Opton.getTextContent().trim());
                                        controlObject.setCurrencyListNames(currencyType);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                        controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_DYNAMIC_LABEL:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setValue(((Element) ControlNode).getAttribute("value").trim());
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList dynamicOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < dynamicOptionsList.getLength(); k++) {

                                Node Opton = dynamicOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Section")) {
                                        controlObject.setMakeAsSection(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BarCode")) {
                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("QRCode")) {
                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UniCode")) {
                                        controlObject.setUnicodeFormat(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersType")) {
                                        controlObject.setMaskCharacterType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("NoOfMaskCharactersToMask")) {
                                        controlObject.setNoOfCharactersToMask(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersDirection")) {
                                        controlObject.setMaskCharacterDirection(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGround")) {
                                        controlObject.setLayoutBackGroundEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGroundColor")) {
                                        controlObject.setLayoutBackGroundColor(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                        controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UnderlineText")) {
                                        controlObject.setUnderLineText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_IMAGE:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                    Node Opton = imageValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList imageOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < imageOptonsList.getLength(); k++) {
                                Node Opton = imageOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageDataType")) {
                                        controlObject.setImageDataType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageData")) {
                                        controlObject.setImageData(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImage")) {
                                        controlObject.setEnableMultipleImages(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImageFormat")) {
                                        controlObject.setImagesArrangementType(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomImage")) {
                                        controlObject.setZoomImageEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_BUTTON:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                Node Opton = buttonOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                        for (int k = 0; k < buttonDSList.getLength(); k++) {
                            Node Opton = buttonDSList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                    controlObject.setShape(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                    controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                    controlObject.setIconPath(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                }
                            }
                        }

/*
                        NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                        for (int k = 0; k < buttonDSList.getLength(); k++) {
                            Node Opton = buttonDSList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                    controlObject.setShape(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                    controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                    controlObject.setIconPath(Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                }
                            }
                        }
*/
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
//                        mButtonDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    /*case AppConstants.CONTROL_TYPE_TIME:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                    Node Opton = calendarValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLTimeMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryTime(true);
                                            controlObject.setMandatoryTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenTimes")) {
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setBetweenStartEndTime(true);
                                            controlObject.setBetweenStartTime(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setBetweenEndTime(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            controlObject.setBetweenStartEndTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("beforeCurrentTime")) {

                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                            controlObject.setBeforeCurrentTime(true);
                                            controlObject.setBeforeCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("afterCurrentTime")) {

                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setAfterCurrentTime(true);
                                            controlObject.setAfterCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                Node Opton = DateOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentTime")) {
                                        controlObject.setCurrentTime(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatEnable")) {
                                        controlObject.setTimeFormat(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormat")) {
                                        controlObject.setTimeFormat(Opton.getTextContent().trim());
//                                                    controlObject.setGetMonthFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatOptions")) {
                                        controlObject.setTimeFormatOptions(Opton.getTextContent().trim());
//                                                    controlObject.setGetDayFromSelection(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadOnly")) {
                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);

                        break;*/
                    // Advanced Controls
                    case AppConstants.CONTROL_TYPE_GPS:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setGpsType(((Element) ControlNode).getAttribute("gpsType").trim());
                        controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                        if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                            controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                        }
                        if (controlObject.getGpsType().equalsIgnoreCase(AppConstants.Multi_points_line) ||
                                controlObject.getGpsType().equalsIgnoreCase(AppConstants.Polygon) ||
                                controlObject.getGpsType().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
                            controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                            if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                                controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                            } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                                controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                            }
                        }


                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                    Node Opton = imageValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList gpsOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < gpsOptionsList.getLength(); k++) {
                                Node Opton = gpsOptionsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowMap")) {
                                        controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SaveInDifferentColumns")) {
                                        controlObject.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationFormat")) {
                                        controlObject.setLocationFormat(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_BAR_CODE:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList barCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < barCodeOptonsList.getLength(); k++) {
                                Node Opton = barCodeOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_QR_CODE:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList qrCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < qrCodeOptonsList.getLength(); k++) {
                                Node Opton = qrCodeOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_AUTO_GENERATION:
                        controlObject.setControlCategory("standard");

                        NodeList ControlNodeList = ControlNode.getChildNodes();
                        for (int n = 0; n < ControlNodeList.getLength(); n++) {

                            Node item = ControlNodeList.item(n);
                            if (item.getNodeName().equalsIgnoreCase("Prefix")) {
                                controlObject.setPreFixValue(((Element) item).getAttribute("name").trim());
                            } else if (item.getNodeName().equalsIgnoreCase("Suffix")) {
                                controlObject.setSuffixValue(((Element) item).getAttribute("name").trim());
                            } else if (item.getNodeName().equalsIgnoreCase("Suffix1")) {
                                controlObject.setSuffix1Value(((Element) item).getAttribute("name").trim());
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);

//                    case AppConstants.CONTROL_TYPE_SUBFORM:
//
//                        controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
//                        controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
//                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                            controlObject.setNullAllowed(false);
//                        } else {
//                            NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                            if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
//                                for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
//                                    Node Opton = subFormValidatorsList.item(li);
//                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                        Element eElement = (Element) Opton;
//                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                        if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                            controlObject.setMaximumRows(true);
//                                            controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
//                                        }
//                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
////                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                            controlObject.setMaximumRows(true);
//                                            controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                            //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
//                                        }
//
//                                    }
//                                }
//                            }
//                        }
//
//
//                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                        } else {
//                            NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                            for (int k = 0; k < subFormOptionsList.getLength(); k++) {
//                                Node Opton = subFormOptionsList.item(k);
//                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
//                                        controlObject.setDisplayOrientation(Opton.getTextContent().trim());
//                                        Log.d("SubformOrientation", Opton.getTextContent().trim());
//                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayButton")) {
//                                        controlObject.setDisplayNameOfAddButton(Opton.getTextContent().trim());
//                                        Log.d("SubformDisplayName", Opton.getTextContent().trim());
//                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                        Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    }
//                                }
//                            }
//                        }
////
//                                       /* if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
//                                        } else {
//                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
//                                                List<ControlObject> controlObjectList = new ArrayList<>();
//
//                                            }CONTROL_TYPE
//                                        }*/
//
//                        Node node = ControlNode.getChildNodes().item(3);
//
//                        controlObject.setSubFormControlList(getSubFormControlList(node));
//
//
//                        break;
                        // Data Controls
                    case AppConstants.CONTROL_TYPE_DATA_CONTROL:

                        controlObject.setDataControlStatus(((Element) ControlNode).getAttribute("type").trim());
                        controlObject.setDependentControl(((Element) ControlNode).getAttribute("dependentName").trim());
                        controlObject.setDataControlName(((Element) ControlNode).getAttribute("dataControllName").trim());
                        controlObject.setDataControlLocationType(((Element) ControlNode).getAttribute("locationType").trim());
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChange").trim()));
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList datacontrolValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (datacontrolValidatorsList != null && datacontrolValidatorsList.getLength() > 0) {
                                for (int li = 0; li < datacontrolValidatorsList.getLength(); li++) {
                                    Node Opton = datacontrolValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                        } else {
                            NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                Node Opton = dataControlOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UserControlBinding")) {
                                        controlObject.setEnableUserControlBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("PostLocationBinding")) {
                                        controlObject.setEnablePostLocationBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_COUNT_DOWN_TIMER:

                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setControlCategory("standard");
                        controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                        controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                        controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                            controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                            controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_COUNT_UP_TIMER:

                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onTimeElapsedEvent").trim()));//onClickEvent//onTimeElapsedEvent
                        controlObject.setControlCategory("standard");
                        controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                        controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                        controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                            controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                            controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_MAP:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        controlObject.setOnMapMarkerClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onMapMarkerClickEvent").trim()));
                        controlObject.setMapView(((Element) ControlNode).getAttribute("mapView").trim());
                        if (((Element) ControlNode).hasAttribute("mapViewType")) {
                            controlObject.setMapViewType(((Element) ControlNode).getAttribute("mapViewType").trim());
                        }
                        if (((Element) ControlNode).getElementsByTagName("ItemsList").getLength() == 0) {

                        } else {

                            NodeList itemsList = ((Element) ControlNode).getElementsByTagName("ItemsList").item(0).getChildNodes();

                            List<RenderingType> renderingTypeList = new ArrayList<RenderingType>();

                            for (int k = 0; k < itemsList.getLength(); k++) {
                                Node Items = itemsList.item(k);

                                RenderingType renderingType = new RenderingType();

                                String type = ((Element) Items).getAttribute("type");

                                renderingType.setType(type);

                                List<String> itemValues = new ArrayList<String>();

                                if (Items.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Items.getNodeName().trim().equalsIgnoreCase("Items")) {
                                        NodeList itemList = Items.getChildNodes();

                                        for (int p = 0; p < itemList.getLength(); p++) {
                                            Node item = itemList.item(p);

                                            if (item.getNodeType() == Node.ELEMENT_NODE) {
                                                if (item.getNodeName().trim().equalsIgnoreCase("Item")) {
                                                    itemValues.add(item.getTextContent().trim());
//                                                                    itemValues.add("17.7340891,83.3183981");
                                                }

                                            }

                                        }

                                    }
                                }

                                renderingType.setItem(itemValues);

                                renderingTypeList.add(renderingType);
                            }

                            controlObject.setRenderingTypeList(renderingTypeList);
                        }


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                            for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                Node Opton = menuOptionsList.item(k);

                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomControls")) {
                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                        controlObject.setMapIcon(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                        controlObject.setBaseMap(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                        controlObject.setShowCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapHeight")) {
                                        controlObject.setMapHeight(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }

                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    // asdf
                    case AppConstants.CONTROL_TYPE_CALENDAR_EVENT:
                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                        if (((Element) ControlNode).getElementsByTagName("CalendarEvents").getLength() == 0) {

                        } else {
                            NodeList calendarEventsList = ((Element) ControlNode).getElementsByTagName("CalendarEvents").item(0).getChildNodes();

                            List<CalendarEvent> calendarEventList = new ArrayList<CalendarEvent>();

                            for (int k = 0; k < calendarEventsList.getLength(); k++) {
                                Node calendarEvent = calendarEventsList.item(k);

                                CalendarEvent calendarEventObj = new CalendarEvent();

                                if (calendarEvent.getNodeType() == Node.ELEMENT_NODE) {
                                    if (calendarEvent.getNodeName().trim().equalsIgnoreCase("CalendarEvent")) {
                                        Element calendarEventElement = ((Element) calendarEvent);

                                        String eventType = calendarEventElement.getAttribute("multipleDays");

                                        calendarEventObj.setEventType(eventType);

//                                                        if(eventType.equalsIgnoreCase("true"))
                                        if (eventType.equalsIgnoreCase("Multiple Dates")) {

                                            NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                            Element paramOne = (Element) paramOneList.item(0);
                                            String startDate = getCharacterDataFromElement(paramOne);

                                            NodeList paramTwoList = calendarEventElement.getElementsByTagName("Param");
                                            Element paramTwo = (Element) paramTwoList.item(1);
                                            String endDate = getCharacterDataFromElement(paramTwo);

                                            NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                            Element paramThree = (Element) paramThreeList.item(0);

                                            String message = getCharacterDataFromElement(paramThree);

                                            calendarEventObj.setEventDates(startDate + "$" + endDate);
                                            calendarEventObj.setEventMessage(message);

                                        }

                                        if (eventType.equalsIgnoreCase("Single Date")) {
                                            NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                            Element paramOne = (Element) paramOneList.item(0);
                                            String startDate = getCharacterDataFromElement(paramOne);

                                            NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                            Element paramThree = (Element) paramThreeList.item(0);
                                            String message = getCharacterDataFromElement(paramThree);

                                            calendarEventObj.setEventDates(startDate);
                                            calendarEventObj.setEventMessage(message);

                                        }

                                    }

                                }

                                calendarEventList.add(calendarEventObj);

                            }

                            controlObject.setCalendarEventType(calendarEventList);
                        }


                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                            for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                Node Opton = dataControlOptonsList.item(k);

                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("WeekDays")) {
                                        controlObject.setWeekDays(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_USER:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setControlCategory("advanced");

                        Node userTypeNode = ((Element) ControlNode).getElementsByTagName("UserType").item(0);
                        controlObject.setUserType(userTypeNode.getTextContent());

                        if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                            Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                            NodeList groupNodes = Groups.getChildNodes();
                            List<UserGroup> groupList = new ArrayList<>();

                            for (int k = 0; k < groupNodes.getLength(); k++) {

                                Node group = groupNodes.item(k);

                                UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                groupList.add(userGroup);

                            }

                            controlObject.setGroups(groupList);
                        }

                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;
                    case AppConstants.CONTROL_TYPE_POST:

                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setControlCategory("advanced");

                        Node postTypeNode = ((Element) ControlNode).getElementsByTagName("PostType").item(0);
                        controlObject.setUserType(postTypeNode.getTextContent());

                        if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                            Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                            NodeList groupNodes = Groups.getChildNodes();
                            List<UserGroup> groupList = new ArrayList<>();

                            for (int k = 0; k < groupNodes.getLength(); k++) {

                                Node group = groupNodes.item(k);

                                UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                groupList.add(userGroup);


                            }

                            controlObject.setGroups(groupList);
                        }


                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                    Node Opton = validatorsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                            controlObject.setNullAllowed(true);
                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                    }
                                }
                            }
                        }
//
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {

                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                    Node Opton = OptonsList.item(k);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                        }
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    case AppConstants.CONTROL_TYPE_TIME:
                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                        controlObject.setControlCategory("standard");
                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                            controlObject.setNullAllowed(false);
                        } else {
                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                    Node Opton = calendarValidatorsList.item(li);
                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                        Element eElement = (Element) Opton;
                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                            controlObject.setNullAllowed(true);
                                            controlObject.setMandatoryTime(true);
                                            controlObject.setMandatoryTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenTimes")) {
                                            controlObject.setBetweenStartEndTime(true);
                                            controlObject.setBetweenStartTime(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                            controlObject.setBetweenEndTime(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                            controlObject.setBetweenStartEndTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("beforeCurrentTime")) {
                                            controlObject.setBeforeCurrentTime(true);
                                            controlObject.setBeforeCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("afterCurrentTime")) {
                                            controlObject.setAfterCurrentTime(true);
                                            controlObject.setAfterCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                        }
                                    }
                                }
                            }
                        }
                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                        } else {
                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                Node Opton = DateOptonsList.item(k);
                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentTime")) {
                                        controlObject.setCurrentTime(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormat")) {
                                        controlObject.setTimeFormat(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatOptions")) {
                                        controlObject.setTimeFormatOptions(Opton.getTextContent().trim());
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadOnly")) {
                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }
                            }
                        }
                        setLangauge(ControlNode, controlObject);
                        mDisplaySettings(ControlNode, controlObject);
                        setRequiredUI(ControlNode, controlObject);
                        break;

                    default:

                }


                if (controlObject.isOnFocusEventExists() || controlObject.isOnChangeEventExists() || controlObject.isOnClickEventExists() || controlObject.isOnAddRowEventExists() || controlObject.isOnDeleteRowEventExists() || controlObject.isOnAddRowEventExists() || controlObject.isOnDeleteRowEventExists() || controlObject.isOnMapMarkerClickEventExists()) {
                    setEvents(controlObject, ControlNode);
                }
                Controls_list.add(controlObject);
            }
        }


        return Controls_list;
    }

    public Create_Query_Object XML_To_QueryFormObject(String XMLString, Context context) {
        System.out.println("==========Step Create_Query_Object============");
        Create_Query_Object QueryFormObject = new Create_Query_Object();
        try {
            List<QuerySelectField_Bean> List_DisplayFields;
            List<QueryFilterField_Bean> List_FilterFields = QueryFormObject.getList_FormAPIQuery_FilterFields();


            String response = XMLString.replaceAll("[^\\x20-\\x7e]", "");
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;
            builder = factory.newDocumentBuilder();
            doc = builder.parse(new InputSource(new StringReader(response)));
            doc.getDocumentElement().normalize();

            NodeList nList = doc.getChildNodes().item(0).getChildNodes();
            QueryFormObject.setQuery_Name(((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            QueryFormObject.setQuery_Source(((Element) doc.getChildNodes().item(0)).getAttribute("source"));
            QueryFormObject.setQuery_Source_Type(((Element) doc.getChildNodes().item(0)).getAttribute("sourceType"));
            String strOffLine = ((Element) doc.getChildNodes().item(0)).getAttribute("mode");
            if (strOffLine.equalsIgnoreCase("offline")) {
                QueryFormObject.setQuery_OffLine(true);
            }
            /* if (QueryFormObject.getQuery_Source().equalsIgnoreCase("appHeading")) {*/
            QueryFormObject.setQuery_Title(((Element) doc.getChildNodes().item(0)).getAttribute("appHeading"));
            // }

            if (QueryFormObject.getQuery_Source().equalsIgnoreCase("formBased")) {
                QueryFormObject.setForm_Order(((Element) doc.getChildNodes().item(0)).getAttribute("Order"));
            }


            List_DisplayFields = QueryFormObject.getList_Form_DisplayFields();

            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    if (nNode.getNodeName().trim().equalsIgnoreCase("RTL")) {
                        setQueryAppLevelLangauge(doc.getChildNodes().item(0), QueryFormObject);
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("SourceValue")) {
                        QueryFormObject.setQuery_SourceValue(((Element) nList.item(i)).getAttribute("type"));
                        QueryFormObject.setFormQuery_Name(nNode.getTextContent());
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("DisplayFields")) {
                        NodeList ControleNodeList = nNode.getChildNodes();

                        for (int j = 0; j < ControleNodeList.getLength(); j++) {
                            Node displayField_ControlNode = ControleNodeList.item(j);
                            if (displayField_ControlNode.getNodeType() == Node.ELEMENT_NODE) {
                                QuerySelectField_Bean Display_Field = new QuerySelectField_Bean();
                                String controlName = ((Element) displayField_ControlNode).getAttribute("controlName");
                                Display_Field.setField_Name(((Element) displayField_ControlNode).getAttribute("displayName"));
                                Display_Field.setField_Enabled(Boolean.parseBoolean(((Element) displayField_ControlNode).getAttribute("enable")));

                                if (Display_Field.isField_Enabled()) {
                                    Display_Field.setField_Display_Formate(((Element) displayField_ControlNode).getAttribute("format"));
                                }

                                Node node_display_control;
                                if (displayField_ControlNode.getChildNodes().getLength() > 0) {
                                    if (displayField_ControlNode.getChildNodes().item(0).getNodeType() == Node.ELEMENT_NODE) {
                                        node_display_control = displayField_ControlNode.getChildNodes().item(0);
                                    } else {
                                        node_display_control = displayField_ControlNode.getChildNodes().item(1);
                                    }

                                    if (QueryFormObject.getQuery_Source().equalsIgnoreCase("formBased")) {

                                        Display_Field.setField_ControlObject(setValuesToControleObject(node_display_control));

                                    }
                                } else {
                                    ControlObject controlObject = new ControlObject();
                                    controlObject.setDisplayName(Display_Field.getField_Name());
                                    controlObject.setControlName(controlName);
                                    controlObject.setControlType(AppConstants.CONTROL_TYPE_TEXT_INPUT);

                                    Display_Field.setField_ControlObject(controlObject);
                                }
                                List_DisplayFields.add(Display_Field);
                            }
                        }


                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("IndexFields")) {

                        NodeList ControleNodeList = nNode.getChildNodes();
                        List<String> IndexColums = new ArrayList<String>();
                        List<QueryIndexField_Bean> indexField_beans = new ArrayList<>();
                        for (int j = 0; j < ControleNodeList.getLength(); j++) {
                            QueryIndexField_Bean queryIndexField_bean = new QueryIndexField_Bean();
                            Node displayField_ControlNode = ControleNodeList.item(j);
                            if (displayField_ControlNode.getNodeType() == Node.ELEMENT_NODE) {
                                queryIndexField_bean.setControlName(((Element) displayField_ControlNode).getAttribute("controlName"));
                                queryIndexField_bean.setDisplayName(((Element) displayField_ControlNode).getAttribute("displayName"));
                                IndexColums.add(((Element) displayField_ControlNode).getAttribute("controlName"));
                                indexField_beans.add(queryIndexField_bean);
                            }
                        }
                        QueryFormObject.setList_Index_Columns(IndexColums);
                        QueryFormObject.setList_Query_Index_Fields(indexField_beans);

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Filters")) {


                        NodeList FilterNodeList = nNode.getChildNodes();
                        for (int j = 0; j < FilterNodeList.getLength(); j++) {
                            Node Filter_ControlNode = FilterNodeList.item(j);
                            if (Filter_ControlNode.getNodeType() == Node.ELEMENT_NODE) {
                                QueryFilterField_Bean Filter_Field = new QueryFilterField_Bean();
                                if (Filter_ControlNode.getNodeName().trim().equalsIgnoreCase("FilterColumn")) {
                                    Filter_Field.setField_Name(((Element) Filter_ControlNode).getAttribute("displayName"));
                                    Filter_Field.setField_IsDeleted(!Boolean.parseBoolean(((Element) Filter_ControlNode).getAttribute("filterEnable")));
                                    Filter_Field.setField_IsMandatory(Boolean.parseBoolean(((Element) Filter_ControlNode).getAttribute("Mandatory")));

                                    if (!Filter_Field.isField_IsDeleted()) {
                                        ControlObject controlObject = new ControlObject();

                                        Filter_Field.setField_ValueType(((Element) Filter_ControlNode).getAttribute("bindValueType"));
                                        if (Filter_Field.getField_ValueType().equalsIgnoreCase("Static")) {
                                            String value = ((Element) Filter_ControlNode).getAttribute("value");
                                            Filter_Field.setField_Static_Value(value);

                                            if (Filter_ControlNode.getChildNodes().item(0).getNodeType() == Node.ELEMENT_NODE) {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(0));
                                            } else {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(1));
                                            }

                                            controlObject.setDefaultValue(value);
                                            controlObject.setNullAllowed(Boolean.parseBoolean(((Element) Filter_ControlNode).getAttribute("Mandatory")));
                                            Filter_Field.setExist_Field_ControlObject(controlObject);

                                        } else if (Filter_Field.getField_ValueType().equalsIgnoreCase("GlobalObject")) {
                                            String globalstr = ((Element) Filter_ControlNode).getAttribute("value");
                                            String globalstr1 = ((Element) Filter_ControlNode).getAttribute("globalObjectValue");
                                            String globalObjectType = ((Element) Filter_ControlNode).getAttribute("globalObjectType");
                                            String globalObjectValue = ((Element) Filter_ControlNode).getAttribute("globalObjectValue");

                                            if (globalObjectType != null) {
                                                Filter_Field.setField_Global_Type(globalObjectType);
                                                if (globalObjectValue.contains(":")) {
                                                    Filter_Field.setField_Global_Value(globalObjectValue.substring(1, globalObjectValue.length() - 1).split(":")[1].split("\\.")[1]);
                                                } else {
                                                    Filter_Field.setField_Global_Value(globalObjectValue);
                                                }
                                            }
                                            if (Filter_ControlNode.getChildNodes().item(0).getNodeType() == Node.ELEMENT_NODE) {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(0));
                                            } else {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(1));
                                            }
                                            if (globalObjectType != null) {
                                                controlObject.setInvisible(true);

                                                if (Filter_Field.getField_Global_Value().trim().charAt(0) == 34) {

                                                    controlObject.setDefaultValue(Filter_Field.getField_Global_Value().substring(1, Filter_Field.getField_Global_Value().length() - 1));

                                                } else {
                                                    controlObject.setDefaultValue(Filter_Field.getField_Global_Value());

                                                }

                                            }

                                            if (Filter_Field.getField_Global_Type().equalsIgnoreCase("SystemVariables")) {

                                                JSONObject jsonObject = ImproveHelper.getUserDetailsJson(context);

                                                String defaultValue = "";

                                                if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.User_ID)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_ID();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.User_Name)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_Name();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.User_MobileNo)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_MobileNo();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.ORG_Name)) {
                                                    defaultValue = AppConstants.GlobalObjects.getOrg_Name();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.User_Desigination)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_Desigination();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.User_location)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_location();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.Post_Id)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_PostID();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.Post_Name)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_PostName();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.User_location_name)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_location_name();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.Post_Location)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_Post_Location();
                                                } else if (Filter_Field.getField_Global_Value().equalsIgnoreCase(AppConstants.Post_Location_Name)) {
                                                    defaultValue = AppConstants.GlobalObjects.getUser_Post_Location_Name();
                                                }

                                                controlObject.setNullAllowed(Boolean.parseBoolean(((Element) Filter_ControlNode).getAttribute("Mandatory")));


                                                controlObject.setDefaultValue(defaultValue);
                                            }

                                            controlObject.setDisable(false);
                                            controlObject.setInvisible(false);
                                            Filter_Field.setExist_Field_ControlObject(controlObject);

                                        } else if (Filter_Field.getField_ValueType().equalsIgnoreCase("ExistControl")) {
                                            if (Filter_ControlNode.getChildNodes().item(0).getNodeType() == Node.ELEMENT_NODE) {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(0));
                                            } else {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(1));
                                            }
                                            controlObject.setNullAllowed(Boolean.parseBoolean(((Element) Filter_ControlNode).getAttribute("Mandatory")));

                                            Filter_Field.setExist_Field_ControlObject(controlObject);
                                        } else if (Filter_Field.getField_ValueType().equalsIgnoreCase("Control")) {
                                            if (Filter_ControlNode.getChildNodes().item(0).getNodeType() == Node.ELEMENT_NODE) {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(0));
                                            } else {
                                                controlObject = setValuesToControleObject(Filter_ControlNode.getChildNodes().item(1));
                                            }
                                            controlObject.setNullAllowed(!Boolean.parseBoolean(((Element) Filter_ControlNode).getAttribute("Mandatory")));

                                            Filter_Field.setField_ControlObject(controlObject);
                                        }

                                        List_FilterFields.add(Filter_Field);
                                    }


                                } else if (Filter_ControlNode.getNodeName().trim().equalsIgnoreCase("Param")) {
                                    if (QueryFormObject.getQuery_Source().equalsIgnoreCase("formBased")) {
                                        if (List_FilterFields.size() > 0)
                                            List_FilterFields.get(List_FilterFields.size() - 1).setField_Operator(Filter_ControlNode.getTextContent());
                                    }
                                }
                            }
                        }

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("OrderBy") && QueryFormObject.getQuery_Source().equalsIgnoreCase("formBased")) {
                        NodeList ControleNodeList = nNode.getChildNodes();
                        List<String> IndexColums = new ArrayList<String>();
                        for (int j = 0; j < ControleNodeList.getLength(); j++) {
                            Node displayField_ControlNode = ControleNodeList.item(j);
                            if (displayField_ControlNode.getNodeType() == Node.ELEMENT_NODE) {
                                IndexColums.add(((Element) displayField_ControlNode).getAttribute("displayName"));
                            }
                        }
                        QueryFormObject.setList_OrderBy_Columns(IndexColums);

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Settings")) {
                        NodeList ControleNodeList = nNode.getChildNodes();
                        for (int settingsCnt = 0; settingsCnt < ControleNodeList.getLength(); settingsCnt++) {
                            Element settingsElement = (Element) ControleNodeList.item(settingsCnt);
                            if (settingsElement.getNodeName().equals("EditRow")) {
                                QueryFormObject.setQuery_Edit_rowItem(Boolean.parseBoolean(settingsElement.getTextContent()));
                            }

                            if (settingsElement.getNodeName().equals("DeleteRow")) {
                                QueryFormObject.setQuery_Delete_rowItem(Boolean.parseBoolean(settingsElement.getTextContent()));
                            }

                            if (settingsElement.getNodeName().equals("Heading")) {
                                NodeList headingNodeList = settingsElement.getChildNodes();
                                if (headingNodeList.item(0).getNodeName().trim().equalsIgnoreCase("IndexHeading")) {

                                    QueryFormObject.setQuery_Index_Heading(headingNodeList.item(0).getChildNodes().item(0).getTextContent());

                                }

                                if (headingNodeList.item(1).getNodeName().trim().equalsIgnoreCase("FinalFormHeading")) {

                                    QueryFormObject.setQuery_FinalForm_Heading(headingNodeList.item(1).getChildNodes().item(0).getTextContent());

                                }
                            }

                            if (settingsElement.getNodeName().equals("LazyLoading")) {
                                String lazyLoading = getCharacterDataFromElement(settingsElement);
                                QueryFormObject.setLazyLoadingEnabled(Boolean.parseBoolean(lazyLoading));
                            }
                            if (QueryFormObject.isLazyLoadingEnabled()) {
                                if (settingsElement.getNodeName().equals("LazyLoadingThreshold")) {
                                    String lazyLoadingThreshold = getCharacterDataFromElement(settingsElement);
                                    QueryFormObject.setLazyLoadingThreshold(lazyLoadingThreshold);
                                }
                            }

                        }

                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Variables")) {
                        NodeList variablesChildList = nNode.getChildNodes();
                        List<Variable_Bean> listVaribles = new ArrayList<Variable_Bean>();
                        for (int variablesChildCnt = 0; variablesChildCnt < variablesChildList.getLength(); variablesChildCnt++) {
                            Variable_Bean variable_Bean = new Variable_Bean("", "", "");
                            Element variableElement = (Element) variablesChildList.item(variablesChildCnt);
                            NodeList paramOneList = variableElement.getElementsByTagName("Param");
                            Element paramOne = (Element) paramOneList.item(0);
                            String variableName = getCharacterDataFromElement(paramOne);
                            NodeList paramTwoList = variableElement.getElementsByTagName("Param");
                            Element paramTwo = (Element) paramTwoList.item(1);
                            String variableType = getCharacterDataFromElement(paramTwo);

                            NodeList paramThreeList = variableElement.getElementsByTagName("Param");
                            Element paramThree = (Element) paramThreeList.item(2);
                            String offlineVariable = getCharacterDataFromElement(paramThree);
                            variable_Bean.setOffline_Variable(Boolean.parseBoolean(offlineVariable));
                            variable_Bean.setVariable_Name(variableName);
                            variable_Bean.setVariable_Type(variableType);
                            listVaribles.add(variable_Bean);
                        }
                        QueryFormObject.setList_Varibles(listVaribles);
                    }


                }
            }


        } catch (Exception E) {
            System.out.println("Error at parse==" + E.toString());
        }

        return QueryFormObject;
    }
//    public static void setFocusEvent(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
//        actionWithoutConditionBean.setActionType("Set Focus");
//        NodeList SelectedControlList = actionGroupElement.getElementsByTagName("SelectedControl");
//        Element SelectedControl = (Element) SelectedControlList.item(0);
//        String SelectedControlValue = getCharacterDataFromElement(SelectedControl);
//        actionWithoutConditionBean.setSetfocus_controlId(SelectedControlValue);
//
//        NodeList isSubformlist = actionGroupElement.getElementsByTagName("isSubform");
//        Element EleisSubformType = (Element) isSubformlist.item(0);
//        String isSubformTypeValue = getCharacterDataFromElement(EleisSubformType);
//        actionWithoutConditionBean.setSetfocus_subform(Boolean.parseBoolean(isSubformTypeValue));
//
//        if (Boolean.parseBoolean(isSubformTypeValue)) {
//            NodeList SubformNameList = actionGroupElement.getElementsByTagName("SubformName");
//            Element EleSubformName = (Element) SubformNameList.item(0);
//            String SubformNameValue = getCharacterDataFromElement(EleSubformName);
//            actionWithoutConditionBean.setSetfocus_SubformName(SubformNameValue);
//
//            NodeList RowPositionTypeList = actionGroupElement.getElementsByTagName("RowPositionType");
//            Element EleRowPositionType = (Element) RowPositionTypeList.item(0);
//            String RowPositionType = getCharacterDataFromElement(EleRowPositionType);
//            actionWithoutConditionBean.setSetfocus_subform_PositionType(RowPositionType);
//            if (actionWithoutConditionBean.getSetfocus_subform_PositionType().equalsIgnoreCase("Dynamic")) {
//                NodeList PositionExpressionList = actionGroupElement.getElementsByTagName("PositionExpression");
//                Element ElePositionExpression = (Element) PositionExpressionList.item(0);
//                String PositionExpression = getCharacterDataFromElement(ElePositionExpression);
//                actionWithoutConditionBean.setSetfocus_Expression(PositionExpression);
//            }
//        }
//
//
//    }
//    public static void setCallWeb(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
//        actionWithoutConditionBean.setActionType("Call Web");
//
//        NodeList URLList = actionGroupElement.getElementsByTagName("URL");
//        Element SelectedControl = (Element) URLList.item(0);
//        String urlValue = getCharacterDataFromElement(SelectedControl);
//        actionWithoutConditionBean.setCallWeb_Link(urlValue);
//
//        NodeList TypeOfParameterList = actionGroupElement.getElementsByTagName("TypeOfParameter");
//        Element TypeOfParameterControl = (Element) TypeOfParameterList.item(0);
//        String TypeOfParameter = getCharacterDataFromElement(TypeOfParameterControl);
//        actionWithoutConditionBean.setCallWeb_LinkType(TypeOfParameter);
//
//        if (actionGroupElement.getElementsByTagName("CloseParent").getLength() != 0) {
//            Element closeParent = (Element) actionGroupElement.getElementsByTagName("CloseParent").item(0);
//            actionWithoutConditionBean.setCloseParentEnabled(!closeParent.getTextContent().contentEquals("false"));
//        }
//        if (actionGroupElement.getElementsByTagName("CloseAll").getLength() != 0) {
//            Element closeAll = (Element) actionGroupElement.getElementsByTagName("CloseAll").item(0);
//            actionWithoutConditionBean.setCloseAllFormsEnabled(Boolean.parseBoolean(closeAll.getTextContent()));
//        }
//        if (actionGroupElement.getElementsByTagName("KeepSession").getLength() != 0) {
//            Element keepSession = (Element) actionGroupElement.getElementsByTagName("KeepSession").item(0);
//            actionWithoutConditionBean.setKeepSessionEnabled(Boolean.parseBoolean(keepSession.getTextContent()));
//        }
//        if (actionGroupElement.getElementsByTagName("GoToHome").getLength() != 0) {
//            Element goToHome = (Element) actionGroupElement.getElementsByTagName("GoToHome").item(0);
//            actionWithoutConditionBean.setGoToHomeEnabled(Boolean.parseBoolean(goToHome.getTextContent()));
//        }
//
//        List<CallForm_ParamMapping_Bean> List_CallformParams =new ArrayList<>();
//
//        if(TypeOfParameter.equalsIgnoreCase("Query String")){
//
//            Element Delimiter =(Element) actionGroupElement.getElementsByTagName("QueryStrings").item(0);
//
//            NodeList ParameterList = Delimiter.getElementsByTagName("Parameter");
//            for (int i = 0; i <ParameterList.getLength() ; i++) {
//
//                CallForm_ParamMapping_Bean Delimiter_param=new CallForm_ParamMapping_Bean();
//                Delimiter_param.setParam_Name(getCharacterDataFromElement( ((Element) ParameterList.item(i))));
//
//                String Value =((Element) ParameterList.item(i)).getAttribute("Key");
//                Delimiter_param.setParam_GlobalObj_MappedID(Value);
//
//                List_CallformParams.add(Delimiter_param);
//            }
//            actionWithoutConditionBean.setCallWeb_Params(List_CallformParams);
//        }else if(TypeOfParameter.equalsIgnoreCase("Delimiter")){
//            Element Delimiter =(Element) actionGroupElement.getElementsByTagName("Delimiter").item(0);
//
//            NodeList ParameterList = Delimiter.getElementsByTagName("Parameter");
//            for (int i = 0; i <ParameterList.getLength() ; i++) {
//                CallForm_ParamMapping_Bean Delimiter_param=new CallForm_ParamMapping_Bean();
//                Delimiter_param.setParam_GlobalObj_MappedID(getCharacterDataFromElement( ((Element) ParameterList.item(i))));
//                List_CallformParams.add(Delimiter_param);
//            }
//            actionWithoutConditionBean.setCallWeb_Params(List_CallformParams);
//        }
//
//
//
//    }

    /*SetValues TO ControlObject*/
    public ControlObject setValuesToControleObject(Node ControlNode) {
        ControlObject controlObject = new ControlObject();

        controlObject.setControlCategory(ControlNode.getNodeName());
        controlObject.setControlTitle(ControlNode.getNodeName());
        controlObject.setControlID(((Element) ControlNode).getAttribute("controlName").trim());
        controlObject.setControlType(ControlNode.getNodeName());
        controlObject.setDisplayName(((Element) ControlNode).getAttribute("displayName").trim());
        controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
        controlObject.setControlName(((Element) ControlNode).getAttribute("controlName").trim());

        /*previous data commented*/
//        switch (ControlNode.getNodeName().trim()) {
//            case AppConstants.CONTROL_TYPE_TEXT_INPUT:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
////                                        AppConstants.ValidatorsForControls(ControlNode,controlObject);
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (validatorsList != null && validatorsList.getLength() > 0) {
//                        for (int k = 0; k < validatorsList.getLength(); k++) {
//                            Node Opton = validatorsList.item(k);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                    controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setUniqueField(true);
//                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
////
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//
//                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    if (OptonsList != null && OptonsList.getLength() > 0) {
//                        for (int k = 0; k < OptonsList.getLength(); k++) {
//                            Node Opton = OptonsList.item(k);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
//                                    controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setReadFromBarcode(true);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
//                                    controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setReadFromQRCode(false);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
//                                    controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setGoogleLocationSearch(false);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentLocation")) {
//                                    controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setCurrentLocation(false);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("VoiceInput")) {
//                                    controlObject.setVoiceText(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setVoiceText(false);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setInvisible(false);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setDisable(false);
//                                } /*else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
////                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    }*/
//                            }
//                        }
//                    }
//                }
//
//                mDisplaySettings(ControlNode, controlObject);
//
//                break;
//            case AppConstants.CONTROL_TYPE_NUMERIC_INPUT:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList numericValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (numericValidatorsList != null && numericValidatorsList.getLength() > 0) {
//                        for (int k = 0; k < numericValidatorsList.getLength(); k++) {
//                            Node Opton = numericValidatorsList.item(k);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setUniqueField(true);
//                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
//                                    Log.d("XMLMaxValue", Opton.getChildNodes().item(2).getTextContent().trim());
//                                    Log.d("XMLMaxValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLMaxValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableUpperLimit(true);
//                                    controlObject.setUpperLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setUpperLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
//                                    Log.d("XMLMinValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLMinValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
////                                                        NodeList sdfds = ((Element) ControlNode).getElementsByTagName("Param").item(0).getChildNodes();
////
////                                                        for (int l = 0; l <sdfds.getLength() ; l++) {
////                                                            Node Opton1 = numericValidatorsList.item(l);
////                                                            Element eElement1 = (Element) Opton1;
////                                                            if( eElement1.getAttribute("name").equalsIgnoreCase("value")){
////                                                                Log.d("XMLMinValues", eElement1.getTextContent());
////                                                            }
////                                                        }
//                                    controlObject.setEnableLowerLimit(true);
//                                    controlObject.setLowerLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setLowerLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
//                                    Log.d("XMLCapValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLCapValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableCappingDigits(true);
//                                    controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList numberOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < numberOptonsList.getLength(); k++) {
//                        Node Opton = numberOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
//                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setReadFromBarcode(true);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
//                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setReadFromQRCode(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setDisable(false);
//                            }
//                        }
//                    }
//                }
//
//
//                mDisplaySettings(ControlNode, controlObject);
//
//                break;
//            case AppConstants.CONTROL_TYPE_PHONE:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList phoneValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (phoneValidatorsList != null && phoneValidatorsList.getLength() > 0) {
//                        for (int p = 0; p < phoneValidatorsList.getLength(); p++) {
//                            Node Opton = phoneValidatorsList.item(p);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setUniqueField(true);
//                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
//                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableCappingDigits(true);
//                                    controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList phoneOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < phoneOptonsList.getLength(); k++) {
//                        Node Opton = phoneOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
//                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
//                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//            case AppConstants.CONTROL_TYPE_EMAIL:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//
//                    NodeList emailValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (emailValidatorsList != null && emailValidatorsList.getLength() > 0) {
//                        for (int e = 0; e < emailValidatorsList.getLength(); e++) {
//                            Node Opton = emailValidatorsList.item(e);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setUniqueField(true);
//                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList EmailOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < EmailOptonsList.getLength(); k++) {
//                        Node Opton = EmailOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
//                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
//                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//
//                break;
//            case AppConstants.CONTROL_TYPE_LARGE_INPUT:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//
//                    NodeList largeInputValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (largeInputValidatorsList != null && largeInputValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < largeInputValidatorsList.getLength(); li++) {
//                            Node Opton = largeInputValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setUniqueField(true);
//                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
//                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableMaxCharacters(true);
//                                    controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
//                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableMinCharacters(true);
//                                    controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList largeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < largeOptonsList.getLength(); k++) {
//                        Node Opton = largeOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//            case AppConstants.CONTROL_TYPE_CAMERA:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList cameraValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (cameraValidatorsList != null && cameraValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < cameraValidatorsList.getLength(); li++) {
//                            Node Opton = cameraValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxSize")) {
//                                    Log.d("XMLCamMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLCamMax", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableMaxUploadSize(true);
//                                    controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minSize")) {
//                                    Log.d("XMLCamMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLCamMin", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableMinUploadSize(true);
//                                    controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList cameraOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < cameraOptionsList.getLength(); k++) {
//                        Node Opton = cameraOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("AspectRatio")) {
//                                controlObject.setEnableAspectRatio(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageGPS")) {
//                                controlObject.setEnableImageWithGps(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                controlObject.setEnableImageWithGps(true);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableZoomControl")) {
//                                controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setZoomControl(true);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableFlash")) {
//                                controlObject.setFlash(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setFlash(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("FilePhoto")) {
////                                                        controlObject.setEnableFilePhoto(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setEnableFilePhoto(true);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setDisable(false);
//                            }
//                        }
//                    }
//                }
//                break;
//            case AppConstants.CONTROL_TYPE_FILE_BROWSING:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//
//                    NodeList fileBrowserValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (fileBrowserValidatorsList != null && fileBrowserValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < fileBrowserValidatorsList.getLength(); li++) {
//                            Node Opton = fileBrowserValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLFbMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("FbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                                if (eElement.getAttribute("type").equalsIgnoreCase("extensionCheck")) {
//                                    Log.d("XMLFBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableExtensions(true);
//                                    controlObject.setFileExtensionError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("FbExtensionCheck", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList FileuploadOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < FileuploadOptonsList.getLength(); k++) {
//                        Node Opton = FileuploadOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                break;
//            case AppConstants.CONTROL_TYPE_CALENDER:
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
//                            Node Opton = calendarValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenDates")) {
//                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
//                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableBetweenStartAndEndDate(true);
//                                    controlObject.setStartDate(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setEndDate(eElement.getElementsByTagName("Param").item(2).getTextContent());
//                                    controlObject.setBetweenStartAndEndDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("preDate")) {
//
//                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                    controlObject.setEnableBeforeCurrentDate(true);
//                                    controlObject.setBeforeCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("postDate")) {
//
//                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableAfterCurrentDate(true);
//                                    controlObject.setAfterCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < DateOptonsList.getLength(); k++) {
//                        Node Opton = DateOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("GetYear")) {
//                                controlObject.setGetYearFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setGetYearFromSelection(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetMonth")) {
//                                controlObject.setGetMonthFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setGetMonthFromSelection(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDay")) {
//                                controlObject.setGetDayFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setGetDayFromSelection(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDate")) {
//                                controlObject.setGetDateFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setGetDateFromSelection(true);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setReadOnly(false);
//                            }
//                        }
//                    }
//                }
//
//                break;
//            case AppConstants.CONTROL_TYPE_CHECKBOX:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList checkBoxValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (checkBoxValidatorsList != null && checkBoxValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < checkBoxValidatorsList.getLength(); li++) {
//                            Node Opton = checkBoxValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLCBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("CbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList CheckboxOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < CheckboxOptonsList.getLength(); k++) {
//                        Node Opton = CheckboxOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
//                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
//                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setInvisible(false);
//                            }
//                        }
//                    }
//                }
//                List<String> cbItems = new ArrayList<>();
//                NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
//                for (int l = 0; l < CheckboxItemsList.getLength(); l++) {
//                    Node Opton1 = CheckboxItemsList.item(l);
//
//                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
//                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {
//
////                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
//                            cbItems.add(Opton1.getTextContent().trim());
//                        }
//                    }
//                }
//
//                controlObject.setItems(cbItems);
//
//
//                break;
//            case AppConstants.CONTROL_TYPE_RADIO_BUTTON:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList radioButtonValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (radioButtonValidatorsList != null && radioButtonValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < radioButtonValidatorsList.getLength(); li++) {
//                            Node Opton = radioButtonValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLRBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("RBUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList RadioOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < RadioOptonsList.getLength(); k++) {
//                        Node Opton = RadioOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
//                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
//                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setInvisible(true);
//                            }
//                        }
//                    }
//                }
//                List<String> rbItems = new ArrayList<>();
//                NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
//                for (int l = 0; l < RBItemsList.getLength(); l++) {
//                    Node Opton1 = RBItemsList.item(l);
//
//                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
//                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {
//
////                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
//                            rbItems.add(Opton1.getTextContent().trim());
//                        }
//                    }
//                }
//
//                controlObject.setItems(rbItems);
//
//
//                break;
//            case AppConstants.CONTROL_TYPE_DROP_DOWN:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList dropDownValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (dropDownValidatorsList != null && dropDownValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < dropDownValidatorsList.getLength(); li++) {
//                            Node Opton = dropDownValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLDDMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("DDUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//
//                } else {
//                    NodeList DropdownOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < DropdownOptonsList.getLength(); k++) {
//                        Node Opton = DropdownOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
//                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
//                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setInvisible(false);
//                            }
//                        }
//                    }
//                }
//
//                List<String> ddItems = new ArrayList<>();
//                NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
//                for (int l = 0; l < DDItemsList.getLength(); l++) {
//                    Node Opton1 = DDItemsList.item(l);
//
//                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
//                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {
//
////                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
//                            ddItems.add(Opton1.getTextContent().trim());
//                        }
//                    }
//                }
//
//                controlObject.setItems(ddItems);
//
//                break;
//            case AppConstants.CONTROL_TYPE_CHECK_LIST:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList checkListValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (checkListValidatorsList != null && checkListValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < checkListValidatorsList.getLength(); li++) {
//                            Node Opton = checkListValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLCLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("CbLUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList MultiSelectOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < MultiSelectOptonsList.getLength(); k++) {
//                        Node Opton = MultiSelectOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
//                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setInvisible(false);
//                            }
//                        }
//                    }
//                }
//
//                List<String> CLItems = new ArrayList<>();
//                NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
//                for (int l = 0; l < CLItemsList.getLength(); l++) {
//                    Node Opton1 = CLItemsList.item(l);
//
//                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
//                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {
//
////                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
//                            CLItems.add(Opton1.getTextContent().trim());
//                        }
//                    }
//                }
//
//                controlObject.setItems(CLItems);
//
//                break;
//
//            case AppConstants.CONTROL_TYPE_RATING:
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList ratingValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (ratingValidatorsList != null && ratingValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < ratingValidatorsList.getLength(); li++) {
//                            Node Opton = ratingValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLRatingMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("RUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList RatingOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < RatingOptionsList.getLength(); k++) {
//                        Node Opton = RatingOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("DisableCount")) {
//                                controlObject.setDisableRatingCount(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setDisableRatingCount(false);
//                                Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                                Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setReadOnly(false);
//                                Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("RatingType")) {
//
////                                                    controlObject.setSelectRatingItemType(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                controlObject.setRatingType(Opton.getTextContent().trim());
//
//                                Log.d("MainRatingCountTType", Opton.getTextContent().trim());
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//            case AppConstants.CONTROL_TYPE_VOICE_RECORDING:
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList voiceRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (voiceRecValidatorsList != null && voiceRecValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < voiceRecValidatorsList.getLength(); li++) {
//                            Node Opton = voiceRecValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
//                                    Log.d("XMLVoiceRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLVoiceRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableVoiceMaximumDuration(true);
//                                    controlObject.setVoiceMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
//                                    Log.d("XMLVoiceRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLVoiceRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableVoiceMinimumDuration(true);
//                                    controlObject.setVoiceMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList voiceOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < voiceOptionsList.getLength(); k++) {
//                        Node Opton = voiceOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("AudioFormat")) {
//                                Log.d("XML_VoiceRec ", Opton.getTextContent().trim());
//                                String[] strAudioFormats = Opton.getTextContent().trim().split("\\$");
//                                List<String> temp = new ArrayList<>();
//                                for (int count = 0; count < strAudioFormats.length; count++) {
//                                    temp.add(strAudioFormats[count]);
//                                }
//                                controlObject.setAudioFormatIds(temp);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadAudioFile")) {
//                                controlObject.setEnableUploadAudioFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setEnableUploadAudioFile(true);
//                            }
//                        }
//                    }
//                }
//
//                break;
//            case AppConstants.CONTROL_TYPE_VIDEO_RECORDING:
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList videoRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (videoRecValidatorsList != null && videoRecValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < videoRecValidatorsList.getLength(); li++) {
//                            Node Opton = videoRecValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
//                                    Log.d("XMLVideoRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLVideoRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableVideoMaximumDuration(true);
//                                    controlObject.setVideoMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
//                                    Log.d("XMLVideoRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLVideoRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableVideoMinimumDuration(true);
//                                    controlObject.setVideoMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    if (((Element) ControlNode).getElementsByTagName("Options").getLength() > 0) {
//                        NodeList videoOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                        for (int k = 0; k < videoOptionsList.getLength(); k++) {
//                            Node Opton = videoOptionsList.item(k);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                        controlObject.setInvisible(false);
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("VideoFormat")) {
//                                    String[] strVideoFormats = Opton.getTextContent().trim().split("\\$");
//                                    List<String> temp = new ArrayList<>();
//                                    for (int count = 0; count < strVideoFormats.length; count++) {
//                                        temp.add(strVideoFormats[count]);
//                                    }
//                                    controlObject.setAudioFormatIds(temp);
////                                                    controlObject.setAudioFormatIds(Opton.getTextContent().trim()));
//                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadVideoFile")) {
//                                    controlObject.setEnableUploadVideoFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                }
//                            }
//                        }
//                    }
//                }
//
//                break;
//            case AppConstants.CONTROL_TYPE_AUDIO_PLAYER:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList audioPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < audioPlayerOptionsList.getLength(); k++) {
//                        Node Opton = audioPlayerOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
//                                controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Background")) {
//                                controlObject.setEnablePlayBackground(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//
//
//                break;
//            case AppConstants.CONTROL_TYPE_VIDEO_PLAYER:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList videoPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < videoPlayerOptionsList.getLength(); k++) {
//                        Node Opton = videoPlayerOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
//                                controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//
//                break;
//
//            case AppConstants.CONTROL_TYPE_PERCENTAGE:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList percentageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (percentageValidatorsList != null && percentageValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < percentageValidatorsList.getLength(); li++) {
//                            Node Opton = percentageValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLPercentageMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList percentageOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < percentageOptionsList.getLength(); k++) {
//                        Node Opton = percentageOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            }
//                        }
//                    }
//                }
//
//                mDisplaySettings(ControlNode, controlObject);
//
//                break;
//            case AppConstants.CONTROL_TYPE_SIGNATURE:
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList signatureValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (signatureValidatorsList != null && signatureValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < signatureValidatorsList.getLength(); li++) {
//                            Node Opton = signatureValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList signatureOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < signatureOptionsList.getLength(); k++) {
//                        Node Opton = signatureOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Upload")) {
//                                controlObject.setEnableUploadSignature(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//
//                mDisplaySettings(ControlNode, controlObject);
//
//                break;
//            case AppConstants.CONTROL_TYPE_URL_LINK:
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList urlValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (urlValidatorsList != null && urlValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < urlValidatorsList.getLength(); li++) {
//                            Node Opton = urlValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLURLViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("URlUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList urllinkOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < urllinkOptonsList.getLength(); k++) {
//                        Node Opton = urllinkOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            }
//                        }
//                    }
//                }
//                break;
//            case AppConstants.CONTROL_TYPE_DECIMAL:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList decimalValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (decimalValidatorsList != null && decimalValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < decimalValidatorsList.getLength(); li++) {
//                            Node Opton = decimalValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLdecimalViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("DUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList decimalOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < decimalOptonsList.getLength(); k++) {
//                        Node Opton = decimalOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Precision")) {
//                                controlObject.setCharactersAfterDecimal((Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//
//            case AppConstants.CONTROL_TYPE_PASSWORD:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList passwordValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (passwordValidatorsList != null && passwordValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < passwordValidatorsList.getLength(); li++) {
//                            Node Opton = passwordValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("PasswordViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList PasswordOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < PasswordOptonsList.getLength(); k++) {
//                        Node Opton = PasswordOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowOption")) {
//                                controlObject.setEnableShowOrHideOption(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Encrypt")) {
//                                controlObject.setEnableEncryption(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//
//
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//
//            case AppConstants.CONTROL_TYPE_CURRENCY:
//                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList currencyValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (currencyValidatorsList != null && currencyValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < currencyValidatorsList.getLength(); li++) {
//                            Node Opton = currencyValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("CurrencyViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("currencyErrorMandatory", con8647:76trolObject.getMandatoryFieldError());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
//                                    Log.d("XMLCurrencyMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLCurrencyMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableMaximumValue(true);
//                                    controlObject.setMaxAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMaxAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
//                                    Log.d("XMLCurrencyMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    Log.d("XMLCurrencyMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    controlObject.setEnableMinimumValue(true);
//                                    controlObject.setMinAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
//                                    controlObject.setMinAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    List<String> currencyType = new ArrayList<>();
//                    NodeList CurrencyOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < CurrencyOptonsList.getLength(); k++) {
//                        Node Opton = CurrencyOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrencyType")) {
//                                currencyType.add(Opton.getTextContent().trim());
//                                controlObject.setCurrencyListNames(currencyType);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//            case AppConstants.CONTROL_TYPE_DYNAMIC_LABEL:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList dynamicOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < dynamicOptionsList.getLength(); k++) {
//                        Node Opton = dynamicOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Section")) {
//                                controlObject.setMakeAsSection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
//                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("BarCode")) {
//                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("QRCode")) {
//                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("UniCode")) {
//                                controlObject.setUnicodeFormat(Opton.getTextContent().trim());
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//            case AppConstants.CONTROL_TYPE_IMAGE:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < imageValidatorsList.getLength(); li++) {
//                            Node Opton = imageValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList imageOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < imageOptonsList.getLength(); k++) {
//                        Node Opton = imageOptonsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
////                                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
//                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageDataType")) {
//                                controlObject.setImageDataType(Opton.getTextContent().trim());
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageData")) {
//                                controlObject.setImageData(Opton.getTextContent().trim());
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImage")) {
//                                controlObject.setEnableMultipleImages(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImageFormat")) {
//                                controlObject.setImagesArrangementType(Opton.getTextContent().trim());
//                            }
//                        }
//                    }
//                }
//                mDisplaySettings(ControlNode, controlObject);
//                break;
//            case AppConstants.CONTROL_TYPE_BUTTON:
//                controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < buttonOptionsList.getLength(); k++) {
//                        Node Opton = buttonOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
//                NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
//                for (int k = 0; k < buttonDSList.getLength(); k++) {
//                    Node Opton = buttonDSList.item(k);
//                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
//                            Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
//                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
//                            Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
//                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
//                            Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
//                        }
//                    }
//                }
////                                        mDisplaySettings(ControlNode, controlObject);
//                break;
//            // Advanced Controls
//            case AppConstants.CONTROL_TYPE_SUBFORM:
//
//                controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
//                controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
//                            Node Opton = subFormValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
////                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                            controlObject.setMaximumRows(true);
//                                    controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                                if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
////                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                            controlObject.setMaximumRows(true);
//                                    controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//
//                            }
//                        }
//                    }
//                }
//
//
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < subFormOptionsList.getLength(); k++) {
//                        Node Opton = subFormOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
//                                controlObject.setDisplayOrientation(Opton.getTextContent().trim());
//                                Log.d("SubformOrientation", Opton.getTextContent().trim());
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayButton")) {
//                                controlObject.setDisplayNameOfAddButton(Opton.getTextContent().trim());
//                                Log.d("SubformDisplayName", Opton.getTextContent().trim());
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            }
//                        }
//                    }
//                }
////
//                                       /* if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
//                                        } else {
//                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
//                                                List<ControlObject> controlObjectList = new ArrayList<>();
//
//                                            }
//                                        }*/
//
//                Node node = ControlNode.getChildNodes().item(3);
//
//                //controlObject.setSubFormControlList(getSubFormControlList(node));
//
//
//                break;
//            // Data Controls
//            case AppConstants.CONTROL_TYPE_DATA_CONTROL:
//
//                controlObject.setEnableUserControlBinding(Boolean.parseBoolean(((Element) ControlNode).getAttribute("enableUserControlBinding").trim()));
////                controlObject.setMinimumRows(((Element) ControlNode).getAttribute("type").trim());
//                controlObject.setDataControlStatus(((Element) ControlNode).getAttribute("type").trim());
//                controlObject.setDependentControl(((Element) ControlNode).getAttribute("dependentName").trim());
//                controlObject.setDataControlName(((Element) ControlNode).getAttribute("dataControllName").trim());
//
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChange").trim()));
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList datacontrolValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (datacontrolValidatorsList != null && datacontrolValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < datacontrolValidatorsList.getLength(); li++) {
//                            Node Opton = datacontrolValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//
//                mDisplaySettings(ControlNode, controlObject);
//
//                break;
//
//            case AppConstants.CONTROL_TYPE_GPS:

//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                controlObject.setGpsType(((Element) ControlNode).getAttribute("gpsType").trim());
//                controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
//                if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
//                    controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
//                }
//                if (controlObject.getGpsType().equalsIgnoreCase(AppConstants.Multi_points_line) ||
//                        controlObject.getGpsType().equalsIgnoreCase(AppConstants.Polygon) ||
//                        controlObject.getGpsType().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
//                    controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());
//
//                    if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
//                        controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
//                    } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
//                        controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
//                    }
//                }
//
//
//                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
//                    controlObject.setNullAllowed(false);
//                } else {
//                    NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
//                    if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
//                        for (int li = 0; li < imageValidatorsList.getLength(); li++) {
//                            Node Opton = imageValidatorsList.item(li);
//                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                                Element eElement = (Element) Opton;
//                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
//                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                    Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
////                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                    controlObject.setNullAllowed(true);
//                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                    Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
//                                }
//                            }
//                        }
//                    }
//                }
//                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
//                } else {
//                    NodeList gpsOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
//                    for (int k = 0; k < gpsOptionsList.getLength(); k++) {
//                        Node Opton = gpsOptionsList.item(k);
//                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
//                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
//                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
////                                                    controlObject.setInvisible(false);
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowMap")) {
//                                controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
//                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("SaveInDifferentColumns")) {
//                                controlObject.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationFormat")) {
//                                controlObject.setLocationFormat(Opton.getTextContent().trim());
//                            }
//                        }
//                    }
//                }
////                                        mDisplaySettings(ControlNode, controlObject);
//                break;
//
//
//            default:
//
//        }
        /* Switch case copied from data collection*/
        switch (ControlNode.getNodeName().trim()) {
            case AppConstants.CONTROL_TYPE_AUTO_COMPLETION:

                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onKeyEvent").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSelectEvent").trim()));
                controlObject.setControlCategory("advanced");
                Node MinCharacterNode = ((Element) ControlNode).getElementsByTagName("MinCharacter").item(0);
                //controlObject.setMinChartoSeearch(Integer.parseInt(MinCharacterNode.getTextContent()));

                Node SearchKeyAtNode = ((Element) ControlNode).getElementsByTagName("SearchKeyAt").item(0);
                controlObject.setSearchKeyAt(SearchKeyAtNode.getTextContent());

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (validatorsList != null && validatorsList.getLength() > 0) {
                        for (int k = 0; k < validatorsList.getLength(); k++) {
                            Node Opton = validatorsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
//
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {

                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    if (OptonsList != null && OptonsList.getLength() > 0) {
                        for (int k = 0; k < OptonsList.getLength(); k++) {
                            Node Opton = OptonsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                    controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_POST:

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                controlObject.setControlCategory("advanced");

                Node postTypeNode = ((Element) ControlNode).getElementsByTagName("PostType").item(0);
                controlObject.setUserType(postTypeNode.getTextContent());

                if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                    Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                    NodeList groupNodes = Groups.getChildNodes();
                    List<UserGroup> groupList = new ArrayList<>();

                    for (int k = 0; k < groupNodes.getLength(); k++) {

                        Node group = groupNodes.item(k);

                        UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                        groupList.add(userGroup);


                    }

                    controlObject.setGroups(groupList);
                }


                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (validatorsList != null && validatorsList.getLength() > 0) {
                        for (int k = 0; k < validatorsList.getLength(); k++) {
                            Node Opton = validatorsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                                controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                            }
                        }
                    }
                }
//
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {

                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    if (OptonsList != null && OptonsList.getLength() > 0) {
                        for (int k = 0; k < OptonsList.getLength(); k++) {
                            Node Opton = OptonsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_USER:

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                controlObject.setControlCategory("advanced");

                Node userTypeNode = ((Element) ControlNode).getElementsByTagName("UserType").item(0);
                controlObject.setUserType(userTypeNode.getTextContent());

                if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                    Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                    NodeList groupNodes = Groups.getChildNodes();
                    List<UserGroup> groupList = new ArrayList<>();

                    for (int k = 0; k < groupNodes.getLength(); k++) {

                        Node group = groupNodes.item(k);

                        UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                        groupList.add(userGroup);

                    }

                    controlObject.setGroups(groupList);
                }

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (validatorsList != null && validatorsList.getLength() > 0) {
                        for (int k = 0; k < validatorsList.getLength(); k++) {
                            Node Opton = validatorsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                            }
                        }
                    }
                }
//
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {

                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    if (OptonsList != null && OptonsList.getLength() > 0) {
                        for (int k = 0; k < OptonsList.getLength(); k++) {
                            Node Opton = OptonsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_VIEWFILE:

                controlObject.setControlCategory("standard");
                controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                controlObject.setFilelink(((Element) ControlNode).getAttribute("Filelink").trim());


                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {

                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    if (OptonsList != null && OptonsList.getLength() > 0) {
                        for (int k = 0; k < OptonsList.getLength(); k++) {
                            Node Opton = OptonsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_filelink")) {
                                    controlObject.setHide_filelink(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_TEXT_INPUT:
                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                                        AppConstants.ValidatorsForControls(ControlNode,controlObject);
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (validatorsList != null && validatorsList.getLength() > 0) {
                        for (int k = 0; k < validatorsList.getLength(); k++) {
                            Node Opton = validatorsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
//
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {

                    NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    if (OptonsList != null && OptonsList.getLength() > 0) {
                        for (int k = 0; k < OptonsList.getLength(); k++) {
                            Node Opton = OptonsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                    controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromBarcode(true);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                    controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromQRCode(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                    controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setGoogleLocationSearch(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentLocation")) {
                                    controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setCurrentLocation(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("VoiceInput")) {
                                    controlObject.setVoiceText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setVoiceText(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }else if (Opton.getNodeName().trim().equalsIgnoreCase("AllowOnlyAlphabets")) {
                                    controlObject.setAllowOnlyAlphabets(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }
                            }
                        }
                    }
                }

                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);

                break;
            case AppConstants.CONTROL_TYPE_NUMERIC_INPUT:
//


                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList numericValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (numericValidatorsList != null && numericValidatorsList.getLength() > 0) {
                        for (int k = 0; k < numericValidatorsList.getLength(); k++) {
                            Node Opton = numericValidatorsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                    Log.d("XMLMaxValue", Opton.getChildNodes().item(2).getTextContent().trim());
                                    Log.d("XMLMaxValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLMaxValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableUpperLimit(true);
                                    controlObject.setUpperLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setUpperLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                    Log.d("XMLMinValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLMinValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

//                                                        NodeList sdfds = ((Element) ControlNode).getElementsByTagName("Param").item(0).getChildNodes();
//
//                                                        for (int l = 0; l <sdfds.getLength() ; l++) {
//                                                            Node Opton1 = numericValidatorsList.item(l);
//                                                            Element eElement1 = (Element) Opton1;
//                                                            if( eElement1.getAttribute("name").equalsIgnoreCase("value")){
//                                                                Log.d("XMLMinValues", eElement1.getTextContent());
//                                                            }
//                                                        }
                                    controlObject.setEnableLowerLimit(true);
                                    controlObject.setLowerLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setLowerLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                    Log.d("XMLCapValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLCapValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableCappingDigits(true);
                                    controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList numberOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < numberOptonsList.getLength(); k++) {
                        Node Opton = numberOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromBarcode(true);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromQRCode(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }


                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_PHONE:


                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList phoneValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (phoneValidatorsList != null && phoneValidatorsList.getLength() > 0) {
                        for (int p = 0; p < phoneValidatorsList.getLength(); p++) {
                            Node Opton = phoneValidatorsList.item(p);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableCappingDigits(true);
                                    controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList phoneOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < phoneOptonsList.getLength(); k++) {
                        Node Opton = phoneOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_EMAIL:
                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {

                    NodeList emailValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (emailValidatorsList != null && emailValidatorsList.getLength() > 0) {
                        for (int e = 0; e < emailValidatorsList.getLength(); e++) {
                            Node Opton = emailValidatorsList.item(e);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList EmailOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < EmailOptonsList.getLength(); k++) {
                        Node Opton = EmailOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")
                                    || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_LARGE_INPUT:

                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {

                    NodeList largeInputValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (largeInputValidatorsList != null && largeInputValidatorsList.getLength() > 0) {
                        for (int li = 0; li < largeInputValidatorsList.getLength(); li++) {
                            Node Opton = largeInputValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                    Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableMaxCharacters(true);
                                    controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableMinCharacters(true);
                                    controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList largeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < largeOptonsList.getLength(); k++) {
                        Node Opton = largeOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLEditor")) {
                                controlObject.setHtmlEditorEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_CAMERA:


                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList cameraValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (cameraValidatorsList != null && cameraValidatorsList.getLength() > 0) {
                        for (int li = 0; li < cameraValidatorsList.getLength(); li++) {
                            Node Opton = cameraValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxSize")) {
                                    Log.d("XMLCamMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLCamMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableMaxUploadSize(true);
                                    controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minSize")) {
                                    Log.d("XMLCamMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLCamMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableMinUploadSize(true);
                                    controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList cameraOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < cameraOptionsList.getLength(); k++) {
                        Node Opton = cameraOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("AspectRatio")) {
                                controlObject.setEnableAspectRatio(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageGPS")) {
                                controlObject.setEnableImageWithGps(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableZoomControl")) {
                                controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setZoomControl(true);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableFlash")) {
                                controlObject.setFlash(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setFlash(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("FilePhoto")) {
//                                                        controlObject.setEnableFilePhoto(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableFilePhoto(true);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("fileUpload")) {
                                controlObject.setCaptureFromFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Capture")) {
                                controlObject.setCaptureFromCamera(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("CaptureOrientation")) {
                                controlObject.setCaptureOrientation(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_FILE_BROWSING:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {

                    NodeList fileBrowserValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (fileBrowserValidatorsList != null && fileBrowserValidatorsList.getLength() > 0) {
                        for (int li = 0; li < fileBrowserValidatorsList.getLength(); li++) {
                            Node Opton = fileBrowserValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLFbMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("FbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                                if (eElement.getAttribute("type").equalsIgnoreCase("extensionCheck")) {
                                    Log.d("XMLFBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableExtensions(true);
                                    String extensions = eElement.getElementsByTagName("Param").item(1).getTextContent();
                                    List<String> names = new ArrayList<>();
                                    names.addAll(Arrays.asList(extensions.split("\\$")));
                                    controlObject.setExtensionsListNames(names);
                                    controlObject.setFileExtensionError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("FbExtensionCheck", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                                if (eElement.getAttribute("type").equalsIgnoreCase("maxUpload")) {
                                    Log.d("XMLFileMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLFileMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableMaxUploadSize(true);
                                    controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                                if (eElement.getAttribute("type").equalsIgnoreCase("minUpload")) {
                                    Log.d("XMLFileMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLFileMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableMinUploadSize(true);
                                    controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList FileuploadOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < FileuploadOptonsList.getLength(); k++) {
                        Node Opton = FileuploadOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ScanEnabled")) {
                                controlObject.setEnableScan(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_CALENDER:

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                    controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                }
                if (((Element) ControlNode).hasAttribute("defaultValue")) {
                    controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                }
                if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                    controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                }
                if (((Element) ControlNode).hasAttribute("defaultValue")) {
                    controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                }
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                        for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                            Node Opton = calendarValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenDates")) {
                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableBetweenStartAndEndDate(true);
                                    controlObject.setStartDate(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setEndDate(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                    controlObject.setBetweenStartAndEndDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("preDate")) {

                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                    controlObject.setEnableBeforeCurrentDate(true);
                                    controlObject.setBeforeCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("postDate")) {

                                    Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableAfterCurrentDate(true);
                                    controlObject.setAfterCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < DateOptonsList.getLength(); k++) {
                        Node Opton = DateOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("GetYear")) {
                                controlObject.setGetYearFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetMonth")) {
                                controlObject.setGetMonthFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetMonthFromSelection(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDay")) {
                                controlObject.setGetDayFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDayFromSelection(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDate")) {
                                controlObject.setGetDateFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_CHECKBOX:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                //ValueType
                String valueType=((Element) ControlNode).getAttribute("ValueType").trim();
                controlObject.setCheckbox_ValueType(valueType);

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList checkBoxValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (checkBoxValidatorsList != null && checkBoxValidatorsList.getLength() > 0) {
                        for (int li = 0; li < checkBoxValidatorsList.getLength(); li++) {
                            Node Opton = checkBoxValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLCBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("CbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList CheckboxOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < CheckboxOptonsList.getLength(); k++) {
                        Node Opton = CheckboxOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                if(valueType.equals("Value")){
                    NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                    setItems(CheckboxItemsList, controlObject);
                }else if(valueType.equals("Boolean")){
                    String checkedValue=((Element) ControlNode).getAttribute("CheckedValue").trim();
                    String unCheckedValue=((Element) ControlNode).getAttribute("unCheckedValue").trim();
                    controlObject.setCheckbox_CheckedValue(checkedValue);
                    controlObject.setCheckbox_unCheckedValue(unCheckedValue);
                }
                /*List<String> cbItems = new ArrayList<>();
                NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                for (int l = 0; l < CheckboxItemsList.getLength(); l++) {
                    Node Opton1 = CheckboxItemsList.item(l);

                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                            cbItems.add(Opton1.getTextContent().trim());
                            String defaultValue = ((Element) Opton1).getAttribute("default");
                            if (defaultValue.equalsIgnoreCase("true")) {
                                controlObject.setDefaultItemIndex(l);
                                controlObject.setDefaultItem(Opton1.getTextContent().trim());
                            }
                        }
                    }
                }

                controlObject.setItems(cbItems);*/
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_RADIO_BUTTON:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList radioButtonValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (radioButtonValidatorsList != null && radioButtonValidatorsList.getLength() > 0) {
                        for (int li = 0; li < radioButtonValidatorsList.getLength(); li++) {
                            Node Opton = radioButtonValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLRBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("RBUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList RadioOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < RadioOptonsList.getLength(); k++) {
                        Node Opton = RadioOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(true);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Horizontal")) {
                                controlObject.setEnableHorizontalAlignment(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();

                setItems(RBItemsList, controlObject);
                /*List<String> rbItems = new ArrayList<>();
                NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                for (int l = 0; l < RBItemsList.getLength(); l++) {
                    Node Opton1 = RBItemsList.item(l);

                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                            String defaultValue = ((Element) Opton1).getAttribute("detault");
                            Log.d("defaultItem: ", defaultValue);
                            if (defaultValue.equalsIgnoreCase("true")) {
                                controlObject.setDefaultItemIndex(l);
                                controlObject.setDefaultItem(Opton1.getTextContent().trim());
                            }
                            rbItems.add(Opton1.getTextContent().trim());
                        }
                    }
                }

                controlObject.setItems(rbItems);*/
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);

                break;
            case AppConstants.CONTROL_TYPE_DROP_DOWN:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList dropDownValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (dropDownValidatorsList != null && dropDownValidatorsList.getLength() > 0) {
                        for (int li = 0; li < dropDownValidatorsList.getLength(); li++) {
                            Node Opton = dropDownValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLDDMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("DDUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                } else {
                    NodeList DropdownOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < DropdownOptonsList.getLength(); k++) {
                        Node Opton = DropdownOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                setItems(DDItemsList, controlObject);
               /* List<String> ddItems = new ArrayList<>();
                NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                for (int l = 0; l < DDItemsList.getLength(); l++) {
                    Node Opton1 = DDItemsList.item(l);

                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());

                            String defaultValue = ((Element) Opton1).getAttribute("default");
                            if (defaultValue.equalsIgnoreCase("true")) {
                                controlObject.setDefaultItemIndex(l);
                                controlObject.setDefaultItem(Opton1.getTextContent().trim());
                            }

                            ddItems.add(Opton1.getTextContent().trim());
                        }
                    }
                }

                controlObject.setItems(ddItems);*/
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_CHECK_LIST:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList checkListValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (checkListValidatorsList != null && checkListValidatorsList.getLength() > 0) {
                        for (int li = 0; li < checkListValidatorsList.getLength(); li++) {
                            Node Opton = checkListValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLCLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("CbLUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList MultiSelectOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < MultiSelectOptonsList.getLength(); k++) {
                        Node Opton = MultiSelectOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("AscendingOrder")) {
                                controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }  else if (Opton.getNodeName().trim().equalsIgnoreCase("DescendingOrder")) {
                                controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("RowSelectionType")) {
                                controlObject.setRowSelectionType(Opton.getTextContent().trim());
//                                                        controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                setItems(CLItemsList, controlObject);
               /* List<String> CLItems = new ArrayList<>();
                NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                for (int l = 0; l < CLItemsList.getLength(); l++) {
                    Node Opton1 = CLItemsList.item(l);

                    if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                            CLItems.add(Opton1.getTextContent().trim());
                            String defaultValue = ((Element) Opton1).getAttribute("default");
                            if (defaultValue.equalsIgnoreCase("true")) {
                                controlObject.setDefaultItemIndex(l);
                                controlObject.setDefaultItem(Opton1.getTextContent().trim());
                            }
                        }
                    }
                }

                controlObject.setItems(CLItems);*/
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_RATING:

                controlObject.setRatingItemCount(((Element) ControlNode).getAttribute("noOfItems").trim());

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList ratingValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (ratingValidatorsList != null && ratingValidatorsList.getLength() > 0) {
                        for (int li = 0; li < ratingValidatorsList.getLength(); li++) {
                            Node Opton = ratingValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLRatingMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("RUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList RatingOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < RatingOptionsList.getLength(); k++) {
                        Node Opton = RatingOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("DisableCount")) {
                                controlObject.setDisableRatingCount(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisableRatingCount(false);
                                Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("RatingType")) {

//                                                    controlObject.setSelectRatingItemType(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                controlObject.setRatingType(Opton.getTextContent().trim());

                                Log.d("MainRatingCountTType", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_VOICE_RECORDING:

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList voiceRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (voiceRecValidatorsList != null && voiceRecValidatorsList.getLength() > 0) {
                        for (int li = 0; li < voiceRecValidatorsList.getLength(); li++) {
                            Node Opton = voiceRecValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                    Log.d("XMLVoiceRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLVoiceRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableVoiceMaximumDuration(true);
                                    controlObject.setVoiceMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                    Log.d("XMLVoiceRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLVoiceRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableVoiceMinimumDuration(true);
                                    controlObject.setVoiceMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList voiceOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < voiceOptionsList.getLength(); k++) {
                        Node Opton = voiceOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                Log.d("XML_VoiceRecDisable ", Opton.getTextContent().trim());
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("AudioFormat")) {
                                Log.d("XML_VoiceRec ", Opton.getTextContent().trim());
                                if(!Opton.getTextContent().isEmpty()){
                                String[] strAudioFormats = Opton.getTextContent().trim().split("\\$");
                                List<String> temp = new ArrayList<>();
                                for (int count = 0; count < strAudioFormats.length; count++) {
                                    temp.add(strAudioFormats[count]);
                                }
                                controlObject.setAudioFormatIds(temp);
                                controlObject.setAudioFormatNames(temp);}
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadAudioFile")) {
                                controlObject.setEnableUploadAudioFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableUploadAudioFile(true);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_VIDEO_RECORDING:

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                controlObject.setEnableCompression(Boolean.parseBoolean(((Element) ControlNode).getAttribute("enableCompression").trim()));
                if (controlObject.isEnableCompression()) {
                    controlObject.setCompressionQuality(((Element) ControlNode).getAttribute("compressionQuality").trim());
                }
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList videoRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (videoRecValidatorsList != null && videoRecValidatorsList.getLength() > 0) {
                        for (int li = 0; li < videoRecValidatorsList.getLength(); li++) {
                            Node Opton = videoRecValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                    Log.d("XMLVideoRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLVideoRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableVideoMaximumDuration(true);
                                    controlObject.setVideoMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                    Log.d("XMLVideoRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLVideoRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableVideoMinimumDuration(true);
                                    controlObject.setVideoMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    if (((Element) ControlNode).getElementsByTagName("Options").getLength() > 0) {
                        NodeList videoOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                        for (int k = 0; k < videoOptionsList.getLength(); k++) {
                            Node Opton = videoOptionsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                    controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                    controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("VideoFormat")) {
                                    String[] strVideoFormats = Opton.getTextContent().trim().split("\\$");
                                    List<String> temp = new ArrayList<>();
                                    for (int count = 0; count < strVideoFormats.length; count++) {
                                        temp.add(strVideoFormats[count]);
                                    }
                                    controlObject.setVideoFormatIds(temp);
                                    controlObject.setVideoFormatNames(temp);
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadVideoFile")) {
                                    controlObject.setEnableUploadVideoFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                    controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                }
                            }
                        }
                    }
                }
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_AUDIO_PLAYER:
                controlObject.setAudioData(((Element) ControlNode).getAttribute("audioData").trim());
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList audioPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < audioPlayerOptionsList.getLength(); k++) {
                        Node Opton = audioPlayerOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Background")) {
                                controlObject.setEnablePlayBackground(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }


                break;
            case AppConstants.CONTROL_TYPE_VIDEO_PLAYER:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList videoPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < videoPlayerOptionsList.getLength(); k++) {
                        Node Opton = videoPlayerOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_PERCENTAGE:
                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList percentageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (percentageValidatorsList != null && percentageValidatorsList.getLength() > 0) {
                        for (int li = 0; li < percentageValidatorsList.getLength(); li++) {
                            Node Opton = percentageValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLPercentageMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList percentageOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < percentageOptionsList.getLength(); k++) {
                        Node Opton = percentageOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }

                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_SIGNATURE:

                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList signatureValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (signatureValidatorsList != null && signatureValidatorsList.getLength() > 0) {
                        for (int li = 0; li < signatureValidatorsList.getLength(); li++) {
                            Node Opton = signatureValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList signatureOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < signatureOptionsList.getLength(); k++) {
                        Node Opton = signatureOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Upload")) {
                                controlObject.setEnableUploadSignature(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("signatureOnScreen")) {
                                controlObject.setEnableSignatureOnScreen(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }

                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_URL_LINK:
                controlObject.setUrl(((Element) ControlNode).getAttribute("value").trim());
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList urlValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (urlValidatorsList != null && urlValidatorsList.getLength() > 0) {
                        for (int li = 0; li < urlValidatorsList.getLength(); li++) {
                            Node Opton = urlValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLURLViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("URlUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList urllinkOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < urllinkOptonsList.getLength(); k++) {
                        Node Opton = urllinkOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideUrl")) {
                                controlObject.setHideURL(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayURLName")) {
                                controlObject.setUrlPlaceholderText(Opton.getTextContent().trim());
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);

                break;
            case AppConstants.CONTROL_TYPE_DECIMAL:
                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList decimalValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (decimalValidatorsList != null && decimalValidatorsList.getLength() > 0) {
                        for (int li = 0; li < decimalValidatorsList.getLength(); li++) {
                            Node Opton = decimalValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLdecimalViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("DUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList decimalOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < decimalOptonsList.getLength(); k++) {
                        Node Opton = decimalOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Precision")) {
                                controlObject.setCharactersAfterDecimal((Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_PASSWORD:
                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList passwordValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (passwordValidatorsList != null && passwordValidatorsList.getLength() > 0) {
                        for (int li = 0; li < passwordValidatorsList.getLength(); li++) {
                            Node Opton = passwordValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("PasswordViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordPolicy")) {
                                    controlObject.setEnablePasswordPolicy(true);
                                    String[] passwordPolicyId = eElement.getElementsByTagName("Param").item(1).getTextContent().trim().split("\\$");
                                    String[] passwordPolicyValue = eElement.getElementsByTagName("Param").item(2).getTextContent().trim().split("2");
                                    List<String> temppasswordPolicyIds = new ArrayList<>();
                                    List<String> temppasswordPolicyValues = new ArrayList<>();
                                    for (int count = 0; count < passwordPolicyId.length; count++) {
                                        temppasswordPolicyIds.add(passwordPolicyId[count]);
                                    }
                                    for (int count = 0; count < passwordPolicyValue.length; count++) {
                                        temppasswordPolicyValues.add(passwordPolicyValue[count]);
                                    }
                                    controlObject.setPasswordPolicy(temppasswordPolicyValues);
                                    controlObject.setPasswordPolicyIds(temppasswordPolicyIds);
                                    Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordLength")) {
                                    controlObject.setEnablePasswordLength(true);
                                    controlObject.setPasswordLength(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setPasswordLengthError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList PasswordOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < PasswordOptonsList.getLength(); k++) {
                        Node Opton = PasswordOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowOption")) {
                                controlObject.setEnableShowOrHideOption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Encrypt")) {
                                controlObject.setEnableEncryption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionType")) {
                                controlObject.setEncryptionType(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionTypeId")) {
                                controlObject.setEncryptionTypeId(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }

                        }
                    }
                }


                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_CURRENCY:
                controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList currencyValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (currencyValidatorsList != null && currencyValidatorsList.getLength() > 0) {
                        for (int li = 0; li < currencyValidatorsList.getLength(); li++) {
                            Node Opton = currencyValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("CurrencyViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                    Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                    Log.d("XMLCurrencyMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLCurrencyMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableMaximumAmount(true);
                                    controlObject.setMaxAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMaxAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                    Log.d("XMLCurrencyMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    Log.d("XMLCurrencyMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setEnableMinimumAmount(true);
                                    controlObject.setMinAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                    controlObject.setMinAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    List<String> currencyType = new ArrayList<>();
                    NodeList CurrencyOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < CurrencyOptonsList.getLength(); k++) {
                        Node Opton = CurrencyOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrencyType")) {
                                currencyType.add(Opton.getTextContent().trim());
                                controlObject.setCurrencyListNames(currencyType);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_DYNAMIC_LABEL:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                controlObject.setValue(((Element) ControlNode).getAttribute("value").trim());
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList dynamicOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < dynamicOptionsList.getLength(); k++) {
                        Node Opton = dynamicOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Section")) {
                                controlObject.setMakeAsSection(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("BarCode")) {
                                controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("QRCode")) {
                                controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("UniCode")) {
                                controlObject.setUnicodeFormat(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
                                controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersType")) {
                                controlObject.setMaskCharacterType(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("NoOfMaskCharactersToMask")) {
                                controlObject.setNoOfCharactersToMask(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersDirection")) {
                                controlObject.setMaskCharacterDirection(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGround")) {
                                controlObject.setLayoutBackGroundEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGroundColor")) {
                                controlObject.setLayoutBackGroundColor(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                controlObject.setBackGroundColor(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("UnderlineText")) {
                                controlObject.setUnderLineText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);

                break;
            case AppConstants.CONTROL_TYPE_IMAGE:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                        for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                            Node Opton = imageValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList imageOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < imageOptonsList.getLength(); k++) {
                        Node Opton = imageOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageDataType")) {
                                controlObject.setImageDataType(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageData")) {
                                controlObject.setImageData(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImage")) {
                                controlObject.setEnableMultipleImages(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImageFormat")) {
                                controlObject.setImagesArrangementType(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomImage")) {
                                controlObject.setZoomImageEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_BUTTON:
                controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                        Node Opton = buttonOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                for (int k = 0; k < buttonDSList.getLength(); k++) {
                    Node Opton = buttonDSList.item(k);
                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                            Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                            Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                            controlObject.setShape(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                            controlObject.setTypeOfButton(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                            controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                            controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                        }  else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                            controlObject.setIconPath(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                            controlObject.setButtonHexColor(Opton.getTextContent().trim());
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
//                mButtonDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            // Advanced Controls
            case AppConstants.CONTROL_TYPE_GPS:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                controlObject.setGpsType(((Element) ControlNode).getAttribute("gpsType").trim());
                controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                controlObject.setDistanceAround(((Element) ControlNode).getAttribute("distanceAround").trim());
                controlObject.setNearBy(((Element) ControlNode).getAttribute("nearBy").trim());
                if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                    controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                }
                if (controlObject.getGpsType().equalsIgnoreCase(AppConstants.Multi_points_line) ||
                        controlObject.getGpsType().equalsIgnoreCase(AppConstants.Polygon) ||
                        controlObject.getGpsType().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
                    controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                    if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                        controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                    } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                        controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                    }
                }


                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                        for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                            Node Opton = imageValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList gpsOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < gpsOptionsList.getLength(); k++) {
                        Node Opton = gpsOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowMap")) {
                                controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("SaveInDifferentColumns")) {
                                controlObject.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationFormat")) {
                                controlObject.setLocationFormat(Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;
            case AppConstants.CONTROL_TYPE_BAR_CODE:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList barCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < barCodeOptonsList.getLength(); k++) {
                        Node Opton = barCodeOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_QR_CODE:
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList qrCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < qrCodeOptonsList.getLength(); k++) {
                        Node Opton = qrCodeOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                            }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                setLangauge(ControlNode, controlObject);
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;

            case AppConstants.CONTROL_TYPE_SUBFORM:

                controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onRowClickEvent").trim()));
                controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));

                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                        for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                            Node Opton = subFormValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                    controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                                if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                    controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                }

                            }
                        }
                    }
                }


                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                        Node Opton = subFormOptionsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                Log.d("SubformOrientation", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayButton")) {
                                controlObject.setDisplayNameOfAddButton(Opton.getTextContent().trim());
                                Log.d("SubformDisplayName", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                String spilt[] = Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1).split(",");
                                String itemsId[] = new String[spilt.length];
                                for (int z = 0; z < spilt.length; z++) {
                                    itemsId[z] = spilt[z].trim();
                                }
                                controlObject.setSearchItemIds(Arrays.asList(itemsId));
                            }
                        }
                    }
                }
//
                                       /* if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
                                        } else {
                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                List<ControlObject> controlObjectList = new ArrayList<>();

                                            }
                                        }*/
//                mDisplaySettings(ControlNode, controlObject);
                if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0) != null && ((Element) ControlNode).getAttribute("controlName").trim().equalsIgnoreCase(controlObject.getControlName()) ) {
                    NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(((Element) ControlNode).getElementsByTagName("DisplaySettings").getLength()-1).getChildNodes();
                    if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                        for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                            Node Opton = DisplaySettingsList.item(k);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                    controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                    controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            /*if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME2")) {
                                controlObject.setTextHexColor("#5D5654"); // Brown
                            }else if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME1")) {
                                controlObject.setTextHexColor("#5a636d"); // bluegray
                            }*/
//                            if (themeNo.equalsIgnoreCase("")) {
//                                    Log.d(TAG, "mDisplaySettingsThemeNo: "+themeNo+" - "+controlObject.getDisplayName());
////                                controlObject.setTextHexColor("#5D5654"); // Brown
//                                controlObject.setTextHexColor("#4CAE4C"); // ev_green
//                            }else {
//                                controlObject.setTextHexColor(Opton.getTextContent().trim());
//                            }
                                    controlObject.setTextHexColor(Opton.getTextContent().trim());
                                    Log.d("XMLDisplaySettings_M", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                    controlObject.setChartColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ProgressColor")) {
                                    controlObject.setProgressColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerColor")) {
                                    controlObject.setTimerColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                }
                            }
                        }
                    }
                }

                Node node = ControlNode.getChildNodes().item(3);

                if (node != null) {
                    controlObject.setSubFormControlList(getSubFormControlList(node, false));
                }


                break;
            // Data Controls
            case AppConstants.CONTROL_TYPE_DATA_CONTROL:

                controlObject.setDataControlStatus(((Element) ControlNode).getAttribute("type").trim());
                controlObject.setDependentControl(((Element) ControlNode).getAttribute("dependentName").trim());
                controlObject.setDataControlName(((Element) ControlNode).getAttribute("dataControllName").trim());
                controlObject.setDataControlLocationType(((Element) ControlNode).getAttribute("locationType").trim());
                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChange").trim()));
                if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                    controlObject.setNullAllowed(false);
                } else {
                    NodeList datacontrolValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                    if (datacontrolValidatorsList != null && datacontrolValidatorsList.getLength() > 0) {
                        for (int li = 0; li < datacontrolValidatorsList.getLength(); li++) {
                            Node Opton = datacontrolValidatorsList.item(li);
                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                Element eElement = (Element) Opton;
                                Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                    Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setNullAllowed(true);
                                    controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                }
                            }
                        }
                    }
                }
                if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                } else {
                    NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                    for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                        Node Opton = dataControlOptonsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("UserControlBinding")) {
                                controlObject.setEnableUserControlBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                      controlObject.setUserControlBind(false);
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("PostLocationBinding")) {
                                controlObject.setEnablePostLocationBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }  else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                            }
                        }
                    }
                }
                mDisplaySettings(ControlNode, controlObject);
                setRequiredUI(ControlNode, controlObject);
                break;


            default:

        }


        return controlObject;
    }

    /*XMl to ChildFormObject */
    public DataCollectionObject XML_To_ChildFormObject(String XMLString) {
        System.out.println("==========Step XML_To_ChildFormObject============");
        DataCollectionObject AppObject = new DataCollectionObject();

        try {
            List<FilterSubFormColumns> filterSubFormColumnsList = new ArrayList<FilterSubFormColumns>();
            List<ControlObject> Controls_list = new ArrayList<ControlObject>();
            AppObject.setControls_list(Controls_list);

            String response = XMLString.replaceAll("[^\\x20-\\x7e]", "");
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;
            builder = factory.newDocumentBuilder();
            doc = builder.parse(new InputSource(new StringReader(response)));
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getChildNodes().item(0).getChildNodes();
            AppObject.setApp_Name(((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            AppObject.setApp_QueryBase(((Element) doc.getChildNodes().item(0)).getAttribute("queryBase"));
            AppObject.setApp_OnLoadEvent(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("onLoadEvent")));
            AppObject.setApp_OnSubmitEvent(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("onSubmitEvent")));
            AppObject.setApp_Theam(((Element) doc.getChildNodes().item(0)).getAttribute("theme"));
            AppObject.setApp_Mode(((Element) doc.getChildNodes().item(0)).getAttribute("mode"));

            AppObject.setDefaultActionForSubmit(Boolean.valueOf(((Element) doc.getChildNodes().item(0)).getAttribute("submitDefalutAction")));
            AppObject.setSubmit_ButtonExitType(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonExitType"));
            AppObject.setSubmit_ButtonName(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonName"));
            AppObject.setSubmit_ButtonColor(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonColor"));
            AppObject.setSubmit_ButtonFontSize(((Element) doc.getChildNodes().item(0)).getAttribute("submitButtonFontSize"));

            Log.d("XMLHELPER_DCOName", ((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            Log.d("XMLHELPER_DCOTheme", ((Element) doc.getChildNodes().item(0)).getAttribute("theme"));
            Log.d("XMLHELPER_DCOMode", ((Element) doc.getChildNodes().item(0)).getAttribute("mode"));
            Log.d("XMLHELPER_DCONLoadEvent", ((Element) doc.getChildNodes().item(0)).getAttribute("onLoadEvent"));
            Log.d("XMLHELPER_DCOONSubEvent", ((Element) doc.getChildNodes().item(0)).getAttribute("onSubmitEvent"));

            for (int i = 0; i < nList.getLength(); i++) {
                Node nNode = nList.item(i);
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                    if (nNode.getNodeName().trim().equalsIgnoreCase("FormControls")) {
                        NodeList ControleNodeList = nNode.getChildNodes();

                        for (int j = 0; j < ControleNodeList.getLength(); j++) {
                            Node ControlNode = ControleNodeList.item(j);

                            if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {

                                ControlObject controlObject = new ControlObject();
                                controlObject.setControlCategory(ControlNode.getNodeName());
                                controlObject.setControlTitle(ControlNode.getNodeName());
                                controlObject.setControlID(((Element) ControlNode).getAttribute("controlName").trim());
                                controlObject.setControlType(ControlNode.getNodeName());
                                controlObject.setDisplayName(((Element) ControlNode).getAttribute("displayName").trim());
                                controlObject.setControlName(((Element) ControlNode).getAttribute("controlName").trim());
                                controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                controlObject.setHint(((Element) ControlNode).getAttribute("hint").trim());
                                Log.d("XMLHELPER_DisplayName", ((Element) ControlNode).getAttribute("displayName").trim());
                                Log.d("XMLHELPER_DefaultValue", ((Element) ControlNode).getAttribute("defaultValue").trim());
                                Log.d("XMLHELPER_Hint", ((Element) ControlNode).getAttribute("hint").trim());


//
//                                String sbindValueType = ((Element) ControlNode).getAttribute("bindValueType").trim() != null ?
//                                        ((Element) ControlNode).getAttribute("bindValueType").trim() : "";
//                                Log.d(TAG, "XML_To_ChildFormObject: "+sbindValueType);


                                switch (ControlNode.getNodeName().trim()) {

                                    case AppConstants.CONTROL_TYPE_TEXT_INPUT:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
//                                        AppConstants.ValidatorsForControls(ControlNode,controlObject);
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                                    Node Opton = validatorsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setUniqueField(true);
                                                            Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
//
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                            controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromBarcode(true);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                            controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setReadFromQRCode(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationSearch")) {
                                                            controlObject.setGoogleLocationSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setGoogleLocationSearch(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentLocation")) {
                                                            controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setCurrentLocation(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("VoiceInput")) {
                                                            controlObject.setVoiceText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setVoiceText(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("AllowOnlyAlphabets")) {
                                                            controlObject.setAllowOnlyAlphabets(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);

                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_NUMERIC_INPUT:
//
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList numericValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (numericValidatorsList != null && numericValidatorsList.getLength() > 0) {
                                                for (int k = 0; k < numericValidatorsList.getLength(); k++) {
                                                    Node Opton = numericValidatorsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setUniqueField(true);
                                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                                            Log.d("XMLMaxValue", Opton.getChildNodes().item(2).getTextContent().trim());
                                                            Log.d("XMLMaxValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLMaxValue", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableUpperLimit(true);
                                                            controlObject.setUpperLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setUpperLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                                            Log.d("XMLMinValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLMinValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

//
                                                            controlObject.setEnableLowerLimit(true);
                                                            controlObject.setLowerLimitErrorMesage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setLowerLimit(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                                            Log.d("XMLCapValue", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCapValue", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableCappingDigits(true);
                                                            controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList numberOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < numberOptonsList.getLength(); k++) {
                                                Node Opton = numberOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromBarcode(true);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadFromQRCode(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
//                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_PHONE:


                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList phoneValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (phoneValidatorsList != null && phoneValidatorsList.getLength() > 0) {
                                                for (int p = 0; p < phoneValidatorsList.getLength(); p++) {
                                                    Node Opton = phoneValidatorsList.item(p);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setUniqueField(true);
                                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDigits")) {
                                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableCappingDigits(true);
                                                            controlObject.setCappingDigits(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setCappingError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList phoneOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < phoneOptonsList.getLength(); k++) {
                                                Node Opton = phoneOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_EMAIL:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {

                                            NodeList emailValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (emailValidatorsList != null && emailValidatorsList.getLength() > 0) {
                                                for (int e = 0; e < emailValidatorsList.getLength(); e++) {
                                                    Node Opton = emailValidatorsList.item(e);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setUniqueField(true);
                                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList EmailOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < EmailOptonsList.getLength(); k++) {
                                                Node Opton = EmailOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarCode")) {
                                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadFromBarQRCode")) {
                                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_LARGE_INPUT:

                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {

                                            NodeList largeInputValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (largeInputValidatorsList != null && largeInputValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < largeInputValidatorsList.getLength(); li++) {
                                                    Node Opton = largeInputValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
                                                            Log.d("XMLUnique", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setUniqueField(true);
                                                            controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxCharacters")) {
                                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableMaxCharacters(true);
                                                            controlObject.setMaxCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMaxCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minCharacters")) {
                                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLMaxDigits", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableMinCharacters(true);
                                                            controlObject.setMinCharacters(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMinCharError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList largeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < largeOptonsList.getLength(); k++) {
                                                Node Opton = largeOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLEditor")) {
                                                        controlObject.setHtmlEditorEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                                        controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_CAMERA:


                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList cameraValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (cameraValidatorsList != null && cameraValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < cameraValidatorsList.getLength(); li++) {
                                                    Node Opton = cameraValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxSize")) {
                                                            Log.d("XMLCamMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCamMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableMaxUploadSize(true);
                                                            controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minSize")) {
                                                            Log.d("XMLCamMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCamMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableMinUploadSize(true);
                                                            controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList cameraOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < cameraOptionsList.getLength(); k++) {
                                                Node Opton = cameraOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("AspectRatio")) {
                                                        controlObject.setEnableAspectRatio(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageGPS")) {
                                                        controlObject.setEnableImageWithGps(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableZoomControl")) {
                                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setZoomControl(true);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableFlash")) {
                                                        controlObject.setFlash(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setFlash(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FilePhoto")) {
//                                                        controlObject.setEnableFilePhoto(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableFilePhoto(true);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("fileUpload")) {
                                                        controlObject.setCaptureFromFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Capture")) {
                                                        controlObject.setCaptureFromCamera(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("CaptureOrientation")) {
                                                        controlObject.setCaptureOrientation(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_FILE_BROWSING:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {

                                            NodeList fileBrowserValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (fileBrowserValidatorsList != null && fileBrowserValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < fileBrowserValidatorsList.getLength(); li++) {
                                                    Node Opton = fileBrowserValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLFbMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("FbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("extensionCheck")) {
                                                            Log.d("XMLFBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableExtensions(true);
                                                            String extensions = eElement.getElementsByTagName("Param").item(1).getTextContent();
                                                            List<String> names = new ArrayList<>();
                                                            names.addAll(Arrays.asList(extensions.split("\\$")));
                                                            controlObject.setExtensionsListNames(names);
                                                            controlObject.setFileExtensionError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("FbExtensionCheck", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxUpload")) {
                                                            Log.d("XMLFileMax", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLFileMax", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableMaxUploadSize(true);
                                                            controlObject.setMaxUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMaxUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("minUpload")) {
                                                            Log.d("XMLFileMin", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLFileMin", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableMinUploadSize(true);
                                                            controlObject.setMinUploadSize(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMinUploadError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList FileuploadOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < FileuploadOptonsList.getLength(); k++) {
                                                Node Opton = FileuploadOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ScanEnabled")) {
                                                        controlObject.setEnableScan(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_CALENDER:

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                                        }
                                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                        }
                                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                                        }
                                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                        }
                                        if (((Element) ControlNode).hasAttribute("currentDateAsDefault")) {
                                            controlObject.setEnableCurrentDateAsDefault(Boolean.parseBoolean(((Element) ControlNode).getAttribute("currentDateAsDefault").trim()));
                                        }
                                        if (((Element) ControlNode).hasAttribute("defaultValue")) {
                                            controlObject.setDefaultValue(((Element) ControlNode).getAttribute("defaultValue").trim());
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                                    Node Opton = calendarValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLCamMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenDates")) {
                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableBetweenStartAndEndDate(true);
                                                            controlObject.setStartDate(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setEndDate(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                            controlObject.setBetweenStartAndEndDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("preDate")) {

                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setEnableBeforeCurrentDate(true);
                                                            controlObject.setBeforeCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("postDate")) {

                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableAfterCurrentDate(true);
                                                            controlObject.setAfterCurrentDateError(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                                Node Opton = DateOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("GetYear")) {
                                                        controlObject.setGetYearFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetMonth")) {
                                                        controlObject.setGetMonthFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetMonthFromSelection(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDay")) {
                                                        controlObject.setGetDayFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDayFromSelection(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("GetDate")) {
                                                        controlObject.setGetDateFromSelection(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);

                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_CHECKBOX:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        //ValueType
                                        String valueType=((Element) ControlNode).getAttribute("ValueType").trim();
                                        controlObject.setCheckbox_ValueType(valueType);

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList checkBoxValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (checkBoxValidatorsList != null && checkBoxValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < checkBoxValidatorsList.getLength(); li++) {
                                                    Node Opton = checkBoxValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLCBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("CbUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList CheckboxOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < CheckboxOptonsList.getLength(); k++) {
                                                Node Opton = CheckboxOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
//                                        List<String> cbItems = new ArrayList<>();
                                        if(valueType.equals("Value")){
                                            NodeList CheckboxItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                                            setItems(CheckboxItemsList, controlObject);
                                        }else if(valueType.equals("Boolean")){
                                            String checkedValue=((Element) ControlNode).getAttribute("CheckedValue").trim();
                                            String unCheckedValue=((Element) ControlNode).getAttribute("unCheckedValue").trim();
                                            controlObject.setCheckbox_CheckedValue(checkedValue);
                                            controlObject.setCheckbox_unCheckedValue(unCheckedValue);
                                        }
                                        /* for (int l = 0; l < CheckboxItemsList.getLength(); l++) {
                                            Node Opton1 = CheckboxItemsList.item(l);

                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                    cbItems.add(Opton1.getTextContent().trim());
                                                }
                                            }
                                        }

                                        controlObject.setItems(cbItems);*/
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_RADIO_BUTTON:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList radioButtonValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (radioButtonValidatorsList != null && radioButtonValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < radioButtonValidatorsList.getLength(); li++) {
                                                    Node Opton = radioButtonValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLRBMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("RBUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList RadioOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < RadioOptonsList.getLength(); k++) {
                                                Node Opton = RadioOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Horizontal")) {
                                                        controlObject.setEnableHorizontalAlignment(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        NodeList RBItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();

                                        setItems(RBItemsList, controlObject);
                                         /*List<String> rbItems = new ArrayList<>();
                                        List<Item> rbItemsList = new ArrayList<>();
                                       for (int l = 0; l < RBItemsList.getLength(); l++) {
                                            Node Opton1 = RBItemsList.item(l);

                                            Item item = new Item();
                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                    rbItems.add(Opton1.getTextContent().trim());
                                                    item.setId(((Element) Opton1).getAttribute("id"));
                                                    item.setValue(Opton1.getTextContent().trim());

                                                    rbItemsList.add(item);

                                                }
                                            }
                                        }

                                        controlObject.setItems(rbItems);
                                        controlObject.setItemsList(rbItemsList);*/
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_DROP_DOWN:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList dropDownValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (dropDownValidatorsList != null && dropDownValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < dropDownValidatorsList.getLength(); li++) {
                                                    Node Opton = dropDownValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLDDMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("DDUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList DropdownOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < DropdownOptonsList.getLength(); k++) {
                                                Node Opton = DropdownOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("chronologicalOrder")) {
                                                        controlObject.setEnableSortByChronologicalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ascending")) {
                                                        controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("descending")) {
                                                        controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RemoveSelectedItemInNewRow")) {
                                                        controlObject.setRemoveSelectedItemInNewRow(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }

//                                        List<String> ddItems = new ArrayList<>();
                                        NodeList DDItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                                        setItems(DDItemsList, controlObject);
                                    /*    for (int l = 0; l < DDItemsList.getLength(); l++) {
                                            Node Opton1 = DDItemsList.item(l);

                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                    ddItems.add(Opton1.getTextContent().trim());
                                                }
                                            }
                                        }

                                        controlObject.setItems(ddItems);*/
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_CHECK_LIST:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList checkListValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (checkListValidatorsList != null && checkListValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < checkListValidatorsList.getLength(); li++) {
                                                    Node Opton = checkListValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLCLMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("CbLUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList MultiSelectOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < MultiSelectOptonsList.getLength(); k++) {
                                                Node Opton = MultiSelectOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("SortBy")) {
                                                        controlObject.setEnableSortByAlphabeticalOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("AscendingOrder")) {
                                                        controlObject.setEnableSortByAscendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }  else if (Opton.getNodeName().trim().equalsIgnoreCase("DescendingOrder")) {
                                                        controlObject.setEnableSortByDescendingOrder(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RowSelectionType")) {
                                                        controlObject.setRowSelectionType(Opton.getTextContent().trim());
//                                                        controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("OtherChoice")) {
                                                        controlObject.setEnableAllowOtherChoice(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }

//                                        List<String> CLItems = new ArrayList<>();
                                        NodeList CLItemsList = ((Element) ControlNode).getElementsByTagName("Items").item(0).getChildNodes();
                                        setItems(CLItemsList, controlObject);
                                        /* for (int l = 0; l < CLItemsList.getLength(); l++) {
                                            Node Opton1 = CLItemsList.item(l);

                                            if (Opton1.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton1.getNodeName().trim().equalsIgnoreCase("Item")) {

//                                                    Log.d("itemvalue: ", Opton1.getTextContent().trim());
                                                    CLItems.add(Opton1.getTextContent().trim());
                                                    String defaultValue = ((Element) Opton1).getAttribute("default");
                                                    if (defaultValue.equalsIgnoreCase("true")) {
                                                        controlObject.setDefaultItemIndex(l);
                                                        controlObject.setDefaultItem(Opton1.getTextContent().trim());
                                                    }
                                                }
                                            }
                                        }

                                        controlObject.setItems(CLItems);*/
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_RATING:

                                        controlObject.setRatingItemCount(((Element) ControlNode).getAttribute("noOfItems").trim());

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList ratingValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (ratingValidatorsList != null && ratingValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < ratingValidatorsList.getLength(); li++) {
                                                    Node Opton = ratingValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLRatingMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("RUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList RatingOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < RatingOptionsList.getLength(); k++) {
                                                Node Opton = RatingOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("DisableCount")) {
                                                        controlObject.setDisableRatingCount(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setDisableRatingCount(false);
                                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                                        Log.d("MainRatingCountTType", String.valueOf(Boolean.parseBoolean(Opton.getTextContent().trim())));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("RatingType")) {

//                                                    controlObject.setSelectRatingItemType(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        controlObject.setRatingType(Opton.getTextContent().trim());

                                                        Log.d("MainRatingCountTType", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_VOICE_RECORDING:

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList voiceRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (voiceRecValidatorsList != null && voiceRecValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < voiceRecValidatorsList.getLength(); li++) {
                                                    Node Opton = voiceRecValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                                            Log.d("XMLVoiceRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLVoiceRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableVoiceMaximumDuration(true);
                                                            controlObject.setVoiceMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                                            Log.d("XMLVoiceRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLVoiceRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableVoiceMinimumDuration(true);
                                                            controlObject.setVoiceMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList voiceOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < voiceOptionsList.getLength(); k++) {
                                                Node Opton = voiceOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        Log.d("XML_VoiceRecDisable ", Opton.getTextContent().trim());
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("AudioFormat")) {
                                                        Log.d("XML_VoiceRec ", Opton.getTextContent().trim());
                                                        if(!Opton.getTextContent().isEmpty()){
                                                        String[] strAudioFormats = Opton.getTextContent().trim().split("\\$");
                                                        List<String> temp = new ArrayList<>();
                                                        for (int count = 0; count < strAudioFormats.length; count++) {
                                                            temp.add(strAudioFormats[count]);
                                                        }
                                                        controlObject.setAudioFormatIds(temp);
                                                        controlObject.setAudioFormatNames(temp);}
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadAudioFile")) {
                                                        controlObject.setEnableUploadAudioFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setEnableUploadAudioFile(true);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_VIDEO_RECORDING:

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setEnableCompression(Boolean.parseBoolean(((Element) ControlNode).getAttribute("enableCompression").trim()));
                                        if (controlObject.isEnableCompression()) {
                                            controlObject.setCompressionQuality(((Element) ControlNode).getAttribute("compressionQuality").trim());
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList videoRecValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (videoRecValidatorsList != null && videoRecValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < videoRecValidatorsList.getLength(); li++) {
                                                    Node Opton = videoRecValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("VoiceRecViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("VoiceRecErrorMandatory", controlObject.getMandatoryFieldError());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxDuration")) {
                                                            Log.d("XMLVideoRecMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLVideoRecMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableVideoMaximumDuration(true);
                                                            controlObject.setVideoMaximumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMaximumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minDuration")) {
                                                            Log.d("XMLVideoRecMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLVideoRecMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableVideoMinimumDuration(true);
                                                            controlObject.setVideoMinimumDuration(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMinimumDurationError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() > 0) {
                                                NodeList videoOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                for (int k = 0; k < videoOptionsList.getLength(); k++) {
                                                    Node Opton = videoOptionsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("VideoFormat")) {
                                                            String[] strVideoFormats = Opton.getTextContent().trim().split("\\$");
                                                            List<String> temp = new ArrayList<>();
                                                            for (int count = 0; count < strVideoFormats.length; count++) {
                                                                temp.add(strVideoFormats[count]);
                                                            }
                                                            controlObject.setVideoFormatIds(temp);
                                                            controlObject.setVideoFormatNames(temp);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("UploadVideoFile")) {
                                                            controlObject.setEnableUploadVideoFile(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_AUDIO_PLAYER:

                                        controlObject.setAudioData(((Element) ControlNode).getAttribute("audioData").trim());

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList audioPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < audioPlayerOptionsList.getLength(); k++) {
                                                Node Opton = audioPlayerOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                                        controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Background")) {
                                                        controlObject.setEnablePlayBackground(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_VIDEO_PLAYER:

                                        controlObject.setVideoData(((Element) ControlNode).getAttribute("videoData").trim());
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList videoPlayerOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < videoPlayerOptionsList.getLength(); k++) {
                                                Node Opton = videoPlayerOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Awake")) {
                                                        controlObject.setEnableStayAwake(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_PERCENTAGE:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList percentageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (percentageValidatorsList != null && percentageValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < percentageValidatorsList.getLength(); li++) {
                                                    Node Opton = percentageValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLPercentageMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList percentageOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < percentageOptionsList.getLength(); k++) {
                                                Node Opton = percentageOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_SIGNATURE:

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList signatureValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (signatureValidatorsList != null && signatureValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < signatureValidatorsList.getLength(); li++) {
                                                    Node Opton = signatureValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList signatureOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < signatureOptionsList.getLength(); k++) {
                                                Node Opton = signatureOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Upload")) {
                                                        controlObject.setEnableUploadSignature(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("signatureOnScreen")) {
                                                        controlObject.setEnableSignatureOnScreen(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_URL_LINK:
                                        controlObject.setUrl(((Element) ControlNode).getAttribute("value").trim());
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList urlValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (urlValidatorsList != null && urlValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < urlValidatorsList.getLength(); li++) {
                                                    Node Opton = urlValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLURLViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("URlUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList urllinkOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < urllinkOptonsList.getLength(); k++) {
                                                Node Opton = urllinkOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideUrl")) {
                                                        controlObject.setHideURL(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayURLName")) {
                                                        controlObject.setUrlPlaceholderText(Opton.getTextContent().trim());
//                                                    controlObject.setInvisible(false);
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_DECIMAL:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList decimalValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (decimalValidatorsList != null && decimalValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < decimalValidatorsList.getLength(); li++) {
                                                    Node Opton = decimalValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLdecimalViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("DUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList decimalOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < decimalOptonsList.getLength(); k++) {
                                                Node Opton = decimalOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Precision")) {
                                                        controlObject.setCharactersAfterDecimal((Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_PASSWORD:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList passwordValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (passwordValidatorsList != null && passwordValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < passwordValidatorsList.getLength(); li++) {
                                                    Node Opton = passwordValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("PasswordViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordPolicy")) {
                                                            controlObject.setEnablePasswordPolicy(true);
                                                            String[] passwordPolicyId = eElement.getElementsByTagName("Param").item(1).getTextContent().trim().split("\\$");
                                                            String[] passwordPolicyValue = eElement.getElementsByTagName("Param").item(2).getTextContent().trim().split("2");
                                                            List<String> temppasswordPolicyIds = new ArrayList<>();
                                                            List<String> temppasswordPolicyValues = new ArrayList<>();
                                                            for (int count = 0; count < passwordPolicyId.length; count++) {
                                                                temppasswordPolicyIds.add(passwordPolicyId[count]);
                                                            }
                                                            for (int count = 0; count < passwordPolicyValue.length; count++) {
                                                                temppasswordPolicyValues.add(passwordPolicyValue[count]);
                                                            }
                                                            controlObject.setPasswordPolicy(temppasswordPolicyValues);
                                                            controlObject.setPasswordPolicyIds(temppasswordPolicyIds);
                                                            Log.d("PUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("passwordLength")) {
                                                            controlObject.setEnablePasswordLength(true);
                                                            controlObject.setPasswordLength(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setPasswordLengthError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList PasswordOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < PasswordOptonsList.getLength(); k++) {
                                                Node Opton = PasswordOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowOption")) {
                                                        controlObject.setEnableShowOrHideOption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Encrypt")) {
                                                        controlObject.setEnableEncryption(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionType")) {
                                                        controlObject.setEncryptionType(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("EncryptionTypeId")) {
                                                        controlObject.setEncryptionTypeId(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_CURRENCY:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList currencyValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (currencyValidatorsList != null && currencyValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < currencyValidatorsList.getLength(); li++) {
                                                    Node Opton = currencyValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("CurrencyViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("currencyErrorMandatory", controlObject.getMandatoryFieldError());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("maxValue")) {
                                                            Log.d("XMLCurrencyMaxParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCurrencyMaxMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableMaximumAmount(true);
                                                            controlObject.setMaxAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMaxAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("minValue")) {
                                                            Log.d("XMLCurrencyMinParam", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCurrencyMinMessage", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setEnableMinimumAmount(true);
                                                            controlObject.setMinAmount(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setMinAmountError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            List<String> currencyType = new ArrayList<>();
                                            NodeList CurrencyOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < CurrencyOptonsList.getLength(); k++) {
                                                Node Opton = CurrencyOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("CurrencyType")) {
                                                        currencyType.add(Opton.getTextContent().trim());
                                                        controlObject.setCurrencyListNames(currencyType);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                                        controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_DYNAMIC_LABEL:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        controlObject.setValue(((Element) ControlNode).getAttribute("value").trim());
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList dynamicOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < dynamicOptionsList.getLength(); k++) {
                                                Node Opton = dynamicOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Section")) {
                                                        controlObject.setMakeAsSection(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BarCode")) {
                                                        controlObject.setReadFromBarcode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("QRCode")) {
                                                        controlObject.setReadFromQRCode(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UniCode")) {
                                                        controlObject.setUnicodeFormat(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharacters")) {
                                                        controlObject.setEnableMaskCharacters(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersType")) {
                                                        controlObject.setMaskCharacterType(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("NoOfMaskCharactersToMask")) {
                                                        controlObject.setNoOfCharactersToMask(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MaskCharactersDirection")) {
                                                        controlObject.setMaskCharacterDirection(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGround")) {
                                                        controlObject.setLayoutBackGroundEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LayoutBackGroundColor")) {
                                                        controlObject.setLayoutBackGroundColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HTMLViewer")) {
                                                        controlObject.setHtmlViewerEnabled(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                        controlObject.setBackGroundColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("StrikeText")) {
                                                        controlObject.setStrikeText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UnderlineText")) {
                                                        controlObject.setUnderLineText(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_IMAGE:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                                    Node Opton = imageValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList imageOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < imageOptonsList.getLength(); k++) {
                                                Node Opton = imageOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageDataType")) {
                                                        controlObject.setImageDataType(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ImageData")) {
                                                        controlObject.setImageData(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImage")) {
                                                        controlObject.setEnableMultipleImages(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MultipleImageFormat")) {
                                                        controlObject.setImagesArrangementType(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomImage")) {
                                                        controlObject.setZoomImageEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_BUTTON:
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                Node Opton = buttonOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                        for (int k = 0; k < buttonDSList.getLength(); k++) {
                                            Node Opton = buttonDSList.item(k);
                                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                                    controlObject.setShape(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                                    controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                }  else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                                    controlObject.setIconPath(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                }
                                            }
                                        }

/*
                                        NodeList buttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                        for (int k = 0; k < buttonDSList.getLength(); k++) {
                                            Node Opton = buttonDSList.item(k);
                                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                                    controlObject.setShape(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                                    controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                                    controlObject.setIconPath(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                }
                                            }
                                        }
*/
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
//                                        mButtonDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    // Advanced Controls
                                    case AppConstants.CONTROL_TYPE_GPS:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setGpsType(((Element) ControlNode).getAttribute("gpsType").trim());
                                        controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                                        if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                                            controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                                        }
                                        if (controlObject.getGpsType().equalsIgnoreCase(AppConstants.Multi_points_line) ||
                                                controlObject.getGpsType().equalsIgnoreCase(AppConstants.Polygon) ||
                                                controlObject.getGpsType().equalsIgnoreCase(AppConstants.Vehicle_Tracking)) {
                                            controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                                            if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                                                controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                                            } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                                                controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                                            }
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                                    Node Opton = imageValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList gpsOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < gpsOptionsList.getLength(); k++) {
                                                Node Opton = gpsOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowMap")) {
                                                        controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SaveInDifferentColumns")) {
                                                        controlObject.setEnableSavingLatitudeAndLongitudeInSeparateColumns(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("LocationFormat")) {
                                                        controlObject.setLocationFormat(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_BAR_CODE:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList barCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < barCodeOptonsList.getLength(); k++) {
                                                Node Opton = barCodeOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_QR_CODE:
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList qrCodeOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < qrCodeOptonsList.getLength(); k++) {
                                                Node Opton = qrCodeOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_SUBFORM:

                                        controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                                        controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onRowClickEvent").trim()));
                                        controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                                        controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                                                    Node Opton = subFormValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
//                                                                controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
//                                                                controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                                                Node Opton = subFormOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                                        controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                                        Log.d("SubformOrientation", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayButton")) {
                                                        controlObject.setDisplayNameOfAddButton(Opton.getTextContent().trim());
                                                        Log.d("SubformDisplayName", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                                        controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                                        System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                                        String spilt[] = Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1).split(",");
                                                        String itemsId[] = new String[spilt.length];
                                                        for (int z = 0; z < spilt.length; z++) {
                                                            itemsId[z] = spilt[z].trim();
                                                        }
                                                        controlObject.setSearchItemIds(Arrays.asList(itemsId));
                                                    }
                                                }
                                            }
                                        }
//
                                       /* if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
                                        } else {
                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                List<ControlObject> controlObjectList = new ArrayList<>();

                                            }
                                        }*/
//                                        mDisplaySettings(ControlNode, controlObject);
                                        if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0) != null && ((Element) ControlNode).getAttribute("controlName").trim().equalsIgnoreCase(controlObject.getControlName()) ) {
                                            NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(((Element) ControlNode).getElementsByTagName("DisplaySettings").getLength()-1).getChildNodes();
                                            if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                                                for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                                                    Node Opton = DisplaySettingsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                            controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                            controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            /*if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME2")) {
                                controlObject.setTextHexColor("#5D5654"); // Brown
                            }else if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME1")) {
                                controlObject.setTextHexColor("#5a636d"); // bluegray
                            }*/
//                            if (themeNo.equalsIgnoreCase("")) {
//                                    Log.d(TAG, "mDisplaySettingsThemeNo: "+themeNo+" - "+controlObject.getDisplayName());
////                                controlObject.setTextHexColor("#5D5654"); // Brown
//                                controlObject.setTextHexColor("#4CAE4C"); // ev_green
//                            }else {
//                                controlObject.setTextHexColor(Opton.getTextContent().trim());
//                            }
                                                            controlObject.setTextHexColor(Opton.getTextContent().trim());
                                                            Log.d("XMLDisplaySettings_M", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                                            controlObject.setChartColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ProgressColor")) {
                                                            controlObject.setProgressColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerColor")) {
                                                            controlObject.setTimerColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);
                                        layoutBackgroundColor(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);

                                        if (((Element) ControlNode).getElementsByTagName("SubFormControls").getLength() == 0) {
                                        } else {
                                            Node node = ((Element) ControlNode).getElementsByTagName("SubFormControls").item(0);

                                            controlObject.setSubFormControlList(getSubFormControlList(node, false));
                                        }

                                        break;
                                    case AppConstants.CONTROL_TYPE_GRID_CONTROL:
                                        controlObject.setControlCategory("advanced");

                                        controlObject.setMinimumRows(((Element) ControlNode).getAttribute("minRows").trim());
                                        controlObject.setMaximumRows(((Element) ControlNode).getAttribute("maxRows").trim());
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setEnableFixGridWidth(Boolean.parseBoolean(((Element) ControlNode).getAttribute("fixGridWidth").trim()));
                                        controlObject.setOnAddRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onAddRowEvent").trim()));
                                        controlObject.setOnDeleteRowEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onDeleteRowEvent").trim()));

                                       /* if (((Element) ControlNode).getElementsByTagName("ColumnWidths").getLength() == 0) {


                                        } else {
                                            NodeList columnWidths = ((Element) ControlNode).getElementsByTagName("ColumnWidths").item(0).getChildNodes();
                                            List<String> columnWidthsList = new ArrayList<>();
                                            for (int k = 0; k < columnWidths.getLength(); k++) {

                                                Node width = columnWidths.item(k);

                                                columnWidthsList.add(width.getTextContent().trim());

                                            }
                                            controlObject.setGridColumnsWidths(columnWidthsList);
                                        }
*/
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList subFormValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (subFormValidatorsList != null && subFormValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < subFormValidatorsList.getLength(); li++) {
                                                    Node Opton = subFormValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("minRows")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                                            controlObject.setMinimumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("maxRows")) {
//                                                            Log.d("SubformMandatory", eElement.getElementsByTagName("maxRows").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                            controlObject.setMaximumRows(true);
                                                            controlObject.setMaximumRowsError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            //Log.d("SubformErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }

                                                    }
                                                }
                                            }
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                                                Node Opton = subFormOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Orientation")) {
                                                        controlObject.setDisplayOrientation(Opton.getTextContent().trim());
                                                        Log.d("SubformOrientation", Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideAddButton")) {
                                                        controlObject.setGridControl_HideAddButton(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDeleteButton")) {
                                                        controlObject.setGridControl_HideDeleteButton(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColHeightType")) {
                                                        controlObject.setGridControl_ColHeightType(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColHeightSize")) {
                                                        controlObject.setGridControl_ColHeightSize(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextSize")) {
                                                        controlObject.setGridControl_ColTextSize(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextStyle")) {
                                                        controlObject.setGridControl_ColTextStyle(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextColor")) {
                                                        controlObject.setGridControl_ColTextColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColTextAlignment")) {
                                                        controlObject.setGridControl_ColTextAlignment(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColColor")) {
                                                        controlObject.setGridControl_ColColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ColBorder")) {
                                                        controlObject.setGridControl_ColBorder(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideColumnNames")) {
                                                        controlObject.setHideColumnNames(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeigthType")) {
                                                        controlObject.setGridControl_rowHeigthType(Opton.getTextContent().trim());
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeightSize")) {
                                                        controlObject.setGridControl_rowHeightSize(Opton.getTextContent().trim());
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColorType")) {
                                                        controlObject.setGridControl_rowColorType(Opton.getTextContent().trim());
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor1")) {
                                                        controlObject.setGridControl_rowColor1(Opton.getTextContent().trim());
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor2")) {
                                                        controlObject.setGridControl_rowColor2(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderType")) {
                                                        controlObject.setGridControl_BorderType(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                                                        controlObject.setGridControl_BorderColor(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderThickness")) {
                                                        controlObject.setGridControl_BorderThickness(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        Log.d("SubformOrientation", "" + Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("LazyLoading")) {
                                                        controlObject.setGridControl_LazyLoading(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("threshold")) {
                                                        controlObject.setGridControl_threshold(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchEnable")) {
                                                        controlObject.setSearchEnable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("SearchItemIds")) {
                                                       // System.out.println("Items:" + Opton.getTextContent().trim().substring(1, Opton.getTextContent().trim().length() - 1));
                                                        String spilt[] = Opton.getTextContent().trim().split(",");
                                                        String itemsId[] = new String[spilt.length];
                                                        for (int z = 0; z < spilt.length; z++) {
                                                            itemsId[z] = spilt[z].trim();
                                                        }
                                                        controlObject.setSearchItemIds(Arrays.asList(itemsId));
                                                    }else if(Opton.getNodeName().trim().equalsIgnoreCase("GridColumnSettings")){
                                                        List<GridColumnSettings> gridColumnSettings=new ArrayList<>();
                                                        for (int col = 0; col < Opton.getChildNodes().getLength(); col++) {
                                                            NodeList colItem= Opton.getChildNodes().item(col).getChildNodes();
                                                            GridColumnSettings gridColumnSettings1=new GridColumnSettings();
                                                            for (int l = 0; l < colItem.getLength(); l++) {
                                                                Node colSetting = colItem.item(l);
                                                                if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlId")) {
                                                                    gridColumnSettings1.setControlId(colSetting.getTextContent().trim());
                                                                }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlName")) {
                                                                    gridColumnSettings1.setControlName(colSetting.getTextContent().trim());
                                                                }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlWidth")) {
                                                                    gridColumnSettings1.setControlWidth(colSetting.getTextContent().trim());
                                                                }else if (colSetting.getNodeName().trim().equalsIgnoreCase("ControlColor")) {
                                                                    gridColumnSettings1.setControlColor(colSetting.getTextContent().trim());
                                                                } else if (colSetting.getNodeName().trim().equalsIgnoreCase("EnabelSorting")) {
                                                                    gridColumnSettings1.setEnableSorting(Boolean.parseBoolean(colSetting.getTextContent().trim()));
                                                                }

                                                            }
                                                            gridColumnSettings.add(gridColumnSettings1);
                                                        }
                                                        controlObject.setGridColumnSettings(gridColumnSettings);
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode,controlObject);
                                        if (((Element) ControlNode).getElementsByTagName("GridFormControls").getLength() == 0) {
                                        } else {
                                            Node node = ((Element) ControlNode).getElementsByTagName("GridFormControls").item(0);

                                            controlObject.setSubFormControlList(getSubFormControlList(node, true));
                                        }

                                        break;
                                    case AppConstants.CONTROL_TYPE_DATA_VIEWER:
                                        try {
                                            controlObject.setControlCategory("advanced");
                                            controlObject.setDataViewer_UI_Pattern(((Element) ControlNode).getAttribute("UIPattern").trim());
                                            controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                            controlObject.setLazyLoadingEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("LazyLoading").trim()));
                                            if (controlObject.isLazyLoadingEnabled()) {
                                                controlObject.setThreshold(((Element) ControlNode).getAttribute("Threshold").trim());
                                            }
                                            controlObject.setDataViewer_searchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("searchEnabled").trim()));
                                            controlObject.setDataViewer_HeaderSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("HeaderSearchEnabled").trim()));
                                            controlObject.setDataViewer_SubHeaderSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("SubHeaderSearchEnabled").trim()));
                                            controlObject.setDataViewer_DescriptionSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("DescriptionSearchEnabled").trim()));
                                            controlObject.setDataViewer_CornerSearchEnabled(Boolean.parseBoolean(((Element) ControlNode).getAttribute("CornerSearchEnabled").trim()));

                                            controlObject.setImageSpecificationType(((Element) ControlNode).getAttribute("ImageSpecType").trim());
                                            if (((Element) ControlNode).getAttribute("ImageSpecType").trim().equalsIgnoreCase("Custom width and height in DP")) {
                                                controlObject.setImageWidth(((Element) ControlNode).getAttribute("ImageWidth").trim());
                                                controlObject.setImageHeight(((Element) ControlNode).getAttribute("ImageHeight").trim());
                                            }

                                            if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                            } else {

                                                NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                                if (OptonsList != null && OptonsList.getLength() > 0) {
                                                    for (int k = 0; k < OptonsList.getLength(); k++) {
                                                        Node Opton = OptonsList.item(k);
                                                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                                controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                                controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("HorizontalScroll")) {
                                                                controlObject.setEnableHorizontalScroll(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            if (((Element) ControlNode).getElementsByTagName("DisplaySettings").getLength() == 0) {

                                            } else {

                                                NodeList DisplayList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                                if (DisplayList != null && DisplayList.getLength() > 0) {
                                                    for (int k = 0; k < DisplayList.getLength(); k++) {
                                                        Node Display = DisplayList.item(k);
                                                        if (Display.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (Display.getNodeName().trim().equalsIgnoreCase("CornerShape")) {
                                                                controlObject.setDataViewer_Shape(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("DefaultImage")) {
                                                                controlObject.setDataViewer_DefualtImage_path(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("DefaultProfileImage")) {
                                                                controlObject.setDataViewer_DefualtImage_path(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("FrameBG_HexColor")) {
                                                                controlObject.setDataViewer_FrameBG_HexColor(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("Header_HexColor")) {
                                                                controlObject.setDataViewer_Header_HexColor(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("SubHeader_HexColor")) {
                                                                controlObject.setDataViewer_SubHeader_HexColor(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("Description_HexColor")) {
                                                                controlObject.setDataViewer_Description_HexColor(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("DateTime_HexColor")) {
                                                                controlObject.setDataViewer_DateTime_HexColor(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("FrameBG_HexColorTwo")) {
                                                                controlObject.setDataViewer_FrameBG_HexColorTwo(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("Item_HexColor")) {
                                                                controlObject.setDataViewer_Item_HexColor(Display.getTextContent().trim());
                                                            } else if (Display.getNodeName().trim().equalsIgnoreCase("Item_BGHexColor")) {
                                                                controlObject.setDataViewer_Item_BGHexColor(Display.getTextContent().trim());
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            setLangauge(ControlNode, controlObject);
                                        } catch (Exception e) {
                                            System.out.println("Error At Dataviewer==" + e.toString());
                                        }
                                        break;
                                    // Data Controls
                                    case AppConstants.CONTROL_TYPE_DATA_CONTROL:

                                        controlObject.setDataControlStatus(((Element) ControlNode).getAttribute("type").trim());
                                        controlObject.setDependentControl(((Element) ControlNode).getAttribute("dependentName").trim());
                                        controlObject.setDataControlName(((Element) ControlNode).getAttribute("dataControllName").trim());
                                        controlObject.setDataControlLocationType(((Element) ControlNode).getAttribute("locationType").trim());
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChange").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList datacontrolValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (datacontrolValidatorsList != null && datacontrolValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < datacontrolValidatorsList.getLength(); li++) {
                                                    Node Opton = datacontrolValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLSignatureMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("SUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                                Node Opton = dataControlOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("UserControlBinding")) {
                                                        controlObject.setEnableUserControlBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("PostLocationBinding")) {
                                                        controlObject.setEnablePostLocationBinding(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;


                                    case AppConstants.CONTROL_TYPE_MENU:

                                        controlObject.setControlCategory("advanced");
                                        controlObject.setTypeOfMenu(((Element) ControlNode).getAttribute("menuType").trim());
                                        controlObject.setNoOfRows(((Element) ControlNode).getAttribute("rows").trim());
                                        controlObject.setNoofColumns(((Element) ControlNode).getAttribute("columns").trim());
                                        controlObject.setTypeOfButton(((Element) ControlNode).getAttribute("buttonType").trim());

                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                            for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                                Node Opton = menuOptionsList.item(k);

                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("FitHeight")) {
                                                        controlObject.setFitToScreenHeight(Boolean.valueOf(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FitWidth")) {
                                                        controlObject.setFitToScreenWidth(Boolean.valueOf(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);
                                        Node menuControlsNode1 = ControlNode.getChildNodes().item(3);
                                        menuDisplaySettings(menuControlsNode1, controlObject);
                                        Log.d(TAG, "menuControlsNodeName1: " + menuControlsNode1.getNodeName());
                                        Node menuControlsNode = ControlNode.getChildNodes().item(2);
                                        Log.d(TAG, "menuControlsNodeName: " + menuControlsNode.getNodeName());
                                        controlObject.setMenuControlObjectList(getMenuControlList(menuControlsNode));
                                        break;
                                    case AppConstants.CONTROL_TYPE_SECTION:

                                        controlObject.setControlCategory("advanced");

                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList sectionOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                            for (int k = 0; k < sectionOptionsList.getLength(); k++) {
                                                Node Opton = sectionOptionsList.item(k);

                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Panel")) {
                                                        controlObject.setPanelType(Opton.getTextContent().trim());

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                                        controlObject.setGpsType(Opton.getTextContent().trim());

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                                        controlObject.setShowMap(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                                        controlObject.setCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                        controlObject.setSectionBGHexColor(Opton.getTextContent().trim());

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Mapheight")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("enableCollapseOrExpand")) {
                                                        controlObject.setEnableCollapseOrExpand(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }else if (Opton.getNodeName().trim().equalsIgnoreCase("MakeItAsPopup")) {
                                                        controlObject.setMakeItAsPopup(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        Controls_list.add(controlObject);

                                        Node sectionNode = ControlNode.getChildNodes().item(2);
                                        Log.d(TAG, "sectionControlsNodeName: " + sectionNode.getNodeName());
                                        if (sectionNode != null) {
                                            controlObject.setSectionControlList(getSectionControlsList(sectionNode));
//                                            getSectionControlsList(sectionNode,Controls_list);
                                        }
                                        break;

                                    case AppConstants.CONTROL_TYPE_MAP:
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        controlObject.setMapView(((Element) ControlNode).getAttribute("mapView").trim());

                                        if (((Element) ControlNode).hasAttribute("mapViewType")) {
                                            controlObject.setMapViewType(((Element) ControlNode).getAttribute("mapViewType").trim());
                                        }

                                        if (((Element) ControlNode).getElementsByTagName("ItemsList").getLength() == 0) {

                                        } else {

                                            NodeList itemsList = ((Element) ControlNode).getElementsByTagName("ItemsList").item(0).getChildNodes();

                                            List<RenderingType> renderingTypeList = new ArrayList<RenderingType>();

                                            for (int k = 0; k < itemsList.getLength(); k++) {
                                                Node Items = itemsList.item(k);

                                                RenderingType renderingType = new RenderingType();

                                                String type = ((Element) Items).getAttribute("type");

                                                renderingType.setType(type);

                                                List<String> itemValues = new ArrayList<String>();

                                                if (Items.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Items.getNodeName().trim().equalsIgnoreCase("Items")) {
                                                        NodeList itemList = Items.getChildNodes();

                                                        for (int p = 0; p < itemList.getLength(); p++) {
                                                            Node item = itemList.item(p);

                                                            if (item.getNodeType() == Node.ELEMENT_NODE) {
                                                                if (item.getNodeName().trim().equalsIgnoreCase("Item")) {
                                                                    itemValues.add(item.getTextContent().trim());
//                                                                    itemValues.add("17.7340891,83.3183981");
                                                                }

                                                            }

                                                        }

                                                    }
                                                }

                                                renderingType.setItem(itemValues);

                                                renderingTypeList.add(renderingType);
                                            }

                                            controlObject.setRenderingTypeList(renderingTypeList);
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                            for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                                Node Opton = menuOptionsList.item(k);

                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomControls")) {
                                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                                        controlObject.setMapIcon(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                                        controlObject.setBaseMap(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                                        controlObject.setShowCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapHeight")) {
                                                        controlObject.setMapHeight(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    // asdf
                                    case AppConstants.CONTROL_TYPE_CALENDAR_EVENT:
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("CalendarEvents").getLength() == 0) {

                                        } else {
                                            NodeList calendarEventsList = ((Element) ControlNode).getElementsByTagName("CalendarEvents").item(0).getChildNodes();

                                            List<CalendarEvent> calendarEventList = new ArrayList<CalendarEvent>();

                                            for (int k = 0; k < calendarEventsList.getLength(); k++) {
                                                Node calendarEvent = calendarEventsList.item(k);

                                                CalendarEvent calendarEventObj = new CalendarEvent();

                                                if (calendarEvent.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (calendarEvent.getNodeName().trim().equalsIgnoreCase("CalendarEvent")) {
                                                        Element calendarEventElement = ((Element) calendarEvent);

                                                        String eventType = calendarEventElement.getAttribute("multipleDays");

                                                        calendarEventObj.setEventType(eventType);

//                                                        if(eventType.equalsIgnoreCase("true"))
                                                        if (eventType.equalsIgnoreCase("Multiple Dates")) {

                                                            NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                                            Element paramOne = (Element) paramOneList.item(0);
                                                            String startDate = getCharacterDataFromElement(paramOne);

                                                            NodeList paramTwoList = calendarEventElement.getElementsByTagName("Param");
                                                            Element paramTwo = (Element) paramTwoList.item(1);
                                                            String endDate = getCharacterDataFromElement(paramTwo);

                                                            NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                                            Element paramThree = (Element) paramThreeList.item(0);

                                                            String message = getCharacterDataFromElement(paramThree);

                                                            calendarEventObj.setEventDates(startDate + "$" + endDate);
                                                            calendarEventObj.setEventMessage(message);

                                                        }

                                                        if (eventType.equalsIgnoreCase("Single Date")) {
                                                            NodeList paramOneList = calendarEventElement.getElementsByTagName("Param");
                                                            Element paramOne = (Element) paramOneList.item(0);
                                                            String startDate = getCharacterDataFromElement(paramOne);

                                                            NodeList paramThreeList = calendarEventElement.getElementsByTagName("Message");
                                                            Element paramThree = (Element) paramThreeList.item(0);
                                                            String message = getCharacterDataFromElement(paramThree);

                                                            calendarEventObj.setEventDates(startDate);
                                                            calendarEventObj.setEventMessage(message);

                                                        }

                                                    }

                                                }

                                                calendarEventList.add(calendarEventObj);

                                            }

                                            controlObject.setCalendarEventType(calendarEventList);
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList dataControlOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                            for (int k = 0; k < dataControlOptonsList.getLength(); k++) {
                                                Node Opton = dataControlOptonsList.item(k);

                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("WeekDays")) {
                                                        controlObject.setWeekDays(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));

                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_LiveTracking:
                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onFocusExists").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));

                                        controlObject.setLocationMode(((Element) ControlNode).getAttribute("locationMode").trim());
                                        if (controlObject.getLocationMode().equalsIgnoreCase(AppConstants.LOCATION_MODE_SATELLITE)) {
                                            controlObject.setAccuracy(((Element) ControlNode).getAttribute("accuracy").trim());
                                        }
                                        controlObject.setTypeOfInterval(((Element) ControlNode).getAttribute("typeOfInterval").trim());

                                        if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_distance)) {
                                            controlObject.setDistanceInMeters(((Element) ControlNode).getAttribute("distanceInMeters").trim());
                                        } else if (controlObject.getTypeOfInterval().equalsIgnoreCase(AppConstants.Interval_time)) {
                                            controlObject.setTimeInMinutes(((Element) ControlNode).getAttribute("timeInMinutes").trim());
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList imageValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (imageValidatorsList != null && imageValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < imageValidatorsList.getLength(); li++) {
                                                    Node Opton = imageValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("ImageViewMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                        controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            Log.d("IUniqueErrorMandatory", controlObject.getMandatoryFieldError());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList menuOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();

                                            for (int k = 0; k < menuOptionsList.getLength(); k++) {
                                                Node Opton = menuOptionsList.item(k);

                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("ZoomControls")) {
                                                        controlObject.setZoomControl(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapIcon")) {
                                                        controlObject.setMapIcon(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BaseMap")) {
                                                        controlObject.setBaseMap(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ShowCurrentLocation")) {
                                                        controlObject.setShowCurrentLocation(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("MapHeight")) {
                                                        controlObject.setMapHeight(Opton.getTextContent().trim());
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }
                                            }
                                            controlObject.setBaseMap("Google");
                                            controlObject.setZoomControl(Boolean.parseBoolean("true"));
                                            controlObject.setShowCurrentLocation(Boolean.parseBoolean("true"));
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_USER:

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setControlCategory("advanced");

                                        Node userTypeNode = ((Element) ControlNode).getElementsByTagName("UserType").item(0);
                                        controlObject.setUserType(userTypeNode.getTextContent());

                                        if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                                            Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                                            NodeList groupNodes = Groups.getChildNodes();
                                            List<UserGroup> groupList = new ArrayList<>();

                                            for (int k = 0; k < groupNodes.getLength(); k++) {

                                                Node group = groupNodes.item(k);

                                                UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                                groupList.add(userGroup);

                                            }

                                            controlObject.setGroups(groupList);
                                        }

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                                    Node Opton = validatorsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                                    }
                                                }
                                            }
                                        }
//
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_POST:

                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setControlCategory("advanced");
                                        Node postTypeNode = ((Element) ControlNode).getElementsByTagName("PostType").item(0);
                                        controlObject.setUserType(postTypeNode.getTextContent());

                                        if (((Element) ControlNode).getElementsByTagName("Groups").getLength() > 0) {

                                            Node Groups = ((Element) ControlNode).getElementsByTagName("Groups").item(0);

                                            NodeList groupNodes = Groups.getChildNodes();
                                            List<UserGroup> groupList = new ArrayList<>();

                                            for (int k = 0; k < groupNodes.getLength(); k++) {

                                                Node group = groupNodes.item(k);

                                                UserGroup userGroup = new UserGroup(((Element) group).getAttribute("Id"), group.getTextContent());

                                                groupList.add(userGroup);


                                            }

                                            controlObject.setGroups(groupList);
                                        }


                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                                    Node Opton = validatorsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }/* else if (eElement.getAttribute("type").equalsIgnoreCase("unique")) {
//                                                            controlObject.setUniqueField(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    controlObject.setUniqueField(true);
                                    Log.d("XMLUniqueError", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                    controlObject.setUniqueFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                }*/
                                                    }
                                                }
                                            }
                                        }
//
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_CHART:

                                        controlObject.setControlCategory("advanced");
                                        controlObject.setChartType(((Element) ControlNode).getAttribute("chartType").trim());

                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideLegends")) {
                                                            controlObject.setHideLegends(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_VIEWFILE:

                                        controlObject.setControlCategory("standard");
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        controlObject.setFilelink(((Element) ControlNode).getAttribute("Filelink").trim());


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_filelink")) {
                                                            controlObject.setHide_filelink(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_PROGRESS:

                                        controlObject.setControlCategory("visualization");
                                        controlObject.setProgress_maxvalue(((Element) ControlNode).getAttribute("maxValue").trim());
                                        controlObject.setProgress_actualvalue(((Element) ControlNode).getAttribute("actualValue").trim());
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));

                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_progress_actualvalue")) {
                                                            controlObject.setHide_progress_actualvalue(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Hide_progress_maxvalue")) {
                                                            controlObject.setHide_progress_maxvalue(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName")|| Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_COUNT_DOWN_TIMER:

                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        controlObject.setControlCategory("standard");
                                        controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                                        controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                                        controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                                            controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                                            controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_COUNT_UP_TIMER:

                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        controlObject.setControlCategory("standard");
                                        controlObject.setTimer_hr(((Element) ControlNode).getAttribute("timer_hr").trim());
                                        controlObject.setTimer_min(((Element) ControlNode).getAttribute("timer_min").trim());
                                        controlObject.setTimer_sec(((Element) ControlNode).getAttribute("timer_sec").trim());


                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerFormatOptions")) {
                                                            controlObject.setTimerFormatOptions(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerAutoStart")) {
                                                            controlObject.setTimerAutoStart(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_AUTO_GENERATION:

                                        controlObject.setControlCategory("standard");

                                        NodeList ControlNodeList = ControlNode.getChildNodes();
                                        for (int n = 0; n < ControlNodeList.getLength(); n++) {

                                            Node item = ControlNodeList.item(n);
                                            if (item.getNodeName().equalsIgnoreCase("Prefix")) {
                                                controlObject.setPreFixValue(((Element) item).getAttribute("name").trim());
                                            } else if (item.getNodeName().equalsIgnoreCase("Suffix")) {
                                                controlObject.setSuffixValue(((Element) item).getAttribute("name").trim());
                                            } else if (item.getNodeName().equalsIgnoreCase("Suffix1")) {
                                                controlObject.setSuffix1Value(((Element) item).getAttribute("name").trim());
                                            }
                                        }

                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_TIME:
//                controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onChangeEvent").trim()));
                                        controlObject.setControlCategory("standard");
                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList calendarValidatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (calendarValidatorsList != null && calendarValidatorsList.getLength() > 0) {
                                                for (int li = 0; li < calendarValidatorsList.getLength(); li++) {
                                                    Node Opton = calendarValidatorsList.item(li);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            Log.d("XMLTimeMandatory", eElement.getElementsByTagName("Message").item(0).getTextContent());
//                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            controlObject.setNullAllowed(true);
                                                            controlObject.setMandatoryTime(true);
                                                            controlObject.setMandatoryTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("betweenTimes")) {
                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setBetweenStartEndTime(true);
                                                            controlObject.setBetweenStartTime(eElement.getElementsByTagName("Param").item(1).getTextContent());
                                                            controlObject.setBetweenEndTime(eElement.getElementsByTagName("Param").item(2).getTextContent());
                                                            controlObject.setBetweenStartEndTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("beforeCurrentTime")) {

                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                            controlObject.setBeforeCurrentTime(true);
                                                            controlObject.setBeforeCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        } else if (eElement.getAttribute("type").equalsIgnoreCase("afterCurrentTime")) {

                                                            Log.d("XMLCalendar", eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setAfterCurrentTime(true);
                                                            controlObject.setAfterCurrentTimeErrorMessage(eElement.getElementsByTagName("Message").item(0).getTextContent());

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {
                                            NodeList DateOptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < DateOptonsList.getLength(); k++) {
                                                Node Opton = DateOptonsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("CurrentTime")) {
                                                        controlObject.setCurrentTime(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetYearFromSelection(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormat")) {
                                                        controlObject.setTimeFormat(Opton.getTextContent().trim());
//                                                    controlObject.setGetMonthFromSelection(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimeFormatOptions")) {
                                                        controlObject.setTimeFormatOptions(Opton.getTextContent().trim());
//                                                    controlObject.setGetDayFromSelection(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setGetDateFromSelection(true);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("ReadOnly")) {
                                                        controlObject.setReadOnly(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setReadOnly(false);
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                    controlObject.setInvisible(false);
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;

                                    case AppConstants.CONTROL_TYPE_DATA_TABLE:
                                        controlObject.setControlCategory("advanced");
                                        //controlObject.setDataTableRowHeight(((Element) ControlNode).getAttribute("rowHeight").trim());
                                        controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));
                                        NodeList collumnHeadersNodeLIst = ((Element) ControlNode).getElementsByTagName("ColumnHeaders").item(0).getChildNodes();
                                        List<String> columnHeaders = new ArrayList<>();
                                        for (int c = 0; c < collumnHeadersNodeLIst.getLength(); c++) {
                                            Node cNode = collumnHeadersNodeLIst.item(c);
                                            if (cNode.getNodeType() == Node.ELEMENT_NODE) {
                                                if (cNode.getNodeName().trim().equalsIgnoreCase("ColumnHeaderId")) {

                                                    columnHeaders.add(cNode.getTextContent().trim());

                                                }
                                            }

                                        }
                                        controlObject.setColumnHeaders(columnHeaders);
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                                            controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("EnableSearch")) {
                                                            controlObject.setDataTable_EnableSearch(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadExcel")) {
                                                            controlObject.setDownloadExcel(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("DownloadPDF")) {
                                                            controlObject.setDownloadPDF(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                        //row & col
                                                        else if (Opton.getNodeName().trim().equalsIgnoreCase("colWidthType")) {
                                                            controlObject.setDataTable_colWidthType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colWidthSize")) {
                                                            controlObject.setDataTable_colWidthSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colHeightType")) {
                                                            controlObject.setDataTable_colHeightType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colHeightSize")) {
                                                            controlObject.setDataTable_colHeightSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextSize")) {
                                                            controlObject.setDataTable_colTextSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextStyle")) {
                                                            controlObject.setDataTable_colTextStyle(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colTextColor")) {
                                                            controlObject.setDataTable_colTextColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colAlignment")) {
                                                            controlObject.setDataTable_colAlignment(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colColor")) {
                                                            controlObject.setDataTable_colColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("colBorder")) {
                                                            controlObject.setDataTable_colBorder(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideColumnNames")) {
                                                            controlObject.setHideColumnNames(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeigthType")) {
                                                            controlObject.setDataTable_rowHeigthType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowHeightSize")) {
                                                            controlObject.setDataTable_rowHeightSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextSize")) {
                                                            controlObject.setDataTable_rowTextSize(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextStyle")) {
                                                            controlObject.setDataTable_rowTextStyle(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowTextColor")) {
                                                            controlObject.setDataTable_rowTextColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowAlignment")) {
                                                            controlObject.setDataTable_rowAlignment(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColorType")) {
                                                            controlObject.setDataTable_rowColorType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor1")) {
                                                            controlObject.setDataTable_rowColor1(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("rowColor2")) {
                                                            controlObject.setDataTable_rowColor2(Opton.getTextContent().trim());
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowsColoring")) {
                                                            controlObject.setDataTable_ParticularRowsColoring(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowsColoringIds")) {
                                                            controlObject.setDataTable_ParticularRowsColoringIds(Opton.getTextContent().trim());
                                                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ParticularRowColor")) {
                                                            controlObject.setDataTable_ParticularRowColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderType")) {
                                                            controlObject.setDataTable_BorderType(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                                                            controlObject.setDataTable_BorderColor(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderThickness")) {
                                                            controlObject.setDataTable_BorderThickness(Opton.getTextContent().trim());
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("isPaging")) {
                                                            controlObject.setDataTable_isPaging(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        break;
                                    case AppConstants.CONTROL_TYPE_SUBMIT_BUTTON:
                                        AppObject.setApp_OnSubmitEvent(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSubmitEvent").trim()));
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {
                                        } else {
                                            NodeList buttonOptionsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            for (int k = 0; k < buttonOptionsList.getLength(); k++) {
                                                Node Opton = buttonOptionsList.item(k);
                                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                    if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                        controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                        controlObject.setDisableClick(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                    }
                                                }


                                            }
                                        }
                                        NodeList subbuttonDSList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                                        for (int k = 0; k < subbuttonDSList.getLength(); k++) {
                                            Node Opton = subbuttonDSList.item(k);
                                            if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                                                    Log.d("ButtonDisplaySettings", Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                                                    controlObject.setShape(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                                                    controlObject.setTypeOfButton(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                                                    controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                                    controlObject.setIconPath(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontBackgroundColorRequired")) {
                                                    controlObject.setEnableChangeButtonColor(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                                    controlObject.setButtonHexColor(Opton.getTextContent().trim());
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("BGColorRequired")) {
                                                    controlObject.setEnableChangeButtonColorBG(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                } else if (Opton.getNodeName().trim().equalsIgnoreCase("SubmitButtonBGColor")) {
                                                    controlObject.setTextHexColorBG(Opton.getTextContent().trim());
                                                }
                                            }
                                        }


                                        NodeList chaildnodes = ControlNode.getChildNodes();
                                        for (int x = 0; x < chaildnodes.getLength(); x++) {
                                            if (chaildnodes.item(x).getNodeName().equalsIgnoreCase("MessageSettings")) {
                                                if (chaildnodes.item(x).getChildNodes().getLength() != 0) {
                                                    NodeList MessageSettingsList = chaildnodes.item(x).getChildNodes();

                                                    for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                                                        Node MessageSettings = MessageSettingsList.item(k);
                                                        if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                                                            if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                                                                boolean SuccessEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                                AppObject.setSubmitButtonSuccessMessageIsEnable(SuccessEnable);

                                                                if (SuccessEnable) {
                                                                    String MessageSuccess_DisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                    AppObject.setSubmitButtonMessageSuccess_DisplayType(MessageSuccess_DisplayType);
                                                                    AppObject.setSubmitButtonSuccessMessage(MessageSettings.getTextContent().trim());
                                                                }

                                                            } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                                                                boolean FailEnable = Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                                AppObject.setSubmitButtonFailMessageIsEnable(FailEnable);

                                                                if (FailEnable) {
                                                                    String MessageDisplayType = ((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                    AppObject.setSubmitButtonMessageFail_DisplayType(MessageDisplayType);
                                                                    AppObject.setSubmitButtonFailMessage(MessageSettings.getTextContent().trim());
                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                                break;
                                            }
                                        }

                                           /* if (((Element) ControlNode).getElementsByTagName("MessageSettings").getLength() == 0) {

                                            }else {
                                                NodeList MessageSettingsList = ((Element) ControlNode).getElementsByTagName("MessageSettings");
                                                for (int k = 0; k < MessageSettingsList.getLength(); k++) {
                                                    Node MessageSettings = MessageSettingsList.item(k);
                                                    if (MessageSettings.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (MessageSettings.getNodeName().trim().equalsIgnoreCase("SuccessMessage")) {
                                                            boolean SuccessEnable=Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                            AppObject.setSubmitButtonSuccessMessageIsEnable(SuccessEnable);

                                                            if(SuccessEnable){
                                                                String MessageSuccess_DisplayType =((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                AppObject.setSubmitButtonMessageSuccess_DisplayType(MessageSuccess_DisplayType);
                                                                AppObject.setSubmitButtonSuccessMessage(MessageSettings.getTextContent().trim());
                                                            }

                                                        } else if (MessageSettings.getNodeName().trim().equalsIgnoreCase("FailMessage")) {
                                                            boolean FailEnable=Boolean.parseBoolean(((Element) MessageSettings).getAttribute("Enable"));
                                                            AppObject.setSubmitButtonFailMessageIsEnable(FailEnable);

                                                            if(FailEnable){
                                                                String MessageDisplayType =((Element) MessageSettings).getAttribute("MessageDisplayType");
                                                                AppObject.setSubmitButtonMessageFail_DisplayType(MessageDisplayType);
                                                                AppObject.setSubmitButtonFailMessage(MessageSettings.getTextContent().trim());
                                                            }
                                                        }
                                                    }
                                                }
                                            }*/

                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        if (AppObject.getApp_OnSubmitEvent()) {
                                            setEvents_submit(AppObject, ControlNode);
                                        } else {
                                            AppObject.setDefaultActionForSubmit(true);
                                        }

                                        break;
                                    case AppConstants.CONTROL_TYPE_AUTO_COMPLETION:

                                        controlObject.setOnFocusEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onKeyEvent").trim()));
                                        controlObject.setOnChangeEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onSelectEvent").trim()));
                                        controlObject.setControlCategory("advanced");
                                        Node MinCharacterNode = ((Element) ControlNode).getElementsByTagName("MinCharacter").item(0);
                                        controlObject.setMinChartoSeearch(Integer.parseInt(MinCharacterNode.getTextContent()));

                                        Node SearchKeyAtNode = ((Element) ControlNode).getElementsByTagName("SearchKeyAt").item(0);
                                        controlObject.setSearchKeyAt(SearchKeyAtNode.getTextContent());

                                        if (((Element) ControlNode).getElementsByTagName("Validators").getLength() == 0) {
                                            controlObject.setNullAllowed(false);
                                        } else {
                                            NodeList validatorsList = ((Element) ControlNode).getElementsByTagName("Validators").item(0).getChildNodes();
                                            if (validatorsList != null && validatorsList.getLength() > 0) {
                                                for (int k = 0; k < validatorsList.getLength(); k++) {
                                                    Node Opton = validatorsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        Element eElement = (Element) Opton;
                                                        Log.d("XMLHELPER_Type", eElement.getAttribute("type"));
                                                        if (eElement.getAttribute("type").equalsIgnoreCase("mandatory")) {
                                                            controlObject.setNullAllowed(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                                            Log.d("XML_TI_MandatoryError", Boolean.parseBoolean(Opton.getTextContent().trim()) + "," + eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                            controlObject.setMandatoryFieldError(eElement.getElementsByTagName("Message").item(0).getTextContent());
                                                        }
                                                    }
                                                }
                                            }
                                        }
//
                                        if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                                        } else {

                                            NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                                            if (OptonsList != null && OptonsList.getLength() > 0) {
                                                for (int k = 0; k < OptonsList.getLength(); k++) {
                                                    Node Opton = OptonsList.item(k);
                                                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                                        if (Opton.getNodeName().trim().equalsIgnoreCase("Invisible")) {
                                                            controlObject.setInvisible(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setInvisible(false);
                                                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Disable")) {
                                                            controlObject.setDisable(Boolean.parseBoolean(Opton.getTextContent().trim()));
//                                                        controlObject.setDisable(false);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        setLangauge(ControlNode, controlObject);
                                        mDisplaySettings(ControlNode, controlObject);
                                        setRequiredUI(ControlNode, controlObject);
                                        break;
                                    default:

                                }


                                if (controlObject.isOnFocusEventExists() || controlObject.isOnChangeEventExists() || controlObject.isOnClickEventExists() || controlObject.isOnAddRowEventExists() || controlObject.isOnDeleteRowEventExists() || controlObject.isOnMapMarkerClickEventExists()) {
                                    setEvents(controlObject, ControlNode);

                                }
                                //jay
                                if (((Element) ControlNode).getAttribute("bindValueType").length() > 0) {
                                    String bindValueType = ((Element) ControlNode).getAttribute("bindValueType").trim();
                                    String childOption = ((Element) ControlNode).getAttribute("childOption").trim();
                                    if (childOption.equalsIgnoreCase("true")) {
                                        Controls_list.add(controlObject);
                                    }
                                } else {
                                    Controls_list.add(controlObject);
                                }
                            }
                        }
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Events")) {
                        if (AppObject.getApp_OnLoadEvent() || AppObject.getApp_OnSubmitEvent()) {
                            setEventsForLoad(AppObject, nNode);
                        }
                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("TableSettings")) {

                        NodeList ControlNodeList = nNode.getChildNodes();
                        if (ControlNodeList.getLength() > 0) {


                            for (int j = 0; j < ControlNodeList.getLength(); j++) {
                                Node ControlNode = ControlNodeList.item(j);
                                if (ControlNode.getNodeName().equalsIgnoreCase("MainTableSettings")) {
                                    setTableSettingsObject(AppObject, null, ControlNode, 0, filterSubFormColumnsList);
                                } else if (ControlNode.getNodeName().equalsIgnoreCase("SubFormTableSettings")) {
                                    for (ControlObject controlObject : AppObject.getControls_list()) {
                                        String subFormName = ((Element) ControlNode).getAttribute("name").trim();
                                        if (controlObject.getControlName().equalsIgnoreCase(subFormName))
                                            setTableSettingsObject(null, controlObject, ControlNode, 1, filterSubFormColumnsList);
                                    }

                                }

                            }
                        }


                    } else if (nNode.getNodeName().trim().equalsIgnoreCase("Variables")) {
                        NodeList variablesChildList = nNode.getChildNodes();
                        List<Variable_Bean> listVaribles = new ArrayList<Variable_Bean>();
                        for (int variablesChildCnt = 0; variablesChildCnt < variablesChildList.getLength(); variablesChildCnt++) {
                            Variable_Bean variable_Bean = new Variable_Bean("", "", "");
                            Element variableElement = (Element) variablesChildList.item(variablesChildCnt);
                            NodeList paramOneList = variableElement.getElementsByTagName("Param");
                            Element paramOne = (Element) paramOneList.item(0);
                            String variableName = getCharacterDataFromElement(paramOne);
                            NodeList paramTwoList = variableElement.getElementsByTagName("Param");
                            Element paramTwo = (Element) paramTwoList.item(1);
                            String variableType = getCharacterDataFromElement(paramTwo);
                            NodeList paramThreeList = variableElement.getElementsByTagName("Param");
                            Element paramThree = (Element) paramThreeList.item(2);
                            String offlineVariable = getCharacterDataFromElement(paramThree);
                            variable_Bean.setOffline_Variable(Boolean.parseBoolean(offlineVariable));
                            variable_Bean.setVariable_Name(variableName);
                            variable_Bean.setVariable_Type(variableType);
                            listVaribles.add(variable_Bean);
                        }
                        AppObject.setList_Varibles(listVaribles);
                    }
                }
            }

        } catch (Exception E) {
            System.out.println("Error at parse==" + E.toString());
        }

        return AppObject;
    }

    public void mDisplaySettings(Node ControlNode, ControlObject controlObject) {
        try {
            if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0) != null) {
                NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
                if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                    for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                        Node Opton = DisplaySettingsList.item(k);
                        if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                            if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                                controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                                controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            /*if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME2")) {
                                controlObject.setTextHexColor("#5D5654"); // Brown
                            }else if (!themeNo.equalsIgnoreCase("") && themeNo.equalsIgnoreCase("THEME1")) {
                                controlObject.setTextHexColor("#5a636d"); // bluegray
                            }*/
//                            if (themeNo.equalsIgnoreCase("")) {
//                                    Log.d(TAG, "mDisplaySettingsThemeNo: "+themeNo+" - "+controlObject.getDisplayName());
////                                controlObject.setTextHexColor("#5D5654"); // Brown
//                                controlObject.setTextHexColor("#4CAE4C"); // ev_green
//                            }else {
//                                controlObject.setTextHexColor(Opton.getTextContent().trim());
//                            }
                                controlObject.setTextHexColor(Opton.getTextContent().trim());
                                Log.d("XMLDisplaySettings_M", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                                controlObject.setChartColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("ProgressColor")) {
                                controlObject.setProgressColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                            } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerColor")) {
                                controlObject.setTimerColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                            }
                        }
                    }
                }
            }
        }catch (Exception e){
            Log.getStackTraceString(e);
        }
    }

    public void mButtonDisplaySettings(Node ControlNode, ControlObject controlObject) {
        if (((Element) ControlNode).getElementsByTagName("ButtonDisplaySettings").getLength() != 0) {
            NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("ButtonDisplaySettings").item(0).getChildNodes();
            if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                    Node Opton = DisplaySettingsList.item(k);
                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                            controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                            controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            controlObject.setTextHexColor(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ChartColor")) {
                            controlObject.setChartColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("ProgressColor")) {
                            controlObject.setProgressColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("TimerColor")) {
                            controlObject.setTimerColorHex(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("TypeOfButton")) {
                            controlObject.setTypeOfButton(Opton.getTextContent().trim());
                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("Shape")) {
                            controlObject.setShape(Opton.getTextContent().trim());
                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("ControlAlignment")) {
                            controlObject.setButtonIconAlignment(Opton.getTextContent().trim());
                        }else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                            controlObject.setTextHexColorBG(Opton.getTextContent().trim());
                        }
                    }
                }
            }
        }

    }

    /*MenuContols*/
    private List<ControlObject> getMenuControlList(Node nNode) {

//        Log.d("GetMenuControlListItem", nNode.getNodeName());
        List<ControlObject> Controls_list = new ArrayList<ControlObject>();

        NodeList ControleNodeList = nNode.getChildNodes();
        try {
            for (int j = 0; j < ControleNodeList.getLength(); j++) {
                Log.d("GetMenuControlListItem", String.valueOf(j));
                Node ControlNode = ControleNodeList.item(j);
                if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {
                    Log.d(TAG, "ControlNodeName: " + ControlNode.getNodeName());
                    ControlObject controlObject = new ControlObject();
                    controlObject.setControlCategory(ControlNode.getNodeName());
                    controlObject.setControlTitle(ControlNode.getNodeName());
                    controlObject.setControlType(ControlNode.getNodeName());
                    controlObject.setControlID(((Element) ControlNode).getAttribute("controlName").trim());
                    controlObject.setDisplayName(((Element) ControlNode).getAttribute("displayName").trim());
                    controlObject.setControlName(((Element) ControlNode).getAttribute("controlName").trim());
//                    controlObject.setTypeOfButton(((Element) ControlNode).getAttribute("type").trim());
//                    controlObject.setTypeOfButton("3");

                    Log.d(TAG, "GetMenuControlListItemType" + ((Element) ControlNode).getAttribute("type").trim());
                    controlObject.setOnClickEventExists(Boolean.parseBoolean(((Element) ControlNode).getAttribute("onClickEvent").trim()));

                    if (((Element) ControlNode).getElementsByTagName("Options").getLength() == 0) {

                    } else {

                        NodeList OptonsList = ((Element) ControlNode).getElementsByTagName("Options").item(0).getChildNodes();
                        if (OptonsList != null && OptonsList.getLength() > 0) {
                            for (int k = 0; k < OptonsList.getLength(); k++) {
                                Node Opton = OptonsList.item(k);

                                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                                    if (Opton.getNodeName().trim().equalsIgnoreCase("IconUrl")) {
                                        controlObject.setIconPath(Opton.getTextContent().trim());

                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackgroundColor")) {
                                        Log.d(TAG, "GetMenuControlListBG: " + Opton.getTextContent().trim());
                                        controlObject.setButtonColor(Opton.getTextContent().trim());

                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("Radius")) {
                                        controlObject.setButtonRadius(Opton.getTextContent().trim());

                                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("HideDisplayName") || Opton.getNodeName().trim().equalsIgnoreCase("HideName")) {
                                        controlObject.setHideDisplayName(Boolean.parseBoolean(Opton.getTextContent().trim()));
                                    }
                                }

                            }
                        }
                    }

                    mDisplaySettings(ControlNode, controlObject);


                    if (controlObject.isOnClickEventExists() || controlObject.isOnMapMarkerClickEventExists()) {
                        setEvents(controlObject, ControlNode);
                    }

                    Controls_list.add(controlObject);
                }
            }
        } catch (Exception e) {
            Log.d(TAG, "getMenuControlListException" + e.toString());
        }

        return Controls_list;
    }

    /*Menu Display settings*/
    public void menuDisplaySettings(Node ControlNode, ControlObject controlObject) {
//        if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(3) != null) {
        NodeList DisplaySettingsList = ControlNode.getChildNodes();
        if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
            for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                Node Opton = DisplaySettingsList.item(k);
                if (Opton.getNodeType() == Node.ELEMENT_NODE) {

                    if (Opton.getNodeName().trim().equalsIgnoreCase("Border")) {
                        Log.d("XMLDS_Border", Opton.getTextContent().trim());
                        controlObject.setTypeOfBorder(Integer.parseInt(Opton.getTextContent().trim()));
//                        controlObject.setTypeOfBorder(2);
                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                        Log.d("XMLDS_BC", Opton.getTextContent().trim());
                        controlObject.setBorderHexColor(Opton.getTextContent().trim());
                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderMargin")) {
                        Log.d(TAG, "XMLDS_BorderMargin: " + Opton.getTextContent().trim());
                        String[] borderMarginAry = Opton.getTextContent().trim().split("\\,");
                       /* if (borderMarginAry[0]== null) {
                            controlObject.setBorderMarginLeft("0");
                        } else {
                            controlObject.setBorderMarginLeft(borderMarginAry[0]);
                        }
                        if (borderMarginAry[1] == null) {
                            controlObject.setBorderMarginRight("0");
                        } else {
                            controlObject.setBorderMarginRight(borderMarginAry[1]);
                        }
                        if (borderMarginAry[2] == null) {
                            controlObject.setBorderMarginTop("0");
                        } else {
                            controlObject.setBorderMarginTop(borderMarginAry[2]);
                        }
                        if (borderMarginAry[3] == null) {
                            controlObject.setBorderMarginBottom("0");
                        } else {
                            controlObject.setBorderMarginBottom(borderMarginAry[3]);
                        }*/
                        if (borderMarginAry[0].equals("null")) {
                            controlObject.setBorderMarginLeft("0");
                        } else {
                            controlObject.setBorderMarginLeft(borderMarginAry[0]);
                        }
                        if (borderMarginAry[1].equals("null")) {
                            controlObject.setBorderMarginRight("0");
                        } else {
                            controlObject.setBorderMarginRight(borderMarginAry[1]);
                        }
                        if (borderMarginAry[2].equals("null")) {
                            controlObject.setBorderMarginTop("0");
                        } else {
                            controlObject.setBorderMarginTop(borderMarginAry[2]);
                        }
                        if (borderMarginAry[3].equals("null")) {
                            controlObject.setBorderMarginBottom("0");
                        } else {
                            controlObject.setBorderMarginBottom(borderMarginAry[3]);
                        }

                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderPadding")) {
                        Log.d(TAG, "XMLDS_BorderPadding: " + Opton.getTextContent().trim());
                        String[] borderPaddingAry = Opton.getTextContent().trim().split("\\,");

                /*        if (borderPaddingAry[0] == null) {
                            controlObject.setBorderPaddingLeft("0");
                        } else {
                            controlObject.setBorderPaddingLeft(borderPaddingAry[0]);
                        }
                        if (borderPaddingAry[1] == null) {
                            controlObject.setBorderPaddingRight("0");
                        } else {
                            controlObject.setBorderPaddingRight(borderPaddingAry[1]);
                        }
                        if (borderPaddingAry[2] == null) {
                            controlObject.setBorderPaddingTop("0");
                        } else {
                            controlObject.setBorderPaddingTop(borderPaddingAry[2]);
                        }
                        if (borderPaddingAry[3]== null) {
                            controlObject.setBorderPaddingBottom("0");
                        } else {
                            controlObject.setBorderPaddingBottom(borderPaddingAry[3]);
                        }*/
                        if (borderPaddingAry[0].equals("null")) {
                            controlObject.setBorderPaddingLeft("0");
                        } else {
                            controlObject.setBorderPaddingLeft(borderPaddingAry[0]);
                        }
                        if (borderPaddingAry[1].equals("null")) {
                            controlObject.setBorderPaddingRight("0");
                        } else {
                            controlObject.setBorderPaddingRight(borderPaddingAry[1]);
                        }
                        if (borderPaddingAry[2].equals("null")) {
                            controlObject.setBorderPaddingTop("0");
                        } else {
                            controlObject.setBorderPaddingTop(borderPaddingAry[2]);
                        }
                        if (borderPaddingAry[3].equals("null")) {
                            controlObject.setBorderPaddingBottom("0");
                        } else {
                            controlObject.setBorderPaddingBottom(borderPaddingAry[3]);
                        }

                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                        Log.d("XMLDS_FSZ", Opton.getTextContent().trim());
                        controlObject.setTextSize(Opton.getTextContent().trim());
                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                        controlObject.setTextStyle(Opton.getTextContent().trim());
                        Log.d("XMLDS_FS", Opton.getTextContent().trim());
                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                        Log.d("XMLDS_FC", Opton.getTextContent().trim());
                        controlObject.setTextHexColor(Opton.getTextContent().trim());
                    }

                    //

/*
                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                            controlObject.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                            controlObject.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            controlObject.setTextHexColor(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("Border")) {
                            controlObject.setTypeOfBorder(Integer.parseInt(Opton.getTextContent().trim()));
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderColor")) {
                            controlObject.setBorderHexColor(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderMargin")) {
                            Log.d("XMLDSMenuMargin", Opton.getTextContent().trim());
                            controlObject.setBorderMarginLeft(Opton.getTextContent().trim());
                            controlObject.setBorderMarginTop(Opton.getTextContent().trim());
                            controlObject.setBorderMarginRight(Opton.getTextContent().trim());
                            controlObject.setBorderMarginBottom(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BorderPadding")) {
                            controlObject.setBorderPaddingLeft(Opton.getTextContent().trim());
                            controlObject.setBorderPaddingTop(Opton.getTextContent().trim());
                            controlObject.setBorderPaddingRight(Opton.getTextContent().trim());
                            controlObject.setBorderPaddingBottom(Opton.getTextContent().trim());

//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        }*/
                }
            }
        }
//        }
    }

    public MultiFormApp XML_MultiFormApp(String XML_STRING) {

        LinkedHashMap<String, String> innerFormsDesignMap = new LinkedHashMap<>();
        MultiFormApp multiFormApp = new MultiFormApp();

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder;
            builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader(XML_STRING)));
            doc.getDocumentElement().normalize();

            multiFormApp.setAppName(((Element) doc.getChildNodes().item(0)).getAttribute("name"));
            multiFormApp.setAppDescription(((Element) doc.getChildNodes().item(0)).getAttribute("appDescription"));
            multiFormApp.setAppIconURL(((Element) doc.getChildNodes().item(0)).getAttribute("iconURL"));
            if (((Element) doc.getChildNodes().item(0)).hasAttribute("home")) {
                multiFormApp.setHome(((Element) doc.getChildNodes().item(0)).getAttribute("home"));
            }
            if (((Element) doc.getChildNodes().item(0)).hasAttribute("homeIn")) {
                multiFormApp.setHomeIn(((Element) doc.getChildNodes().item(0)).getAttribute("homeIn"));
            }
            if (((Element) doc.getChildNodes().item(0)).hasAttribute("homeMenuPos")) {
                multiFormApp.setHomeMenuPos(Integer.parseInt(((Element) doc.getChildNodes().item(0)).getAttribute("homeMenuPos")));
            }

            NodeList singleFormNodeList = doc.getChildNodes().item(0).getChildNodes();

            for (int i = 0; i < singleFormNodeList.getLength(); i++) {

                Node singleFormNode = singleFormNodeList.item(i);
                if (singleFormNode.getNodeType() == Node.ELEMENT_NODE
                        && singleFormNode.getNodeName().trim().equalsIgnoreCase("DataCollection")) {

                    String singleFormName = ((Element) singleFormNode).getAttribute("name");

                    innerFormsDesignMap.put(singleFormName, nodeToString(singleFormNode));


                } else if (singleFormNode.getNodeType() == Node.ELEMENT_NODE
                        && singleFormNode.getNodeName().trim().equalsIgnoreCase("NavigationMenu")) {
                    innerFormsDesignMap.put("Menu", nodeToString(singleFormNode));
                    multiFormApp.setNavMenu(navigationMenu(singleFormNode, false));

                } else if (singleFormNode.getNodeType() == Node.ELEMENT_NODE
                        && singleFormNode.getNodeName().trim().equalsIgnoreCase("WebLink")) {

                    String singleFormName = ((Element) singleFormNode).getAttribute("name");

                    innerFormsDesignMap.put(singleFormName, nodeToString(singleFormNode));
                } else if (singleFormNode.getNodeType() == Node.ELEMENT_NODE
                        && singleFormNode.getNodeName().trim().equalsIgnoreCase("CustomToolBar")) {
                    innerFormsDesignMap.put("ToolBar", nodeToString(singleFormNode));
                    multiFormApp.setCustomToolBar(customToolBar(singleFormNode));

                } else if (singleFormNode.getNodeType() == Node.ELEMENT_NODE
                        && singleFormNode.getNodeName().trim().equalsIgnoreCase("BottomNavigation")) {
                    innerFormsDesignMap.put(AppConstants.BOTTOM_NAVIGATION, nodeToString(singleFormNode));
                    multiFormApp.setBottomNavigation(navigationMenu(singleFormNode, true));

                }
            }
            multiFormApp.setInnerFormsDesignMap(innerFormsDesignMap);


        } catch (ParserConfigurationException | IOException | SAXException e) {
            e.printStackTrace();
        }

        return multiFormApp;
    }

    private NavMenu navigationMenu(Node node, boolean isBottomNav) {
        NavMenu navMenu = new NavMenu();
        Element navElement = (Element) node;
        if (!isBottomNav) {
            navMenu.setDisplayTypeInMobile(navElement.getAttribute("displayTypeInMobile"));
            navMenu.setDisplayTypeInWeb(navElement.getAttribute("displayTypeInWeb"));
            navMenu.setNavIcon(navElement.getAttribute("icon"));
        } else {
            navMenu.setEnableCustomBackground(Boolean.parseBoolean(navElement.getAttribute("customBackGroundColor")));
            navMenu.setBgColor(navElement.getAttribute("backGroundColor"));
        }

        NodeList menuNodesList = node.getChildNodes().item(2).getChildNodes();

        List<NavMenuItem> menuItemList = new ArrayList<>();
        if (isBottomNav) {

            NavMenuItem menu = new NavMenuItem();
            menu.setBottomNavigationItem(true);
            menu.setContainsSubMenu(false);
            menu.setDisplayName("Dummy");
            menu.setTagName("Dummy");

            menuItemList.add(menu);

        }

        for (int i = 0; i < menuNodesList.getLength(); i++) {

            Node menuNode = menuNodesList.item(i);
            NavMenuItem menu = new NavMenuItem();

            if (isBottomNav) {
                menu.setBottomNavigationItem(true);
                menu.setContainsSubMenu(false);
            }

            Element menuElement = (Element) menuNode;
            menu.setDisplayName(menuElement.getAttribute("displayName"));
            menu.setTagName(menuElement.getAttribute("controlName"));
            menu.setMenuIcon(menuElement.getAttribute("icon"));
            mDisplaySettingsMenu(menuNode, menu);


            if (menuElement.getElementsByTagName("SubMenuItems").getLength() > 0) {

                NodeList subMenuNodesList = menuElement.getElementsByTagName("SubMenuItems").item(0).getChildNodes();
                List<NavMenuItem> subMenuItemList = new ArrayList<>();
                for (int j = 0; j < subMenuNodesList.getLength(); j++) {
                    Node subMenuNode = subMenuNodesList.item(j);
                    NavMenuItem subMenu = new NavMenuItem();
                    Element subMenuElement = (Element) subMenuNode;
                    subMenu.setDisplayName(subMenuElement.getAttribute("displayName"));
                    subMenu.setTagName(subMenuElement.getAttribute("controlName"));
                    subMenu.setMenuIcon(subMenuElement.getAttribute("icon"));
                    mDisplaySettingsMenu(menuNode, menu);
                    if (subMenuElement.getElementsByTagName("Events").getLength() > 0) {
                        setEventsMenu(subMenu, subMenuNode);
                    }
                    subMenuItemList.add(subMenu);
                }

                if (subMenuItemList.size() > 0) {
                    menu.setSubMenuItems(subMenuItemList);
                }
            } else {
                if (menuElement.getElementsByTagName("Events").getLength() > 0) {
                    setEventsMenu(menu, menuNode);
                }
            }

            menuItemList.add(menu);
        }

        if (menuItemList.size() > 0) {
            navMenu.setMenuItemList(menuItemList);
        }

        return navMenu;
    }

    private CustomToolBar customToolBar(Node node) {

        CustomToolBar customToolBar = new CustomToolBar();
        Element navElement = (Element) node;
        customToolBar.setEnableIcon(Boolean.parseBoolean(navElement.getAttribute("icon")));
        customToolBar.setEnableTitle(Boolean.parseBoolean(navElement.getAttribute("title")));
        customToolBar.setEnableActionItems(Boolean.parseBoolean(navElement.getAttribute("actionItems")));
        customToolBar.setEnableCustomBackground(Boolean.parseBoolean(navElement.getAttribute("customBackGroundColor")));

        if (((Element) node).getElementsByTagName("DisplaySettings").getLength() != 0) {
            NodeList DisplaySettingsList = ((Element) node).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
            if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                    Node Opton = DisplaySettingsList.item(k);
                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                            customToolBar.setTitleTextSize(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                            customToolBar.setTitleTextStyle(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            customToolBar.setTitleColor(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("BackGroundColor")) {
                            customToolBar.setBgColor(Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconTint")) {
                            customToolBar.setIconTint(Opton.getTextContent().trim());
                        }
                    }
                }
            }
        }


        NodeList menuNodesList = node.getChildNodes().item(1).getChildNodes();

        List<NavMenuItem> menuItemList = new ArrayList<>();

        for (int i = 0; i < menuNodesList.getLength(); i++) {

            Node menuNode = menuNodesList.item(i);
            NavMenuItem menu = new NavMenuItem();
            menu.setContainsSubMenu(false);

            Element menuElement = (Element) menuNode;
            menu.setDisplayName(menuElement.getAttribute("displayName"));
            menu.setTagName(menuElement.getAttribute("controlName"));
            menu.setMenuIcon(menuElement.getAttribute("icon"));
            menu.setToolBarItemDisplayType(menuElement.getAttribute("toolBarDisplayType"));
//            mDisplaySettingsMenu(menuNode, menu);

            if (menuElement.getElementsByTagName("Events").getLength() > 0) {
                setEventsMenu(menu, menuNode);
            }

            menuItemList.add(menu);
        }

        if (menuItemList.size() > 0) {
            customToolBar.setItems(menuItemList);
        }

        return customToolBar;

    }

    public void mDisplaySettingsMenu(Node ControlNode, NavMenuItem menu) {
        if (((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0) != null) {
            NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("DisplaySettings").item(0).getChildNodes();
            if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                    Node Opton = DisplaySettingsList.item(k);
                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton.getNodeName().trim().equalsIgnoreCase("FontSize")) {
                            menu.setTextSize(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontStyle")) {
                            menu.setTextStyle(Opton.getTextContent().trim());
//                                                        Log.d("XMLDisplaySettings", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                            menu.setTextHexColor(Opton.getTextContent().trim());
                            Log.d("XMLDisplaySettings_M", Opton.getTextContent().trim());
                        }
                    }
                }
            }
        }
    }

    private void setTableSettingsObject(DataCollectionObject AppObject, ControlObject controlObject, Node ControlNode, int flag, List<FilterSubFormColumns> filterSubFormColumnsList) {

        if (((Element) ControlNode).getAttribute("option").trim().equalsIgnoreCase("new")) {
            TableSettingSObject_Bean tableSettingSObject_Bean = new TableSettingSObject_Bean();

            if (flag == 0) {
                AppObject.setTableSettingsType(getTableSettingsType("new"));
                tableSettingSObject_Bean.setSubFormInMainForm(((Element) ControlNode).getAttribute("subFormInMainForm").trim());
            } else {

                controlObject.setTableSettingsType(getTableSettingsType("new"));
                tableSettingSObject_Bean.mainFormInSubForm.put(controlObject.getControlName(), ((Element) ControlNode).getAttribute("mainFormInSubForm").trim());

                /*FilterSubFormColumns filterSubFormColumns = new FilterSubFormColumns();
                filterSubFormColumns.setSubFormName(controlObject.getControlName());
                filterSubFormColumns.setMainFormColumnName(((Element) ControlNode).getAttribute("mainFormInSubForm").trim());
                filterSubFormColumns.setSubFormColumnName(((Element) ControlNode).getAttribute("mainFormInSubForm").trim());
                filterSubFormColumnsList.add(filterSubFormColumns);*/
            }

            if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {


                Element TableColumnsElement = (Element) ControlNode;

                for (int k = 0; k < TableColumnsElement.getChildNodes().getLength(); k++) {

                    NodeList nNodeChildNodes = TableColumnsElement.getChildNodes();
                    List<String> TableColumnNames = new ArrayList<>();
                    for (int inNodeChildNodes = 0; inNodeChildNodes < nNodeChildNodes.getLength(); inNodeChildNodes++) {
                        Node nNodeTableColumn = nNodeChildNodes.item(inNodeChildNodes);
                        if (nNodeChildNodes.item(inNodeChildNodes).getNodeType() == Node.ELEMENT_NODE) {
                            Element settingFieldsElement = (Element) nNodeChildNodes.item(inNodeChildNodes);
                            if (settingFieldsElement.getNodeName().equals("TableColumns")) {
                                NodeList settingsChildList = nNodeTableColumn.getChildNodes();

                                for (int settingsFieldsCnt = 0; settingsFieldsCnt < settingsChildList.getLength(); settingsFieldsCnt++) {
                                    if (settingsChildList.item(settingsFieldsCnt).getNodeType() == Node.ELEMENT_NODE) {
                                        Element ColumnNameElement = (Element) settingsChildList.item(settingsFieldsCnt);

                                        if (ColumnNameElement.getNodeName().equals("ColumnName")) {
                                            String TableColumnName = getCharacterDataFromElement(ColumnNameElement);

                                            TableColumnNames.add(TableColumnName);
                                        }
                                    }
                                }
                                if (flag == 0) {
                                    AppObject.setList_Table_Columns(TableColumnNames);
                                } else {
                                    controlObject.setSubFormList_Table_Columns(TableColumnNames);
                                }
                            } else if (settingFieldsElement.getNodeName().equals("PrimaryKey")) {

                                String primaryKey = getCharacterDataFromElement(settingFieldsElement);
                                tableSettingSObject_Bean.setPrimaryKey(primaryKey);

                                if (settingFieldsElement.hasAttribute("Message")) {
                                    String Message = settingFieldsElement.getAttribute("Message");
                                    tableSettingSObject_Bean.setPrimaryKey_Message(Message);
                                }

                            } else if (settingFieldsElement.getNodeName().equals("ForeignKeys")) {
                                NodeList foreignKeysList = settingFieldsElement.getChildNodes();

                                List<ForeignKey_Bean> foreignKeys = new ArrayList<ForeignKey_Bean>();

                                for (int foreignKeysCnt = 0; foreignKeysCnt < foreignKeysList.getLength(); foreignKeysCnt++) {
                                    Element foreignKeyElement = (Element) foreignKeysList.item(foreignKeysCnt);

                                    ForeignKey_Bean foreignKeyBean = new ForeignKey_Bean();

                                    NodeList paramOneList = foreignKeyElement.getElementsByTagName("ControlName");
                                    Element paramOne = (Element) paramOneList.item(0);
                                    String controlName = getCharacterDataFromElement(paramOne);

                                    NodeList paramTwoList = foreignKeyElement.getElementsByTagName("FKTable");
                                    Element paramTwo = (Element) paramTwoList.item(0);
                                    String fkTable = getCharacterDataFromElement(paramTwo);

                                    NodeList paramThreeList = foreignKeyElement.getElementsByTagName("FKColumn");
                                    Element paramThree = (Element) paramThreeList.item(0);
                                    String fkColumn = getCharacterDataFromElement(paramThree);

                                    foreignKeyBean.setControl(controlName);
                                    foreignKeyBean.setTable(fkTable);
                                    foreignKeyBean.setColumn(fkColumn);

                                    foreignKeys.add(foreignKeyBean);


                                }


                                tableSettingSObject_Bean.setForeignKeys(foreignKeys);
                            } else if (settingFieldsElement.getNodeName().equals("CompositeKey")) {
                                NodeList compositeKeysList = settingFieldsElement.getChildNodes();

                                List<String> compositeKeys = new ArrayList<String>();

                                for (int compositeKeysCnt = 0; compositeKeysCnt < compositeKeysList.getLength(); compositeKeysCnt++) {
                                    Element controlNameElement = (Element) compositeKeysList.item(compositeKeysCnt);
                                    String controlName = getCharacterDataFromElement(controlNameElement);

                                    compositeKeys.add(controlName);
                                }

                                tableSettingSObject_Bean.setCompositeKeys(compositeKeys);

                            } else if (settingFieldsElement.getNodeName().equals("replaceOnSameRow")) {
                                String replaceOnSameRow = getCharacterDataFromElement(settingFieldsElement);
                                tableSettingSObject_Bean.setReplaceOnSameRow(Boolean.parseBoolean(replaceOnSameRow));
                            } else if (settingFieldsElement.getNodeName().equals("rejectWithMessage")) {
                                String rejectWithMessage = getCharacterDataFromElement(settingFieldsElement);
                                tableSettingSObject_Bean.setRejectWithMessage(Boolean.parseBoolean(rejectWithMessage));
                            } else if (settingFieldsElement.getNodeName().equals("errorMessage")) {
                                String errorMessage = getCharacterDataFromElement(settingFieldsElement);
                                tableSettingSObject_Bean.setErrorMessage(errorMessage);
                            }

                        }

                    }
                }
            }

            if (flag == 0) {
                AppObject.setTableSettingsObject(tableSettingSObject_Bean);
            } else {
                for (ForeignKey_Bean foreignKey_bean : tableSettingSObject_Bean.getForeignKeys()) {
                    FilterSubFormColumns filterSubFormColumns = new FilterSubFormColumns();
                    filterSubFormColumns.setSubFormName(controlObject.getControlName());
                    filterSubFormColumns.setMainFormColumnName(foreignKey_bean.getColumn());
                    filterSubFormColumns.setSubFormColumnName(foreignKey_bean.getControl());
                    filterSubFormColumnsList.add(filterSubFormColumns);
                }
                controlObject.setSubFormtableSettingsObject(tableSettingSObject_Bean);
            }
        } else if (((Element) ControlNode).getAttribute("option").trim().equalsIgnoreCase("existing")) {
            if (flag == 0) {
                AppObject.setTableSettingsType(getTableSettingsType("existing"));
            } else {
                controlObject.setTableSettingsType(getTableSettingsType("existing"));
            }


            if (ControlNode.getNodeType() == Node.ELEMENT_NODE) {


                Element TableColumnsElement = (Element) ControlNode;

                for (int k = 0; k < TableColumnsElement.getChildNodes().getLength(); k++) {

                    NodeList nNodeChildNodes = TableColumnsElement.getChildNodes();
                    for (int inNodeChildNodes = 0; inNodeChildNodes < nNodeChildNodes.getLength(); inNodeChildNodes++) {
                        Node nNodeTableColumn = nNodeChildNodes.item(inNodeChildNodes);
                        if (nNodeChildNodes.item(inNodeChildNodes).getNodeType() == Node.ELEMENT_NODE) {
                            Element settingFieldsElement = (Element) nNodeChildNodes.item(inNodeChildNodes);
                            if (settingFieldsElement.getNodeName().equals("TableColumns")) {
                                if (flag == 0) {
                                    AppObject.setExistingTableName(((Element) nNodeTableColumn).getAttribute("name").trim());
                                    AppObject.setMapExistingType(getMapExistingType(((Element) nNodeTableColumn).getAttribute("activity").trim()));
                                } else {
                                    controlObject.setExistingTableName(((Element) nNodeTableColumn).getAttribute("name").trim());
                                    controlObject.setMapExistingType(getMapExistingType(((Element) nNodeTableColumn).getAttribute("activity").trim()));
                                }
                                if (((Element) nNodeTableColumn).getAttribute("activity").trim().equalsIgnoreCase("insert")) {
                                    NodeList insertNodeList = nNodeTableColumn.getChildNodes();
                                    List<QueryFilterField_Bean> queryFilterField_beans = new ArrayList<>();
                                    for (int linsertNode = 0; linsertNode < insertNodeList.getLength(); linsertNode++) {
                                        QueryFilterField_Bean queryFilterField_bean = new QueryFilterField_Bean();
                                        Element inputParamsElement = (Element) insertNodeList.item(linsertNode);
                                        if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                            String enable = inputParamsElement.getAttribute("enable");
                                            queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                            String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                            queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                            NodeList inputParametersList = inputParamsElement.getChildNodes();

                                            Element inputParamElement1 = (Element) inputParametersList.item(0);
                                            String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                            queryFilterField_bean.setField_Name(paramOneValue);

                                            Element inputParamElement2 = (Element) inputParametersList.item(1);
                                            String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                            queryFilterField_bean.setField_Global_Value(paramTwoValue);

                                            Element inputParamElement3 = (Element) inputParametersList.item(2);
                                            String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                            queryFilterField_bean.setField_Global_Type(paramThreeValue);
                                            if (queryFilterField_bean.getField_Global_Value() != null && !queryFilterField_bean.getField_Global_Value().isEmpty()) {
                                                queryFilterField_beans.add(queryFilterField_bean);
                                            }

//
                                        }
                                    }
                                    if (flag == 0) {
                                        AppObject.setMainTableInsertFields(queryFilterField_beans);
                                    } else {
                                        controlObject.setSubFormInsertFields(queryFilterField_beans);
                                    }
                                } else if (((Element) nNodeTableColumn).getAttribute("activity").trim().equalsIgnoreCase("update")) {

                                    NodeList updateNodeList = nNodeTableColumn.getChildNodes();
                                    List<QueryFilterField_Bean> queryFilterField_beansSetColumns = new ArrayList<>();
                                    List<QueryFilterField_Bean> queryFilterField_beansFilters = new ArrayList<>();
                                    for (int lupdateNode = 0; lupdateNode < updateNodeList.getLength(); lupdateNode++) {
                                        QueryFilterField_Bean queryFilterField_bean = new QueryFilterField_Bean();
                                        Element inputParamsElement = (Element) updateNodeList.item(lupdateNode);
                                        if (inputParamsElement.getAttribute("operationType").equalsIgnoreCase("setColumns")) {
                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                                queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement1 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement2 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                                queryFilterField_bean.setField_Global_Value(paramTwoValue);

                                                queryFilterField_beansSetColumns.add(queryFilterField_bean);
                                            }
                                        } else {
                                            String enable = inputParamsElement.getAttribute("enable");
                                            queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                            String operator = inputParamsElement.getAttribute("operator");
                                            queryFilterField_bean.setField_and_or(operator);

                                            NodeList inputParametersList = inputParamsElement.getChildNodes();

                                            Element inputParamElement0 = (Element) inputParametersList.item(0);
                                            String paramOneValue = getCharacterDataFromElement(inputParamElement0);
                                            queryFilterField_bean.setField_Name(paramOneValue);

                                            Element inputParamElement1 = (Element) inputParametersList.item(1);
                                            String paramTwoValue = getCharacterDataFromElement(inputParamElement1);
                                            queryFilterField_bean.setField_Operator(paramTwoValue);

                                            //check bhavani
                                          /*  Element inputParamElement3 = (Element) inputParametersList.item(2);
                                            String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                            if (paramThreeValue.toLowerCase().contains("(im:")) {
                                                queryFilterField_bean.setField_ValueType("Others");
                                                queryFilterField_bean.setField_Global_Value(paramThreeValue);
                                            } else {
                                                queryFilterField_bean.setField_ValueType("GPS");
                                                String value[] = paramThreeValue.split("@");
                                                queryFilterField_bean.setDistanceAround(value[0]);
                                                queryFilterField_bean.setNearBy(value[1]);
                                            }*/
                                            if (enable.equalsIgnoreCase("true")) {
                                                Element inputParamElement2 = (Element) inputParametersList.item(2);
                                                String name = inputParamElement2.getAttribute("name");

                                                if (name.equalsIgnoreCase("expression")) {
                                                    String paramThreeValue = getCharacterDataFromElement(inputParamElement2);
                                                    queryFilterField_bean.setField_ValueType("Others");
                                                    queryFilterField_bean.setField_Global_Value(paramThreeValue);
                                                } else if (name.equalsIgnoreCase("gis")) {

                                                    queryFilterField_bean.setField_ValueType("GPS");
                                                    Element inputParamElement3 = (Element) inputParametersList.item(3);
                                                    String paramDistanceAroundValue = getCharacterDataFromElement(inputParamElement3);
                                                    queryFilterField_bean.setDistanceAround(paramDistanceAroundValue);
                                                    Element inputParamElement4 = (Element) inputParametersList.item(4);
                                                    String paramNearByValue = getCharacterDataFromElement(inputParamElement4);
                                                    queryFilterField_bean.setNearBy(paramNearByValue);
                                                }
                                            }

                                            queryFilterField_beansFilters.add(queryFilterField_bean);
                                        }
                                    }
                                    if (flag == 0) {
                                        AppObject.setMainTableUpdateFields(queryFilterField_beansSetColumns);
                                        AppObject.setMainTableWhereConditionFields(queryFilterField_beansFilters);
                                    } else {
                                        controlObject.setSubFormUpdateFields(queryFilterField_beansSetColumns);
                                        controlObject.setSubFormWhereConditionFields(queryFilterField_beansFilters);
                                    }
                                } else {
//updateOrInsert

                                    NodeList updateNodeList = nNodeTableColumn.getChildNodes();
                                    List<QueryFilterField_Bean> queryFilterField_beansSetColumns = new ArrayList<>();
                                    List<QueryFilterField_Bean> queryFilterField_beansFilters = new ArrayList<>();
                                    List<QueryFilterField_Bean> queryFilterField_beansInsert = new ArrayList<>();
                                    for (int lupdateNode = 0; lupdateNode < updateNodeList.getLength(); lupdateNode++) {
                                        QueryFilterField_Bean queryFilterField_bean = new QueryFilterField_Bean();
                                        Element inputParamsElement = (Element) updateNodeList.item(lupdateNode);
                                        if (inputParamsElement.getAttribute("operationType").equalsIgnoreCase("setColumns")) {
                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                                queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement1 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement2 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                                queryFilterField_bean.setField_Global_Value(paramTwoValue);


                                                queryFilterField_beansSetColumns.add(queryFilterField_bean);
                                            }
                                        } else if (inputParamsElement.getAttribute("operationType").equalsIgnoreCase("filters")) {
                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String operator = inputParamsElement.getAttribute("operator");
                                                queryFilterField_bean.setField_and_or(operator);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement0 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement0);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement1 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Operator(paramTwoValue);

                                            /*Element inputParamElement3 = (Element) inputParametersList.item(2);
                                            String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                            queryFilterField_bean.setField_Global_Value(paramThreeValue);*/
                                                if (enable.equalsIgnoreCase("true")) {
                                                    Element inputParamElement2 = (Element) inputParametersList.item(2);
                                                    String name = inputParamElement2.getAttribute("name");

                                                    if (name.equalsIgnoreCase("expression")) {
                                                        String paramThreeValue = getCharacterDataFromElement(inputParamElement2);
                                                        queryFilterField_bean.setField_ValueType("Others");
                                                        queryFilterField_bean.setField_Global_Value(paramThreeValue);
                                                    } else if (name.equalsIgnoreCase("gis")) {
                                                        queryFilterField_bean.setField_ValueType("GPS");
                                                        Element inputParamElement3 = (Element) inputParametersList.item(3);
                                                        String paramDistanceAroundValue = getCharacterDataFromElement(inputParamElement3);
                                                        queryFilterField_bean.setDistanceAround(paramDistanceAroundValue);
                                                        Element inputParamElement4 = (Element) inputParametersList.item(4);
                                                        String paramNearByValue = getCharacterDataFromElement(inputParamElement4);
                                                        queryFilterField_bean.setNearBy(paramNearByValue);
                                                    }
                                                }


                                                queryFilterField_beansFilters.add(queryFilterField_bean);
                                            }
                                        } else {

                                            if (inputParamsElement.getNodeName().equalsIgnoreCase("Params")) {
                                                String enable = inputParamsElement.getAttribute("enable");
                                                queryFilterField_bean.setField_IsDeleted(!Boolean.parseBoolean(enable));

                                                String nullAllowed = inputParamsElement.getAttribute("nullAllowed");
                                                queryFilterField_bean.setIsNullAllowed(nullAllowed);

                                                NodeList inputParametersList = inputParamsElement.getChildNodes();

                                                Element inputParamElement1 = (Element) inputParametersList.item(0);
                                                String paramOneValue = getCharacterDataFromElement(inputParamElement1);
                                                queryFilterField_bean.setField_Name(paramOneValue);

                                                Element inputParamElement2 = (Element) inputParametersList.item(1);
                                                String paramTwoValue = getCharacterDataFromElement(inputParamElement2);
                                                queryFilterField_bean.setField_Global_Value(paramTwoValue);

                                                Element inputParamElement3 = (Element) inputParametersList.item(2);
                                                String paramThreeValue = getCharacterDataFromElement(inputParamElement3);
                                                queryFilterField_bean.setField_Global_Type(paramThreeValue);

                                                queryFilterField_beansInsert.add(queryFilterField_bean);
//
                                            }


                                        }
                                    }
                                    if (flag == 0) {
                                        AppObject.setMainTableUpdateFields(queryFilterField_beansSetColumns);
                                        AppObject.setMainTableWhereConditionFields(queryFilterField_beansFilters);
                                        AppObject.setMainTableInsertFields(queryFilterField_beansInsert);
                                    } else {
                                        controlObject.setSubFormUpdateFields(queryFilterField_beansSetColumns);
                                        controlObject.setSubFormWhereConditionFields(queryFilterField_beansFilters);
                                        controlObject.setSubFormInsertFields(queryFilterField_beansInsert);
                                    }


                                }
                            }
                        }
                    }
                }
            }


        } else if (((Element) ControlNode).getAttribute("option").trim().equalsIgnoreCase("none")) {
            if (flag == 0) {
                AppObject.setTableSettingsType(getTableSettingsType("none"));
            } else {
                controlObject.setTableSettingsType(getTableSettingsType("none"));
            }
        }
    }

    public void setRequiredUI(Node ControlNode, ControlObject controlObject) {
        if (((Element) ControlNode).getElementsByTagName("RequiredUI").getLength() != 0) {
            NodeList DisplaySettingsList = ((Element) ControlNode).getElementsByTagName("RequiredUI").item(0).getChildNodes();
            if (DisplaySettingsList != null && DisplaySettingsList.getLength() > 0) {
                for (int k = 0; k < DisplaySettingsList.getLength(); k++) {
                    Node Opton = DisplaySettingsList.item(k);
                    if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                        if (Opton.getNodeName().trim().equalsIgnoreCase("DisplayNameAlignment")) {
                            controlObject.setDisplayNameAlignment(Opton.getTextContent().trim());
                            Log.d("UIDisplayNameAlignment", Opton.getTextContent().trim());
                        } else if (Opton.getNodeName().trim().equalsIgnoreCase("textAlignment")) {
                            controlObject.setTextAlignment(Opton.getTextContent().trim());
                        }  /*else if (Opton.getNodeName().trim().equalsIgnoreCase("BackGroundType")) {
                        controlObject.setBackgroundType(Opton.getTextContent().trim());
                        Log.d("UIBackGroundType", Opton.getTextContent().trim());
                    } else if (Opton.getNodeName().trim().equalsIgnoreCase("IconAlignment")) {
                        controlObject.setIconAlignment(Opton.getTextContent().trim());
                        Log.d("UIIconAlignment", Opton.getTextContent().trim());
                    }*/
                    }
                }
            }
        }


    }

    public void layoutBackgroundColor(Node ControlNode, ControlObject controlObject) {
        if (((Element) ControlNode).getElementsByTagName("SubFormBackgroundColor").getLength() != 0) {
            NodeList subFormOptionsList = ((Element) ControlNode).getElementsByTagName("SubFormBackgroundColor").item(0).getChildNodes();
            for (int k = 0; k < subFormOptionsList.getLength(); k++) {
                Node Opton = subFormOptionsList.item(k);
                if (Opton.getNodeType() == Node.ELEMENT_NODE) {
                    if (Opton.getNodeName().trim().equalsIgnoreCase("FontColor")) {
                        controlObject.setTextHexColor(Opton.getTextContent().trim());
                        Log.d("SubFormBackgroundColor", Opton.getTextContent().trim());
                    }
                }
            }
        }
    }

    public static void addNavigationOptions(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean){
        if (actionGroupElement.getElementsByTagName("CloseParent").getLength() != 0) {
            Element closeParent = (Element) actionGroupElement.getElementsByTagName("CloseParent").item(0);
            actionWithoutConditionBean.setCloseParentEnabled(!closeParent.getTextContent().contentEquals("false"));
        }
        if (actionGroupElement.getElementsByTagName("CloseAll").getLength() != 0) {
            Element closeAll = (Element) actionGroupElement.getElementsByTagName("CloseAll").item(0);
            actionWithoutConditionBean.setCloseAllFormsEnabled(Boolean.parseBoolean(closeAll.getTextContent()));
        }
    }

    private static void setDMLInParams(ActionWithoutCondition_Bean actionWithoutConditionBean, Element fieldsElement){

        String type = fieldsElement.getAttribute("type");
        actionWithoutConditionBean.setDML_Input_Type(type);
        boolean isAdvanced = Boolean.parseBoolean(fieldsElement.getAttribute("isAdvanced"));

        if (type.equalsIgnoreCase("Multiple")) {

            actionWithoutConditionBean.setDML_DataSource_ExpressionExists(isAdvanced);
            if (isAdvanced) {
                actionWithoutConditionBean.setDML_DataSource_ExpressionValue(fieldsElement.getAttribute("Datasource"));
            } else {
                actionWithoutConditionBean.setDML_DataSource_Value(fieldsElement.getAttribute("Datasource"));
            }
        }

        NodeList inputParametersList = fieldsElement.getChildNodes();

        List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

        for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
            Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);


            NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
            Element paramOne = (Element) paramOneList.item(0);

            String paramOneValue = getCharacterDataFromElement(paramOne);
            API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
            apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
            apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
            apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));

            NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
            Element paramTwo = (Element) paramTwoList.item(1);

            String nameAtt = paramTwo.getAttribute("name");

            if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                apiInputParamBean.setEnable(true);
                apiInputParamBean.setInParam_MappedControl_Type("Static");
                apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
            } else if (nameAtt.equalsIgnoreCase("expression")) {
                apiInputParamBean.setEnable(true);
                apiInputParamBean.setInParam_ExpressionExists(true);
                apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
            } else if (!nameAtt.equalsIgnoreCase("") &&
                    !nameAtt.equalsIgnoreCase("none")) {
                apiInputParamBean.setEnable(true);
                apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
            } else {
//                        apiInputParamBean.setEnable(false);
                apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
            }

            API_InParamsList.add(apiInputParamBean);
        }
        actionWithoutConditionBean.setList_Form_InParams(API_InParamsList);

    }

    private static void setGroupDMLInParams(ActionWithoutCondition_Bean actionWithoutConditionBean, Element fieldsElement){

        NodeList inputParametersList = fieldsElement.getChildNodes();

        List<API_InputParam_Bean> API_InParamsList = new ArrayList<API_InputParam_Bean>();

        for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
            Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);

            String type = inputParamElement.getAttribute("type");
            boolean isAdvanced = Boolean.parseBoolean(inputParamElement.getAttribute("isAdvanced"));
            String StatementName = inputParamElement.getAttribute("StatementName");


            NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
            Element paramOne = (Element) paramOneList.item(0);

            String paramOneValue = getCharacterDataFromElement(paramOne);
            API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
            apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
            apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
            apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));


            apiInputParamBean.setInParam_GroupDML_Input_Type(type);
            apiInputParamBean.setInParam_GroupDML_StatementName(StatementName);
            if (type.equalsIgnoreCase("Multiple")) {

                apiInputParamBean.setInParam_GroupDML_DataSource_ExpressionExists(isAdvanced);
                if (isAdvanced) {
                    apiInputParamBean.setInParam_GroupDML_DataSource_ExpressionValue(inputParamElement.getAttribute("Datasource"));
                } else {
                    apiInputParamBean.setInParam_GroupDML_DataSource_Value(inputParamElement.getAttribute("Datasource"));
                }
            }


            NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
            Element paramTwo = (Element) paramTwoList.item(1);

            String nameAtt = paramTwo.getAttribute("name");

            if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                apiInputParamBean.setEnable(true);
                apiInputParamBean.setInParam_MappedControl_Type("Static");
                apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
            } else if (nameAtt.equalsIgnoreCase("expression")) {
                apiInputParamBean.setEnable(true);
                apiInputParamBean.setInParam_ExpressionExists(true);
                apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
            } else if (!nameAtt.equalsIgnoreCase("") &&
                    !nameAtt.equalsIgnoreCase("none")) {
                apiInputParamBean.setEnable(true);
                apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
            } else {
//                        apiInputParamBean.setEnable(false);
                apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
            }

            API_InParamsList.add(apiInputParamBean);
        }
        actionWithoutConditionBean.setList_Form_InParams(API_InParamsList);
    }

    private static void setInParams(ActionWithoutCondition_Bean actionWithoutConditionBean, Element fieldsElement){

        NodeList inputParametersList = fieldsElement.getChildNodes();

        List<API_InputParam_Bean> Form_InParamsList = new ArrayList<>();

        for (int inputParamCnt = 0; inputParamCnt < inputParametersList.getLength(); inputParamCnt++) {
            Element inputParamElement = (Element) inputParametersList.item(inputParamCnt);


            NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
            Element paramOne = (Element) paramOneList.item(0);

            String paramOneValue = getCharacterDataFromElement(paramOne);
            API_InputParam_Bean apiInputParamBean = new API_InputParam_Bean(paramOneValue, "", "");
            apiInputParamBean.setInParam_Static(paramOne.getAttribute("static"));
            apiInputParamBean.setInParam_Optional(paramOne.getAttribute("optional"));
            apiInputParamBean.setInParam_InputMode(paramOne.getAttribute("inputMode"));
            apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
            //apiInputParamBean.setEnable(true);

            if (apiInputParamBean.isEnable()) {
                NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                Element paramTwo = (Element) paramTwoList.item(1);

                String nameAtt = paramTwo.getAttribute("name");

                if (paramOne.getAttribute("static").equalsIgnoreCase("Yes")) {
                    apiInputParamBean.setEnable(true);
                    apiInputParamBean.setInParam_MappedControl_Type("Static");
                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                } else if (nameAtt.equalsIgnoreCase("expression")) {
                    apiInputParamBean.setEnable(true);
                    apiInputParamBean.setInParam_ExpressionExists(true);
                    apiInputParamBean.setInParam_ExpressionValue(getCharacterDataFromElement(paramTwo));
                } else if (!nameAtt.equalsIgnoreCase("") &&
                        !nameAtt.equalsIgnoreCase("none")) {
                    apiInputParamBean.setEnable(true);
                    apiInputParamBean.setInParam_MappedControl_Type(nameAtt);
                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                } else {
//                            apiInputParamBean.setEnable(false);
                    apiInputParamBean.setInParam_Mapped_ID(getCharacterDataFromElement(paramTwo));
                    apiInputParamBean.setEnable(Boolean.parseBoolean(paramOne.getAttribute("enable")));
                }

                NodeList paramThreeList = inputParamElement.getElementsByTagName("Param");
                Element paramThree = (Element) paramThreeList.item(2);
                apiInputParamBean.setInParam_Operator(getCharacterDataFromElement(paramThree));


                NodeList paramfourList = inputParamElement.getElementsByTagName("Param");
                Element paramFour = (Element) paramfourList.item(3);
                apiInputParamBean.setInParam_and_or(getCharacterDataFromElement(paramFour));

                NodeList paramFiveList = inputParamElement.getElementsByTagName("Param");
                Element paramFive = (Element) paramFiveList.item(4);
                apiInputParamBean.setInParam_near_by_distance(getCharacterDataFromElement(paramFive));

                NodeList paramSixList = inputParamElement.getElementsByTagName("Param");
                Element paramSix = (Element) paramSixList.item(5);
                apiInputParamBean.setInParam_near_by_records(getCharacterDataFromElement(paramSix));


            }

            Form_InParamsList.add(apiInputParamBean);
        }
        actionWithoutConditionBean.setList_Form_InParams(Form_InParamsList);


    }
    private static void setOutParams(ActionWithoutCondition_Bean actionWithoutConditionBean, Element fieldsElement){
        //if (fieldsElement.getNodeName().equalsIgnoreCase("OutputParameters")) {

        NodeList outParametersList = fieldsElement.getChildNodes();

        String type = fieldsElement.getAttribute("type");
        String display = "";
        actionWithoutConditionBean.setResult_NoOfRecords(type);

        if (!type.equalsIgnoreCase("Single")) {
            display = fieldsElement.getAttribute("display");
            actionWithoutConditionBean.setResult_DisplayType(display);


            if (display.equals(AppConstants.DISPLAY_TYPE_SUBFORM) ||
                    display.equals(AppConstants.DISPLAY_TYPE_GRIDFORM) ||
                    display.equals(AppConstants.DISPLAY_TYPE_DATAVIEWER) ||
                    display.equals(AppConstants.DISPLAY_TYPE_MAPVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_CALENDARVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_LISTVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_IMAGEVIEW) ||
                    display.equals(AppConstants.DISPLAY_TYPE_CHART) ||
                    display.equals(AppConstants.DISPLAY_TYPE_DATA_TABLE)||
                    display.equals(AppConstants.DISPLAY_TYPE_SECTION)) {
                String MultiControlName = fieldsElement.getAttribute("MultiControlName");
                actionWithoutConditionBean.setSelectedSubForm(MultiControlName);
            }
            actionWithoutConditionBean.setMulti_DataType(fieldsElement.getAttribute("activity"));
        }

        List<API_OutputParam_Bean> FormOutputParam_BeanList = new ArrayList<API_OutputParam_Bean>();

        if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATAVIEWER)) {
            outParametersList = fieldsElement.getChildNodes().item(0).getChildNodes();
            for (int i = 0; i < outParametersList.getLength(); i++) {
                Element OutputItems = (Element) outParametersList.item(i);
                if (OutputItems.getNodeName().equalsIgnoreCase("ProfileImage")) {
                    String ProfileImage = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setProfileImage_Mapped_item(ProfileImage);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Image")) {
                    String Image = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setImage_Mapped_item(Image);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ImageAdvanceSettings")) {

                    Element ImageElement = (Element) outParametersList.item(i);

                    NodeList nl_ImageAvailable = ImageElement.getElementsByTagName("ImageAvailable");
                    Element ImageAvailable = (Element) nl_ImageAvailable.item(0);
                    String ImageAvailablestr = getCharacterDataFromElement(ImageAvailable);
                    actionWithoutConditionBean.setImageAdvanced_ImageorNot(ImageAvailablestr);

                    if (ImageAvailablestr.equalsIgnoreCase("Yes")) {
                        NodeList nl_ImageSource = ImageElement.getElementsByTagName("ImageSource");
                        Element ImageSource = (Element) nl_ImageSource.item(0);
                        String ImageSourcestr = getCharacterDataFromElement(ImageSource);
                        actionWithoutConditionBean.setImageAdvanced_ImageSource(ImageSourcestr);
                    }

                    NodeList nl_ConditionColumn = ImageElement.getElementsByTagName("ConditionColumn");
                    Element ConditionColumn = (Element) nl_ConditionColumn.item(0);
                    String ConditionColumnstr = getCharacterDataFromElement(ConditionColumn);
                    actionWithoutConditionBean.setImageAdvanced_ConditionColumn(ConditionColumnstr);

                    NodeList nl_Operator = ImageElement.getElementsByTagName("Operator");
                    Element Operator = (Element) nl_Operator.item(0);
                    String Operatorstr = getCharacterDataFromElement(Operator);
                    actionWithoutConditionBean.setImageAdvanced_Operator(Operatorstr);

                    NodeList nl_ImageAdvancedItems = ImageElement.getElementsByTagName("ImageAdvancedItems");
                    List<ImageAdvanced_Mapped_Item> ImageAdvanced_Mapped_Items = new ArrayList<>();
                    for (int j = 0; j < nl_ImageAdvancedItems.getLength(); j++) {
                        Element ImageAdvancedItem = (Element) nl_ImageAdvancedItems.item(j);


                        NodeList nl_advItems = ImageAdvancedItem.getChildNodes();
                        for (int k = 0; k < nl_advItems.getLength(); k++) {
                            NodeList nl_Items = nl_advItems.item(k).getChildNodes();
                            ImageAdvanced_Mapped_Item IA_Item = new ImageAdvanced_Mapped_Item();
                            for (int l = 0; l < nl_Items.getLength(); l++) {
                                Element Item = (Element) nl_Items.item(l);
                                if (Item.getNodeName().equalsIgnoreCase("Value1")) {
                                    String Value1 = getCharacterDataFromElement(Item);
                                    IA_Item.setImageAdvanced_Value(Value1);
                                } else if (Item.getNodeName().equalsIgnoreCase("Value2")) {
                                    String Value2 = getCharacterDataFromElement(Item);
                                    IA_Item.setImageAdvanced_Value2(Value2);
                                } else if (Item.getNodeName().equalsIgnoreCase("ImagePath")) {
                                    String ImagePath = getCharacterDataFromElement(Item);
                                    IA_Item.setImageAdvanced_ImagePath(ImagePath);
                                }
                            }
                            ImageAdvanced_Mapped_Items.add(IA_Item);
                        }

                    }
                    actionWithoutConditionBean.setList_ImageAdvanced_Items(ImageAdvanced_Mapped_Items);


                } else if (OutputItems.getNodeName().equalsIgnoreCase("Corner")) {
                    String Corner = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setCorner_Mapped_item(Corner);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Header")) {
                    String Header = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setHeader_Mapped_item(Header);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SubHeader")) {
                    String SubHeader = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSubHeader_Mapped_item(SubHeader);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("DateandTime")) {
                    String DateandTime = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDateandTime_Mapped_item(DateandTime);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Distance")) {
                    String Distance = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDistance(Distance);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("WorkingHours")) {
                    String WorkingHours = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setWorking_hours(WorkingHours);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemOne")) {
                    String ItemOne = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItem_one_count(ItemOne);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("ItemTwo")) {
                    String ItemTwo = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItem_two_count(ItemTwo);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("Rating")) {
                    String Rating = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setRating(Rating);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceIcon")) {
                    String SourceIcon = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSource_icon(SourceIcon);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceName")) {
                    String SourceName = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSource_name(SourceName);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("SourceTime")) {
                    String SourceTime = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setSource_time(SourceTime);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("NewsType")) {
                    String NewsType = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setNews_type(NewsType);
                }else if (OutputItems.getNodeName().equalsIgnoreCase("ItemName")) {
                    String ItemName = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItemName(ItemName);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("WatsAppNo")) {
                    String WatsAppNo = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setWatsAppNo(WatsAppNo);
                }   else if (OutputItems.getNodeName().equalsIgnoreCase("DailNo")) {
                    String DailNo = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDailNo(DailNo);
                }  else if (OutputItems.getNodeName().equalsIgnoreCase("DescriptionParams")) {
                    List<String> description_Mapped_item = new ArrayList<>();
                    NodeList DescriptionList = OutputItems.getChildNodes();
                    for (int ParamCnt = 0; ParamCnt < DescriptionList.getLength(); ParamCnt++) {
                        Element ParamElement = (Element) DescriptionList.item(ParamCnt);
                        if (ParamElement.getNodeName().equalsIgnoreCase("Param")) {
                            String value = getCharacterDataFromElement(ParamElement);
                            description_Mapped_item.add(value);
                        }
                    }
                    actionWithoutConditionBean.setDescription_Mapped_item(description_Mapped_item);
                } else if (OutputItems.getNodeName().equalsIgnoreCase("DV_Trans_Id")) {
                    String dv_Trans_Id = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setDv_trans_id(dv_Trans_Id);
                }else if (OutputItems.getNodeName().equalsIgnoreCase("ItemValue")) {
                    String itemValue = getCharacterDataFromElement(OutputItems);
                    actionWithoutConditionBean.setItemValue(itemValue);
                }
            }

        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_LISTVIEW)) {
//                    outParametersList=FieldsElement.getChildNodes().item(0).getChildNodes();
                  /*  for (int i = 0; i <outParametersList.getLength() ; i++) {


                    }*/
            for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramOneList.item(0);
                String FilterMappedControl = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                Element paramTwo = (Element) paramTwoList.item(1);
                String FilterItem = getCharacterDataFromElement(paramTwo);
                actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);

                NodeList paramthreeList = inputParamElement.getElementsByTagName("Param");
                Element paramThree = (Element) paramthreeList.item(2);
                String FilterItemID = getCharacterDataFromElement(paramThree);
                actionWithoutConditionBean.setResult_ListView_FilterItemID(FilterItemID);

            }
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_IMAGEVIEW)) {
            for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramOneList.item(0);
                String FilterMappedControl = getCharacterDataFromElement(paramOne);
                actionWithoutConditionBean.setResult_ListView_FilterMappedControl(FilterMappedControl);

                NodeList paramTwoList = inputParamElement.getElementsByTagName("Param");
                Element paramTwo = (Element) paramTwoList.item(1);
                String FilterItem = getCharacterDataFromElement(paramTwo);
                actionWithoutConditionBean.setResult_ListView_FilterItem(FilterItem);


            }
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_CHART)) {
            outParametersList = fieldsElement.getChildNodes().item(0).getChildNodes();
            setChartOutParams(outParametersList, actionWithoutConditionBean);
        } else if (display.equalsIgnoreCase(AppConstants.DISPLAY_TYPE_DATA_TABLE)) {
            actionWithoutConditionBean.setDataTableRowHeight(fieldsElement.getAttribute("DataTableRowHeight"));
            actionWithoutConditionBean.setDataTableRowHeightWrapContent(Boolean.parseBoolean(fieldsElement.getAttribute("DataTableRowHeightWrapContent")));
            actionWithoutConditionBean.setDataTableFixedWidthEnabled(Boolean.parseBoolean(fieldsElement.getAttribute("DataTableFixedWidthEnabled")));
            setDataTableColumns(outParametersList, actionWithoutConditionBean);
        } else {
            for (int inputParamCnt = 0; inputParamCnt < outParametersList.getLength(); inputParamCnt++) {
                Element inputParamElement = (Element) outParametersList.item(inputParamCnt);

                String defaultVal = inputParamElement.getAttribute("default");
                String enable = inputParamElement.getAttribute("enable");
                String settings = inputParamElement.getAttribute("settings");

                API_OutputParam_Bean FormOutputParam_Bean = new API_OutputParam_Bean("", "", false);

                NodeList paramOneList = inputParamElement.getElementsByTagName("Param");
                Element paramOne = (Element) paramOneList.item(0);

                String paramOneValue = getCharacterDataFromElement(paramOne);

                FormOutputParam_Bean.setOutParam_Delete(!Boolean.valueOf(enable));
                FormOutputParam_Bean.setOutParam_Name(paramOneValue);

                if (enable.trim().equalsIgnoreCase("true")) {

                    NodeList param3List = inputParamElement.getElementsByTagName("Param");

                    for (int x = 0; x < param3List.getLength(); x++) {
                        Element param3ele = (Element) param3List.item(x);

                        String TypeofParam = param3ele.getAttribute("type");
                        if (TypeofParam.equalsIgnoreCase("DefultMarker")) {
                            String param3Value = getCharacterDataFromElement(param3ele);
                            FormOutputParam_Bean.setOutParam_Marker_defultImage(param3Value);
                        }

                        if (TypeofParam.equalsIgnoreCase("RenderingType")) {
                            String paramrederingTypeValue = getCharacterDataFromElement(param3ele);
                            FormOutputParam_Bean.setOutParam_Marker_RenderingType(paramrederingTypeValue);
                        }

                        if (TypeofParam.equalsIgnoreCase("PopupData")) {
                            List<String> paramrederingpopupdata = getListDataFromElement(param3ele);
                            FormOutputParam_Bean.setOutParam_Marker_popupData(paramrederingpopupdata);
                        }

                        if (TypeofParam.equalsIgnoreCase("PopupImage")) {
                            List<String> paramrederingpopupImages = getListDataFromElement(param3ele);
                            FormOutputParam_Bean.setOutParam_Marker_popupImages(paramrederingpopupImages);
                        }

                        if (param3ele.hasAttribute("expressionExists")) {

                            String expressionExists = param3ele.getAttribute("expressionExists");
                            String paramTwoValue = getCharacterDataFromElement(param3ele);
                            if (expressionExists.trim().equalsIgnoreCase("false")) {
                                FormOutputParam_Bean.setOutParam_Mapped_ID(paramTwoValue);
                            } else {
                                FormOutputParam_Bean.setOutParam_Mapped_Expression(paramTwoValue);
                            }
                        }
                    }


                    if (settings.trim().equalsIgnoreCase("true")) {
                        NodeList ControlSettingsList = inputParamElement.getElementsByTagName("ControlSettings");
                        Element ControlSettings = (Element) ControlSettingsList.item(0);

                        String settings_type = ControlSettings.getAttribute("type");
                        if (settings_type.equalsIgnoreCase("language")) {
                            List<LanguageMapping> list_OutParam_Languages = getlanguageSettings(ControlSettings);
                            FormOutputParam_Bean.setList_OutParam_Languages(list_OutParam_Languages);

                        } else if (settings_type.equalsIgnoreCase("Image")) {

                            getandSetImageSettings(ControlSettings, FormOutputParam_Bean);

                        } else if (settings_type.equalsIgnoreCase("Marker")) {
                            getandSetMarkerSettings(ControlSettings, FormOutputParam_Bean);
                        }
                    }
                }
                FormOutputParam_BeanList.add(FormOutputParam_Bean);

            }

            actionWithoutConditionBean.setList_Form_OutParams(FormOutputParam_BeanList);
        }
        //}
    }

    public static void setAddRow(String subformName,String controlType,List<ActionWithoutCondition_Bean> actionWithOutConditionList) {
        ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();
        actionWithoutConditionBean.setResult_DisplayType(controlType);
        actionWithoutConditionBean.setPositionInEvent(0);
        actionWithoutConditionBean.setAddRowEvent_SubFormName(subformName);
        actionWithoutConditionBean.setActionName("Add Row");
        actionWithoutConditionBean.setActionType("Add Row");
        actionWithOutConditionList.add(actionWithoutConditionBean);
    }
    public static void setDeleteRow(String subformName,String controlType,List<ActionWithoutCondition_Bean> actionWithOutConditionList) {
        ActionWithoutCondition_Bean actionWithoutConditionBean = new ActionWithoutCondition_Bean();
        actionWithoutConditionBean.setResult_DisplayType(controlType);
        actionWithoutConditionBean.setPositionInEvent(actionWithOutConditionList.size());
        actionWithoutConditionBean.setDeleteRowEvent_SubFormName(subformName);
        actionWithoutConditionBean.setActionName("Delete Row");
        actionWithoutConditionBean.setActionType("Delete Row");
        actionWithOutConditionList.add(actionWithoutConditionBean);
    }

    public static void setRemoveRowAction(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        actionWithoutConditionBean.setActionType(AppConstants.Remove_Row);
        RemoveRowAction removeRowAction = new RemoveRowAction();
        NodeList childNodesList = actionGroupElement.getChildNodes();

        for (int i = 0; i < childNodesList.getLength(); i++) {
            Element element = (Element) childNodesList.item(i);
            if (element.getNodeName().equalsIgnoreCase("MulitiControlName")) {
                String value = getCharacterDataFromElement(element);

                removeRowAction.setMultiControlName(value);
            }
            if (element.getNodeName().equalsIgnoreCase("MulitiControlType")) {
                String value = getCharacterDataFromElement(element);

                removeRowAction.setMultiControlTYpe(value);
            }
            if (element.getNodeName().equalsIgnoreCase("SelectedSubControl")) {
                String value = getCharacterDataFromElement(element);
                removeRowAction.setSelectSubControl(value.contentEquals("Yes"));
            }
            if (element.getNodeName().equalsIgnoreCase("SelectedRowType")) {
                String value = getCharacterDataFromElement(element);

                removeRowAction.setSelectedRowType(value);
            }
            if (element.getNodeName().equalsIgnoreCase("RowPositionValue")) {
                String value = getCharacterDataFromElement(element);

                removeRowAction.setRowPositionValue(value);
            }
            if (element.getNodeName().equalsIgnoreCase("RowPositionExpression")) {
                String value = getCharacterDataFromElement(element);
                removeRowAction.setRowPositionExpression(Boolean.parseBoolean(value));
            }
            if (element.getNodeName().equalsIgnoreCase("RowRemoveOrHide")) {
                String value = getCharacterDataFromElement(element);
                removeRowAction.setRemoveOrHide(value);
            }
            if (element.getNodeName().equalsIgnoreCase("RemoveControls")) {
                NodeList removeControlNodes = actionGroupElement.getElementsByTagName("RemoveControl");
                List<RemoveControlItem> removeControlItems = new ArrayList<>();
                for (int j = 0; j < removeControlNodes.getLength(); j++) {

                    Element removeContorl = (Element) removeControlNodes.item(j);

                    RemoveControlItem removeControlItem = new RemoveControlItem();

                    NodeList removeContorlChildNodes = removeContorl.getChildNodes();

                    for (int k = 0; k < removeContorlChildNodes.getLength(); k++) {
                        Element removeElement = (Element) removeContorlChildNodes.item(k);
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlName")) {
                            String value = getCharacterDataFromElement(removeElement);

                            removeControlItem.setControlName(value);
                        }
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlType")) {
                            String value = getCharacterDataFromElement(removeElement);

                            removeControlItem.setControlType(value);
                        }
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlValue")) {
                            String value = getCharacterDataFromElement(removeElement);

                            removeControlItem.setControlValue(value);
                        }
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlExpression")) {
                            String value = getCharacterDataFromElement(removeElement);

                            removeControlItem.setControlExpression(Boolean.parseBoolean(value));
                        }
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlRowType")) {
                            String value = getCharacterDataFromElement(removeElement);

                            removeControlItem.setControlRowType(value);
                        }
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlRowValue")) {

                            if(removeControlItem.getControlRowType()!=null &&removeControlItem.getControlRowType().contentEquals("specificRows")) {
                                String value = getCharacterDataFromElement(removeElement);
                                removeControlItem.setControlRowValue(value);
                            }else{
                                removeControlItem.setControlRowValue("");
                            }
                        }
                        if (removeElement.getNodeName().equalsIgnoreCase("ControlRowExpression")) {
                            String value = getCharacterDataFromElement(removeElement);

                            removeControlItem.setControlRowExpression(Boolean.parseBoolean(value));
                        }
                    }

                    removeControlItems.add(removeControlItem);

                }
                removeRowAction.setRemoveControlItems(removeControlItems);
            }

        }

        actionWithoutConditionBean.setRemoveRowAction(removeRowAction);

    }

    private static void setPopUpManagementAction(Element actionGroupElement, ActionWithoutCondition_Bean actionWithoutConditionBean) {
        PopUpManagementAction puma = new PopUpManagementAction();
        actionWithoutConditionBean.setActionType("PopUpManagement");
        Element popUpManagementElement = (Element) actionGroupElement.getElementsByTagName("PopUpManagement").item(0);
        NodeList paramOneList = popUpManagementElement.getElementsByTagName("PopUpType");
        Element paramOne = (Element) paramOneList.item(0);
        String paramOneValue = getCharacterDataFromElement(paramOne);
        puma.setPopUpControlType(paramOneValue);
        NodeList paramTwoList = popUpManagementElement.getElementsByTagName("SelectedSection");
        Element paramTwo = (Element) paramTwoList.item(0);
        String paramTwoValue = getCharacterDataFromElement(paramTwo);
        puma.setSelectedSection(paramTwoValue);
        actionWithoutConditionBean.setPopUpManagementAction(puma);

    }


}
